_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|  74.0k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  2.05k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  6.97k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  6.97k|  return idx < lenminusstep;
   70|  6.97k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  4.91k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  4.91k|  return &buf[idx];
   75|  4.91k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  6.97k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  6.97k|  idx += STEP_SIZE;
   88|  6.97k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  2.05k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  2.05k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 2.05k]
  ------------------
   80|  2.05k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  2.05k|  std::memcpy(dst, buf + idx, len - idx);
   82|  2.05k|  return len - idx;
   83|  2.05k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  1.59k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  1.59k|    size_t pos = 0;
   12|  1.59k|    size_t count = 0;
   13|  5.75k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 4.16k, False: 1.59k]
  ------------------
   14|  4.16k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  4.16k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  4.16k|      count += count_ones(utf8_continuation_mask);
   17|  4.16k|    }
   18|  1.59k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  1.59k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  68.8k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  68.8k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  68.8k|      size_t pos = 0;
  131|  68.8k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|  68.8k|      size_t leading_byte = 0;
  139|  68.8k|      size_t margin = size;
  140|   153k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 85.1k, False: 68.8k]
  |  Branch (140:27): [True: 85.1k, False: 0]
  ------------------
  141|  85.1k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|  85.1k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  68.8k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  68.8k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 68.8k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  68.8k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 68.8k]
  ------------------
  195|  68.8k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 68.8k, False: 0]
  ------------------
  196|  68.8k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  68.8k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 4.30k, False: 64.5k]
  ------------------
  198|  64.5k|        utf32_output += howmany;
  199|  64.5k|      }
  200|  64.5k|      return utf32_output - start;
  201|  68.8k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  68.8k|    simdutf_really_inline bool errors() const {
  291|  68.8k|      return this->error.any_bits_set_anywhere();
  292|  68.8k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.59k|    char32_t* utf32_output) noexcept {
   13|  1.59k|  size_t pos = 0;
   14|  1.59k|  char32_t* start{utf32_output};
   15|  1.59k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  5.67k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 4.08k, False: 1.59k]
  ------------------
   17|  4.08k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  4.08k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 3.30k, False: 774]
  ------------------
   19|  3.30k|      in.store_ascii_as_utf32(utf32_output);
   20|  3.30k|      utf32_output += 64;
   21|  3.30k|      pos += 64;
   22|  3.30k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    774|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    774|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    774|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    774|    size_t max_starting_point = (pos + 64) - 12;
   28|  5.45k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 4.67k, False: 774]
  ------------------
   29|  4.67k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  4.67k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  4.67k|      pos += consumed;
   32|  4.67k|      utf8_end_of_code_point_mask >>= consumed;
   33|  4.67k|      }
   34|    774|    }
   35|  4.08k|  }
   36|  1.59k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.59k|  return utf32_output - start;
   38|  1.59k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  6.97k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  6.97k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  6.97k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 5.59k, False: 1.37k]
  |  |  ------------------
  ------------------
  154|  5.59k|        this->error |= this->prev_incomplete;
  155|  5.59k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.37k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.37k|            "We support either two or four chunks per 64-byte block.");
  159|  1.37k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.37k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.37k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.37k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.37k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.37k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.37k|      }
  172|  6.97k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  2.75k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  2.75k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  2.75k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  2.75k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  2.75k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  2.75k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  2.75k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  2.75k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  2.75k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  2.75k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  2.75k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  2.75k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  2.75k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  2.75k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  2.75k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  2.75k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  2.75k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  2.75k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  2.75k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  2.75k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  2.75k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  2.75k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  2.75k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  2.75k|    );
   51|  2.75k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  2.75k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  2.75k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  2.75k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  2.75k|      CARRY,
   59|  2.75k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  2.75k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  2.75k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  2.75k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  2.75k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  2.75k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  2.75k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  2.75k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  2.75k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  2.75k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  2.75k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  2.75k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  2.75k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  2.75k|    );
   80|  2.75k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  2.75k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  2.75k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  2.75k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  2.75k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  2.75k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  2.75k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  2.75k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  2.75k|    );
   96|  2.75k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  2.75k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  2.75k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  2.75k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  2.75k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  2.75k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  2.75k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  2.75k|    return must23_80 ^ sc;
  105|  2.75k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.37k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.37k|    static const uint8_t max_array[32] = {
  115|  1.37k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.37k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.37k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.37k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.37k|    };
  120|  1.37k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.37k|    return input.gt_bits(max_value);
  122|  1.37k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  2.05k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  2.05k|      this->error |= this->prev_incomplete;
  150|  2.05k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  2.05k|    simdutf_really_inline bool errors() const {
  176|  2.05k|      return this->error.any_bits_set_anywhere();
  177|  2.05k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  2.05k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  2.05k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  2.05k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  2.05k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  2.05k|    checker c{};
   12|  2.05k|    buf_block_reader<64> reader(input, length);
   13|  6.97k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 4.91k, False: 2.05k]
  ------------------
   14|  4.91k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  4.91k|      c.check_next_input(in);
   16|  4.91k|      reader.advance();
   17|  4.91k|    }
   18|  2.05k|    uint8_t block[64]{};
   19|  2.05k|    reader.get_remainder(block);
   20|  2.05k|    simd::simd8x64<uint8_t> in(block);
   21|  2.05k|    c.check_next_input(in);
   22|  2.05k|    reader.advance();
   23|  2.05k|    c.check_eof();
   24|  2.05k|    return !c.errors();
   25|  2.05k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  4.67k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  4.67k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  4.67k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  4.67k|      utf8_end_of_code_point_mask & 0xfff;
   24|  4.67k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.31k, False: 3.36k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.31k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.31k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.31k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.31k|    return 16; // We consumed 16 bytes.
   30|  1.31k|  }
   31|  3.36k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 67, False: 3.29k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     67|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     67|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     67|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     67|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     67|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     67|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     67|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     67|    return 16;
   42|     67|  }
   43|  3.29k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 66, False: 3.23k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     66|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     66|    const __m128i ascii =
   49|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     66|    const __m128i middlebyte =
   51|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     66|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     66|    const __m128i highbyte =
   54|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     66|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     66|    const __m128i composed =
   57|     66|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     66|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     66|    utf32_output += 4;
   60|     66|    return 12;
   61|     66|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  3.23k|  const uint8_t idx =
   65|  3.23k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  3.23k|  const uint8_t consumed =
   67|  3.23k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  3.23k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.17k, False: 1.05k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.17k|    const __m128i sh =
   75|  2.17k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.17k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.17k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.17k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.17k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.17k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.17k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.17k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 989, False: 68]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|    989|    const __m128i sh =
   86|    989|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|    989|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|    989|    const __m128i ascii =
   89|    989|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|    989|    const __m128i middlebyte =
   91|    989|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|    989|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|    989|    const __m128i highbyte =
   94|    989|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|    989|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|    989|    const __m128i composed =
   97|    989|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|    989|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|    989|    utf32_output += 4;
  100|    989|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 68, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|     68|    const __m128i sh =
  103|     68|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|     68|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|     68|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|     68|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|     68|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|     68|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|     68|    const __m128i correct =
  111|     68|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|     68|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|     68|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|     68|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|     68|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|     68|    const __m128i composed =
  117|     68|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|     68|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|     68|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|     68|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|     68|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  3.23k|  return consumed;
  125|  3.29k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|  2.05k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|  2.05k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|  2.05k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|  68.8k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|  68.8k|  utf8_to_utf32::validating_transcoder converter;
  276|  68.8k|  return converter.convert(buf, len, utf32_output);
  277|  68.8k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  1.59k|    char32_t* utf32_output) const noexcept {
  286|  1.59k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  1.59k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|  1.59k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|  1.59k|  return utf8::count_code_points(input, length);
  778|  1.59k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  6.97k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  6.97k|  return input.reduce_or().is_ascii();
   25|  6.97k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  2.75k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  2.75k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  2.75k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  2.75k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  2.75k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|  74.0k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|  74.0k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|  74.0k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|  74.0k|    return active_implementation;
  815|  74.0k|}
_ZN7simdutf13validate_utf8EPKcm:
  817|  2.05k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|  2.05k|  return get_active_implementation()->validate_utf8(buf, len);
  819|  2.05k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|  68.8k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|  68.8k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|  68.8k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  1.59k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  1.59k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  1.59k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|  1.59k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|  1.59k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|  1.59k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  1.59k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  1.59k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  1.59k|    size_t counter{0};
  171|  39.3k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 37.8k, False: 1.59k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  37.8k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 37.3k, False: 444]
  ------------------
  174|  37.8k|    }
  175|  1.59k|    return counter;
  176|  1.59k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  68.8k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  68.8k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  68.8k|  size_t pos = 0;
   12|  68.8k|  char32_t* start{utf32_output};
   13|   133k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 68.8k, False: 64.5k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  68.8k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 68.8k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  68.8k|    uint8_t leading_byte = data[pos]; // leading byte
   31|  68.8k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 58.7k, False: 10.1k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  58.7k|      *utf32_output++ = char32_t(leading_byte);
   34|  58.7k|      pos++;
   35|  58.7k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 5.84k, False: 4.28k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  5.84k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 5.84k]
  ------------------
   38|  5.84k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 2.03k, False: 3.80k]
  ------------------
   39|       |      // range check
   40|  3.80k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  3.80k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 3.66k]
  |  Branch (41:32): [True: 0, False: 3.66k]
  ------------------
   42|  3.66k|      *utf32_output++ = char32_t(code_point);
   43|  3.66k|      pos += 2;
   44|  4.28k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 2.44k, False: 1.84k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  2.44k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 2.44k]
  ------------------
   47|       |
   48|  2.44k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 708, False: 1.73k]
  ------------------
   49|  1.73k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 141, False: 1.59k]
  ------------------
   50|       |      // range check
   51|  1.59k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  1.59k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  1.59k|                   (data[pos + 2] & 0b00111111);
   54|  1.59k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 1.45k]
  |  Branch (54:33): [True: 0, False: 1.45k]
  ------------------
   55|  1.59k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 331, False: 1.11k]
  |  Branch (55:35): [True: 168, False: 163]
  ------------------
   56|    309|        return 0;
   57|    309|      }
   58|  1.28k|      *utf32_output++ = char32_t(code_point);
   59|  1.28k|      pos += 3;
   60|  1.84k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 1.84k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  1.84k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 1.84k]
  ------------------
   63|  1.84k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 248, False: 1.59k]
  ------------------
   64|  1.59k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 141, False: 1.45k]
  ------------------
   65|  1.45k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 172, False: 1.28k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.28k|      uint32_t code_point =
   69|  1.28k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.28k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.28k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 267, False: 1.01k]
  |  Branch (71:35): [True: 141, False: 877]
  ------------------
   72|    877|      *utf32_output++ = char32_t(code_point);
   73|    877|      pos += 4;
   74|    877|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  68.8k|  }
   78|  64.5k|  return utf32_output - start;
   79|  68.8k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.59k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.59k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.59k|  size_t pos = 0;
   12|  1.59k|  char32_t* start{utf32_output};
   13|  12.9k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 11.3k, False: 1.59k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  11.3k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 5.90k, False: 5.43k]
  ------------------
   16|  5.90k|      uint64_t v;
   17|  5.90k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  5.90k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 5.47k, False: 422]
  ------------------
   19|  5.47k|        size_t final_pos = pos + 8;
   20|  49.3k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 43.8k, False: 5.47k]
  ------------------
   21|  43.8k|          *utf32_output++ = char32_t(buf[pos]);
   22|  43.8k|          pos++;
   23|  43.8k|        }
   24|  5.47k|        continue;
   25|  5.47k|      }
   26|  5.90k|    }
   27|  5.85k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  5.85k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 5.55k, False: 303]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  5.55k|      *utf32_output++ = char32_t(leading_byte);
   31|  5.55k|      pos++;
   32|  5.55k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 165, False: 138]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    165|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 165]
  ------------------
   35|    165|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    165|      pos += 2;
   37|    165|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 73, False: 65]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|     73|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 73]
  ------------------
   40|     73|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|     73|      pos += 3;
   42|     73|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 65, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     65|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 65]
  ------------------
   45|     65|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     65|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     65|      *utf32_output++ = char32_t(code_word);
   48|     65|      pos += 4;
   49|     65|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  5.85k|  }
   54|  1.59k|  return utf32_output - start;
   55|  1.59k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  4.16k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  4.16k|  return _popcnt64(input_num);
   16|  4.16k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  6.15k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  6.15k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  6.15k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  6.15k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  6.97k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  15.3k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  15.3k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  15.3k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   179k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   179k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   179k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   179k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  6.97k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  6.97k|      return this->chunks[0] | this->chunks[1];
  297|  6.97k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  20.1k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   279k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  6.97k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  10.3k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  2.75k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  2.75k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  2.75k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  5.50k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  8.25k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  8.25k|      return lookup_16(simd8<L>::repeat_16(
  140|  8.25k|        replace0,  replace1,  replace2,  replace3,
  141|  8.25k|        replace4,  replace5,  replace6,  replace7,
  142|  8.25k|        replace8,  replace9,  replace10, replace11,
  143|  8.25k|        replace12, replace13, replace14, replace15
  144|  8.25k|      ));
  145|  8.25k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  8.25k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  8.25k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  8.25k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  11.0k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  8.25k|    ) {
  218|  8.25k|      return simd8<uint8_t>(
  219|  8.25k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  8.25k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  8.25k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  8.25k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  8.25k|      );
  224|  8.25k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  8.25k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  16.5k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|  85.3k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|  85.3k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  2.75k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  2.75k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  2.75k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  2.75k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  2.75k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  2.75k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  6.87k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  31.0k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  31.0k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  31.0k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  31.0k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  11.0k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  63.9k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  12.6k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  12.6k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  12.6k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  2.75k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  7.69k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  2.75k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  2.75k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.37k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.37k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  70.9k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  70.9k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  8.25k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  16.5k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  16.5k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  16.5k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  4.08k|    simdutf_really_inline bool is_ascii() const {
  300|  4.08k|      return this->reduce_or().is_ascii();
  301|  4.08k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  4.08k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  4.08k|      return this->chunks[0] | this->chunks[1];
  297|  4.08k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  4.08k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  4.08k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    774|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    774|      const simd8<T> mask = simd8<T>::splat(m);
  364|    774|      return  simd8x64<bool>(
  365|    774|        this->chunks[0] < mask,
  366|    774|        this->chunks[1] < mask
  367|    774|      ).to_bitmask();
  368|    774|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.54k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  4.94k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  4.94k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  4.94k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  4.94k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  4.94k|      return r_lo | (r_hi << 32);
  287|  4.94k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  9.88k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  9.88k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  3.30k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  3.30k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  3.30k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  3.30k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  6.61k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  6.61k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  6.61k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  6.61k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  6.61k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  6.61k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  4.16k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  4.16k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  4.16k|      return  simd8x64<bool>(
  373|  4.16k|        this->chunks[0] > mask,
  374|  4.16k|        this->chunks[1] > mask
  375|  4.16k|      ).to_bitmask();
  376|  4.16k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   485k|{
  619|   485k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   485k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   485k|    static_cast<    \
  |  |  247|   485k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   485k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  1.09M|{
  387|  1.09M|    static_assert(
  388|  1.09M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.09M|        "Scan argument types must be default constructible");
  390|  1.09M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.09M|                  "Scan argument types must be Destructible");
  392|  1.09M|    static_assert(
  393|  1.09M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.09M|        "Scan argument types must not be references");
  395|  1.09M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   485k|    {
  564|   485k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   485k|    {
  574|   485k|        return {
  575|   485k|            detail::make_arg<base::is_packed, Context,
  576|   485k|                             detail::mapped_type_constant<
  577|   485k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   485k|                args)...};
  579|   485k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   485k|{
  415|   485k|    return make_value<Context>(value);
  416|   485k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   535k|{
  372|   535k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   535k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   535k|                                  needs_context_tag>) {
  376|   535k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   535k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   535k|    }
  378|   535k|    else {
  379|   535k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   535k|            value, context_tag<Context>{}));
  381|   535k|    }
  382|   535k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   535k|    {                                                                        \
  217|   535k|        return val;                                                          \
  218|   535k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  1.09M|{
  341|  1.09M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.09M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.09M|    constexpr bool scannable_char =
  345|  1.09M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.09M|    static_assert(scannable_char,
  347|  1.09M|                  "Cannot scan an argument of an unsupported character "
  348|  1.09M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.09M|    constexpr bool scannable_const =
  351|  1.09M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.09M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.09M|    constexpr bool scannable_disabled =
  355|  1.09M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.09M|    static_assert(scannable_disabled,
  357|  1.09M|                  "Cannot scan an argument that has been disabled by "
  358|  1.09M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.09M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.09M|    static_assert(
  362|  1.09M|        scannable,
  363|  1.09M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.09M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.09M|    return arg_value{arg};
  367|  1.09M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  1.09M|    {
  160|  1.09M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   485k|    {
  647|   485k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  3.42M|    {
  694|  3.42M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   403k|    {
  554|   403k|        return m_args;
  555|   403k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  49.6k|{
  400|  49.6k|    check_scan_arg_types<T>();
  401|       |
  402|  49.6k|    basic_scan_arg<Context> arg;
  403|  49.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  49.6k|    arg.m_value = make_value<Context>(value);
  405|  49.6k|    return arg;
  406|  49.6k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  3.75M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  7.64M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   482k|{
  619|   482k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   482k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   482k|    static_cast<    \
  |  |  247|   482k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   482k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  1.09M|{
  387|  1.09M|    static_assert(
  388|  1.09M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.09M|        "Scan argument types must be default constructible");
  390|  1.09M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.09M|                  "Scan argument types must be Destructible");
  392|  1.09M|    static_assert(
  393|  1.09M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.09M|        "Scan argument types must not be references");
  395|  1.09M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   482k|    {
  564|   482k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   482k|    {
  574|   482k|        return {
  575|   482k|            detail::make_arg<base::is_packed, Context,
  576|   482k|                             detail::mapped_type_constant<
  577|   482k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   482k|                args)...};
  579|   482k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   482k|{
  415|   482k|    return make_value<Context>(value);
  416|   482k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   530k|{
  372|   530k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   530k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   530k|                                  needs_context_tag>) {
  376|   530k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   530k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   530k|    }
  378|   530k|    else {
  379|   530k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   530k|            value, context_tag<Context>{}));
  381|   530k|    }
  382|   530k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   530k|    {                                                                        \
  217|   530k|        return val;                                                          \
  218|   530k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  1.09M|{
  341|  1.09M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.09M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.09M|    constexpr bool scannable_char =
  345|  1.09M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.09M|    static_assert(scannable_char,
  347|  1.09M|                  "Cannot scan an argument of an unsupported character "
  348|  1.09M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.09M|    constexpr bool scannable_const =
  351|  1.09M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.09M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.09M|    constexpr bool scannable_disabled =
  355|  1.09M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.09M|    static_assert(scannable_disabled,
  357|  1.09M|                  "Cannot scan an argument that has been disabled by "
  358|  1.09M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.09M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.09M|    static_assert(
  362|  1.09M|        scannable,
  363|  1.09M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.09M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.09M|    return arg_value{arg};
  367|  1.09M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  1.09M|    {
  160|  1.09M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   482k|    {
  647|   482k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   400k|    {
  554|   400k|        return m_args;
  555|   400k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  47.1k|{
  400|  47.1k|    check_scan_arg_types<T>();
  401|       |
  402|  47.1k|    basic_scan_arg<Context> arg;
  403|  47.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  47.1k|    arg.m_value = make_value<Context>(value);
  405|  47.1k|    return arg;
  406|  47.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   658k|{
  619|   658k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   658k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   658k|    static_cast<    \
  |  |  247|   658k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   658k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  1.44M|{
  387|  1.44M|    static_assert(
  388|  1.44M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.44M|        "Scan argument types must be default constructible");
  390|  1.44M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.44M|                  "Scan argument types must be Destructible");
  392|  1.44M|    static_assert(
  393|  1.44M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.44M|        "Scan argument types must not be references");
  395|  1.44M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   658k|    {
  564|   658k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   658k|    {
  574|   658k|        return {
  575|   658k|            detail::make_arg<base::is_packed, Context,
  576|   658k|                             detail::mapped_type_constant<
  577|   658k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   658k|                args)...};
  579|   658k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   658k|{
  415|   658k|    return make_value<Context>(value);
  416|   658k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|   720k|{
  372|   720k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   720k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   720k|                                  needs_context_tag>) {
  376|   720k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   720k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   720k|    }
  378|   720k|    else {
  379|   720k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   720k|            value, context_tag<Context>{}));
  381|   720k|    }
  382|   720k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|   720k|    {                                                                        \
  217|   720k|        return val;                                                          \
  218|   720k|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  1.44M|{
  341|  1.44M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.44M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.44M|    constexpr bool scannable_char =
  345|  1.44M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.44M|    static_assert(scannable_char,
  347|  1.44M|                  "Cannot scan an argument of an unsupported character "
  348|  1.44M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.44M|    constexpr bool scannable_const =
  351|  1.44M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.44M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.44M|    constexpr bool scannable_disabled =
  355|  1.44M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.44M|    static_assert(scannable_disabled,
  357|  1.44M|                  "Cannot scan an argument that has been disabled by "
  358|  1.44M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.44M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.44M|    static_assert(
  362|  1.44M|        scannable,
  363|  1.44M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.44M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.44M|    return arg_value{arg};
  367|  1.44M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  1.44M|    {
  160|  1.44M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   658k|    {
  647|   658k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|   576k|    {
  554|   576k|        return m_args;
  555|   576k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  62.4k|{
  400|  62.4k|    check_scan_arg_types<T>();
  401|       |
  402|  62.4k|    basic_scan_arg<Context> arg;
  403|  62.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  62.4k|    arg.m_value = make_value<Context>(value);
  405|  62.4k|    return arg;
  406|  62.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   559k|{
  619|   559k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   559k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   559k|    static_cast<    \
  |  |  247|   559k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   559k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  1.25M|{
  387|  1.25M|    static_assert(
  388|  1.25M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.25M|        "Scan argument types must be default constructible");
  390|  1.25M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.25M|                  "Scan argument types must be Destructible");
  392|  1.25M|    static_assert(
  393|  1.25M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.25M|        "Scan argument types must not be references");
  395|  1.25M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   559k|    {
  564|   559k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   559k|    {
  574|   559k|        return {
  575|   559k|            detail::make_arg<base::is_packed, Context,
  576|   559k|                             detail::mapped_type_constant<
  577|   559k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   559k|                args)...};
  579|   559k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   559k|{
  415|   559k|    return make_value<Context>(value);
  416|   559k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|   612k|{
  372|   612k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   612k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   612k|                                  needs_context_tag>) {
  376|   612k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   612k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   612k|    }
  378|   612k|    else {
  379|   612k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   612k|            value, context_tag<Context>{}));
  381|   612k|    }
  382|   612k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|   612k|    {                                                                        \
  217|   612k|        return val;                                                          \
  218|   612k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  1.25M|{
  341|  1.25M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.25M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.25M|    constexpr bool scannable_char =
  345|  1.25M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.25M|    static_assert(scannable_char,
  347|  1.25M|                  "Cannot scan an argument of an unsupported character "
  348|  1.25M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.25M|    constexpr bool scannable_const =
  351|  1.25M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.25M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.25M|    constexpr bool scannable_disabled =
  355|  1.25M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.25M|    static_assert(scannable_disabled,
  357|  1.25M|                  "Cannot scan an argument that has been disabled by "
  358|  1.25M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.25M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.25M|    static_assert(
  362|  1.25M|        scannable,
  363|  1.25M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.25M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.25M|    return arg_value{arg};
  367|  1.25M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  1.25M|    {
  160|  1.25M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   559k|    {
  647|   559k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   477k|    {
  554|   477k|        return m_args;
  555|   477k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  52.4k|{
  400|  52.4k|    check_scan_arg_types<T>();
  401|       |
  402|  52.4k|    basic_scan_arg<Context> arg;
  403|  52.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  52.4k|    arg.m_value = make_value<Context>(value);
  405|  52.4k|    return arg;
  406|  52.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   671k|{
  619|   671k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   671k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   671k|    static_cast<    \
  |  |  247|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   671k|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  1.47M|{
  387|  1.47M|    static_assert(
  388|  1.47M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.47M|        "Scan argument types must be default constructible");
  390|  1.47M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.47M|                  "Scan argument types must be Destructible");
  392|  1.47M|    static_assert(
  393|  1.47M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.47M|        "Scan argument types must not be references");
  395|  1.47M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   671k|    {
  564|   671k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   671k|    {
  574|   671k|        return {
  575|   671k|            detail::make_arg<base::is_packed, Context,
  576|   671k|                             detail::mapped_type_constant<
  577|   671k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   671k|                args)...};
  579|   671k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   671k|{
  415|   671k|    return make_value<Context>(value);
  416|   671k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|   735k|{
  372|   735k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   735k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   735k|                                  needs_context_tag>) {
  376|   735k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   735k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   735k|    }
  378|   735k|    else {
  379|   735k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   735k|            value, context_tag<Context>{}));
  381|   735k|    }
  382|   735k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|   735k|    {                                                                        \
  217|   735k|        return val;                                                          \
  218|   735k|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  1.47M|{
  341|  1.47M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.47M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.47M|    constexpr bool scannable_char =
  345|  1.47M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.47M|    static_assert(scannable_char,
  347|  1.47M|                  "Cannot scan an argument of an unsupported character "
  348|  1.47M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.47M|    constexpr bool scannable_const =
  351|  1.47M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.47M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.47M|    constexpr bool scannable_disabled =
  355|  1.47M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.47M|    static_assert(scannable_disabled,
  357|  1.47M|                  "Cannot scan an argument that has been disabled by "
  358|  1.47M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.47M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.47M|    static_assert(
  362|  1.47M|        scannable,
  363|  1.47M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.47M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.47M|    return arg_value{arg};
  367|  1.47M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  1.47M|    {
  160|  1.47M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   671k|    {
  647|   671k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|   589k|    {
  554|   589k|        return m_args;
  555|   589k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|  63.7k|{
  400|  63.7k|    check_scan_arg_types<T>();
  401|       |
  402|  63.7k|    basic_scan_arg<Context> arg;
  403|  63.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  63.7k|    arg.m_value = make_value<Context>(value);
  405|  63.7k|    return arg;
  406|  63.7k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   564k|{
  619|   564k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   564k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   564k|    static_cast<    \
  |  |  247|   564k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   564k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  1.26M|{
  387|  1.26M|    static_assert(
  388|  1.26M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.26M|        "Scan argument types must be default constructible");
  390|  1.26M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.26M|                  "Scan argument types must be Destructible");
  392|  1.26M|    static_assert(
  393|  1.26M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.26M|        "Scan argument types must not be references");
  395|  1.26M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   564k|    {
  564|   564k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   564k|    {
  574|   564k|        return {
  575|   564k|            detail::make_arg<base::is_packed, Context,
  576|   564k|                             detail::mapped_type_constant<
  577|   564k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   564k|                args)...};
  579|   564k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   564k|{
  415|   564k|    return make_value<Context>(value);
  416|   564k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|   617k|{
  372|   617k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   617k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   617k|                                  needs_context_tag>) {
  376|   617k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   617k|    }
  378|   617k|    else {
  379|   617k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   617k|            value, context_tag<Context>{}));
  381|   617k|    }
  382|   617k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|   617k|    {                                                                        \
  217|   617k|        return val;                                                          \
  218|   617k|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  1.26M|{
  341|  1.26M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.26M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.26M|    constexpr bool scannable_char =
  345|  1.26M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.26M|    static_assert(scannable_char,
  347|  1.26M|                  "Cannot scan an argument of an unsupported character "
  348|  1.26M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.26M|    constexpr bool scannable_const =
  351|  1.26M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.26M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.26M|    constexpr bool scannable_disabled =
  355|  1.26M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.26M|    static_assert(scannable_disabled,
  357|  1.26M|                  "Cannot scan an argument that has been disabled by "
  358|  1.26M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.26M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.26M|    static_assert(
  362|  1.26M|        scannable,
  363|  1.26M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.26M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.26M|    return arg_value{arg};
  367|  1.26M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  1.26M|    {
  160|  1.26M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   564k|    {
  647|   564k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   482k|    {
  554|   482k|        return m_args;
  555|   482k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  52.8k|{
  400|  52.8k|    check_scan_arg_types<T>();
  401|       |
  402|  52.8k|    basic_scan_arg<Context> arg;
  403|  52.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  52.8k|    arg.m_value = make_value<Context>(value);
  405|  52.8k|    return arg;
  406|  52.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   514k|{
  619|   514k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   514k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   514k|    static_cast<    \
  |  |  247|   514k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   514k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   514k|    {
  564|   514k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   514k|    {
  574|   514k|        return {
  575|   514k|            detail::make_arg<base::is_packed, Context,
  576|   514k|                             detail::mapped_type_constant<
  577|   514k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   514k|                args)...};
  579|   514k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   514k|{
  415|   514k|    return make_value<Context>(value);
  416|   514k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|   562k|{
  372|   562k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   562k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   562k|                                  needs_context_tag>) {
  376|   562k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   562k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   562k|    }
  378|   562k|    else {
  379|   562k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   562k|            value, context_tag<Context>{}));
  381|   562k|    }
  382|   562k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|   562k|    {                                                                        \
  217|   562k|        return val;                                                          \
  218|   562k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   514k|    {
  647|   514k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  3.57M|    {
  694|  3.57M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   368k|    {
  554|   368k|        return m_args;
  555|   368k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  48.6k|{
  400|  48.6k|    check_scan_arg_types<T>();
  401|       |
  402|  48.6k|    basic_scan_arg<Context> arg;
  403|  48.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  48.6k|    arg.m_value = make_value<Context>(value);
  405|  48.6k|    return arg;
  406|  48.6k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  3.89M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   522k|{
  619|   522k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   522k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   522k|    static_cast<    \
  |  |  247|   522k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   522k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   522k|    {
  564|   522k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   522k|    {
  574|   522k|        return {
  575|   522k|            detail::make_arg<base::is_packed, Context,
  576|   522k|                             detail::mapped_type_constant<
  577|   522k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   522k|                args)...};
  579|   522k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   522k|{
  415|   522k|    return make_value<Context>(value);
  416|   522k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|   569k|{
  372|   569k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   569k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   569k|                                  needs_context_tag>) {
  376|   569k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   569k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   569k|    }
  378|   569k|    else {
  379|   569k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   569k|            value, context_tag<Context>{}));
  381|   569k|    }
  382|   569k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|   569k|    {                                                                        \
  217|   569k|        return val;                                                          \
  218|   569k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   522k|    {
  647|   522k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   376k|    {
  554|   376k|        return m_args;
  555|   376k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  47.1k|{
  400|  47.1k|    check_scan_arg_types<T>();
  401|       |
  402|  47.1k|    basic_scan_arg<Context> arg;
  403|  47.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  47.1k|    arg.m_value = make_value<Context>(value);
  405|  47.1k|    return arg;
  406|  47.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   667k|{
  619|   667k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   667k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   667k|    static_cast<    \
  |  |  247|   667k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   667k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   667k|    {
  564|   667k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   667k|    {
  574|   667k|        return {
  575|   667k|            detail::make_arg<base::is_packed, Context,
  576|   667k|                             detail::mapped_type_constant<
  577|   667k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   667k|                args)...};
  579|   667k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   667k|{
  415|   667k|    return make_value<Context>(value);
  416|   667k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|   727k|{
  372|   727k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   727k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   727k|                                  needs_context_tag>) {
  376|   727k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   727k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   727k|    }
  378|   727k|    else {
  379|   727k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   727k|            value, context_tag<Context>{}));
  381|   727k|    }
  382|   727k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|   727k|    {                                                                        \
  217|   727k|        return val;                                                          \
  218|   727k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   667k|    {
  647|   667k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|   521k|    {
  554|   521k|        return m_args;
  555|   521k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  60.1k|{
  400|  60.1k|    check_scan_arg_types<T>();
  401|       |
  402|  60.1k|    basic_scan_arg<Context> arg;
  403|  60.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  60.1k|    arg.m_value = make_value<Context>(value);
  405|  60.1k|    return arg;
  406|  60.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   591k|{
  619|   591k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   591k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   591k|    static_cast<    \
  |  |  247|   591k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   591k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   591k|    {
  564|   591k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   591k|    {
  574|   591k|        return {
  575|   591k|            detail::make_arg<base::is_packed, Context,
  576|   591k|                             detail::mapped_type_constant<
  577|   591k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   591k|                args)...};
  579|   591k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   591k|{
  415|   591k|    return make_value<Context>(value);
  416|   591k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|   644k|{
  372|   644k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   644k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   644k|                                  needs_context_tag>) {
  376|   644k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   644k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   644k|    }
  378|   644k|    else {
  379|   644k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   644k|            value, context_tag<Context>{}));
  381|   644k|    }
  382|   644k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|   644k|    {                                                                        \
  217|   644k|        return val;                                                          \
  218|   644k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   591k|    {
  647|   591k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   446k|    {
  554|   446k|        return m_args;
  555|   446k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  52.2k|{
  400|  52.2k|    check_scan_arg_types<T>();
  401|       |
  402|  52.2k|    basic_scan_arg<Context> arg;
  403|  52.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  52.2k|    arg.m_value = make_value<Context>(value);
  405|  52.2k|    return arg;
  406|  52.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   679k|{
  619|   679k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   679k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   679k|    static_cast<    \
  |  |  247|   679k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   679k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   679k|    {
  564|   679k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   679k|    {
  574|   679k|        return {
  575|   679k|            detail::make_arg<base::is_packed, Context,
  576|   679k|                             detail::mapped_type_constant<
  577|   679k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   679k|                args)...};
  579|   679k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   679k|{
  415|   679k|    return make_value<Context>(value);
  416|   679k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|   740k|{
  372|   740k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   740k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   740k|                                  needs_context_tag>) {
  376|   740k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   740k|    }
  378|   740k|    else {
  379|   740k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   740k|            value, context_tag<Context>{}));
  381|   740k|    }
  382|   740k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|   740k|    {                                                                        \
  217|   740k|        return val;                                                          \
  218|   740k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   679k|    {
  647|   679k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|   533k|    {
  554|   533k|        return m_args;
  555|   533k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|  61.3k|{
  400|  61.3k|    check_scan_arg_types<T>();
  401|       |
  402|  61.3k|    basic_scan_arg<Context> arg;
  403|  61.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  61.3k|    arg.m_value = make_value<Context>(value);
  405|  61.3k|    return arg;
  406|  61.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   596k|{
  619|   596k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   596k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   596k|    static_cast<    \
  |  |  247|   596k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   596k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   596k|    {
  564|   596k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   596k|    {
  574|   596k|        return {
  575|   596k|            detail::make_arg<base::is_packed, Context,
  576|   596k|                             detail::mapped_type_constant<
  577|   596k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   596k|                args)...};
  579|   596k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   596k|{
  415|   596k|    return make_value<Context>(value);
  416|   596k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|   649k|{
  372|   649k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   649k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   649k|                                  needs_context_tag>) {
  376|   649k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   649k|    }
  378|   649k|    else {
  379|   649k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   649k|            value, context_tag<Context>{}));
  381|   649k|    }
  382|   649k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|   649k|    {                                                                        \
  217|   649k|        return val;                                                          \
  218|   649k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   596k|    {
  647|   596k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   451k|    {
  554|   451k|        return m_args;
  555|   451k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  52.6k|{
  400|  52.6k|    check_scan_arg_types<T>();
  401|       |
  402|  52.6k|    basic_scan_arg<Context> arg;
  403|  52.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  52.6k|    arg.m_value = make_value<Context>(value);
  405|  52.6k|    return arg;
  406|  52.6k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  3.42M|    {
  682|  3.42M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.42M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  3.42M|        return static_cast<std::size_t>(m_desc &
  687|  3.42M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  3.42M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  6.84M|    {
  702|  6.84M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  6.84M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  3.42M|    {
  655|  3.42M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.42M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  3.42M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  3.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.42M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  3.42M|        const auto t = type(id);
  667|  3.42M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  3.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.42M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  3.42M|        basic_scan_arg<Context> arg;
  672|  3.42M|        arg.m_type = t;
  673|  3.42M|        arg.m_value = m_values[id];
  674|  3.42M|        return arg;
  675|  3.42M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  3.42M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  3.42M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  3.42M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  3.42M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  3.42M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  6.36M|    {
  483|  6.36M|        return m_type != detail::arg_type::none_type;
  484|  6.36M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  5.53M|    {
  488|  5.53M|        return m_type;
  489|  5.53M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  3.57M|    {
  682|  3.57M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.57M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  3.57M|        return static_cast<std::size_t>(m_desc &
  687|  3.57M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  3.57M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  7.14M|    {
  702|  7.14M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  7.14M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  3.57M|    {
  655|  3.57M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.57M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  3.57M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  3.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.57M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  3.57M|        const auto t = type(id);
  667|  3.57M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  3.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.57M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  3.57M|        basic_scan_arg<Context> arg;
  672|  3.57M|        arg.m_type = t;
  673|  3.57M|        arg.m_value = m_values[id];
  674|  3.57M|        return arg;
  675|  3.57M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  3.57M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  3.57M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  3.57M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  3.57M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  3.57M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  6.56M|    {
  483|  6.56M|        return m_type != detail::arg_type::none_type;
  484|  6.56M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  5.85M|    {
  488|  5.85M|        return m_type;
  489|  5.85M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   328k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   322k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   344k|    {
  109|   344k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  2.76M|    {
   60|  2.76M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   738k|    {
  124|   738k|        return m_current;
  125|   738k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  2.76M|    {
   43|  2.76M|        return m_args.get(id);
   44|  2.76M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  2.61M|    {
   53|  2.61M|        return m_locale;
   54|  2.61M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   270k|    {
  132|   270k|        return ranges_std::default_sentinel;
  133|   270k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|   123k|    {
  146|   123k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   123k|    static_cast<    \
  |  |  247|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   123k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   270k|    {
  140|   270k|        return ranges::subrange{begin(), end()};
  141|   270k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   612k|    {
  109|   612k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  2.92M|    {
   60|  2.92M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|  1.31M|    {
  124|  1.31M|        return m_current;
  125|  1.31M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  2.92M|    {
   43|  2.92M|        return m_args.get(id);
   44|  2.92M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  2.66M|    {
   53|  2.66M|        return m_locale;
   54|  2.66M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   480k|    {
  132|   480k|        return ranges_std::default_sentinel;
  133|   480k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|   218k|    {
  146|   218k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   218k|    static_cast<    \
  |  |  247|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   218k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   480k|    {
  140|   480k|        return ranges::subrange{begin(), end()};
  141|   480k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  1.98M|    {
   69|  1.98M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  1.98M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  1.98M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  27.3M|    {
   75|  27.3M|        return m_code == good;
   76|  27.3M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   820k|    {
   86|   820k|        return m_code;
   87|   820k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   820k|{
  111|   820k|    return a.code() == b;
  112|   820k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   820k|{
  116|   820k|    return !(a == b);
  117|   820k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  16.6M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   419k|    {
  675|   419k|        return m_str;
  676|   419k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  3.42M|{
  385|  3.42M|    return s;
  386|  3.42M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  3.42M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   419k|    {
  671|   419k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   417k|    {
  675|   417k|        return m_str;
  676|   417k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   417k|    {
  671|   417k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   592k|    {
  675|   592k|        return m_str;
  676|   592k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   592k|    {
  671|   592k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   493k|    {
  675|   493k|        return m_str;
  676|   493k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   493k|    {
  671|   493k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   605k|    {
  675|   605k|        return m_str;
  676|   605k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   605k|    {
  671|   605k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   499k|    {
  675|   499k|        return m_str;
  676|   499k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   499k|    {
  671|   499k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  65.6k|    {
  675|  65.6k|        return m_str;
  676|  65.6k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  65.6k|    {
  671|  65.6k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  65.6k|    {
  675|  65.6k|        return m_str;
  676|  65.6k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  65.6k|    {
  671|  65.6k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  65.6k|    {
  675|  65.6k|        return m_str;
  676|  65.6k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  65.6k|    {
  671|  65.6k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  65.6k|    {
  675|  65.6k|        return m_str;
  676|  65.6k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  65.6k|    {
  671|  65.6k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  65.6k|    {
  675|  65.6k|        return m_str;
  676|  65.6k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  65.6k|    {
  671|  65.6k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  65.6k|    {
  675|  65.6k|        return m_str;
  676|  65.6k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  65.6k|    {
  671|  65.6k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   397k|    {
  675|   397k|        return m_str;
  676|   397k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  3.57M|{
  390|  3.57M|    return s;
  391|  3.57M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  3.57M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   397k|    {
  671|   397k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   405k|    {
  675|   405k|        return m_str;
  676|   405k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   405k|    {
  671|   405k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   550k|    {
  675|   550k|        return m_str;
  676|   550k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   550k|    {
  671|   550k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   475k|    {
  675|   475k|        return m_str;
  676|   475k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   475k|    {
  671|   475k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   562k|    {
  675|   562k|        return m_str;
  676|   562k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   562k|    {
  671|   562k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   480k|    {
  675|   480k|        return m_str;
  676|   480k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   480k|    {
  671|   480k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  5.24M|    {
  196|  5.24M|        SCN_GCC_COMPAT_PUSH
  197|  5.24M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  5.24M|        switch (type) {
  199|  1.29M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 1.29M, False: 3.94M]
  ------------------
  200|  2.58M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 1.29M, False: 3.95M]
  ------------------
  201|  2.58M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 5.24M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   233k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 233k, False: 5.01M]
  ------------------
  206|   233k|                return 2;
  207|   467k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 467k, False: 4.77M]
  ------------------
  208|   467k|                return 8;
  209|   930k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 930k, False: 4.31M]
  ------------------
  210|   930k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 5.24M]
  ------------------
  211|   930k|                return 10;
  212|  1.02M|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 1.02M, False: 4.21M]
  ------------------
  213|  1.02M|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 5.24M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  5.24M|        }
  219|  5.24M|        SCN_GCC_COMPAT_POP
  220|  5.24M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  5.69M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  1.30M|    {
  245|  1.30M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  1.30M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  1.30M|            m_specs.localized = true;
  247|  1.30M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  1.30M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  4.11M|    {
  260|  4.11M|        m_specs.type = type;
  261|  4.11M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   273k|    {
  322|   273k|        SCN_UNLIKELY_ATTR
  323|   273k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   273k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  5.42M|    {
  333|  5.42M|        return static_cast<bool>(m_error);
  334|  5.42M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.30M|{
  987|  1.30M|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 1.30M]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|   197k|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 197k, False: 1.10M]
  ------------------
  992|   197k|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.30M]
  ------------------
  993|   443k|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 245k, False: 1.05M]
  ------------------
  994|   443k|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.30M]
  ------------------
  995|   693k|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 250k, False: 1.05M]
  ------------------
  996|   693k|            return arg_type_category::integer;
  997|       |
  998|   189k|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 189k, False: 1.11M]
  ------------------
  999|   189k|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.30M]
  ------------------
 1000|   399k|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 210k, False: 1.09M]
  ------------------
 1001|   399k|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.30M]
  ------------------
 1002|   611k|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 211k, False: 1.09M]
  ------------------
 1003|   611k|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 1.30M]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 1.30M]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 1.30M]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 1.30M]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.30M]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 1.30M]
  ------------------
 1015|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 1.30M]
  ------------------
 1016|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 1.30M]
  ------------------
 1017|      0|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 1.30M]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 1.30M]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 1.30M]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 1.30M]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.30M]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.30M]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.30M|            SCN_CLANG_POP
 1034|  1.30M|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.30M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  2.42M|{
  968|  2.42M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  2.42M|    handler.check_args_exhausted();
  970|  2.42M|    return handler.get_error();
  971|  2.42M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  2.42M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  2.42M|    auto begin = format.data();
  937|  2.42M|    auto it = begin;
  938|  2.42M|    const auto end = format.data() + format.size();
  939|       |
  940|  4.62M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 2.42M, False: 2.19M]
  ------------------
  941|  2.42M|        const auto ch = *it++;
  942|  2.42M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 2.42M, False: 0]
  ------------------
  943|  2.42M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  2.42M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  2.42M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 221k, False: 2.19M]
  ------------------
  947|   221k|                return;
  948|   221k|            }
  949|  2.42M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  2.42M|    }
  960|       |
  961|  2.19M|    handler.on_literal_text(begin, end);
  962|  2.19M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  2.42M|{
  866|  2.42M|    struct id_adapter {
  867|  2.42M|        constexpr void operator()()
  868|  2.42M|        {
  869|  2.42M|            arg_id = handler.on_arg_id();
  870|  2.42M|        }
  871|  2.42M|        constexpr void operator()(std::size_t id)
  872|  2.42M|        {
  873|  2.42M|            arg_id = handler.on_arg_id(id);
  874|  2.42M|        }
  875|       |
  876|  2.42M|        constexpr void on_error(const char* msg)
  877|  2.42M|        {
  878|  2.42M|            SCN_UNLIKELY_ATTR
  879|  2.42M|            handler.on_error(msg);
  880|  2.42M|        }
  881|       |
  882|  2.42M|        Handler& handler;
  883|  2.42M|        std::size_t arg_id;
  884|  2.42M|    };
  885|       |
  886|  2.42M|    ++begin;
  887|  2.42M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.42M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  2.42M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 2.42M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  2.42M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 2.42M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  2.42M|    else {
  899|  2.42M|        auto adapter = id_adapter{handler, 0};
  900|  2.42M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  2.42M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.42M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  2.42M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 2.42M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  2.42M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 2.42M, False: 0]
  ------------------
  911|  2.42M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.42M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  2.42M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  2.42M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  4.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.8k, False: 2.34M]
  |  |  |  Branch (153:45): [True: 0, False: 2.42M]
  |  |  |  Branch (153:45): [True: 73.8k, False: 2.34M]
  |  |  ------------------
  ------------------
  917|  73.8k|                handler.on_error("Unknown format specifier");
  918|  73.8k|                return begin;
  919|  73.8k|            }
  920|  2.42M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  2.42M|    }
  927|  2.34M|    return begin + 1;
  928|  2.42M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  2.42M|{
  400|  2.42M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  2.42M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 2.42M, False: 0]
  |  Branch (401:26): [True: 0, False: 2.42M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  2.42M|    handler();
  406|  2.42M|    return begin;
  407|  2.42M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  2.42M|        {
  869|  2.42M|            arg_id = handler.on_arg_id();
  870|  2.42M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  2.42M|    {
 1046|  2.42M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  2.42M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  2.42M|{
  795|  2.42M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.42M|        if (*begin == CharT{'['}) {
  797|  2.42M|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.42M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  2.42M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  2.42M|                return begin;
  803|  2.42M|            }
  804|  2.42M|            handler.on_character_set_string(set);
  805|  2.42M|            return begin;
  806|  2.42M|        }
  807|  2.42M|        if (*begin == CharT{'/'}) {
  808|  2.42M|            return parse_presentation_regex(begin, end, handler);
  809|  2.42M|        }
  810|  2.42M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.42M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  2.42M|            handler.on_error("Invalid type specifier in format string");
  813|  2.42M|            return begin;
  814|  2.42M|        }
  815|  2.42M|        handler.on_type(type);
  816|  2.42M|        return begin;
  817|  2.42M|    };
  818|       |
  819|  2.42M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 2.42M, False: 0]
  |  Branch (819:28): [True: 2.37M, False: 49.2k]
  ------------------
  820|  2.42M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.34M, False: 24.6k]
  |  Branch (820:36): [True: 1.73M, False: 609k]
  ------------------
  821|  1.73M|        return do_presentation();
  822|  1.73M|    }
  823|       |
  824|   683k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 683k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   683k|    begin = parse_align(begin, end, handler);
  830|   683k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 683k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   683k|    begin = parse_width(begin, end, handler);
  836|   683k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 683k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   683k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 609k, False: 73.8k]
  ------------------
  842|   609k|        handler.on_localized();
  843|   609k|        ++begin;
  844|   609k|    }
  845|   683k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 683k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   683k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 683k, False: 0]
  |  Branch (850:25): [True: 73.8k, False: 609k]
  ------------------
  851|  73.8k|        do_presentation();
  852|  73.8k|    }
  853|   683k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 683k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   683k|    return begin;
  859|   683k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  2.66M|{
  464|  2.66M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.95M, False: 707k]
  |  Branch (464:33): [True: 1.95M, False: 0]
  ------------------
  465|  2.66M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 658k, False: 49.2k]
  |  Branch (465:33): [True: 658k, False: 0]
  ------------------
  466|  2.66M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.81M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.81M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.81M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.81M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.81M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.81M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.81M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.2k, False: 1.76M]
  |  |  ------------------
  ------------------
  812|  49.2k|            handler.on_error("Invalid type specifier in format string");
  813|  49.2k|            return begin;
  814|  49.2k|        }
  815|  1.76M|        handler.on_type(type);
  816|  1.76M|        return begin;
  817|  1.81M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  2.10M|{
  412|  2.10M|    switch (type) {
  413|   101k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 101k, False: 2.00M]
  ------------------
  414|   150k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 49.2k, False: 2.05M]
  ------------------
  415|   150k|            return presentation_type::int_binary;
  416|   467k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 467k, False: 1.64M]
  ------------------
  417|   467k|            return presentation_type::int_decimal;
  418|   656k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 656k, False: 1.45M]
  ------------------
  419|   656k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.10M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   219k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 219k, False: 1.88M]
  ------------------
  423|   219k|            return presentation_type::int_octal;
  424|   515k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 515k, False: 1.59M]
  ------------------
  425|   515k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.10M]
  ------------------
  426|   515k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.10M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.10M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.10M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.10M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.10M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.10M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.10M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.10M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.10M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.10M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.10M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.10M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.10M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.10M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.10M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.10M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|  98.4k|        default:
  ------------------
  |  Branch (456:9): [True: 98.4k, False: 2.00M]
  ------------------
  457|  98.4k|            return presentation_type::none;
  458|  2.10M|    }
  459|  2.10M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   683k|{
  489|   683k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   683k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   683k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   683k|        switch (ch) {
  493|   683k|            case L'<':
  494|   683k|                return align_type::left;
  495|   683k|            case L'>':
  496|   683k|                return align_type::right;
  497|   683k|            case L'^':
  498|   683k|                return align_type::center;
  499|   683k|            default:
  500|   683k|                return align_type::none;
  501|   683k|        }
  502|   683k|    };
  503|       |
  504|   683k|    auto potential_fill_len = code_point_length(begin, end);
  505|   683k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 683k]
  |  |  |  Branch (153:45): [True: 0, False: 683k]
  |  |  |  Branch (153:45): [True: 0, False: 683k]
  |  |  ------------------
  ------------------
  506|   683k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   683k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   683k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   683k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   683k|    const auto begin_before_fill = begin;
  516|   683k|    begin += potential_fill_len;
  517|       |
  518|   683k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 683k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   683k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   683k|    const auto begin_after_fill = begin;
  524|   683k|    ++begin;
  525|       |
  526|   683k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 683k, False: 0]
  ------------------
  527|   683k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 683k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   683k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 683k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   683k|    }
  535|       |
  536|   683k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 683k, False: 0]
  ------------------
  537|   683k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 683k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   683k|        return begin_before_fill;
  542|   683k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   683k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   806k|{
  471|   806k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   806k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   806k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   806k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   806k|        return 1;
  474|   806k|    }
  475|   806k|    else {
  476|   806k|        const auto lengths =
  477|   806k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   806k|            "\3\4";
  479|   806k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   806k|        return len;
  481|   806k|    }
  482|   806k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.36M|    auto check_align = [](wchar_t ch) {
  492|  1.36M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.36M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.36M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.36M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.36M|            default:
  ------------------
  |  Branch (499:13): [True: 1.36M, False: 0]
  ------------------
  500|  1.36M|                return align_type::none;
  501|  1.36M|        }
  502|  1.36M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   683k|{
  554|   683k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   683k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   683k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   683k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 633k, False: 49.2k]
  |  Branch (556:33): [True: 0, False: 633k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   683k|    return begin;
  567|   683k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   609k|    {
 1051|   609k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   609k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 281k, False: 327k]
  ------------------
 1053|   609k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 281k]
  ------------------
 1054|   609k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   609k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   609k|        Handler::on_localized();
 1063|   609k|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  5.28M|{
 1073|  5.28M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  5.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.28M]
  |  |  ------------------
  ------------------
 1074|      0|        return handler.on_error("Invalid type specifier for integer type");
 1075|      0|    }
 1076|  5.28M|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 1.30M, False: 3.97M]
  ------------------
 1077|  1.30M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|            return;
 1082|      0|        }
 1083|  1.30M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|  1.30M|    }
 1089|  5.28M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   344k|{
  968|   344k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   344k|    handler.check_args_exhausted();
  970|   344k|    return handler.get_error();
  971|   344k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   344k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   344k|    auto begin = format.data();
  937|   344k|    auto it = begin;
  938|   344k|    const auto end = format.data() + format.size();
  939|       |
  940|   467k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 344k, False: 123k]
  ------------------
  941|   344k|        const auto ch = *it++;
  942|   344k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 344k, False: 0]
  ------------------
  943|   344k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   344k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   344k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 221k, False: 123k]
  ------------------
  947|   221k|                return;
  948|   221k|            }
  949|   344k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   344k|    }
  960|       |
  961|   123k|    handler.on_literal_text(begin, end);
  962|   123k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|   344k|{
  866|   344k|    struct id_adapter {
  867|   344k|        constexpr void operator()()
  868|   344k|        {
  869|   344k|            arg_id = handler.on_arg_id();
  870|   344k|        }
  871|   344k|        constexpr void operator()(std::size_t id)
  872|   344k|        {
  873|   344k|            arg_id = handler.on_arg_id(id);
  874|   344k|        }
  875|       |
  876|   344k|        constexpr void on_error(const char* msg)
  877|   344k|        {
  878|   344k|            SCN_UNLIKELY_ATTR
  879|   344k|            handler.on_error(msg);
  880|   344k|        }
  881|       |
  882|   344k|        Handler& handler;
  883|   344k|        std::size_t arg_id;
  884|   344k|    };
  885|       |
  886|   344k|    ++begin;
  887|   344k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   344k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 344k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   344k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 344k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   344k|    else {
  899|   344k|        auto adapter = id_adapter{handler, 0};
  900|   344k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   344k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   344k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 344k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   344k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 344k, False: 0]
  ------------------
  911|   344k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   344k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   344k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 73.8k, False: 270k]
  |  |  |  Branch (153:45): [True: 0, False: 344k]
  |  |  |  Branch (153:45): [True: 73.8k, False: 270k]
  |  |  ------------------
  ------------------
  917|  73.8k|                handler.on_error("Unknown format specifier");
  918|  73.8k|                return begin;
  919|  73.8k|            }
  920|   344k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   344k|    }
  927|   270k|    return begin + 1;
  928|   344k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   344k|{
  400|   344k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   344k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   344k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   344k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 344k, False: 0]
  |  Branch (401:26): [True: 0, False: 344k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   344k|    handler();
  406|   344k|    return begin;
  407|   344k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   344k|        {
  869|   344k|            arg_id = handler.on_arg_id();
  870|   344k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   344k|    {
 1046|   344k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   344k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   344k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   344k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|   344k|{
  795|   344k|    auto do_presentation = [&]() -> const CharT* {
  796|   344k|        if (*begin == CharT{'['}) {
  797|   344k|            auto set = parse_presentation_set(begin, end, handler);
  798|   344k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   344k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   344k|                return begin;
  803|   344k|            }
  804|   344k|            handler.on_character_set_string(set);
  805|   344k|            return begin;
  806|   344k|        }
  807|   344k|        if (*begin == CharT{'/'}) {
  808|   344k|            return parse_presentation_regex(begin, end, handler);
  809|   344k|        }
  810|   344k|        presentation_type type = parse_presentation_type(*begin++);
  811|   344k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   344k|            handler.on_error("Invalid type specifier in format string");
  813|   344k|            return begin;
  814|   344k|        }
  815|   344k|        handler.on_type(type);
  816|   344k|        return begin;
  817|   344k|    };
  818|       |
  819|   344k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 344k, False: 0]
  |  Branch (819:28): [True: 295k, False: 49.2k]
  ------------------
  820|   344k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 270k, False: 24.6k]
  |  Branch (820:36): [True: 221k, False: 49.2k]
  ------------------
  821|   221k|        return do_presentation();
  822|   221k|    }
  823|       |
  824|   123k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   123k|    begin = parse_align(begin, end, handler);
  830|   123k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   123k|    begin = parse_width(begin, end, handler);
  836|   123k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   123k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 49.2k, False: 73.8k]
  ------------------
  842|  49.2k|        handler.on_localized();
  843|  49.2k|        ++begin;
  844|  49.2k|    }
  845|   123k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   123k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 123k, False: 0]
  |  Branch (850:25): [True: 73.8k, False: 49.2k]
  ------------------
  851|  73.8k|        do_presentation();
  852|  73.8k|    }
  853|   123k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   123k|    return begin;
  859|   123k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   295k|    auto do_presentation = [&]() -> const CharT* {
  796|   295k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 295k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   295k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 295k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   295k|        presentation_type type = parse_presentation_type(*begin++);
  811|   295k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.2k, False: 246k]
  |  |  ------------------
  ------------------
  812|  49.2k|            handler.on_error("Invalid type specifier in format string");
  813|  49.2k|            return begin;
  814|  49.2k|        }
  815|   246k|        handler.on_type(type);
  816|   246k|        return begin;
  817|   295k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|   123k|{
  489|   123k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   123k|        switch (ch) {
  493|   123k|            case L'<':
  494|   123k|                return align_type::left;
  495|   123k|            case L'>':
  496|   123k|                return align_type::right;
  497|   123k|            case L'^':
  498|   123k|                return align_type::center;
  499|   123k|            default:
  500|   123k|                return align_type::none;
  501|   123k|        }
  502|   123k|    };
  503|       |
  504|   123k|    auto potential_fill_len = code_point_length(begin, end);
  505|   123k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 123k]
  |  |  |  Branch (153:45): [True: 0, False: 123k]
  |  |  |  Branch (153:45): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
  506|   123k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   123k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   123k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   123k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   123k|    const auto begin_before_fill = begin;
  516|   123k|    begin += potential_fill_len;
  517|       |
  518|   123k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 123k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   123k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   123k|    const auto begin_after_fill = begin;
  524|   123k|    ++begin;
  525|       |
  526|   123k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 123k, False: 0]
  ------------------
  527|   123k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   123k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 123k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   123k|    }
  535|       |
  536|   123k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 123k, False: 0]
  ------------------
  537|   123k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 123k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   123k|        return begin_before_fill;
  542|   123k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   123k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   246k|    auto check_align = [](wchar_t ch) {
  492|   246k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 246k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 246k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 246k]
  ------------------
  498|      0|                return align_type::center;
  499|   246k|            default:
  ------------------
  |  Branch (499:13): [True: 246k, False: 0]
  ------------------
  500|   246k|                return align_type::none;
  501|   246k|        }
  502|   246k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|   123k|{
  554|   123k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   123k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 73.8k, False: 49.2k]
  |  Branch (556:33): [True: 0, False: 73.8k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   123k|    return begin;
  567|   123k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  49.2k|    {
 1051|  49.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  49.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 24.6k, False: 24.6k]
  ------------------
 1053|  49.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 24.6k]
  ------------------
 1054|  49.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  49.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  49.2k|        Handler::on_localized();
 1063|  49.2k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  2.31M|{
  968|  2.31M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  2.31M|    handler.check_args_exhausted();
  970|  2.31M|    return handler.get_error();
  971|  2.31M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  2.31M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  2.31M|    auto begin = format.data();
  937|  2.31M|    auto it = begin;
  938|  2.31M|    const auto end = format.data() + format.size();
  939|       |
  940|  4.23M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 2.31M, False: 1.92M]
  ------------------
  941|  2.31M|        const auto ch = *it++;
  942|  2.31M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 2.31M, False: 0]
  ------------------
  943|  2.31M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  2.31M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  2.31M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 393k, False: 1.92M]
  ------------------
  947|   393k|                return;
  948|   393k|            }
  949|  2.31M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  2.31M|    }
  960|       |
  961|  1.92M|    handler.on_literal_text(begin, end);
  962|  1.92M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  2.31M|{
  866|  2.31M|    struct id_adapter {
  867|  2.31M|        constexpr void operator()()
  868|  2.31M|        {
  869|  2.31M|            arg_id = handler.on_arg_id();
  870|  2.31M|        }
  871|  2.31M|        constexpr void operator()(std::size_t id)
  872|  2.31M|        {
  873|  2.31M|            arg_id = handler.on_arg_id(id);
  874|  2.31M|        }
  875|       |
  876|  2.31M|        constexpr void on_error(const char* msg)
  877|  2.31M|        {
  878|  2.31M|            SCN_UNLIKELY_ATTR
  879|  2.31M|            handler.on_error(msg);
  880|  2.31M|        }
  881|       |
  882|  2.31M|        Handler& handler;
  883|  2.31M|        std::size_t arg_id;
  884|  2.31M|    };
  885|       |
  886|  2.31M|    ++begin;
  887|  2.31M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.31M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  2.31M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 2.31M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  2.31M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 2.31M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  2.31M|    else {
  899|  2.31M|        auto adapter = id_adapter{handler, 0};
  900|  2.31M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  2.31M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.31M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  2.31M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 2.31M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  2.31M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 2.31M, False: 0]
  ------------------
  911|  2.31M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.31M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  2.31M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  2.31M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  4.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 2.18M]
  |  |  |  Branch (153:45): [True: 0, False: 2.31M]
  |  |  |  Branch (153:45): [True: 131k, False: 2.18M]
  |  |  ------------------
  ------------------
  917|   131k|                handler.on_error("Unknown format specifier");
  918|   131k|                return begin;
  919|   131k|            }
  920|  2.31M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  2.31M|    }
  927|  2.18M|    return begin + 1;
  928|  2.31M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  2.31M|{
  400|  2.31M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  2.31M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 2.31M, False: 0]
  |  Branch (401:26): [True: 0, False: 2.31M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  2.31M|    handler();
  406|  2.31M|    return begin;
  407|  2.31M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  2.31M|        {
  869|  2.31M|            arg_id = handler.on_arg_id();
  870|  2.31M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  2.31M|    {
 1046|  2.31M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  2.31M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  2.31M|{
  795|  2.31M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.31M|        if (*begin == CharT{'['}) {
  797|  2.31M|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.31M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  2.31M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  2.31M|                return begin;
  803|  2.31M|            }
  804|  2.31M|            handler.on_character_set_string(set);
  805|  2.31M|            return begin;
  806|  2.31M|        }
  807|  2.31M|        if (*begin == CharT{'/'}) {
  808|  2.31M|            return parse_presentation_regex(begin, end, handler);
  809|  2.31M|        }
  810|  2.31M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.31M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  2.31M|            handler.on_error("Invalid type specifier in format string");
  813|  2.31M|            return begin;
  814|  2.31M|        }
  815|  2.31M|        handler.on_type(type);
  816|  2.31M|        return begin;
  817|  2.31M|    };
  818|       |
  819|  2.31M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 2.31M, False: 0]
  |  Branch (819:28): [True: 2.22M, False: 87.4k]
  ------------------
  820|  2.31M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.18M, False: 43.7k]
  |  Branch (820:36): [True: 1.62M, False: 558k]
  ------------------
  821|  1.62M|        return do_presentation();
  822|  1.62M|    }
  823|       |
  824|   689k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 689k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   689k|    begin = parse_align(begin, end, handler);
  830|   689k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 689k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   689k|    begin = parse_width(begin, end, handler);
  836|   689k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 689k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   689k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 558k, False: 131k]
  ------------------
  842|   558k|        handler.on_localized();
  843|   558k|        ++begin;
  844|   558k|    }
  845|   689k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 689k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   689k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 689k, False: 0]
  |  Branch (850:25): [True: 131k, False: 558k]
  ------------------
  851|   131k|        do_presentation();
  852|   131k|    }
  853|   689k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 689k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   689k|    return begin;
  859|   689k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  2.75M|{
  464|  2.75M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.01M, False: 733k]
  |  Branch (464:33): [True: 2.01M, False: 0]
  ------------------
  465|  2.75M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 646k, False: 87.4k]
  |  Branch (465:33): [True: 646k, False: 0]
  ------------------
  466|  2.75M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.75M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.75M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.75M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.75M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.75M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.75M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.75M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 87.4k, False: 1.66M]
  |  |  ------------------
  ------------------
  812|  87.4k|            handler.on_error("Invalid type specifier in format string");
  813|  87.4k|            return begin;
  814|  87.4k|        }
  815|  1.66M|        handler.on_type(type);
  816|  1.66M|        return begin;
  817|  1.75M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  2.28M|{
  412|  2.28M|    switch (type) {
  413|   133k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 133k, False: 2.14M]
  ------------------
  414|   221k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 87.4k, False: 2.19M]
  ------------------
  415|   221k|            return presentation_type::int_binary;
  416|   470k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 470k, False: 1.81M]
  ------------------
  417|   470k|            return presentation_type::int_decimal;
  418|   644k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 644k, False: 1.63M]
  ------------------
  419|   644k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.28M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   250k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 250k, False: 2.03M]
  ------------------
  423|   250k|            return presentation_type::int_octal;
  424|   518k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 518k, False: 1.76M]
  ------------------
  425|   518k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.28M]
  ------------------
  426|   518k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.28M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.28M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.28M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.28M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.28M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.28M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.28M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.28M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.28M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.28M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.28M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.28M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.28M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.28M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.28M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.28M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   174k|        default:
  ------------------
  |  Branch (456:9): [True: 174k, False: 2.10M]
  ------------------
  457|   174k|            return presentation_type::none;
  458|  2.28M|    }
  459|  2.28M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   689k|{
  489|   689k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   689k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   689k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   689k|        switch (ch) {
  493|   689k|            case L'<':
  494|   689k|                return align_type::left;
  495|   689k|            case L'>':
  496|   689k|                return align_type::right;
  497|   689k|            case L'^':
  498|   689k|                return align_type::center;
  499|   689k|            default:
  500|   689k|                return align_type::none;
  501|   689k|        }
  502|   689k|    };
  503|       |
  504|   689k|    auto potential_fill_len = code_point_length(begin, end);
  505|   689k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 689k]
  |  |  |  Branch (153:45): [True: 0, False: 689k]
  |  |  |  Branch (153:45): [True: 0, False: 689k]
  |  |  ------------------
  ------------------
  506|   689k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   689k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   689k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   689k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   689k|    const auto begin_before_fill = begin;
  516|   689k|    begin += potential_fill_len;
  517|       |
  518|   689k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 689k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   689k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   689k|    const auto begin_after_fill = begin;
  524|   689k|    ++begin;
  525|       |
  526|   689k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 689k, False: 0]
  ------------------
  527|   689k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 689k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   689k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 689k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   689k|    }
  535|       |
  536|   689k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 689k, False: 0]
  ------------------
  537|   689k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 689k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   689k|        return begin_before_fill;
  542|   689k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   689k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   908k|{
  471|   908k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   908k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   908k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   908k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   908k|        return 1;
  474|   908k|    }
  475|   908k|    else {
  476|   908k|        const auto lengths =
  477|   908k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   908k|            "\3\4";
  479|   908k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   908k|        return len;
  481|   908k|    }
  482|   908k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.37M|    auto check_align = [](wchar_t ch) {
  492|  1.37M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.37M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.37M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.37M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.37M|            default:
  ------------------
  |  Branch (499:13): [True: 1.37M, False: 0]
  ------------------
  500|  1.37M|                return align_type::none;
  501|  1.37M|        }
  502|  1.37M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   689k|{
  554|   689k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   689k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   689k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   689k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 602k, False: 87.4k]
  |  Branch (556:33): [True: 0, False: 602k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   689k|    return begin;
  567|   689k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   558k|    {
 1051|   558k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   558k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 261k, False: 297k]
  ------------------
 1053|   558k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 261k]
  ------------------
 1054|   558k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   558k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   558k|        Handler::on_localized();
 1063|   558k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   612k|{
  968|   612k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   612k|    handler.check_args_exhausted();
  970|   612k|    return handler.get_error();
  971|   612k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   612k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   612k|    auto begin = format.data();
  937|   612k|    auto it = begin;
  938|   612k|    const auto end = format.data() + format.size();
  939|       |
  940|   830k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 612k, False: 218k]
  ------------------
  941|   612k|        const auto ch = *it++;
  942|   612k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 612k, False: 0]
  ------------------
  943|   612k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   612k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   612k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 393k, False: 218k]
  ------------------
  947|   393k|                return;
  948|   393k|            }
  949|   612k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   612k|    }
  960|       |
  961|   218k|    handler.on_literal_text(begin, end);
  962|   218k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   612k|{
  866|   612k|    struct id_adapter {
  867|   612k|        constexpr void operator()()
  868|   612k|        {
  869|   612k|            arg_id = handler.on_arg_id();
  870|   612k|        }
  871|   612k|        constexpr void operator()(std::size_t id)
  872|   612k|        {
  873|   612k|            arg_id = handler.on_arg_id(id);
  874|   612k|        }
  875|       |
  876|   612k|        constexpr void on_error(const char* msg)
  877|   612k|        {
  878|   612k|            SCN_UNLIKELY_ATTR
  879|   612k|            handler.on_error(msg);
  880|   612k|        }
  881|       |
  882|   612k|        Handler& handler;
  883|   612k|        std::size_t arg_id;
  884|   612k|    };
  885|       |
  886|   612k|    ++begin;
  887|   612k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 612k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   612k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 612k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   612k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 612k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   612k|    else {
  899|   612k|        auto adapter = id_adapter{handler, 0};
  900|   612k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   612k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 612k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   612k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 612k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   612k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 612k, False: 0]
  ------------------
  911|   612k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 612k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   612k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   612k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 131k, False: 480k]
  |  |  |  Branch (153:45): [True: 0, False: 612k]
  |  |  |  Branch (153:45): [True: 131k, False: 480k]
  |  |  ------------------
  ------------------
  917|   131k|                handler.on_error("Unknown format specifier");
  918|   131k|                return begin;
  919|   131k|            }
  920|   612k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   612k|    }
  927|   480k|    return begin + 1;
  928|   612k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   612k|{
  400|   612k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   612k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   612k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   612k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 612k, False: 0]
  |  Branch (401:26): [True: 0, False: 612k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   612k|    handler();
  406|   612k|    return begin;
  407|   612k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   612k|        {
  869|   612k|            arg_id = handler.on_arg_id();
  870|   612k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   612k|    {
 1046|   612k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   612k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   612k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   612k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   612k|{
  795|   612k|    auto do_presentation = [&]() -> const CharT* {
  796|   612k|        if (*begin == CharT{'['}) {
  797|   612k|            auto set = parse_presentation_set(begin, end, handler);
  798|   612k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   612k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   612k|                return begin;
  803|   612k|            }
  804|   612k|            handler.on_character_set_string(set);
  805|   612k|            return begin;
  806|   612k|        }
  807|   612k|        if (*begin == CharT{'/'}) {
  808|   612k|            return parse_presentation_regex(begin, end, handler);
  809|   612k|        }
  810|   612k|        presentation_type type = parse_presentation_type(*begin++);
  811|   612k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   612k|            handler.on_error("Invalid type specifier in format string");
  813|   612k|            return begin;
  814|   612k|        }
  815|   612k|        handler.on_type(type);
  816|   612k|        return begin;
  817|   612k|    };
  818|       |
  819|   612k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 612k, False: 0]
  |  Branch (819:28): [True: 524k, False: 87.4k]
  ------------------
  820|   612k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 480k, False: 43.7k]
  |  Branch (820:36): [True: 393k, False: 87.4k]
  ------------------
  821|   393k|        return do_presentation();
  822|   393k|    }
  823|       |
  824|   218k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   218k|    begin = parse_align(begin, end, handler);
  830|   218k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   218k|    begin = parse_width(begin, end, handler);
  836|   218k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   218k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 87.4k, False: 131k]
  ------------------
  842|  87.4k|        handler.on_localized();
  843|  87.4k|        ++begin;
  844|  87.4k|    }
  845|   218k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   218k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 218k, False: 0]
  |  Branch (850:25): [True: 131k, False: 87.4k]
  ------------------
  851|   131k|        do_presentation();
  852|   131k|    }
  853|   218k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   218k|    return begin;
  859|   218k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   524k|    auto do_presentation = [&]() -> const CharT* {
  796|   524k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 524k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   524k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 524k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   524k|        presentation_type type = parse_presentation_type(*begin++);
  811|   524k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 87.4k, False: 437k]
  |  |  ------------------
  ------------------
  812|  87.4k|            handler.on_error("Invalid type specifier in format string");
  813|  87.4k|            return begin;
  814|  87.4k|        }
  815|   437k|        handler.on_type(type);
  816|   437k|        return begin;
  817|   524k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   218k|{
  489|   218k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   218k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   218k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   218k|        switch (ch) {
  493|   218k|            case L'<':
  494|   218k|                return align_type::left;
  495|   218k|            case L'>':
  496|   218k|                return align_type::right;
  497|   218k|            case L'^':
  498|   218k|                return align_type::center;
  499|   218k|            default:
  500|   218k|                return align_type::none;
  501|   218k|        }
  502|   218k|    };
  503|       |
  504|   218k|    auto potential_fill_len = code_point_length(begin, end);
  505|   218k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 218k]
  |  |  |  Branch (153:45): [True: 0, False: 218k]
  |  |  |  Branch (153:45): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
  506|   218k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   218k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   218k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   218k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   218k|    const auto begin_before_fill = begin;
  516|   218k|    begin += potential_fill_len;
  517|       |
  518|   218k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 218k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   218k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   218k|    const auto begin_after_fill = begin;
  524|   218k|    ++begin;
  525|       |
  526|   218k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 218k, False: 0]
  ------------------
  527|   218k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   218k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 218k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   218k|    }
  535|       |
  536|   218k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 218k, False: 0]
  ------------------
  537|   218k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 218k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   218k|        return begin_before_fill;
  542|   218k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   218k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   437k|    auto check_align = [](wchar_t ch) {
  492|   437k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 437k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 437k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 437k]
  ------------------
  498|      0|                return align_type::center;
  499|   437k|            default:
  ------------------
  |  Branch (499:13): [True: 437k, False: 0]
  ------------------
  500|   437k|                return align_type::none;
  501|   437k|        }
  502|   437k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   218k|{
  554|   218k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   218k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   218k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   218k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 131k, False: 87.4k]
  |  Branch (556:33): [True: 0, False: 131k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   218k|    return begin;
  567|   218k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  87.4k|    {
 1051|  87.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  87.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 43.7k, False: 43.7k]
  ------------------
 1053|  87.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 43.7k]
  ------------------
 1054|  87.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  87.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  87.4k|        Handler::on_localized();
 1063|  87.4k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  3.33M|{
  226|  3.33M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  3.33M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  3.33M|                  "\n"
  230|  3.33M|                  "Unsupported range type given as input to a scanning "
  231|  3.33M|                  "function.\n"
  232|  3.33M|                  "A range needs to have a character type (value type) "
  233|  3.33M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  3.33M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  3.33M|                  "to be included.\n"
  236|  3.33M|                  "See the scnlib documentation for more details.");
  237|  3.33M|    static_assert(
  238|  3.33M|        !std::is_same_v<T, custom_char_traits>,
  239|  3.33M|        "\n"
  240|  3.33M|        "Unsupported range type given as input to a scanning "
  241|  3.33M|        "function.\n"
  242|  3.33M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  3.33M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  3.33M|        "not supported.");
  245|  3.33M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  3.33M|                  "\n"
  247|  3.33M|                  "Unsupported range type given as input to a scanning "
  248|  3.33M|                  "function.\n"
  249|  3.33M|                  "file_marker_found cannot be used as an "
  250|  3.33M|                  "source range type to scn::scan.\n"
  251|  3.33M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  3.33M|                  "and do not provide an explicit source range, "
  253|  3.33M|                  "or use scn::scan with a FILE* directly.");
  254|  3.33M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  3.33M|                  "\n"
  256|  3.33M|                  "Unsupported range type given as input to a scanning "
  257|  3.33M|                  "function.\n"
  258|  3.33M|                  "In order to be scannable, a range needs to satisfy "
  259|  3.33M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  3.33M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  3.33M|                  "\n"
  262|  3.33M|                  "Unsupported range type given as input to a scanning "
  263|  3.33M|                  "function.\n"
  264|  3.33M|                  "A range needs to model forward_range and have a valid "
  265|  3.33M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  3.33M|                  "Examples of scannable ranges are std::string, "
  267|  3.33M|                  "std::string_view, "
  268|  3.33M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  3.33M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  3.33M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  3.33M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  3.33M|{
  153|  3.33M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  3.33M|        return std::basic_string_view{ranges::data(r),
  155|  3.33M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  3.33M|    }
  162|  3.33M|    else {
  163|  3.33M|        return invalid_char_type{};
  164|  3.33M|    }
  165|  3.33M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   418k|{
  226|   418k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   418k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   418k|                  "\n"
  230|   418k|                  "Unsupported range type given as input to a scanning "
  231|   418k|                  "function.\n"
  232|   418k|                  "A range needs to have a character type (value type) "
  233|   418k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   418k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   418k|                  "to be included.\n"
  236|   418k|                  "See the scnlib documentation for more details.");
  237|   418k|    static_assert(
  238|   418k|        !std::is_same_v<T, custom_char_traits>,
  239|   418k|        "\n"
  240|   418k|        "Unsupported range type given as input to a scanning "
  241|   418k|        "function.\n"
  242|   418k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   418k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   418k|        "not supported.");
  245|   418k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   418k|                  "\n"
  247|   418k|                  "Unsupported range type given as input to a scanning "
  248|   418k|                  "function.\n"
  249|   418k|                  "file_marker_found cannot be used as an "
  250|   418k|                  "source range type to scn::scan.\n"
  251|   418k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   418k|                  "and do not provide an explicit source range, "
  253|   418k|                  "or use scn::scan with a FILE* directly.");
  254|   418k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   418k|                  "\n"
  256|   418k|                  "Unsupported range type given as input to a scanning "
  257|   418k|                  "function.\n"
  258|   418k|                  "In order to be scannable, a range needs to satisfy "
  259|   418k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   418k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   418k|                  "\n"
  262|   418k|                  "Unsupported range type given as input to a scanning "
  263|   418k|                  "function.\n"
  264|   418k|                  "A range needs to model forward_range and have a valid "
  265|   418k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   418k|                  "Examples of scannable ranges are std::string, "
  267|   418k|                  "std::string_view, "
  268|   418k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   418k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   418k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   418k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   418k|{
  196|   418k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   418k|        return file_marker_found{};
  198|   418k|    }
  199|   418k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   418k|        if constexpr (ranges::input_range<Range>) {
  201|   418k|            return insufficient_range{};
  202|   418k|        }
  203|   418k|        else {
  204|   418k|            return invalid_input_range{};
  205|   418k|        }
  206|   418k|    }
  207|   418k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   418k|        return invalid_char_type{};
  209|   418k|    }
  210|   418k|    else {
  211|   418k|        return make_forward_scan_buffer(r);
  212|   418k|    }
  213|   418k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  3.15M|{
  226|  3.15M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  3.15M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  3.15M|                  "\n"
  230|  3.15M|                  "Unsupported range type given as input to a scanning "
  231|  3.15M|                  "function.\n"
  232|  3.15M|                  "A range needs to have a character type (value type) "
  233|  3.15M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  3.15M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  3.15M|                  "to be included.\n"
  236|  3.15M|                  "See the scnlib documentation for more details.");
  237|  3.15M|    static_assert(
  238|  3.15M|        !std::is_same_v<T, custom_char_traits>,
  239|  3.15M|        "\n"
  240|  3.15M|        "Unsupported range type given as input to a scanning "
  241|  3.15M|        "function.\n"
  242|  3.15M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  3.15M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  3.15M|        "not supported.");
  245|  3.15M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  3.15M|                  "\n"
  247|  3.15M|                  "Unsupported range type given as input to a scanning "
  248|  3.15M|                  "function.\n"
  249|  3.15M|                  "file_marker_found cannot be used as an "
  250|  3.15M|                  "source range type to scn::scan.\n"
  251|  3.15M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  3.15M|                  "and do not provide an explicit source range, "
  253|  3.15M|                  "or use scn::scan with a FILE* directly.");
  254|  3.15M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  3.15M|                  "\n"
  256|  3.15M|                  "Unsupported range type given as input to a scanning "
  257|  3.15M|                  "function.\n"
  258|  3.15M|                  "In order to be scannable, a range needs to satisfy "
  259|  3.15M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  3.15M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  3.15M|                  "\n"
  262|  3.15M|                  "Unsupported range type given as input to a scanning "
  263|  3.15M|                  "function.\n"
  264|  3.15M|                  "A range needs to model forward_range and have a valid "
  265|  3.15M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  3.15M|                  "Examples of scannable ranges are std::string, "
  267|  3.15M|                  "std::string_view, "
  268|  3.15M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  3.15M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  3.15M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  3.15M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  3.15M|{
  153|  3.15M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  3.15M|        return std::basic_string_view{ranges::data(r),
  155|  3.15M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  3.15M|    }
  162|  3.15M|    else {
  163|  3.15M|        return invalid_char_type{};
  164|  3.15M|    }
  165|  3.15M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   743k|{
  226|   743k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   743k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   743k|                  "\n"
  230|   743k|                  "Unsupported range type given as input to a scanning "
  231|   743k|                  "function.\n"
  232|   743k|                  "A range needs to have a character type (value type) "
  233|   743k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   743k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   743k|                  "to be included.\n"
  236|   743k|                  "See the scnlib documentation for more details.");
  237|   743k|    static_assert(
  238|   743k|        !std::is_same_v<T, custom_char_traits>,
  239|   743k|        "\n"
  240|   743k|        "Unsupported range type given as input to a scanning "
  241|   743k|        "function.\n"
  242|   743k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   743k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   743k|        "not supported.");
  245|   743k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   743k|                  "\n"
  247|   743k|                  "Unsupported range type given as input to a scanning "
  248|   743k|                  "function.\n"
  249|   743k|                  "file_marker_found cannot be used as an "
  250|   743k|                  "source range type to scn::scan.\n"
  251|   743k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   743k|                  "and do not provide an explicit source range, "
  253|   743k|                  "or use scn::scan with a FILE* directly.");
  254|   743k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   743k|                  "\n"
  256|   743k|                  "Unsupported range type given as input to a scanning "
  257|   743k|                  "function.\n"
  258|   743k|                  "In order to be scannable, a range needs to satisfy "
  259|   743k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   743k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   743k|                  "\n"
  262|   743k|                  "Unsupported range type given as input to a scanning "
  263|   743k|                  "function.\n"
  264|   743k|                  "A range needs to model forward_range and have a valid "
  265|   743k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   743k|                  "Examples of scannable ranges are std::string, "
  267|   743k|                  "std::string_view, "
  268|   743k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   743k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   743k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   743k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   743k|{
  196|   743k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   743k|        return file_marker_found{};
  198|   743k|    }
  199|   743k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   743k|        if constexpr (ranges::input_range<Range>) {
  201|   743k|            return insufficient_range{};
  202|   743k|        }
  203|   743k|        else {
  204|   743k|            return invalid_input_range{};
  205|   743k|        }
  206|   743k|    }
  207|   743k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   743k|        return invalid_char_type{};
  209|   743k|    }
  210|   743k|    else {
  211|   743k|        return make_forward_scan_buffer(r);
  212|   743k|    }
  213|   743k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  5.44M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  2.76M|    {
   45|  2.76M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  2.76M|    {
   66|  2.76M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.76M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.76M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.76M|        do_check_arg_id(id);
   74|  2.76M|        return id;
   75|  2.76M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  2.76M|{
  210|  2.76M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.76M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.76M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  2.61M|    {
   61|  2.61M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.61M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  5.38M|    {
   50|  5.38M|        return m_format.data();
   51|  5.38M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  2.92M|    {
   45|  2.92M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  2.92M|    {
   66|  2.92M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  2.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.92M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  2.92M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  2.92M|        do_check_arg_id(id);
   74|  2.92M|        return id;
   75|  2.92M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  2.92M|{
  210|  2.92M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  2.92M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  2.92M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  2.66M|    {
   61|  2.66M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.66M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  5.59M|    {
   50|  5.59M|        return m_format.data();
   51|  5.59M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  9.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  6.57M|    {
  482|  6.57M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  6.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  6.57M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  6.57M|    {
  473|  6.57M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  6.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  6.57M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.15M|    {
  482|  3.15M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.15M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  3.15M|    {
  473|  3.15M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.15M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   649k|    {
  594|   649k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   649k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   649k|    {
  564|   649k|        return ranges::prev(it);
  565|   649k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.12M|    {
  482|  2.12M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.12M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.12M|    {
  473|  2.12M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.12M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.42M|    {
  513|  2.42M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.42M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.42M|    {
  505|  2.42M|        return ranges::next(it, n);
  506|  2.42M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  2.27M|    {
  549|  2.27M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  2.27M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  2.27M|    {
  541|  2.27M|        return ranges::distance(lhs, rhs);
  542|  2.27M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  1.14M|    {
  513|  1.14M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.14M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  1.14M|    {
  498|  1.14M|        it.batch_advance(n);
  499|  1.14M|        return it;
  500|  1.14M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   123k|    {
  549|   123k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   123k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   123k|    {
  534|   123k|        return rhs.position() - lhs.position();
  535|   123k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.99M|    {
  482|  1.99M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.99M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  1.99M|    {
  473|  1.99M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.99M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   575k|    {
  594|   575k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   575k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   575k|    {
  564|   575k|        return ranges::prev(it);
  565|   575k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.11M|    {
  513|  2.11M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.11M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.11M|    {
  505|  2.11M|        return ranges::next(it, n);
  506|  2.11M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.98M|    {
  549|  1.98M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.98M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.98M|    {
  541|  1.98M|        return ranges::distance(lhs, rhs);
  542|  1.98M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  2.03M|    {
  513|  2.03M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.03M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  2.03M|    {
  498|  2.03M|        it.batch_advance(n);
  499|  2.03M|        return it;
  500|  2.03M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   218k|    {
  549|   218k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   218k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   218k|    {
  534|   218k|        return rhs.position() - lhs.position();
  535|   218k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  3.07M|{
  343|  3.07M|    return {ranges::next(ranges::begin(source), n),
  344|  3.07M|            make_vscan_result_range_end(source)};
  345|  3.07M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  3.07M|{
  330|  3.07M|    return ranges::end(source);
  331|  3.07M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   422k|    {
  253|   422k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  3.07M|    {
  104|  3.07M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|   858k|    {
   39|   858k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  3.07M|    {
  121|  3.07M|        return ranges::begin(m_range);
  122|  3.07M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   417k|    {
  253|   417k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|   860k|    {
   39|   860k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   607k|    {
  253|   607k|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  1.20M|    {
   39|  1.20M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   499k|    {
  253|   499k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|  1.01M|    {
   39|  1.01M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   622k|    {
  253|   622k|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  1.23M|    {
   39|  1.23M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   504k|    {
  253|   504k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|  1.02M|    {
   39|  1.02M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   160k|{
  343|   160k|    return {ranges::next(ranges::begin(source), n),
  344|   160k|            make_vscan_result_range_end(source)};
  345|   160k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   160k|{
  330|   160k|    return ranges::end(source);
  331|   160k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  26.6k|    {
  253|  26.6k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   160k|    {
  104|   160k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   160k|    {
  121|   160k|        return ranges::begin(m_range);
  122|   160k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  26.6k|    {
  253|  26.6k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  26.6k|    {
  253|  26.6k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  26.6k|    {
  253|  26.6k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  26.6k|    {
  253|  26.6k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  26.6k|    {
  253|  26.6k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.69M|{
  343|  2.69M|    return {ranges::next(ranges::begin(source), n),
  344|  2.69M|            make_vscan_result_range_end(source)};
  345|  2.69M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.69M|{
  330|  2.69M|    return ranges::end(source);
  331|  2.69M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   362k|    {
  253|   362k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.69M|    {
  104|  2.69M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.69M|    {
  121|  2.69M|        return ranges::begin(m_range);
  122|  2.69M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   369k|    {
  253|   369k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   527k|    {
  253|   527k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   443k|    {
  253|   443k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   540k|    {
  253|   540k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   449k|    {
  253|   449k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   284k|{
  343|   284k|    return {ranges::next(ranges::begin(source), n),
  344|   284k|            make_vscan_result_range_end(source)};
  345|   284k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   284k|{
  330|   284k|    return ranges::end(source);
  331|   284k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  47.3k|    {
  253|  47.3k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   284k|    {
  104|   284k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   284k|    {
  121|   284k|        return ranges::begin(m_range);
  122|   284k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  47.3k|    {
  253|  47.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  47.3k|    {
  253|  47.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  47.3k|    {
  253|  47.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  47.3k|    {
  253|  47.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  47.3k|    {
  253|  47.3k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   209k|{
  117|   209k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   209k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   209k|{
   77|   209k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   209k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   209k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   209k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   209k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   419k|{
   55|   419k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 378k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|   378k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   378k|    static_cast<    \
  |  |  247|   378k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   378k|    static_cast<    \
  |  |  247|   378k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   419k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   209k|{
  201|   209k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   209k|                                                      format, {});
  203|   209k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   209k|{
  163|   209k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   209k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   209k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   209k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   209k|    static_cast<    \
  |  |  247|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   209k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  45.5k|{
  248|  45.5k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  45.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  45.5k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  45.5k|{
  229|  45.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  45.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  45.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 43.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  45.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  43.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  43.4k|    static_cast<    \
  |  |  247|  43.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  43.4k|    static_cast<    \
  |  |  247|  43.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  45.5k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   208k|{
  117|   208k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   208k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   208k|{
   77|   208k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   208k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   208k|    static_cast<    \
  |  |  247|   208k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   208k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   208k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   208k|    static_cast<    \
  |  |  247|   208k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   208k|    static_cast<    \
  |  |  247|   208k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   208k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   417k|{
   55|   417k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 376k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|   376k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   376k|    static_cast<    \
  |  |  247|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   376k|    static_cast<    \
  |  |  247|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   417k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   208k|{
  201|   208k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   208k|                                                      format, {});
  203|   208k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   208k|{
  163|   208k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   208k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   208k|    static_cast<    \
  |  |  247|   208k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   208k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   208k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   208k|    static_cast<    \
  |  |  247|   208k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   208k|    static_cast<    \
  |  |  247|   208k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   208k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  43.0k|{
  248|  43.0k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  43.0k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  43.0k|{
  229|  43.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  43.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  43.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  43.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  43.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 40.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  43.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  40.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  40.9k|    static_cast<    \
  |  |  247|  40.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  40.9k|    static_cast<    \
  |  |  247|  40.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  43.0k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   296k|{
  117|   296k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   296k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   296k|{
   77|   296k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   296k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   296k|    static_cast<    \
  |  |  247|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   296k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   296k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   296k|    static_cast<    \
  |  |  247|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   296k|    static_cast<    \
  |  |  247|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   296k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   592k|{
   55|   592k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   592k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 551k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|   551k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   551k|    static_cast<    \
  |  |  247|   551k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   551k|    static_cast<    \
  |  |  247|   551k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   592k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   296k|{
  201|   296k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   296k|                                                      format, {});
  203|   296k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   296k|{
  163|   296k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   296k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   296k|    static_cast<    \
  |  |  247|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   296k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   296k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   296k|    static_cast<    \
  |  |  247|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   296k|    static_cast<    \
  |  |  247|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   296k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  58.3k|{
  248|  58.3k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  58.3k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  58.3k|{
  229|  58.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  58.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  58.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  58.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  58.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 56.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  58.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  56.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  56.2k|    static_cast<    \
  |  |  247|  56.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  56.2k|    static_cast<    \
  |  |  247|  56.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  58.3k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   246k|{
  117|   246k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   246k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   246k|{
   77|   246k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   246k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   246k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   246k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   246k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   493k|{
   55|   493k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 452k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|   452k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   452k|    static_cast<    \
  |  |  247|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   452k|    static_cast<    \
  |  |  247|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   493k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   246k|{
  201|   246k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   246k|                                                      format, {});
  203|   246k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   246k|{
  163|   246k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   246k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   246k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   246k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   246k|    static_cast<    \
  |  |  247|   246k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   246k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  48.3k|{
  248|  48.3k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  48.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  48.3k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  48.3k|{
  229|  48.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  48.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  48.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 46.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  48.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  46.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  46.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  46.3k|    static_cast<    \
  |  |  247|  46.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  46.3k|    static_cast<    \
  |  |  247|  46.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  48.3k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   302k|{
  117|   302k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   302k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   302k|{
   77|   302k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   302k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   302k|    static_cast<    \
  |  |  247|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   302k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   302k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   302k|    static_cast<    \
  |  |  247|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   302k|    static_cast<    \
  |  |  247|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   302k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   605k|{
   55|   605k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   605k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 564k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|   564k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   564k|    static_cast<    \
  |  |  247|   564k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   564k|    static_cast<    \
  |  |  247|   564k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   605k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   302k|{
  201|   302k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   302k|                                                      format, {});
  203|   302k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   302k|{
  163|   302k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   302k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   302k|    static_cast<    \
  |  |  247|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   302k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   302k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   302k|    static_cast<    \
  |  |  247|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   302k|    static_cast<    \
  |  |  247|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   302k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  59.6k|{
  248|  59.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  59.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  59.6k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  59.6k|{
  229|  59.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  59.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  59.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 57.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  59.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  57.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  57.5k|    static_cast<    \
  |  |  247|  57.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  57.5k|    static_cast<    \
  |  |  247|  57.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  59.6k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   249k|{
  117|   249k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   249k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   249k|{
   77|   249k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   249k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   249k|    static_cast<    \
  |  |  247|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   249k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   249k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   249k|    static_cast<    \
  |  |  247|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   249k|    static_cast<    \
  |  |  247|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   249k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   499k|{
   55|   499k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 458k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|   458k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   458k|    static_cast<    \
  |  |  247|   458k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   458k|    static_cast<    \
  |  |  247|   458k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   499k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   249k|{
  201|   249k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   249k|                                                      format, {});
  203|   249k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   249k|{
  163|   249k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   249k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   249k|    static_cast<    \
  |  |  247|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   249k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   249k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   249k|    static_cast<    \
  |  |  247|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   249k|    static_cast<    \
  |  |  247|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   249k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  48.7k|{
  248|  48.7k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  48.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  48.7k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  48.7k|{
  229|  48.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  48.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  48.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 46.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  48.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  46.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  46.6k|    static_cast<    \
  |  |  247|  46.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  46.6k|    static_cast<    \
  |  |  247|  46.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  48.7k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  32.8k|{
  117|  32.8k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  32.8k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  32.8k|{
   77|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  32.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  32.8k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  65.6k|{
   55|  65.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 24.6k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|  24.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  65.6k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  32.8k|{
  201|  32.8k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  32.8k|                                                      format, {});
  203|  32.8k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  32.8k|{
  163|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  32.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  32.8k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.10k|{
  248|  4.10k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.10k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.10k|{
  229|  4.10k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.10k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 2.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.05k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.10k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  32.8k|{
  117|  32.8k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  32.8k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  32.8k|{
   77|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  32.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  32.8k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  65.6k|{
   55|  65.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 24.6k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|  24.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  65.6k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  32.8k|{
  201|  32.8k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  32.8k|                                                      format, {});
  203|  32.8k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  32.8k|{
  163|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  32.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  32.8k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.10k|{
  248|  4.10k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.10k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.10k|{
  229|  4.10k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.10k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 2.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.05k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.10k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  32.8k|{
  117|  32.8k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  32.8k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  32.8k|{
   77|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  32.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  32.8k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  65.6k|{
   55|  65.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 24.6k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|  24.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  65.6k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  32.8k|{
  201|  32.8k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  32.8k|                                                      format, {});
  203|  32.8k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  32.8k|{
  163|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  32.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  32.8k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.10k|{
  248|  4.10k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.10k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.10k|{
  229|  4.10k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.10k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 2.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.05k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.10k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  32.8k|{
  117|  32.8k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  32.8k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  32.8k|{
   77|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  32.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  32.8k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  65.6k|{
   55|  65.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 24.6k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|  24.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  65.6k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  32.8k|{
  201|  32.8k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  32.8k|                                                      format, {});
  203|  32.8k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  32.8k|{
  163|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  32.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  32.8k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.10k|{
  248|  4.10k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.10k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.10k|{
  229|  4.10k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.10k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 2.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.05k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.10k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  32.8k|{
  117|  32.8k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  32.8k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  32.8k|{
   77|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  32.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  32.8k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  65.6k|{
   55|  65.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 24.6k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|  24.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  65.6k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  32.8k|{
  201|  32.8k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  32.8k|                                                      format, {});
  203|  32.8k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  32.8k|{
  163|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  32.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  32.8k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.10k|{
  248|  4.10k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.10k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.10k|{
  229|  4.10k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.10k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 2.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.05k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.10k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  32.8k|{
  117|  32.8k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  32.8k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  32.8k|{
   77|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  32.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  32.8k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  65.6k|{
   55|  65.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 41.0k, False: 24.6k]
  |  |  ------------------
  ------------------
   56|  41.0k|        return unexpected(result.error());
   57|  41.0k|    }
   58|  24.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  24.6k|    static_cast<    \
  |  |  247|  24.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  65.6k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  32.8k|{
  201|  32.8k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  32.8k|                                                      format, {});
  203|  32.8k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  32.8k|{
  163|  32.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  32.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  32.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  32.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  32.8k|    static_cast<    \
  |  |  247|  32.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  32.8k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.10k|{
  248|  4.10k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.10k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.10k|{
  229|  4.10k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.10k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.05k, False: 2.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.05k|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.05k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.05k|    static_cast<    \
  |  |  247|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.10k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   198k|{
   77|   198k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   198k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   198k|    static_cast<    \
  |  |  247|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   198k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   198k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   198k|    static_cast<    \
  |  |  247|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   198k|    static_cast<    \
  |  |  247|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   198k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   397k|{
   55|   397k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 324k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|   324k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   324k|    static_cast<    \
  |  |  247|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   397k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   198k|{
  163|   198k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   198k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   198k|    static_cast<    \
  |  |  247|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   198k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   198k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   198k|    static_cast<    \
  |  |  247|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   198k|    static_cast<    \
  |  |  247|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   198k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  41.3k|{
  229|  41.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  41.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 37.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  37.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  37.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  37.7k|    static_cast<    \
  |  |  247|  37.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  37.7k|    static_cast<    \
  |  |  247|  37.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  41.3k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   202k|{
   77|   202k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   202k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   202k|    static_cast<    \
  |  |  247|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   202k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   202k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   202k|    static_cast<    \
  |  |  247|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   202k|    static_cast<    \
  |  |  247|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   202k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   405k|{
   55|   405k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 333k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|   333k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   333k|    static_cast<    \
  |  |  247|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   333k|    static_cast<    \
  |  |  247|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   405k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   202k|{
  163|   202k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   202k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   202k|    static_cast<    \
  |  |  247|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   202k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   202k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   202k|    static_cast<    \
  |  |  247|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   202k|    static_cast<    \
  |  |  247|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   202k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  39.9k|{
  229|  39.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  39.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  39.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 36.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  39.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  36.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  36.2k|    static_cast<    \
  |  |  247|  36.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  36.2k|    static_cast<    \
  |  |  247|  36.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  39.9k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   275k|{
   77|   275k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   275k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   275k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   275k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   275k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   550k|{
   55|   550k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   550k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 478k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|   478k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   478k|    static_cast<    \
  |  |  247|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   478k|    static_cast<    \
  |  |  247|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   550k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   275k|{
  163|   275k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   275k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   275k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   275k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   275k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  52.9k|{
  229|  52.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  52.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  52.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 49.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  49.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.2k|    static_cast<    \
  |  |  247|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  49.2k|    static_cast<    \
  |  |  247|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  52.9k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   237k|{
   77|   237k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   237k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   237k|    static_cast<    \
  |  |  247|   237k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   237k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   237k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   237k|    static_cast<    \
  |  |  247|   237k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   237k|    static_cast<    \
  |  |  247|   237k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   237k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   475k|{
   55|   475k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 402k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|   402k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   402k|    static_cast<    \
  |  |  247|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   402k|    static_cast<    \
  |  |  247|   402k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   475k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   237k|{
  163|   237k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   237k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   237k|    static_cast<    \
  |  |  247|   237k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   237k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   237k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   237k|    static_cast<    \
  |  |  247|   237k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   237k|    static_cast<    \
  |  |  247|   237k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   237k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  45.0k|{
  229|  45.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  45.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  45.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  45.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  41.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.3k|    static_cast<    \
  |  |  247|  41.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  45.0k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   281k|{
   77|   281k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   281k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   281k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   281k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   281k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   562k|{
   55|   562k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   562k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 489k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|   489k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   489k|    static_cast<    \
  |  |  247|   489k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   489k|    static_cast<    \
  |  |  247|   489k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   562k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   281k|{
  163|   281k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   281k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   281k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   281k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   281k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  54.0k|{
  229|  54.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  54.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  54.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 50.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  54.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  50.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  50.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  50.4k|    static_cast<    \
  |  |  247|  50.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  50.4k|    static_cast<    \
  |  |  247|  50.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  54.0k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   240k|{
   77|   240k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   240k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   240k|    static_cast<    \
  |  |  247|   240k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   240k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   240k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   240k|    static_cast<    \
  |  |  247|   240k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   240k|    static_cast<    \
  |  |  247|   240k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   240k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   480k|{
   55|   480k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 407k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|   407k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   407k|    static_cast<    \
  |  |  247|   407k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   407k|    static_cast<    \
  |  |  247|   407k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   480k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   240k|{
  163|   240k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   240k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   240k|    static_cast<    \
  |  |  247|   240k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   240k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   240k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   240k|    static_cast<    \
  |  |  247|   240k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   240k|    static_cast<    \
  |  |  247|   240k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   240k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  45.3k|{
  229|  45.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  45.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  45.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 41.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  45.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  41.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.6k|    static_cast<    \
  |  |  247|  41.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  41.6k|    static_cast<    \
  |  |  247|  41.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  45.3k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.2k|{
   77|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 43.7k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|  43.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.2k|{
  163|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.2k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.28k|{
  229|  7.28k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.28k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 3.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.64k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.28k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.2k|{
   77|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 43.7k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|  43.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.2k|{
  163|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.2k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.28k|{
  229|  7.28k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.28k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 3.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.64k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.28k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.2k|{
   77|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 43.7k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|  43.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.2k|{
  163|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.2k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.28k|{
  229|  7.28k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.28k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 3.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.64k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.28k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.2k|{
   77|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 43.7k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|  43.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.2k|{
  163|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.2k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.28k|{
  229|  7.28k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.28k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 3.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.64k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.28k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.2k|{
   77|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 43.7k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|  43.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.2k|{
  163|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.2k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.28k|{
  229|  7.28k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.28k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 3.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.64k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.28k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.2k|{
   77|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.8k, False: 43.7k]
  |  |  ------------------
  ------------------
   56|  72.8k|        return unexpected(result.error());
   57|  72.8k|    }
   58|  43.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  43.7k|    static_cast<    \
  |  |  247|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.2k|{
  163|  58.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.2k|    static_cast<    \
  |  |  247|  58.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.2k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  7.28k|{
  229|  7.28k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  7.28k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.64k, False: 3.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.64k|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  3.64k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  3.64k|    static_cast<    \
  |  |  247|  3.64k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  7.28k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   418k|{
  486|   418k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   418k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   418k|    {
  378|   418k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   418k|    {
  360|   418k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   418k|    {
  129|   418k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   418k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   690k|    {
  382|   690k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.13k, False: 689k]
  ------------------
  383|  1.13k|            return false;
  384|  1.13k|        }
  385|   689k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 344k, False: 344k]
  ------------------
  386|   344k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   344k|                                          this->m_current_view.begin(),
  388|   344k|                                          this->m_current_view.end());
  389|   344k|        }
  390|   689k|        m_latest = *m_cursor;
  391|   689k|        ++m_cursor;
  392|   689k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   689k|        return true;
  394|   690k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   418k|    {
   49|   418k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   418k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   418k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   743k|{
  486|   743k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   743k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   743k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   743k|    {
  378|   743k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   743k|    {
  360|   743k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   743k|    {
  129|   743k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   743k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.50M|    {
  382|  1.50M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.43k, False: 1.50M]
  ------------------
  383|  1.43k|            return false;
  384|  1.43k|        }
  385|  1.50M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 895k, False: 611k]
  ------------------
  386|   895k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   895k|                                          this->m_current_view.begin(),
  388|   895k|                                          this->m_current_view.end());
  389|   895k|        }
  390|  1.50M|        m_latest = *m_cursor;
  391|  1.50M|        ++m_cursor;
  392|  1.50M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.50M|        return true;
  394|  1.50M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   743k|    {
   49|   743k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   743k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   743k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  21.7M|    {
  173|  21.7M|        return m_end == nullptr;
  174|  21.7M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   960k|    {
  189|   960k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 960k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   960k|        return parent()->get_segment_starting_at(position());
  195|   960k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  11.2M|    {
  183|  11.2M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  11.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  11.2M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   960k|    {
   79|   960k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   960k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 135k, False: 824k]
  |  |  ------------------
  ------------------
   80|   960k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   135k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   135k|        }
   83|   824k|        const auto start = pos - m_putback_buffer.size();
   84|   824k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   824k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   824k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   960k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   640k|    {
  178|   640k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   640k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  2.15M|    {
  168|  2.15M|        return m_position;
  169|  2.15M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|  1.25M|    {
  101|  1.25M|        return m_is_contiguous;
  102|  1.25M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  43.5M|    {
  173|  43.5M|        return m_end == nullptr;
  174|  43.5M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  1.70M|    {
  189|  1.70M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.70M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.70M|        return parent()->get_segment_starting_at(position());
  195|  1.70M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  22.8M|    {
  183|  22.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  22.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  22.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  22.8M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  1.70M|    {
   79|  1.70M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 240k, False: 1.46M]
  |  |  ------------------
  ------------------
   80|  1.70M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   240k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   240k|        }
   83|  1.46M|        const auto start = pos - m_putback_buffer.size();
   84|  1.46M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.70M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  1.13M|    {
  178|  1.13M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  1.13M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  3.82M|    {
  168|  3.82M|        return m_position;
  169|  3.82M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  2.22M|    {
  101|  2.22M|        return m_is_contiguous;
  102|  2.22M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   418k|{
  322|   418k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 418k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   418k|    return ranges::subrange{forward_iterator{this, 0},
  327|   418k|                            ranges_std::default_sentinel};
  328|   418k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   418k|    {
  155|   418k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   418k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   418k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   418k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   418k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   418k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   418k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.60M|    {
  258|  1.60M|        return x.is_at_end();
  259|  1.60M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  2.10M|    {
  302|  2.10M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 2.10M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  2.10M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 2.10M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  2.10M|        return !read_at_position();
  309|  2.10M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  5.60M|    {
  282|  5.60M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  5.60M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 5.60M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  5.60M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  5.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.91M, False: 690k]
  |  |  ------------------
  ------------------
  289|  4.91M|            return true;
  290|  4.91M|        }
  291|       |
  292|  1.37M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 690k, False: 689k]
  ------------------
  293|   690k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.13k, False: 689k]
  ------------------
  294|  1.13k|                return false;
  295|  1.13k|            }
  296|   690k|        }
  297|   689k|        return true;
  298|   690k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  7.62M|    {
   59|  7.62M|        return m_putback_buffer.size() + m_current_view.size();
   60|  7.62M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   504k|    {
  269|   504k|        return !x.is_at_end();
  270|   504k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  2.63M|    {
  217|  2.63M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.63M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.63M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.63M|        auto res = read_at_position();
  226|  2.63M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  2.63M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  2.63M|    {
   90|  2.63M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  2.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.44M, False: 185k]
  |  |  ------------------
  ------------------
   91|  2.63M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  2.44M|            return m_putback_buffer[pos];
   93|  2.44M|        }
   94|   185k|        const auto start = pos - m_putback_buffer.size();
   95|   185k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  2.63M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   861k|    {
  203|   861k|        ++m_position;
  204|   861k|        std::ignore = read_at_position();
  205|   861k|        return *this;
  206|   861k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   910k|    {
  252|   910k|        return !(lhs == rhs);
  253|   910k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|  1.20M|    {
  247|  1.20M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 1.20M, False: 0]
  |  Branch (247:46): [True: 295k, False: 910k]
  ------------------
  248|  1.20M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|  1.14M|    {
  232|  1.14M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  1.14M|        return *this;
  235|  1.14M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   258k|    {
   54|   258k|        sync(0);
   55|   258k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   743k|{
  322|   743k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 743k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   743k|    return ranges::subrange{forward_iterator{this, 0},
  327|   743k|                            ranges_std::default_sentinel};
  328|   743k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   743k|    {
  155|   743k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   743k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   743k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   743k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   743k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   743k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   743k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.84M|    {
  258|  2.84M|        return x.is_at_end();
  259|  2.84M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  4.02M|    {
  302|  4.02M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 4.02M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  4.02M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 4.02M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  4.02M|        return !read_at_position();
  309|  4.02M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  11.3M|    {
  282|  11.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  11.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  11.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 11.3M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  11.3M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  11.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 9.85M, False: 1.50M]
  |  |  ------------------
  ------------------
  289|  9.85M|            return true;
  290|  9.85M|        }
  291|       |
  292|  3.01M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.50M, False: 1.50M]
  ------------------
  293|  1.50M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.43k, False: 1.50M]
  ------------------
  294|  1.43k|                return false;
  295|  1.43k|            }
  296|  1.50M|        }
  297|  1.50M|        return true;
  298|  1.50M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  15.5M|    {
   59|  15.5M|        return m_putback_buffer.size() + m_current_view.size();
   60|  15.5M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.18M|    {
  269|  1.18M|        return !x.is_at_end();
  270|  1.18M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  5.28M|    {
  217|  5.28M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  5.28M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 5.28M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  5.28M|        auto res = read_at_position();
  226|  5.28M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  5.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  5.28M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  5.28M|    {
   90|  5.28M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  5.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.58M, False: 700k]
  |  |  ------------------
  ------------------
   91|  5.28M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  4.58M|            return m_putback_buffer[pos];
   93|  4.58M|        }
   94|   700k|        const auto start = pos - m_putback_buffer.size();
   95|   700k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   700k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   700k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  5.28M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  2.05M|    {
  203|  2.05M|        ++m_position;
  204|  2.05M|        std::ignore = read_at_position();
  205|  2.05M|        return *this;
  206|  2.05M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  1.85M|    {
  252|  1.85M|        return !(lhs == rhs);
  253|  1.85M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  2.38M|    {
  247|  2.38M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 2.38M, False: 0]
  |  Branch (247:46): [True: 524k, False: 1.85M]
  ------------------
  248|  2.38M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  2.03M|    {
  232|  2.03M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  2.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  2.03M|        return *this;
  235|  2.03M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   459k|    {
   54|   459k|        sync(0);
   55|   459k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   134k|{
   72|   134k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   134k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   134k|    }
   75|   134k|    else if constexpr (sizeof(U) == 2) {
   76|   134k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   134k|    }
   78|   134k|    else {
   79|       |        // utf-32
   80|   134k|        static_assert(sizeof(U) == 4);
   81|   134k|        SCN_UNUSED(ch);
   82|   134k|        return 1;
   83|   134k|    }
   84|   134k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   134k|{
   36|   134k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   134k|    SCN_GCC_COMPAT_PUSH
   39|   134k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   134k|    constexpr char lengths[] =
   41|   134k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   134k|        "\1\1\1\1\1\1\1\1"
   43|   134k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   134k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   134k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   134k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   134k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   134k|    SCN_GCC_COMPAT_POP
   50|   134k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  45.2M|{
   72|  45.2M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  45.2M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  45.2M|    }
   75|  45.2M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  45.2M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  45.2M|    }
   78|  45.2M|    else {
   79|       |        // utf-32
   80|  45.2M|        static_assert(sizeof(U) == 4);
   81|  45.2M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  45.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  45.2M|        return 1;
   83|  45.2M|    }
   84|  45.2M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   910k|{
   36|   910k|#define SCN_VISIT(Type)                                         \
   37|   910k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   910k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   910k|    }                                                           \
   40|   910k|    else {                                                      \
   41|   910k|        return vis(monostate_val);                              \
   42|   910k|    }
   43|       |
   44|   910k|    monostate monostate_val{};
   45|       |
   46|   910k|    switch (arg.m_type) {
   47|   136k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 136k, False: 774k]
  ------------------
   48|   136k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   136k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   136k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   136k|    }                                                           \
  |  |   40|   136k|    else {                                                      \
  |  |   41|   136k|        return vis(monostate_val);                              \
  |  |   42|   136k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 910k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   175k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 175k, False: 735k]
  ------------------
   52|   175k|            SCN_VISIT(int);
  ------------------
  |  |   37|   175k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   175k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   175k|    }                                                           \
  |  |   40|   175k|    else {                                                      \
  |  |   41|   175k|        return vis(monostate_val);                              \
  |  |   42|   175k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 910k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   178k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 178k, False: 732k]
  ------------------
   56|   178k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   178k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   178k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   178k|    }                                                           \
  |  |   40|   178k|    else {                                                      \
  |  |   41|   178k|        return vis(monostate_val);                              \
  |  |   42|   178k|    }
  ------------------
   57|   129k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 129k, False: 781k]
  ------------------
   58|   129k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   129k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   129k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   129k|    }                                                           \
  |  |   40|   129k|    else {                                                      \
  |  |   41|   129k|        return vis(monostate_val);                              \
  |  |   42|   129k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 910k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   145k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 145k, False: 765k]
  ------------------
   62|   145k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   145k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   145k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   145k|    }                                                           \
  |  |   40|   145k|    else {                                                      \
  |  |   41|   145k|        return vis(monostate_val);                              \
  |  |   42|   145k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 910k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   146k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 146k, False: 764k]
  ------------------
   66|   146k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   146k|    }                                                           \
  |  |   40|   146k|    else {                                                      \
  |  |   41|   146k|        return vis(monostate_val);                              \
  |  |   42|   146k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 910k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 910k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 910k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 910k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 910k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 910k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 910k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 910k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 910k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 910k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 910k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 910k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 910k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 910k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 910k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 910k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 910k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   910k|            SCN_CLANG_POP
  114|   910k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   910k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  73.8k|{
   36|  73.8k|#define SCN_VISIT(Type)                                         \
   37|  73.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  73.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  73.8k|    }                                                           \
   40|  73.8k|    else {                                                      \
   41|  73.8k|        return vis(monostate_val);                              \
   42|  73.8k|    }
   43|       |
   44|  73.8k|    monostate monostate_val{};
   45|       |
   46|  73.8k|    switch (arg.m_type) {
   47|  12.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 12.3k, False: 61.5k]
  ------------------
   48|  12.3k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  12.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.3k|    }                                                           \
  |  |   40|  12.3k|    else {                                                      \
  |  |   41|  12.3k|        return vis(monostate_val);                              \
  |  |   42|  12.3k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 73.8k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  12.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 12.3k, False: 61.5k]
  ------------------
   52|  12.3k|            SCN_VISIT(int);
  ------------------
  |  |   37|  12.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.3k|    }                                                           \
  |  |   40|  12.3k|    else {                                                      \
  |  |   41|  12.3k|        return vis(monostate_val);                              \
  |  |   42|  12.3k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 73.8k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  12.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 12.3k, False: 61.5k]
  ------------------
   56|  12.3k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  12.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.3k|    }                                                           \
  |  |   40|  12.3k|    else {                                                      \
  |  |   41|  12.3k|        return vis(monostate_val);                              \
  |  |   42|  12.3k|    }
  ------------------
   57|  12.3k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 12.3k, False: 61.5k]
  ------------------
   58|  12.3k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  12.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.3k|    }                                                           \
  |  |   40|  12.3k|    else {                                                      \
  |  |   41|  12.3k|        return vis(monostate_val);                              \
  |  |   42|  12.3k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 73.8k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  12.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 12.3k, False: 61.5k]
  ------------------
   62|  12.3k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  12.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.3k|    }                                                           \
  |  |   40|  12.3k|    else {                                                      \
  |  |   41|  12.3k|        return vis(monostate_val);                              \
  |  |   42|  12.3k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 73.8k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  12.3k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 12.3k, False: 61.5k]
  ------------------
   66|  12.3k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  12.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.3k|    }                                                           \
  |  |   40|  12.3k|    else {                                                      \
  |  |   41|  12.3k|        return vis(monostate_val);                              \
  |  |   42|  12.3k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 73.8k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 73.8k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 73.8k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 73.8k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 73.8k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 73.8k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 73.8k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 73.8k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 73.8k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 73.8k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 73.8k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 73.8k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 73.8k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 73.8k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 73.8k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 73.8k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 73.8k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  73.8k|            SCN_CLANG_POP
  114|  73.8k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  73.8k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.34M|{
   36|  2.34M|#define SCN_VISIT(Type)                                         \
   37|  2.34M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.34M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.34M|    }                                                           \
   40|  2.34M|    else {                                                      \
   41|  2.34M|        return vis(monostate_val);                              \
   42|  2.34M|    }
   43|       |
   44|  2.34M|    monostate monostate_val{};
   45|       |
   46|  2.34M|    switch (arg.m_type) {
   47|   316k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 316k, False: 2.03M]
  ------------------
   48|   316k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   316k|    }                                                           \
  |  |   40|   316k|    else {                                                      \
  |  |   41|   316k|        return vis(monostate_val);                              \
  |  |   42|   316k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.34M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   463k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 463k, False: 1.88M]
  ------------------
   52|   463k|            SCN_VISIT(int);
  ------------------
  |  |   37|   463k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   463k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   463k|    }                                                           \
  |  |   40|   463k|    else {                                                      \
  |  |   41|   463k|        return vis(monostate_val);                              \
  |  |   42|   463k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.34M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   474k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 474k, False: 1.87M]
  ------------------
   56|   474k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   474k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   474k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   474k|    }                                                           \
  |  |   40|   474k|    else {                                                      \
  |  |   41|   474k|        return vis(monostate_val);                              \
  |  |   42|   474k|    }
  ------------------
   57|   318k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 318k, False: 2.02M]
  ------------------
   58|   318k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   318k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   318k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   318k|    }                                                           \
  |  |   40|   318k|    else {                                                      \
  |  |   41|   318k|        return vis(monostate_val);                              \
  |  |   42|   318k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.34M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   384k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 384k, False: 1.96M]
  ------------------
   62|   384k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   384k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   384k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   384k|    }                                                           \
  |  |   40|   384k|    else {                                                      \
  |  |   41|   384k|        return vis(monostate_val);                              \
  |  |   42|   384k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.34M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   389k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 389k, False: 1.95M]
  ------------------
   66|   389k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   389k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   389k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   389k|    }                                                           \
  |  |   40|   389k|    else {                                                      \
  |  |   41|   389k|        return vis(monostate_val);                              \
  |  |   42|   389k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.34M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.34M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.34M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.34M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.34M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.34M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.34M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.34M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.34M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.34M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.34M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.34M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.34M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.34M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.34M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.34M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.34M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.34M|            SCN_CLANG_POP
  114|  2.34M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.34M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   270k|{
   36|   270k|#define SCN_VISIT(Type)                                         \
   37|   270k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   270k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   270k|    }                                                           \
   40|   270k|    else {                                                      \
   41|   270k|        return vis(monostate_val);                              \
   42|   270k|    }
   43|       |
   44|   270k|    monostate monostate_val{};
   45|       |
   46|   270k|    switch (arg.m_type) {
   47|  45.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 45.1k, False: 225k]
  ------------------
   48|  45.1k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  45.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  45.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  45.1k|    }                                                           \
  |  |   40|  45.1k|    else {                                                      \
  |  |   41|  45.1k|        return vis(monostate_val);                              \
  |  |   42|  45.1k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 270k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  45.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 45.1k, False: 225k]
  ------------------
   52|  45.1k|            SCN_VISIT(int);
  ------------------
  |  |   37|  45.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  45.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  45.1k|    }                                                           \
  |  |   40|  45.1k|    else {                                                      \
  |  |   41|  45.1k|        return vis(monostate_val);                              \
  |  |   42|  45.1k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 270k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  45.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 45.1k, False: 225k]
  ------------------
   56|  45.1k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  45.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  45.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  45.1k|    }                                                           \
  |  |   40|  45.1k|    else {                                                      \
  |  |   41|  45.1k|        return vis(monostate_val);                              \
  |  |   42|  45.1k|    }
  ------------------
   57|  45.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 45.1k, False: 225k]
  ------------------
   58|  45.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  45.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  45.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  45.1k|    }                                                           \
  |  |   40|  45.1k|    else {                                                      \
  |  |   41|  45.1k|        return vis(monostate_val);                              \
  |  |   42|  45.1k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 270k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  45.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 45.1k, False: 225k]
  ------------------
   62|  45.1k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  45.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  45.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  45.1k|    }                                                           \
  |  |   40|  45.1k|    else {                                                      \
  |  |   41|  45.1k|        return vis(monostate_val);                              \
  |  |   42|  45.1k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 270k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  45.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 45.1k, False: 225k]
  ------------------
   66|  45.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  45.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  45.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  45.1k|    }                                                           \
  |  |   40|  45.1k|    else {                                                      \
  |  |   41|  45.1k|        return vis(monostate_val);                              \
  |  |   42|  45.1k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 270k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 270k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 270k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 270k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 270k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 270k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 270k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 270k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 270k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 270k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 270k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 270k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 270k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 270k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 270k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 270k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 270k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   270k|            SCN_CLANG_POP
  114|   270k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   270k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   835k|{
   36|   835k|#define SCN_VISIT(Type)                                         \
   37|   835k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   835k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   835k|    }                                                           \
   40|   835k|    else {                                                      \
   41|   835k|        return vis(monostate_val);                              \
   42|   835k|    }
   43|       |
   44|   835k|    monostate monostate_val{};
   45|       |
   46|   835k|    switch (arg.m_type) {
   47|   124k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 124k, False: 711k]
  ------------------
   48|   124k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   124k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   124k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   124k|    }                                                           \
  |  |   40|   124k|    else {                                                      \
  |  |   41|   124k|        return vis(monostate_val);                              \
  |  |   42|   124k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 835k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   158k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 158k, False: 677k]
  ------------------
   52|   158k|            SCN_VISIT(int);
  ------------------
  |  |   37|   158k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   158k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   158k|    }                                                           \
  |  |   40|   158k|    else {                                                      \
  |  |   41|   158k|        return vis(monostate_val);                              \
  |  |   42|   158k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 835k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   162k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 162k, False: 673k]
  ------------------
   56|   162k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   162k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   162k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   162k|    }                                                           \
  |  |   40|   162k|    else {                                                      \
  |  |   41|   162k|        return vis(monostate_val);                              \
  |  |   42|   162k|    }
  ------------------
   57|   119k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 119k, False: 716k]
  ------------------
   58|   119k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   119k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   119k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   119k|    }                                                           \
  |  |   40|   119k|    else {                                                      \
  |  |   41|   119k|        return vis(monostate_val);                              \
  |  |   42|   119k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 835k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   135k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 135k, False: 700k]
  ------------------
   62|   135k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   135k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   135k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   135k|    }                                                           \
  |  |   40|   135k|    else {                                                      \
  |  |   41|   135k|        return vis(monostate_val);                              \
  |  |   42|   135k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 835k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   135k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 135k, False: 699k]
  ------------------
   66|   135k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   135k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   135k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   135k|    }                                                           \
  |  |   40|   135k|    else {                                                      \
  |  |   41|   135k|        return vis(monostate_val);                              \
  |  |   42|   135k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 835k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 835k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 835k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 835k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 835k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 835k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 835k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 835k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 835k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 835k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 835k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 835k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 835k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 835k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 835k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 835k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 835k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   835k|            SCN_CLANG_POP
  114|   835k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   835k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.18M|{
   36|  2.18M|#define SCN_VISIT(Type)                                         \
   37|  2.18M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.18M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.18M|    }                                                           \
   40|  2.18M|    else {                                                      \
   41|  2.18M|        return vis(monostate_val);                              \
   42|  2.18M|    }
   43|       |
   44|  2.18M|    monostate monostate_val{};
   45|       |
   46|  2.18M|    switch (arg.m_type) {
   47|   293k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 293k, False: 1.89M]
  ------------------
   48|   293k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   293k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   293k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   293k|    }                                                           \
  |  |   40|   293k|    else {                                                      \
  |  |   41|   293k|        return vis(monostate_val);                              \
  |  |   42|   293k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.18M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   423k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 423k, False: 1.76M]
  ------------------
   52|   423k|            SCN_VISIT(int);
  ------------------
  |  |   37|   423k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   423k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   423k|    }                                                           \
  |  |   40|   423k|    else {                                                      \
  |  |   41|   423k|        return vis(monostate_val);                              \
  |  |   42|   423k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.18M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   432k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 432k, False: 1.75M]
  ------------------
   56|   432k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   432k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   432k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   432k|    }                                                           \
  |  |   40|   432k|    else {                                                      \
  |  |   41|   432k|        return vis(monostate_val);                              \
  |  |   42|   432k|    }
  ------------------
   57|   304k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 304k, False: 1.88M]
  ------------------
   58|   304k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   304k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   304k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   304k|    }                                                           \
  |  |   40|   304k|    else {                                                      \
  |  |   41|   304k|        return vis(monostate_val);                              \
  |  |   42|   304k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.18M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   363k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 363k, False: 1.82M]
  ------------------
   62|   363k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   363k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   363k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   363k|    }                                                           \
  |  |   40|   363k|    else {                                                      \
  |  |   41|   363k|        return vis(monostate_val);                              \
  |  |   42|   363k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.18M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   367k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 367k, False: 1.81M]
  ------------------
   66|   367k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   367k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   367k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   367k|    }                                                           \
  |  |   40|   367k|    else {                                                      \
  |  |   41|   367k|        return vis(monostate_val);                              \
  |  |   42|   367k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.18M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.18M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.18M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.18M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.18M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.18M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.18M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.18M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.18M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.18M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.18M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.18M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.18M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.18M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.18M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.18M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.18M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.18M|            SCN_CLANG_POP
  114|  2.18M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.18M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   131k|{
   36|   131k|#define SCN_VISIT(Type)                                         \
   37|   131k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   131k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   131k|    }                                                           \
   40|   131k|    else {                                                      \
   41|   131k|        return vis(monostate_val);                              \
   42|   131k|    }
   43|       |
   44|   131k|    monostate monostate_val{};
   45|       |
   46|   131k|    switch (arg.m_type) {
   47|  21.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 21.8k, False: 109k]
  ------------------
   48|  21.8k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  21.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.8k|    }                                                           \
  |  |   40|  21.8k|    else {                                                      \
  |  |   41|  21.8k|        return vis(monostate_val);                              \
  |  |   42|  21.8k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 131k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  21.8k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 21.8k, False: 109k]
  ------------------
   52|  21.8k|            SCN_VISIT(int);
  ------------------
  |  |   37|  21.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.8k|    }                                                           \
  |  |   40|  21.8k|    else {                                                      \
  |  |   41|  21.8k|        return vis(monostate_val);                              \
  |  |   42|  21.8k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 131k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  21.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 21.8k, False: 109k]
  ------------------
   56|  21.8k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  21.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.8k|    }                                                           \
  |  |   40|  21.8k|    else {                                                      \
  |  |   41|  21.8k|        return vis(monostate_val);                              \
  |  |   42|  21.8k|    }
  ------------------
   57|  21.8k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 21.8k, False: 109k]
  ------------------
   58|  21.8k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  21.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.8k|    }                                                           \
  |  |   40|  21.8k|    else {                                                      \
  |  |   41|  21.8k|        return vis(monostate_val);                              \
  |  |   42|  21.8k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 131k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  21.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 21.8k, False: 109k]
  ------------------
   62|  21.8k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  21.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.8k|    }                                                           \
  |  |   40|  21.8k|    else {                                                      \
  |  |   41|  21.8k|        return vis(monostate_val);                              \
  |  |   42|  21.8k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 131k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  21.8k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 21.8k, False: 109k]
  ------------------
   66|  21.8k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  21.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  21.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  21.8k|    }                                                           \
  |  |   40|  21.8k|    else {                                                      \
  |  |   41|  21.8k|        return vis(monostate_val);                              \
  |  |   42|  21.8k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 131k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 131k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 131k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 131k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 131k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 131k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 131k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 131k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 131k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 131k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 131k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 131k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 131k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 131k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 131k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 131k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 131k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   131k|            SCN_CLANG_POP
  114|   131k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   131k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   480k|{
   36|   480k|#define SCN_VISIT(Type)                                         \
   37|   480k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   480k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   480k|    }                                                           \
   40|   480k|    else {                                                      \
   41|   480k|        return vis(monostate_val);                              \
   42|   480k|    }
   43|       |
   44|   480k|    monostate monostate_val{};
   45|       |
   46|   480k|    switch (arg.m_type) {
   47|  80.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 80.1k, False: 400k]
  ------------------
   48|  80.1k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  80.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  80.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  80.1k|    }                                                           \
  |  |   40|  80.1k|    else {                                                      \
  |  |   41|  80.1k|        return vis(monostate_val);                              \
  |  |   42|  80.1k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 480k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  80.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 80.1k, False: 400k]
  ------------------
   52|  80.1k|            SCN_VISIT(int);
  ------------------
  |  |   37|  80.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  80.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  80.1k|    }                                                           \
  |  |   40|  80.1k|    else {                                                      \
  |  |   41|  80.1k|        return vis(monostate_val);                              \
  |  |   42|  80.1k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 480k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  80.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 80.1k, False: 400k]
  ------------------
   56|  80.1k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  80.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  80.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  80.1k|    }                                                           \
  |  |   40|  80.1k|    else {                                                      \
  |  |   41|  80.1k|        return vis(monostate_val);                              \
  |  |   42|  80.1k|    }
  ------------------
   57|  80.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 80.1k, False: 400k]
  ------------------
   58|  80.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  80.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  80.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  80.1k|    }                                                           \
  |  |   40|  80.1k|    else {                                                      \
  |  |   41|  80.1k|        return vis(monostate_val);                              \
  |  |   42|  80.1k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 480k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  80.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 80.1k, False: 400k]
  ------------------
   62|  80.1k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  80.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  80.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  80.1k|    }                                                           \
  |  |   40|  80.1k|    else {                                                      \
  |  |   41|  80.1k|        return vis(monostate_val);                              \
  |  |   42|  80.1k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 480k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  80.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 80.1k, False: 400k]
  ------------------
   66|  80.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  80.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  80.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  80.1k|    }                                                           \
  |  |   40|  80.1k|    else {                                                      \
  |  |   41|  80.1k|        return vis(monostate_val);                              \
  |  |   42|  80.1k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 480k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 480k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 480k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 480k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 480k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 480k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 480k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 480k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 480k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 480k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 480k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 480k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 480k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 480k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 480k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 480k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 480k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   480k|            SCN_CLANG_POP
  114|   480k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   480k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.51M|{
  174|  1.51M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.51M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.51M|{
  111|  1.51M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.51M|    auto result = vscan_impl(buffer, format, args);
  114|  1.51M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 123k, False: 1.39M]
  |  |  ------------------
  ------------------
  115|   123k|        return unexpected(result.error());
  116|   123k|    }
  117|  1.39M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.51M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.51M|{
  192|  1.51M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.51M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.51M|{
  127|  1.51M|#if !SCN_DISABLE_LOCALE
  128|  1.51M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.51M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.51M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.51M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.51M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 123k, False: 1.39M]
  |  |  ------------------
  ------------------
  135|   123k|        return unexpected(result.error());
  136|   123k|    }
  137|  1.39M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.51M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   303k|{
  205|   303k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   303k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   303k|{
  151|   303k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   303k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   303k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.3k, False: 291k]
  |  |  ------------------
  ------------------
  155|  12.3k|        return unexpected(result.error());
  156|  12.3k|    }
  157|   291k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   303k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   196k|{
  174|   196k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   196k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   196k|{
  111|   196k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   196k|    auto result = vscan_impl(buffer, format, args);
  114|   196k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 123k, False: 73.8k]
  |  |  ------------------
  ------------------
  115|   123k|        return unexpected(result.error());
  116|   123k|    }
  117|  73.8k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  73.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   196k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   196k|{
  192|   196k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   196k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   196k|{
  127|   196k|#if !SCN_DISABLE_LOCALE
  128|   196k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   196k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   196k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   196k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   196k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 123k, False: 73.8k]
  |  |  ------------------
  ------------------
  135|   123k|        return unexpected(result.error());
  136|   123k|    }
  137|  73.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  73.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   196k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  24.6k|{
  205|  24.6k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  24.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  24.6k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  24.6k|{
  151|  24.6k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  24.6k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  24.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.3k, False: 12.3k]
  |  |  ------------------
  ------------------
  155|  12.3k|        return unexpected(result.error());
  156|  12.3k|    }
  157|  12.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  24.6k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.43M|{
  111|  1.43M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.43M|    auto result = vscan_impl(buffer, format, args);
  114|  1.43M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 218k, False: 1.21M]
  |  |  ------------------
  ------------------
  115|   218k|        return unexpected(result.error());
  116|   218k|    }
  117|  1.21M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.43M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.43M|{
  127|  1.43M|#if !SCN_DISABLE_LOCALE
  128|  1.43M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.43M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.43M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.43M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.43M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 218k, False: 1.21M]
  |  |  ------------------
  ------------------
  135|   218k|        return unexpected(result.error());
  136|   218k|    }
  137|  1.21M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.43M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   278k|{
  151|   278k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   278k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   278k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.8k, False: 256k]
  |  |  ------------------
  ------------------
  155|  21.8k|        return unexpected(result.error());
  156|  21.8k|    }
  157|   256k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   278k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   349k|{
  111|   349k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   349k|    auto result = vscan_impl(buffer, format, args);
  114|   349k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 218k, False: 131k]
  |  |  ------------------
  ------------------
  115|   218k|        return unexpected(result.error());
  116|   218k|    }
  117|   131k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   349k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   349k|{
  127|   349k|#if !SCN_DISABLE_LOCALE
  128|   349k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   349k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   349k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   349k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   349k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 218k, False: 131k]
  |  |  ------------------
  ------------------
  135|   218k|        return unexpected(result.error());
  136|   218k|    }
  137|   131k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   349k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  43.7k|{
  151|  43.7k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  43.7k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  43.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.8k, False: 21.8k]
  |  |  ------------------
  ------------------
  155|  21.8k|        return unexpected(result.error());
  156|  21.8k|    }
  157|  21.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  43.7k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   198k|{
   90|   198k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   198k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  1.43M|{
   45|  1.43M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.43M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   198k|{
  125|   198k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   198k|                                                         format, {});
  127|   198k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  1.43M|{
   61|  1.43M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  1.43M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  41.3k|{
  159|  41.3k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  41.3k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   278k|{
   73|   278k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   278k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   202k|{
   90|   202k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   202k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   202k|{
  125|   202k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   202k|                                                         format, {});
  127|   202k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  39.9k|{
  159|  39.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  39.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  39.9k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   275k|{
   90|   275k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   275k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   275k|{
  125|   275k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   275k|                                                         format, {});
  127|   275k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  52.9k|{
  159|  52.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  52.9k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   237k|{
   90|   237k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   237k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   237k|{
  125|   237k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   237k|                                                         format, {});
  127|   237k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  45.0k|{
  159|  45.0k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  45.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  45.0k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   281k|{
   90|   281k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   281k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   281k|{
  125|   281k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   281k|                                                         format, {});
  127|   281k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  54.0k|{
  159|  54.0k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  54.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  54.0k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   240k|{
   90|   240k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   240k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   240k|{
  125|   240k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   240k|                                                         format, {});
  127|   240k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  45.3k|{
  159|  45.3k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  45.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  45.3k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.2k|{
   90|  58.2k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.2k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   349k|{
   45|   349k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   349k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.2k|{
  125|  58.2k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.2k|                                                         format, {});
  127|  58.2k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   349k|{
   61|   349k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   349k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.28k|{
  159|  7.28k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.28k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  43.7k|{
   73|  43.7k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  43.7k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.2k|{
   90|  58.2k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.2k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.2k|{
  125|  58.2k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.2k|                                                         format, {});
  127|  58.2k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.28k|{
  159|  7.28k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.28k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.2k|{
   90|  58.2k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.2k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.2k|{
  125|  58.2k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.2k|                                                         format, {});
  127|  58.2k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.28k|{
  159|  7.28k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.28k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.2k|{
   90|  58.2k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.2k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.2k|{
  125|  58.2k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.2k|                                                         format, {});
  127|  58.2k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.28k|{
  159|  7.28k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.28k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.2k|{
   90|  58.2k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.2k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.2k|{
  125|  58.2k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.2k|                                                         format, {});
  127|  58.2k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.28k|{
  159|  7.28k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.28k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.2k|{
   90|  58.2k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.2k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.2k|{
  125|  58.2k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.2k|                                                         format, {});
  127|  58.2k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  7.28k|{
  159|  7.28k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  7.28k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  3.82M|            {
 2693|  3.82M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.82M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  3.82M|            {
 2672|  3.82M|                return decay_copy(t.begin());
 2673|  3.82M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   107M|    {
 2606|   107M|        return std::forward<T>(t);
 2607|   107M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  6.57M|            {
 3178|  6.57M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  6.57M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  6.57M|            {
 3158|  6.57M|                return t.data();
 3159|  6.57M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  6.57M|    {
 6095|  6.57M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 20.6k, False: 6.54M]
  ------------------
 6096|  6.57M|                   ? nullptr
 6097|  6.57M|                   : std::addressof(*ranges::begin(derived()));
 6098|  6.57M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  6.57M|            {
 3127|  6.57M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  6.57M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  6.57M|            {
 3098|  6.57M|                return bool((std::forward<T>(t).empty()));
 3099|  6.57M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  15.6M|        {
 6454|  15.6M|            return data_.begin_ == data_.end_;
 6455|  15.6M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  13.1M|    {
 6049|  13.1M|        return static_cast<const D&>(*this);
 6050|  13.1M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  26.9M|            {
 2693|  26.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  26.9M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  26.9M|            {
 2672|  26.9M|                return decay_copy(t.begin());
 2673|  26.9M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  62.0M|        {
 6444|  62.0M|            return data_.begin_;
 6445|  62.0M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  6.57M|            {
 3038|  6.57M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  6.57M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  6.57M|            {
 3000|  6.57M|                return decay_copy(std::forward<T>(t).size());
 3001|  6.57M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  27.2M|    {
 2606|  27.2M|        return std::forward<T>(t);
 2607|  27.2M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  15.6M|        {
 6462|  15.6M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  15.6M|                return data_.size_;
 6464|  15.6M|            }
 6465|  15.6M|            else {
 6466|  15.6M|                return data_.end_ - data_.begin_;
 6467|  15.6M|            }
 6468|  15.6M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  11.3M|            {
 3788|  11.3M|                ranges::advance(x, n);
 3789|  11.3M|                return x;
 3790|  11.3M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  11.3M|            {
 3678|  11.3M|                fn::impl(i, n);
 3679|  11.3M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  11.3M|            {
 3562|  11.3M|                r += n;
 3563|  11.3M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  32.6M|            {
 2693|  32.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  32.6M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  32.6M|            {
 2672|  32.6M|                return decay_copy(t.begin());
 2673|  32.6M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  16.1M|            {
 2759|  16.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  16.1M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  16.1M|            {
 2739|  16.1M|                return decay_copy(std::forward<T>(t).end());
 2740|  16.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  41.2M|        {
 6449|  41.2M|            return data_.end_;
 6450|  41.2M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  6.89M|            {
 2759|  6.89M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  6.89M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  6.89M|            {
 2739|  6.89M|                return decay_copy(std::forward<T>(t).end());
 2740|  6.89M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  26.4M|        {
 6375|  26.4M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  26.4M|        {
 6294|  26.4M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   258k|            {
 2693|   258k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   258k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   258k|            {
 2672|   258k|                return decay_copy(t.begin());
 2673|   258k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  2.26M|    {
 2606|  2.26M|        return std::forward<T>(t);
 2607|  2.26M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   578k|            {
 2693|   578k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   578k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   578k|            {
 2672|   578k|                return decay_copy(t.begin());
 2673|   578k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   738k|        {
 6444|   738k|            return data_.begin_;
 6445|   738k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   850k|            {
 2759|   850k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   850k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   850k|            {
 2739|   850k|                return decay_copy(std::forward<T>(t).end());
 2740|   850k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   850k|        {
 6449|   850k|            return data_.end_;
 6450|   850k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   160k|            {
 3788|   160k|                ranges::advance(x, n);
 3789|   160k|                return x;
 3790|   160k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   160k|            {
 3678|   160k|                fn::impl(i, n);
 3679|   160k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   160k|            {
 3562|   160k|                r += n;
 3563|   160k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   418k|            {
 2759|   418k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   418k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   418k|            {
 2739|   418k|                return decay_copy(std::forward<T>(t).end());
 2740|   418k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   578k|        {
 6375|   578k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   578k|        {
 6294|   578k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   160k|            {
 2693|   160k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   160k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   160k|            {
 2672|   160k|                return decay_copy(t.begin());
 2673|   160k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.07M|            {
 2693|  1.07M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.07M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.07M|            {
 2672|  1.07M|                return decay_copy(t.begin());
 2673|  1.07M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   148M|    {
 2606|   148M|        return std::forward<T>(t);
 2607|   148M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  3.15M|            {
 3178|  3.15M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.15M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.15M|            {
 3158|  3.15M|                return t.data();
 3159|  3.15M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  3.15M|    {
 6095|  3.15M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 21.7k, False: 3.12M]
  ------------------
 6096|  3.15M|                   ? nullptr
 6097|  3.15M|                   : std::addressof(*ranges::begin(derived()));
 6098|  3.15M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  3.15M|            {
 3127|  3.15M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  3.15M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  3.15M|            {
 3098|  3.15M|                return bool((std::forward<T>(t).empty()));
 3099|  3.15M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  5.14M|        {
 6454|  5.14M|            return data_.begin_ == data_.end_;
 6455|  5.14M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  6.28M|    {
 6049|  6.28M|        return static_cast<const D&>(*this);
 6050|  6.28M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  24.8M|            {
 2693|  24.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  24.8M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  24.8M|            {
 2672|  24.8M|                return decay_copy(t.begin());
 2673|  24.8M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  63.4M|        {
 6444|  63.4M|            return data_.begin_;
 6445|  63.4M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  3.15M|            {
 3038|  3.15M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  3.15M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  3.15M|            {
 3000|  3.15M|                return decay_copy(std::forward<T>(t).size());
 3001|  3.15M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  11.5M|        {
 6462|  11.5M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  11.5M|                return data_.size_;
 6464|  11.5M|            }
 6465|  11.5M|            else {
 6466|  11.5M|                return data_.end_ - data_.begin_;
 6467|  11.5M|            }
 6468|  11.5M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  13.5M|            {
 3788|  13.5M|                ranges::advance(x, n);
 3789|  13.5M|                return x;
 3790|  13.5M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  13.5M|            {
 3678|  13.5M|                fn::impl(i, n);
 3679|  13.5M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  13.5M|            {
 3562|  13.5M|                r += n;
 3563|  13.5M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  36.2M|            {
 2693|  36.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  36.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  36.2M|            {
 2672|  36.2M|                return decay_copy(t.begin());
 2673|  36.2M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  14.7M|            {
 2759|  14.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  14.7M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  14.7M|            {
 2739|  14.7M|                return decay_copy(std::forward<T>(t).end());
 2740|  14.7M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  85.8M|        {
 6449|  85.8M|            return data_.end_;
 6450|  85.8M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  4.99M|            {
 2759|  4.99M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.99M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  4.99M|            {
 2739|  4.99M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.99M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  24.5M|        {
 6375|  24.5M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  24.5M|        {
 6294|  24.5M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   459k|            {
 2693|   459k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   459k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   459k|            {
 2672|   459k|                return decay_copy(t.begin());
 2673|   459k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  4.30M|    {
 2606|  4.30M|        return std::forward<T>(t);
 2607|  4.30M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  1.02M|            {
 2693|  1.02M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.02M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  1.02M|            {
 2672|  1.02M|                return decay_copy(t.begin());
 2673|  1.02M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  1.31M|        {
 6444|  1.31M|            return data_.begin_;
 6445|  1.31M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.79M|            {
 2759|  1.79M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.79M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.79M|            {
 2739|  1.79M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.79M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.79M|        {
 6449|  1.79M|            return data_.end_;
 6450|  1.79M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   284k|            {
 3788|   284k|                ranges::advance(x, n);
 3789|   284k|                return x;
 3790|   284k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   284k|            {
 3678|   284k|                fn::impl(i, n);
 3679|   284k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   284k|            {
 3562|   284k|                r += n;
 3563|   284k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   743k|            {
 2759|   743k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   743k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   743k|            {
 2739|   743k|                return decay_copy(std::forward<T>(t).end());
 2740|   743k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|  1.02M|        {
 6375|  1.02M|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|  1.02M|        {
 6294|  1.02M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   284k|            {
 2693|   284k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   284k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   284k|            {
 2672|   284k|                return decay_copy(t.begin());
 2673|   284k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  8.64M|        {
 6444|  8.64M|            return data_.begin_;
 6445|  8.64M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  15.9M|        {
 6444|  15.9M|            return data_.begin_;
 6445|  15.9M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  18.0M|    {
 6044|  18.0M|        return static_cast<D&>(*this);
 6045|  18.0M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  9.04M|            {
 3098|  9.04M|                return bool((std::forward<T>(t).empty()));
 3099|  9.04M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  9.04M|            {
 3127|  9.04M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  9.04M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  9.04M|    {
 6085|  9.04M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 9.04M]
  ------------------
 6086|  9.04M|                   ? nullptr
 6087|  9.04M|                   : std::addressof(*ranges::begin(derived()));
 6088|  9.04M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  20.5M|            {
 2739|  20.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  20.5M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  20.5M|            {
 2759|  20.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  20.5M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  3.98M|    {
 6044|  3.98M|        return static_cast<D&>(*this);
 6045|  3.98M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  1.99M|            {
 3098|  1.99M|                return bool((std::forward<T>(t).empty()));
 3099|  1.99M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  1.99M|            {
 3127|  1.99M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  1.99M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  1.99M|    {
 6085|  1.99M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 1.99M]
  ------------------
 6086|  1.99M|                   ? nullptr
 6087|  1.99M|                   : std::addressof(*ranges::begin(derived()));
 6088|  1.99M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  67.0M|            {
 2739|  67.0M|                return decay_copy(std::forward<T>(t).end());
 2740|  67.0M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  67.0M|            {
 2759|  67.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  67.0M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  5.45M|            {
 3780|  5.45M|                ++x;
 3781|  5.45M|                return x;
 3782|  5.45M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  9.10M|            {
 3038|  9.10M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  9.10M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  9.10M|            {
 3000|  9.10M|                return decay_copy(std::forward<T>(t).size());
 3001|  9.10M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  9.04M|            {
 3178|  9.04M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  9.04M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  9.04M|            {
 3158|  9.04M|                return t.data();
 3159|  9.04M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   649k|            {
 3828|   649k|                --x;
 3829|   649k|                return x;
 3830|   649k|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|   846k|            {
 3077|   846k|                return fn::impl(std::forward<T>(t));
 3078|   846k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|   846k|            {
 3067|   846k|                return static_cast<ssize_return_t<T>>(
 3068|   846k|                    ranges::size(std::forward<T>(t)));
 3069|   846k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|   846k|            {
 3038|   846k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   846k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|   846k|            {
 3000|   846k|                return decay_copy(std::forward<T>(t).size());
 3001|   846k|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  9.04M|    {
 2606|  9.04M|        return std::forward<T>(t);
 2607|  9.04M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  8.19M|            {
 3077|  8.19M|                return fn::impl(std::forward<T>(t));
 3078|  8.19M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  8.19M|            {
 3067|  8.19M|                return static_cast<ssize_return_t<T>>(
 3068|  8.19M|                    ranges::size(std::forward<T>(t)));
 3069|  8.19M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  8.19M|            {
 3038|  8.19M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.19M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  8.19M|            {
 3000|  8.19M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.19M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  6.88M|            {
 1300|  6.88M|                return fn::impl(std::forward<F>(f),
 1301|  6.88M|                                std::forward<Args>(args)...);
 1302|  6.88M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  6.88M|            {
 1289|  6.88M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  6.88M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  6.88M|    {
 1142|  6.88M|        return std::forward<T>(t);
 1143|  6.88M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  11.9M|            {
 3756|  11.9M|                return fn::impl(std::move(first), std::move(last));
 3757|  11.9M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  11.9M|            {
 3716|  11.9M|                return s - i;
 3717|  11.9M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  2.06M|        {
 6375|  2.06M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  2.06M|        {
 6294|  2.06M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  4.20M|            {
 2693|  4.20M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.20M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  4.20M|            {
 2672|  4.20M|                return decay_copy(t.begin());
 2673|  4.20M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  8.29M|    {
 2606|  8.29M|        return std::forward<T>(t);
 2607|  8.29M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.40M|            {
 2759|  1.40M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.40M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.40M|            {
 2739|  1.40M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.40M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  9.33M|    {
 2606|  9.33M|        return std::forward<T>(t);
 2607|  9.33M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  3.34M|        {
 6449|  3.34M|            return data_.end_;
 6450|  3.34M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   406k|        {
 6444|   406k|            return data_.begin_;
 6445|   406k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   406k|        {
 6449|   406k|            return data_.end_;
 6450|   406k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   135k|        {
 6375|   135k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   135k|        {
 6294|   135k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   566k|            {
 3780|   566k|                ++x;
 3781|   566k|                return x;
 3782|   566k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   295k|        {
 6793|   295k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   295k|                                    proj);
 6795|   295k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   295k|        {
 6761|   430k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 430k, False: 66]
  ------------------
 6762|   430k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 295k, False: 135k]
  ------------------
 6763|   295k|                    return first;
 6764|   295k|                }
 6765|   135k|                ++first;
 6766|   135k|            }
 6767|     66|            return first;
 6768|   295k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   430k|            {
 1300|   430k|                return fn::impl(std::forward<F>(f),
 1301|   430k|                                std::forward<Args>(args)...);
 1302|   430k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   430k|            {
 1289|   430k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   430k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   430k|            {
 1300|   430k|                return fn::impl(std::forward<F>(f),
 1301|   430k|                                std::forward<Args>(args)...);
 1302|   430k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   430k|            {
 1289|   430k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   430k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   430k|    {
 1142|   430k|        return std::forward<T>(t);
 1143|   430k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.94M|            {
 2759|  1.94M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.94M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.94M|            {
 2739|  1.94M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.94M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  4.08M|            {
 2693|  4.08M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.08M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  4.08M|            {
 2672|  4.08M|                return decay_copy(t.begin());
 2673|  4.08M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  1.99M|            {
 3178|  1.99M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.99M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.99M|            {
 3158|  1.99M|                return t.data();
 3159|  1.99M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  8.41M|            {
 3038|  8.41M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.41M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  8.41M|            {
 3000|  8.41M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.41M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  5.03M|            {
 3780|  5.03M|                ++x;
 3781|  5.03M|                return x;
 3782|  5.03M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  6.42M|            {
 3077|  6.42M|                return fn::impl(std::forward<T>(t));
 3078|  6.42M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  6.42M|            {
 3067|  6.42M|                return static_cast<ssize_return_t<T>>(
 3068|  6.42M|                    ranges::size(std::forward<T>(t)));
 3069|  6.42M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   575k|            {
 3828|   575k|                --x;
 3829|   575k|                return x;
 3830|   575k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  8.18M|            {
 3756|  8.18M|                return fn::impl(std::move(first), std::move(last));
 3757|  8.18M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  8.18M|            {
 3716|  8.18M|                return s - i;
 3717|  8.18M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  3.67M|        {
 6375|  3.67M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  3.67M|        {
 6294|  3.67M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  8.08M|            {
 2693|  8.08M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  8.08M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  8.08M|            {
 2672|  8.08M|                return decay_copy(t.begin());
 2673|  8.08M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  15.3M|    {
 2606|  15.3M|        return std::forward<T>(t);
 2607|  15.3M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  2.53M|            {
 2759|  2.53M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.53M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.53M|            {
 2739|  2.53M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.53M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  5.98M|        {
 6449|  5.98M|            return data_.end_;
 6450|  5.98M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   721k|        {
 6444|   721k|            return data_.begin_;
 6445|   721k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   721k|        {
 6449|   721k|            return data_.end_;
 6450|   721k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   240k|        {
 6375|   240k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   240k|        {
 6294|   240k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|  1.00M|            {
 3780|  1.00M|                ++x;
 3781|  1.00M|                return x;
 3782|  1.00M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   524k|        {
 6793|   524k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   524k|                                    proj);
 6795|   524k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   524k|        {
 6761|  1.00M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 1.00M, False: 132]
  ------------------
 6762|  1.00M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 524k, False: 480k]
  ------------------
 6763|   524k|                    return first;
 6764|   524k|                }
 6765|   480k|                ++first;
 6766|   480k|            }
 6767|    132|            return first;
 6768|   524k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  1.00M|            {
 1300|  1.00M|                return fn::impl(std::forward<F>(f),
 1301|  1.00M|                                std::forward<Args>(args)...);
 1302|  1.00M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  1.00M|            {
 1289|  1.00M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.00M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  1.00M|            {
 1300|  1.00M|                return fn::impl(std::forward<F>(f),
 1301|  1.00M|                                std::forward<Args>(args)...);
 1302|  1.00M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  1.00M|            {
 1289|  1.00M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.00M|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|  1.00M|    {
 1142|  1.00M|        return std::forward<T>(t);
 1143|  1.00M|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  3.45M|            {
 2759|  3.45M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.45M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  3.45M|            {
 2739|  3.45M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.45M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  7.25M|            {
 2693|  7.25M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  7.25M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  7.25M|            {
 2672|  7.25M|                return decay_copy(t.begin());
 2673|  7.25M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  3.56M|        {
 6793|  3.56M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  3.56M|                                    proj);
 6795|  3.56M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  3.56M|        {
 6761|  6.92M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 6.88M, False: 38.5k]
  ------------------
 6762|  6.88M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 3.52M, False: 3.36M]
  ------------------
 6763|  3.52M|                    return first;
 6764|  3.52M|                }
 6765|  3.36M|                ++first;
 6766|  3.36M|            }
 6767|  38.5k|            return first;
 6768|  3.56M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  6.88M|            {
 1300|  6.88M|                return fn::impl(std::forward<F>(f),
 1301|  6.88M|                                std::forward<Args>(args)...);
 1302|  6.88M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  6.88M|            {
 1289|  6.88M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  6.88M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   306k|{
   50|   306k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   306k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|   110k|{
   50|   110k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   110k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  58.2k|{
   50|  58.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  58.2k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   295k|    {
   44|   295k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   524k|    {
   44|   524k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  49.9k|{
   50|  49.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  49.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  49.9k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  8.80M|    {
 1191|  8.80M|        return has_value();
 1192|  8.80M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  16.8M|    {
  189|  16.8M|        return m_has_value;
  190|  16.8M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  1.43M|    {
 1197|  1.43M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.43M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.43M|    {
  172|  1.43M|        return m_unexpected;
  173|  1.43M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  10.7M|    {
   72|  10.7M|        return m_unexpected;
   73|  10.7M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  5.32M|    {
   58|  5.32M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  5.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  5.32M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   258k|    {
 1078|   258k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   258k|    {
  151|   258k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  6.34M|    {
   67|  6.34M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  6.34M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  6.34M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.33M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  6.65M|    {
 1251|  6.65M|        return value();
 1252|  6.65M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  6.65M|    {
 1221|  6.65M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.65M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  6.65M|    {
  155|  6.65M|        return m_value;
  156|  6.65M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  3.07M|    {
 1034|  3.07M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  3.07M|    {
  142|  3.07M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  3.33M|    {
 1191|  3.33M|        return has_value();
 1192|  3.33M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.66M|    {
  189|  6.66M|        return m_has_value;
  190|  6.66M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   258k|    {
 1197|   258k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   258k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   258k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   258k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   258k|    {
  172|   258k|        return m_unexpected;
  173|   258k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   465k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.78M|    {
 1251|  2.78M|        return value();
 1252|  2.78M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  3.07M|    {
 1221|  3.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.07M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.07M|    {
  155|  3.07M|        return m_value;
  156|  3.07M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   422k|    {
 1034|   422k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   422k|    {
  142|   422k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   465k|    {
 1191|   465k|        return has_value();
 1192|   465k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   887k|    {
  189|   887k|        return m_has_value;
  190|   887k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   422k|    {
 1274|   422k|        return std::addressof(value());
 1275|   422k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   422k|    {
 1221|   422k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   422k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   422k|    {
  155|   422k|        return m_value;
  156|   422k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   291k|    {
 1263|   291k|        return std::move(value());
 1264|   291k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   460k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   417k|    {
 1034|   417k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   417k|    {
  142|   417k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   460k|    {
 1191|   460k|        return has_value();
 1192|   460k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   877k|    {
  189|   877k|        return m_has_value;
  190|   877k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   417k|    {
 1274|   417k|        return std::addressof(value());
 1275|   417k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   417k|    {
 1221|   417k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   417k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   417k|    {
  155|   417k|        return m_value;
  156|   417k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   651k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   607k|    {
 1034|   607k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   607k|    {
  142|   607k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   651k|    {
 1191|   651k|        return has_value();
 1192|   651k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.25M|    {
  189|  1.25M|        return m_has_value;
  190|  1.25M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   607k|    {
 1274|   607k|        return std::addressof(value());
 1275|   607k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   607k|    {
 1221|   607k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   607k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   607k|    {
  155|   607k|        return m_value;
  156|   607k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   542k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   499k|    {
 1034|   499k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   499k|    {
  142|   499k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   542k|    {
 1191|   542k|        return has_value();
 1192|   542k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.04M|    {
  189|  1.04M|        return m_has_value;
  190|  1.04M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   499k|    {
 1274|   499k|        return std::addressof(value());
 1275|   499k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   499k|    {
 1221|   499k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   499k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   499k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   499k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   499k|    {
  155|   499k|        return m_value;
  156|   499k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   665k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   622k|    {
 1034|   622k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   622k|    {
  142|   622k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   665k|    {
 1191|   665k|        return has_value();
 1192|   665k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.28M|    {
  189|  1.28M|        return m_has_value;
  190|  1.28M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   622k|    {
 1274|   622k|        return std::addressof(value());
 1275|   622k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   622k|    {
 1221|   622k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   622k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   622k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   622k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   622k|    {
  155|   622k|        return m_value;
  156|   622k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   547k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   504k|    {
 1034|   504k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   504k|    {
  142|   504k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   547k|    {
 1191|   547k|        return has_value();
 1192|   547k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.05M|    {
  189|  1.05M|        return m_has_value;
  190|  1.05M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   504k|    {
 1274|   504k|        return std::addressof(value());
 1275|   504k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   504k|    {
 1221|   504k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   504k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   504k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   504k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   504k|    {
  155|   504k|        return m_value;
  156|   504k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   258k|    {
 1078|   258k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   258k|    {
  151|   258k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   418k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   160k|    {
 1034|   160k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   160k|    {
  142|   160k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   418k|    {
 1191|   418k|        return has_value();
 1192|   418k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   837k|    {
  189|   837k|        return m_has_value;
  190|   837k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   258k|    {
 1197|   258k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   258k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   258k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   258k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   258k|    {
  172|   258k|        return m_unexpected;
  173|   258k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   147k|    {
 1251|   147k|        return value();
 1252|   147k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   160k|    {
 1221|   160k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   160k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   160k|    {
  155|   160k|        return m_value;
  156|   160k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.6k|    {
 1034|  26.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.6k|    {
  142|  26.6k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  69.7k|    {
 1191|  69.7k|        return has_value();
 1192|  69.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  96.4k|    {
  189|  96.4k|        return m_has_value;
  190|  96.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  26.6k|    {
 1274|  26.6k|        return std::addressof(value());
 1275|  26.6k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.6k|    {
 1221|  26.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.6k|    {
  155|  26.6k|        return m_value;
  156|  26.6k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  12.3k|    {
 1263|  12.3k|        return std::move(value());
 1264|  12.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.6k|    {
 1034|  26.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.6k|    {
  142|  26.6k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  69.7k|    {
 1191|  69.7k|        return has_value();
 1192|  69.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  96.4k|    {
  189|  96.4k|        return m_has_value;
  190|  96.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  26.6k|    {
 1274|  26.6k|        return std::addressof(value());
 1275|  26.6k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.6k|    {
 1221|  26.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.6k|    {
  155|  26.6k|        return m_value;
  156|  26.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.6k|    {
 1034|  26.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.6k|    {
  142|  26.6k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  69.7k|    {
 1191|  69.7k|        return has_value();
 1192|  69.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  96.4k|    {
  189|  96.4k|        return m_has_value;
  190|  96.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  26.6k|    {
 1274|  26.6k|        return std::addressof(value());
 1275|  26.6k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.6k|    {
 1221|  26.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.6k|    {
  155|  26.6k|        return m_value;
  156|  26.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.6k|    {
 1034|  26.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.6k|    {
  142|  26.6k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  69.7k|    {
 1191|  69.7k|        return has_value();
 1192|  69.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  96.4k|    {
  189|  96.4k|        return m_has_value;
  190|  96.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  26.6k|    {
 1274|  26.6k|        return std::addressof(value());
 1275|  26.6k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.6k|    {
 1221|  26.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.6k|    {
  155|  26.6k|        return m_value;
  156|  26.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.6k|    {
 1034|  26.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.6k|    {
  142|  26.6k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  69.7k|    {
 1191|  69.7k|        return has_value();
 1192|  69.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  96.4k|    {
  189|  96.4k|        return m_has_value;
  190|  96.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  26.6k|    {
 1274|  26.6k|        return std::addressof(value());
 1275|  26.6k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.6k|    {
 1221|  26.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.6k|    {
  155|  26.6k|        return m_value;
  156|  26.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.0k|    {
 1078|  43.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  43.0k|    {
  151|  43.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  69.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.6k|    {
 1034|  26.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.6k|    {
  142|  26.6k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  69.7k|    {
 1191|  69.7k|        return has_value();
 1192|  69.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  96.4k|    {
  189|  96.4k|        return m_has_value;
  190|  96.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  26.6k|    {
 1274|  26.6k|        return std::addressof(value());
 1275|  26.6k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.6k|    {
 1221|  26.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.6k|    {
  155|  26.6k|        return m_value;
  156|  26.6k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   459k|    {
 1078|   459k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   459k|    {
  151|   459k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.15M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.69M|    {
 1034|  2.69M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.69M|    {
  142|  2.69M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  3.15M|    {
 1191|  3.15M|        return has_value();
 1192|  3.15M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.30M|    {
  189|  6.30M|        return m_has_value;
  190|  6.30M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   459k|    {
 1197|   459k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   459k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   459k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   459k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   459k|    {
  172|   459k|        return m_unexpected;
  173|   459k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   439k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.43M|    {
 1251|  2.43M|        return value();
 1252|  2.43M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.69M|    {
 1221|  2.69M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.69M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.69M|    {
  155|  2.69M|        return m_value;
  156|  2.69M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   362k|    {
 1034|   362k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   362k|    {
  142|   362k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   439k|    {
 1191|   439k|        return has_value();
 1192|   439k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   801k|    {
  189|   801k|        return m_has_value;
  190|   801k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   362k|    {
 1274|   362k|        return std::addressof(value());
 1275|   362k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   362k|    {
 1221|   362k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   362k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   362k|    {
  155|   362k|        return m_value;
  156|   362k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   256k|    {
 1263|   256k|        return std::move(value());
 1264|   256k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   445k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   369k|    {
 1034|   369k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   369k|    {
  142|   369k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   445k|    {
 1191|   445k|        return has_value();
 1192|   445k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   815k|    {
  189|   815k|        return m_has_value;
  190|   815k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   369k|    {
 1274|   369k|        return std::addressof(value());
 1275|   369k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   369k|    {
 1221|   369k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   369k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   369k|    {
  155|   369k|        return m_value;
  156|   369k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   603k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   527k|    {
 1034|   527k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   527k|    {
  142|   527k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   603k|    {
 1191|   603k|        return has_value();
 1192|   603k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.13M|    {
  189|  1.13M|        return m_has_value;
  190|  1.13M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   527k|    {
 1274|   527k|        return std::addressof(value());
 1275|   527k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   527k|    {
 1221|   527k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   527k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   527k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   527k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   527k|    {
  155|   527k|        return m_value;
  156|   527k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   520k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   443k|    {
 1034|   443k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   443k|    {
  142|   443k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   520k|    {
 1191|   520k|        return has_value();
 1192|   520k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   964k|    {
  189|   964k|        return m_has_value;
  190|   964k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   443k|    {
 1274|   443k|        return std::addressof(value());
 1275|   443k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   443k|    {
 1221|   443k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   443k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   443k|    {
  155|   443k|        return m_value;
  156|   443k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   616k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   540k|    {
 1034|   540k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   540k|    {
  142|   540k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   616k|    {
 1191|   616k|        return has_value();
 1192|   616k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.15M|    {
  189|  1.15M|        return m_has_value;
  190|  1.15M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   540k|    {
 1274|   540k|        return std::addressof(value());
 1275|   540k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   540k|    {
 1221|   540k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   540k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   540k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   540k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   540k|    {
  155|   540k|        return m_value;
  156|   540k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   525k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   449k|    {
 1034|   449k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   449k|    {
  142|   449k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   525k|    {
 1191|   525k|        return has_value();
 1192|   525k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   974k|    {
  189|   974k|        return m_has_value;
  190|   974k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   449k|    {
 1274|   449k|        return std::addressof(value());
 1275|   449k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   449k|    {
 1221|   449k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   449k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   449k|    {
  155|   449k|        return m_value;
  156|   449k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   459k|    {
 1078|   459k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   459k|    {
  151|   459k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   743k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   284k|    {
 1034|   284k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   284k|    {
  142|   284k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   743k|    {
 1191|   743k|        return has_value();
 1192|   743k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.48M|    {
  189|  1.48M|        return m_has_value;
  190|  1.48M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   459k|    {
 1197|   459k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   459k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   459k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   459k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   459k|    {
  172|   459k|        return m_unexpected;
  173|   459k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   123k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   262k|    {
 1251|   262k|        return value();
 1252|   262k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   284k|    {
 1221|   284k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   284k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   284k|    {
  155|   284k|        return m_value;
  156|   284k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  47.3k|    {
 1034|  47.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  47.3k|    {
  142|  47.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   123k|    {
 1191|   123k|        return has_value();
 1192|   123k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   171k|    {
  189|   171k|        return m_has_value;
  190|   171k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  47.3k|    {
 1274|  47.3k|        return std::addressof(value());
 1275|  47.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  47.3k|    {
 1221|  47.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  47.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  47.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  47.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  47.3k|    {
  155|  47.3k|        return m_value;
  156|  47.3k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  21.8k|    {
 1263|  21.8k|        return std::move(value());
 1264|  21.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   123k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  47.3k|    {
 1034|  47.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  47.3k|    {
  142|  47.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   123k|    {
 1191|   123k|        return has_value();
 1192|   123k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   171k|    {
  189|   171k|        return m_has_value;
  190|   171k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  47.3k|    {
 1274|  47.3k|        return std::addressof(value());
 1275|  47.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  47.3k|    {
 1221|  47.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  47.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  47.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  47.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  47.3k|    {
  155|  47.3k|        return m_value;
  156|  47.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   123k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  47.3k|    {
 1034|  47.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  47.3k|    {
  142|  47.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   123k|    {
 1191|   123k|        return has_value();
 1192|   123k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   171k|    {
  189|   171k|        return m_has_value;
  190|   171k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  47.3k|    {
 1274|  47.3k|        return std::addressof(value());
 1275|  47.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  47.3k|    {
 1221|  47.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  47.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  47.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  47.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  47.3k|    {
  155|  47.3k|        return m_value;
  156|  47.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   123k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  47.3k|    {
 1034|  47.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  47.3k|    {
  142|  47.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   123k|    {
 1191|   123k|        return has_value();
 1192|   123k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   171k|    {
  189|   171k|        return m_has_value;
  190|   171k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  47.3k|    {
 1274|  47.3k|        return std::addressof(value());
 1275|  47.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  47.3k|    {
 1221|  47.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  47.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  47.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  47.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  47.3k|    {
  155|  47.3k|        return m_value;
  156|  47.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   123k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  47.3k|    {
 1034|  47.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  47.3k|    {
  142|  47.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   123k|    {
 1191|   123k|        return has_value();
 1192|   123k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   171k|    {
  189|   171k|        return m_has_value;
  190|   171k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  47.3k|    {
 1274|  47.3k|        return std::addressof(value());
 1275|  47.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  47.3k|    {
 1221|  47.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  47.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  47.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  47.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  47.3k|    {
  155|  47.3k|        return m_value;
  156|  47.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  76.5k|    {
 1078|  76.5k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  76.5k|    {
  151|  76.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   123k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  47.3k|    {
 1034|  47.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  47.3k|    {
  142|  47.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   123k|    {
 1191|   123k|        return has_value();
 1192|   123k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   171k|    {
  189|   171k|        return m_has_value;
  190|   171k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  47.3k|    {
 1274|  47.3k|        return std::addressof(value());
 1275|  47.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  47.3k|    {
 1221|  47.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  47.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  47.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  47.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  47.3k|    {
  155|  47.3k|        return m_value;
  156|  47.3k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  3.25M|    {
 1405|  3.25M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.25M|                                            std::forward<F>(f));
 1407|  3.25M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  3.25M|{
  927|  3.25M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.25M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.25M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.25M|            return result(*std::forward<Exp>(exp));
  931|  3.25M|        }
  932|       |
  933|  3.25M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.25M|        return result(unexpect, monostate{});
  935|  3.25M|    }
  936|  3.25M|    else {
  937|  3.25M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.25M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.25M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.23M, False: 24.6k]
  |  |  ------------------
  ------------------
  939|  3.25M|                   ? result(*std::forward<Exp>(exp))
  940|  3.25M|                   : result(unexpect,
  941|  24.6k|                            std::invoke(std::forward<F>(f),
  942|  24.6k|                                        std::forward<Exp>(exp).error()));
  943|  3.25M|    }
  944|  3.25M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  13.3M|    {
  189|  13.3M|        return m_has_value;
  190|  13.3M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  3.23M|    {
 1263|  3.23M|        return std::move(value());
 1264|  3.23M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  4.58M|    {
 1221|  4.58M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.58M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  4.58M|    {
  155|  4.58M|        return m_value;
  156|  4.58M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  13.0M|    {
 1034|  13.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  13.0M|    {
  142|  13.0M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  24.6k|    {
 1207|  24.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  24.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  24.6k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  26.0k|    {
  172|  26.0k|        return m_unexpected;
  173|  26.0k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   328k|    {
   72|   328k|        return m_unexpected;
   73|   328k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  24.6k|    {
 1088|  24.6k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   352k|    {
  151|   352k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  13.3M|    {
 1191|  13.3M|        return has_value();
 1192|  13.3M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  26.7M|    {
  189|  26.7M|        return m_has_value;
  190|  26.7M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   352k|    {
 1197|   352k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   352k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   352k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   352k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   352k|    {
  172|   352k|        return m_unexpected;
  173|   352k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   328k|    {
 1078|   328k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  10.8M|    {
 1263|  10.8M|        return std::move(value());
 1264|  10.8M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  13.0M|    {
 1221|  13.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.0M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  13.0M|    {
  155|  13.0M|        return m_value;
  156|  13.0M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   525k|    {
   58|   525k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   525k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   525k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  1.43M|    {
 1078|  1.43M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  1.43M|    {
  151|  1.43M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  7.64M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  55.4k|    {
   58|  55.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  55.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  55.4k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  26.0k|    {
 1078|  26.0k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  26.0k|    {
  151|  26.0k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   164k|    {
   67|   164k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   164k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   164k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.71M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  8.68M|    {
 1034|  8.68M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  8.68M|    {
  142|  8.68M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  5.45M|    {
 1191|  5.45M|        return has_value();
 1192|  5.45M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.36k|    {
 1197|  1.36k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.36k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  55.4k|    {
   58|  55.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  55.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  55.4k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  53.7k|    {
 1078|  53.7k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  7.47M|    {
   72|  7.47M|        return m_unexpected;
   73|  7.47M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  53.7k|    {
  151|  53.7k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   272k|    {
   67|   272k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   272k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   272k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  14.6M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.34M|    {
 1251|  1.34M|        return value();
 1252|  1.34M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  2.48M|    {
 1034|  2.48M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.48M|    {
  142|  2.48M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  27.6M|    {
   58|  27.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  27.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  27.6M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  12.0M|    {
 1078|  12.0M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  27.6M|    {
   72|  27.6M|        return m_unexpected;
   73|  27.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  12.0M|    {
  151|  12.0M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  27.6M|    {
   67|  27.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  27.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  27.6M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  14.6M|    {
 1191|  14.6M|        return has_value();
 1192|  14.6M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  20.2M|    {
  189|  20.2M|        return m_has_value;
  190|  20.2M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  2.99M|    {
 1197|  2.99M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.99M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  2.99M|    {
  172|  2.99M|        return m_unexpected;
  173|  2.99M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  3.23M|    {
 1034|  3.23M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  3.23M|    {
  142|  3.23M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.23M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   108k|    {
   58|   108k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   108k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   108k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.55M|    {
 1251|  2.55M|        return value();
 1252|  2.55M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.55M|    {
 1221|  2.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.55M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.55M|    {
  155|  2.55M|        return m_value;
  156|  2.55M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  3.23M|    {
 1191|  3.23M|        return has_value();
 1192|  3.23M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  6.46M|    {
  189|  6.46M|        return m_has_value;
  190|  6.46M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.23M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  3.23M|    {
 1263|  3.23M|        return std::move(value());
 1264|  3.23M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  3.23M|    {
 1221|  3.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.23M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  3.23M|    {
  155|  3.23M|        return m_value;
  156|  3.23M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  67.5k|    {
 1034|  67.5k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  67.5k|    {
  142|  67.5k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  3.23M|    {
 1034|  3.23M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.23M|    {
  142|  3.23M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  3.23M|    {
 1405|  3.23M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.23M|                                            std::forward<F>(f));
 1407|  3.23M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  3.23M|{
  927|  3.23M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.23M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.23M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.23M|            return result(*std::forward<Exp>(exp));
  931|  3.23M|        }
  932|       |
  933|  3.23M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.23M|        return result(unexpect, monostate{});
  935|  3.23M|    }
  936|  3.23M|    else {
  937|  3.23M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.23M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.23M, False: 0]
  |  |  ------------------
  ------------------
  939|  3.23M|                   ? result(*std::forward<Exp>(exp))
  940|  3.23M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  3.23M|    }
  944|  3.23M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  6.46M|    {
  189|  6.46M|        return m_has_value;
  190|  6.46M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.23M|    {
 1263|  3.23M|        return std::move(value());
 1264|  3.23M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.23M|    {
 1221|  3.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.23M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.23M|    {
  155|  3.23M|        return m_value;
  156|  3.23M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  3.23M|    {
 1034|  3.23M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.23M|    {
  142|  3.23M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.23M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  3.23M|    {
 1191|  3.23M|        return has_value();
 1192|  3.23M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  6.46M|    {
  189|  6.46M|        return m_has_value;
  190|  6.46M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.23M|    {
 1263|  3.23M|        return std::move(value());
 1264|  3.23M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.23M|    {
 1221|  3.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.23M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.23M|    {
  155|  3.23M|        return m_value;
  156|  3.23M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  9.40k|    {
 1078|  9.40k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  9.40k|    {
  312|  9.40k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  9.40k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  9.40k|    {
  373|  9.40k|        scn::detail::construct_at(unexpected_ptr(),
  374|  9.40k|                                  std::forward<Args>(args)...);
  375|  9.40k|        m_has_value = false;
  376|  9.40k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|   108k|{
  102|   108k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   108k|        T(std::forward<Args>(args)...);
  104|   108k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  28.2k|    {
  403|  28.2k|        return reinterpret_cast<unexpected<E>*>(
  404|  28.2k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  28.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  28.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   429k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   429k|    {
  317|   429k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 420k, False: 9.40k]
  ------------------
  318|   420k|            destroy_value();
  319|   420k|        }
  320|  9.40k|        else {
  321|  9.40k|            destroy_unexpected();
  322|  9.40k|        }
  323|   429k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.28M|    {
  361|  1.28M|        return m_has_value;
  362|  1.28M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   420k|    {
  380|   420k|        scn::detail::destroy_at(value_ptr());
  381|   420k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   420k|{
  108|   420k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   420k|        for (auto& elem : *p) {
  110|   420k|            scn::detail::destroy_at(std::addressof(elem));
  111|   420k|        }
  112|   420k|    }
  113|   420k|    else {
  114|   420k|        p->~T();
  115|   420k|    }
  116|   420k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.26M|    {
  390|  1.26M|        return reinterpret_cast<T*>(
  391|  1.26M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.26M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.26M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  9.40k|    {
  384|  9.40k|        scn::detail::destroy_at(unexpected_ptr());
  385|  9.40k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|   108k|{
  108|   108k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   108k|        for (auto& elem : *p) {
  110|   108k|            scn::detail::destroy_at(std::addressof(elem));
  111|   108k|        }
  112|   108k|    }
  113|   108k|    else {
  114|   108k|        p->~T();
  115|   108k|    }
  116|   108k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   420k|    {
 1034|   420k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   420k|    {
  303|   420k|        construct(std::forward<Args>(args)...);
  304|   420k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   420k|    {
  367|   420k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   420k|        m_has_value = true;
  369|   420k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   420k|{
  102|   420k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   420k|        T(std::forward<Args>(args)...);
  104|   420k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   429k|    {
 1191|   429k|        return has_value();
 1192|   429k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  9.40k|    {
 1197|  9.40k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  9.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  9.40k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  9.40k|    {
  344|  9.40k|        return *unexpected_ptr();
  345|  9.40k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   420k|    {
 1263|   420k|        return std::move(value());
 1264|   420k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   420k|    {
 1221|   420k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   420k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   420k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   420k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   420k|    {
  327|   420k|        return *value_ptr();
  328|   420k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.19M|    {
 1251|  2.19M|        return value();
 1252|  2.19M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   108k|    {
   58|   108k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   108k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   108k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  6.21M|    {
 1034|  6.21M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  6.21M|    {
  142|  6.21M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    390|    {
 1078|    390|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    390|    {
  151|    390|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.55M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.55M|    {
 1034|  1.55M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.55M|    {
  142|  1.55M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   344k|    {
 1405|   344k|        return detail::transform_error_impl(std::move(*this),
 1406|   344k|                                            std::forward<F>(f));
 1407|   344k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   344k|{
  927|   344k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   344k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   344k|        if (SCN_LIKELY(exp.has_value())) {
  930|   344k|            return result(*std::forward<Exp>(exp));
  931|   344k|        }
  932|       |
  933|   344k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   344k|        return result(unexpect, monostate{});
  935|   344k|    }
  936|   344k|    else {
  937|   344k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   344k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   344k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 344k, False: 78]
  |  |  ------------------
  ------------------
  939|   344k|                   ? result(*std::forward<Exp>(exp))
  940|   344k|                   : result(unexpect,
  941|     78|                            std::invoke(std::forward<F>(f),
  942|     78|                                        std::forward<Exp>(exp).error()));
  943|   344k|    }
  944|   344k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.53M|    {
  189|  2.53M|        return m_has_value;
  190|  2.53M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   984k|    {
 1263|   984k|        return std::move(value());
 1264|   984k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   984k|    {
 1221|   984k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   984k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   984k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   984k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   984k|    {
  155|   984k|        return m_value;
  156|   984k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   640k|    {
 1034|   640k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   640k|    {
  142|   640k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   984k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    390|    {
 1207|    390|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    390|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    390|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    390|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    390|    {
  172|    390|        return m_unexpected;
  173|    390|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   160k|    {
 1088|   160k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   344k|    {
  151|   344k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   566k|    {
 1191|   566k|        return has_value();
 1192|   566k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    312|    {
 1078|    312|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    624|    {
  151|    624|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.36M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.58M|    {
 1078|  1.58M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.58M|    {
  151|  1.58M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  2.06M|    {
 1191|  2.06M|        return has_value();
 1192|  2.06M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.64M|    {
  189|  3.64M|        return m_has_value;
  190|  3.64M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   344k|    {
 1197|   344k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   344k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   344k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   344k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   504k|    {
  172|   504k|        return m_unexpected;
  173|   504k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   344k|    {
 1034|   344k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   344k|    {
  142|   344k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   344k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   775k|    {
 1221|   775k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   775k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   775k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   775k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   775k|    {
  155|   775k|        return m_value;
  156|   775k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   344k|    {
 1191|   344k|        return has_value();
 1192|   344k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   689k|    {
  189|   689k|        return m_has_value;
  190|   689k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   344k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   344k|    {
 1263|   344k|        return std::move(value());
 1264|   344k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   344k|    {
 1221|   344k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   344k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   344k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   344k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   344k|    {
  155|   344k|        return m_value;
  156|   344k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   640k|    {
 1405|   640k|        return detail::transform_error_impl(std::move(*this),
 1406|   640k|                                            std::forward<F>(f));
 1407|   640k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   640k|{
  927|   640k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   640k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   640k|        if (SCN_LIKELY(exp.has_value())) {
  930|   640k|            return result(*std::forward<Exp>(exp));
  931|   640k|        }
  932|       |
  933|   640k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   640k|        return result(unexpect, monostate{});
  935|   640k|    }
  936|   640k|    else {
  937|   640k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   640k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   640k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 639k, False: 312]
  |  |  ------------------
  ------------------
  939|   640k|                   ? result(*std::forward<Exp>(exp))
  940|   640k|                   : result(unexpect,
  941|    312|                            std::invoke(std::forward<F>(f),
  942|    312|                                        std::forward<Exp>(exp).error()));
  943|   640k|    }
  944|   640k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   775k|    {
 1034|   775k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   775k|    {
  142|   775k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    312|    {
 1088|    312|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   775k|    {
 1263|   775k|        return std::move(value());
 1264|   775k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   344k|    {
 1034|   344k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   344k|    {
  142|   344k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   344k|    {
 1405|   344k|        return detail::transform_error_impl(std::move(*this),
 1406|   344k|                                            std::forward<F>(f));
 1407|   344k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   344k|{
  927|   344k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   344k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   344k|        if (SCN_LIKELY(exp.has_value())) {
  930|   344k|            return result(*std::forward<Exp>(exp));
  931|   344k|        }
  932|       |
  933|   344k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   344k|        return result(unexpect, monostate{});
  935|   344k|    }
  936|   344k|    else {
  937|   344k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   344k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   344k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 344k, False: 0]
  |  |  ------------------
  ------------------
  939|   344k|                   ? result(*std::forward<Exp>(exp))
  940|   344k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   344k|    }
  944|   344k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   689k|    {
  189|   689k|        return m_has_value;
  190|   689k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   344k|    {
 1263|   344k|        return std::move(value());
 1264|   344k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   344k|    {
 1221|   344k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   344k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   344k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   344k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   344k|    {
  155|   344k|        return m_value;
  156|   344k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   344k|    {
 1034|   344k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   344k|    {
  142|   344k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   344k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   344k|    {
 1191|   344k|        return has_value();
 1192|   344k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   689k|    {
  189|   689k|        return m_has_value;
  190|   689k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   344k|    {
 1263|   344k|        return std::move(value());
 1264|   344k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   344k|    {
 1221|   344k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   344k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   344k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   344k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   344k|    {
  155|   344k|        return m_value;
  156|   344k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   295k|    {
 1405|   295k|        return detail::transform_error_impl(std::move(*this),
 1406|   295k|                                            std::forward<F>(f));
 1407|   295k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   295k|{
  927|   295k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   295k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   295k|        if (SCN_LIKELY(exp.has_value())) {
  930|   295k|            return result(*std::forward<Exp>(exp));
  931|   295k|        }
  932|       |
  933|   295k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   295k|        return result(unexpect, monostate{});
  935|   295k|    }
  936|   295k|    else {
  937|   295k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   295k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   295k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 135k, False: 159k]
  |  |  ------------------
  ------------------
  939|   295k|                   ? result(*std::forward<Exp>(exp))
  940|   295k|                   : result(unexpect,
  941|   159k|                            std::invoke(std::forward<F>(f),
  942|   159k|                                        std::forward<Exp>(exp).error()));
  943|   295k|    }
  944|   295k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   159k|    {
 1207|   159k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   159k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   184k|    {
 1078|   184k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  24.6k|    {
 1078|  24.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  24.6k|    {
  312|  24.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  24.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  24.6k|    {
  373|  24.6k|        scn::detail::construct_at(unexpected_ptr(),
  374|  24.6k|                                  std::forward<Args>(args)...);
  375|  24.6k|        m_has_value = false;
  376|  24.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  73.8k|    {
  403|  73.8k|        return reinterpret_cast<unexpected<E>*>(
  404|  73.8k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  73.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  73.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  49.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  49.2k|    {
  317|  49.2k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 24.6k, False: 24.6k]
  ------------------
  318|  24.6k|            destroy_value();
  319|  24.6k|        }
  320|  24.6k|        else {
  321|  24.6k|            destroy_unexpected();
  322|  24.6k|        }
  323|  49.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|   147k|    {
  361|   147k|        return m_has_value;
  362|   147k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  24.6k|    {
  380|  24.6k|        scn::detail::destroy_at(value_ptr());
  381|  24.6k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  107|  24.6k|{
  108|  24.6k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  24.6k|        for (auto& elem : *p) {
  110|  24.6k|            scn::detail::destroy_at(std::addressof(elem));
  111|  24.6k|        }
  112|  24.6k|    }
  113|  24.6k|    else {
  114|  24.6k|        p->~T();
  115|  24.6k|    }
  116|  24.6k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  73.8k|    {
  390|  73.8k|        return reinterpret_cast<T*>(
  391|  73.8k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  73.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  73.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  24.6k|    {
  384|  24.6k|        scn::detail::destroy_at(unexpected_ptr());
  385|  24.6k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1033|  24.6k|    {
 1034|  24.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  302|  24.6k|    {
  303|  24.6k|        construct(std::forward<Args>(args)...);
  304|  24.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  366|  24.6k|    {
  367|  24.6k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  24.6k|        m_has_value = true;
  369|  24.6k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  101|  24.6k|{
  102|  24.6k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  24.6k|        T(std::forward<Args>(args)...);
  104|  24.6k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  49.2k|    {
 1191|  49.2k|        return has_value();
 1192|  49.2k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  24.6k|    {
 1197|  24.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  24.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  24.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  24.6k|    {
  344|  24.6k|        return *unexpected_ptr();
  345|  24.6k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1262|  24.6k|    {
 1263|  24.6k|        return std::move(value());
 1264|  24.6k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1220|  24.6k|    {
 1221|  24.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  24.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  24.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|  24.6k|    {
  327|  24.6k|        return *value_ptr();
  328|  24.6k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   123k|    {
 1251|   123k|        return value();
 1252|   123k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   640k|    {
 1221|   640k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   640k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.96M|    {
  189|  1.96M|        return m_has_value;
  190|  1.96M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   640k|    {
  155|   640k|        return m_value;
  156|   640k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   984k|    {
 1191|   984k|        return has_value();
 1192|   984k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   344k|    {
 1197|   344k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   344k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   344k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   344k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   344k|    {
  172|   344k|        return m_unexpected;
  173|   344k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   517k|    {
 1263|   517k|        return std::move(value());
 1264|   517k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   137k|    {
 1078|   137k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   137k|    {
  151|   137k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  14.4M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  14.3M|    {
 1034|  14.3M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  14.3M|    {
  142|  14.3M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  3.02M|    {
 1405|  3.02M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.02M|                                            std::forward<F>(f));
 1407|  3.02M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  3.02M|{
  927|  3.02M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.02M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.02M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.02M|            return result(*std::forward<Exp>(exp));
  931|  3.02M|        }
  932|       |
  933|  3.02M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.02M|        return result(unexpect, monostate{});
  935|  3.02M|    }
  936|  3.02M|    else {
  937|  3.02M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.02M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.99M, False: 27.5k]
  |  |  ------------------
  ------------------
  939|  3.02M|                   ? result(*std::forward<Exp>(exp))
  940|  3.02M|                   : result(unexpect,
  941|  27.5k|                            std::invoke(std::forward<F>(f),
  942|  27.5k|                                        std::forward<Exp>(exp).error()));
  943|  3.02M|    }
  944|  3.02M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  25.0M|    {
  189|  25.0M|        return m_has_value;
  190|  25.0M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  9.30M|    {
 1263|  9.30M|        return std::move(value());
 1264|  9.30M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  10.4M|    {
 1221|  10.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  10.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  10.4M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  10.4M|    {
  155|  10.4M|        return m_value;
  156|  10.4M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  11.9M|    {
 1034|  11.9M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  11.9M|    {
  142|  11.9M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  12.5M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   135k|    {
 1207|   135k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   135k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   137k|    {
  172|   137k|        return m_unexpected;
  173|   137k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  27.5k|    {
 1088|  27.5k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   620k|    {
  151|   620k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   593k|    {
 1078|   593k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  5.03M|    {
 1191|  5.03M|        return has_value();
 1192|  5.03M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  1.65k|    {
 1197|  1.65k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.65k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   109k|    {
 1078|   109k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   217k|    {
  151|   217k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  19.9M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.17M|    {
 1251|  1.17M|        return value();
 1252|  1.17M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  2.17M|    {
 1034|  2.17M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.17M|    {
  142|  2.17M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  11.1M|    {
 1078|  11.1M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  11.1M|    {
  151|  11.1M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  19.9M|    {
 1191|  19.9M|        return has_value();
 1192|  19.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  31.4M|    {
  189|  31.4M|        return m_has_value;
  190|  31.4M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  2.91M|    {
 1197|  2.91M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.91M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  2.91M|    {
  172|  2.91M|        return m_unexpected;
  173|  2.91M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.99M|    {
 1034|  2.99M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.99M|    {
  142|  2.99M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.99M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.24M|    {
 1251|  2.24M|        return value();
 1252|  2.24M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  8.55M|    {
 1221|  8.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.55M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  8.55M|    {
  155|  8.55M|        return m_value;
  156|  8.55M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  2.99M|    {
 1191|  2.99M|        return has_value();
 1192|  2.99M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  5.98M|    {
  189|  5.98M|        return m_has_value;
  190|  5.98M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.99M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.99M|    {
 1263|  2.99M|        return std::move(value());
 1264|  2.99M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.99M|    {
 1221|  2.99M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.99M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.99M|    {
  155|  2.99M|        return m_value;
  156|  2.99M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  6.42M|    {
 1405|  6.42M|        return detail::transform_error_impl(std::move(*this),
 1406|  6.42M|                                            std::forward<F>(f));
 1407|  6.42M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  6.42M|{
  927|  6.42M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  6.42M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  6.42M|        if (SCN_LIKELY(exp.has_value())) {
  930|  6.42M|            return result(*std::forward<Exp>(exp));
  931|  6.42M|        }
  932|       |
  933|  6.42M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  6.42M|        return result(unexpect, monostate{});
  935|  6.42M|    }
  936|  6.42M|    else {
  937|  6.42M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  6.42M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  6.42M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.31M, False: 108k]
  |  |  ------------------
  ------------------
  939|  6.42M|                   ? result(*std::forward<Exp>(exp))
  940|  6.42M|                   : result(unexpect,
  941|   108k|                            std::invoke(std::forward<F>(f),
  942|   108k|                                        std::forward<Exp>(exp).error()));
  943|  6.42M|    }
  944|  6.42M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  6.37M|    {
 1034|  6.37M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.37M|    {
  142|  6.37M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   108k|    {
 1088|   108k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  6.31M|    {
 1263|  6.31M|        return std::move(value());
 1264|  6.31M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  2.99M|    {
 1034|  2.99M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.99M|    {
  142|  2.99M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  2.99M|    {
 1405|  2.99M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.99M|                                            std::forward<F>(f));
 1407|  2.99M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  2.99M|{
  927|  2.99M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.99M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.99M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.99M|            return result(*std::forward<Exp>(exp));
  931|  2.99M|        }
  932|       |
  933|  2.99M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.99M|        return result(unexpect, monostate{});
  935|  2.99M|    }
  936|  2.99M|    else {
  937|  2.99M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.99M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.99M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.99M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.99M|                   ? result(*std::forward<Exp>(exp))
  940|  2.99M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.99M|    }
  944|  2.99M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  5.98M|    {
  189|  5.98M|        return m_has_value;
  190|  5.98M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.99M|    {
 1263|  2.99M|        return std::move(value());
 1264|  2.99M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.99M|    {
 1221|  2.99M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.99M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  2.99M|    {
  155|  2.99M|        return m_value;
  156|  2.99M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  2.99M|    {
 1034|  2.99M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  2.99M|    {
  142|  2.99M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.99M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  2.99M|    {
 1191|  2.99M|        return has_value();
 1192|  2.99M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  5.98M|    {
  189|  5.98M|        return m_has_value;
  190|  5.98M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  2.99M|    {
 1263|  2.99M|        return std::move(value());
 1264|  2.99M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  2.99M|    {
 1221|  2.99M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.99M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.99M|    {
  155|  2.99M|        return m_value;
  156|  2.99M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  30.3k|    {
 1078|  30.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  30.3k|    {
  312|  30.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  30.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  30.3k|    {
  373|  30.3k|        scn::detail::construct_at(unexpected_ptr(),
  374|  30.3k|                                  std::forward<Args>(args)...);
  375|  30.3k|        m_has_value = false;
  376|  30.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  91.0k|    {
  403|  91.0k|        return reinterpret_cast<unexpected<E>*>(
  404|  91.0k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  91.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  91.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   399k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   399k|    {
  317|   399k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 368k, False: 30.3k]
  ------------------
  318|   368k|            destroy_value();
  319|   368k|        }
  320|  30.3k|        else {
  321|  30.3k|            destroy_unexpected();
  322|  30.3k|        }
  323|   399k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.19M|    {
  361|  1.19M|        return m_has_value;
  362|  1.19M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   368k|    {
  380|   368k|        scn::detail::destroy_at(value_ptr());
  381|   368k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   368k|{
  108|   368k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   368k|        for (auto& elem : *p) {
  110|   368k|            scn::detail::destroy_at(std::addressof(elem));
  111|   368k|        }
  112|   368k|    }
  113|   368k|    else {
  114|   368k|        p->~T();
  115|   368k|    }
  116|   368k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.10M|    {
  390|  1.10M|        return reinterpret_cast<T*>(
  391|  1.10M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.10M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.10M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  30.3k|    {
  384|  30.3k|        scn::detail::destroy_at(unexpected_ptr());
  385|  30.3k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   368k|    {
 1034|   368k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   368k|    {
  303|   368k|        construct(std::forward<Args>(args)...);
  304|   368k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   368k|    {
  367|   368k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   368k|        m_has_value = true;
  369|   368k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   368k|{
  102|   368k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   368k|        T(std::forward<Args>(args)...);
  104|   368k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   399k|    {
 1191|   399k|        return has_value();
 1192|   399k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  30.3k|    {
 1197|  30.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  30.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  30.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  30.3k|    {
  344|  30.3k|        return *unexpected_ptr();
  345|  30.3k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   368k|    {
 1263|   368k|        return std::move(value());
 1264|   368k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   368k|    {
 1221|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   368k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   368k|    {
  327|   368k|        return *value_ptr();
  328|   368k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.92M|    {
 1251|  1.92M|        return value();
 1252|  1.92M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  11.9M|    {
 1221|  11.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  11.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  25.1M|    {
  189|  25.1M|        return m_has_value;
  190|  25.1M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  11.9M|    {
  155|  11.9M|        return m_value;
  156|  11.9M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  12.5M|    {
 1191|  12.5M|        return has_value();
 1192|  12.5M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   620k|    {
 1197|   620k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   620k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   620k|    {
  172|   620k|        return m_unexpected;
  173|   620k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  10.0M|    {
 1263|  10.0M|        return std::move(value());
 1264|  10.0M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   327k|    {
 1078|   327k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   612k|    {
  151|   612k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.74M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|  1.13M|    {
 1034|  1.13M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.13M|    {
  142|  1.13M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.74M|    {
 1191|  1.74M|        return has_value();
 1192|  1.74M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.49M|    {
  189|  3.49M|        return m_has_value;
  190|  3.49M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   612k|    {
 1197|   612k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   612k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   612k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   612k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   612k|    {
  172|   612k|        return m_unexpected;
  173|   612k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   218k|    {
 1251|   218k|        return value();
 1252|   218k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.13M|    {
 1221|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.13M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.13M|    {
  155|  1.13M|        return m_value;
  156|  1.13M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    468|    {
 1078|    468|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    468|    {
  151|    468|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.75M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  2.75M|    {
 1034|  2.75M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  2.75M|    {
  142|  2.75M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   612k|    {
 1405|   612k|        return detail::transform_error_impl(std::move(*this),
 1406|   612k|                                            std::forward<F>(f));
 1407|   612k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   612k|{
  927|   612k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   612k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   612k|        if (SCN_LIKELY(exp.has_value())) {
  930|   612k|            return result(*std::forward<Exp>(exp));
  931|   612k|        }
  932|       |
  933|   612k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   612k|        return result(unexpect, monostate{});
  935|   612k|    }
  936|   612k|    else {
  937|   612k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   612k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   612k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 611k, False: 156]
  |  |  ------------------
  ------------------
  939|   612k|                   ? result(*std::forward<Exp>(exp))
  940|   612k|                   : result(unexpect,
  941|    156|                            std::invoke(std::forward<F>(f),
  942|    156|                                        std::forward<Exp>(exp).error()));
  943|   612k|    }
  944|   612k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  4.50M|    {
  189|  4.50M|        return m_has_value;
  190|  4.50M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.74M|    {
 1263|  1.74M|        return std::move(value());
 1264|  1.74M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.74M|    {
 1221|  1.74M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.74M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.74M|    {
  155|  1.74M|        return m_value;
  156|  1.74M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    468|    {
 1207|    468|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    468|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    468|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    468|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    468|    {
  172|    468|        return m_unexpected;
  173|    468|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   284k|    {
 1088|   284k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|  1.00M|    {
 1191|  1.00M|        return has_value();
 1192|  1.00M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    312|    {
 1078|    312|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    624|    {
  151|    624|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.19M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  2.81M|    {
 1078|  2.81M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  2.81M|    {
  151|  2.81M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  3.67M|    {
 1191|  3.67M|        return has_value();
 1192|  3.67M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  6.46M|    {
  189|  6.46M|        return m_has_value;
  190|  6.46M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   612k|    {
 1197|   612k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   612k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   612k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   612k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   896k|    {
  172|   896k|        return m_unexpected;
  173|   896k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   611k|    {
 1034|   611k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   611k|    {
  142|   611k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   611k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.37M|    {
 1221|  1.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.37M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.37M|    {
  155|  1.37M|        return m_value;
  156|  1.37M|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   611k|    {
 1191|   611k|        return has_value();
 1192|   611k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|  1.22M|    {
  189|  1.22M|        return m_has_value;
  190|  1.22M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   611k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   611k|    {
 1263|   611k|        return std::move(value());
 1264|   611k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   611k|    {
 1221|   611k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   611k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   611k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   611k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   611k|    {
  155|   611k|        return m_value;
  156|   611k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  1.13M|    {
 1405|  1.13M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.13M|                                            std::forward<F>(f));
 1407|  1.13M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.13M|{
  927|  1.13M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.13M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.13M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.13M|            return result(*std::forward<Exp>(exp));
  931|  1.13M|        }
  932|       |
  933|  1.13M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.13M|        return result(unexpect, monostate{});
  935|  1.13M|    }
  936|  1.13M|    else {
  937|  1.13M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.13M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.13M, False: 312]
  |  |  ------------------
  ------------------
  939|  1.13M|                   ? result(*std::forward<Exp>(exp))
  940|  1.13M|                   : result(unexpect,
  941|    312|                            std::invoke(std::forward<F>(f),
  942|    312|                                        std::forward<Exp>(exp).error()));
  943|  1.13M|    }
  944|  1.13M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.37M|    {
 1034|  1.37M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.37M|    {
  142|  1.37M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    312|    {
 1088|    312|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.37M|    {
 1263|  1.37M|        return std::move(value());
 1264|  1.37M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   611k|    {
 1034|   611k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   611k|    {
  142|   611k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   611k|    {
 1405|   611k|        return detail::transform_error_impl(std::move(*this),
 1406|   611k|                                            std::forward<F>(f));
 1407|   611k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   611k|{
  927|   611k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   611k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   611k|        if (SCN_LIKELY(exp.has_value())) {
  930|   611k|            return result(*std::forward<Exp>(exp));
  931|   611k|        }
  932|       |
  933|   611k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   611k|        return result(unexpect, monostate{});
  935|   611k|    }
  936|   611k|    else {
  937|   611k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   611k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   611k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 611k, False: 0]
  |  |  ------------------
  ------------------
  939|   611k|                   ? result(*std::forward<Exp>(exp))
  940|   611k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   611k|    }
  944|   611k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.22M|    {
  189|  1.22M|        return m_has_value;
  190|  1.22M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   611k|    {
 1263|   611k|        return std::move(value());
 1264|   611k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   611k|    {
 1221|   611k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   611k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   611k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   611k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   611k|    {
  155|   611k|        return m_value;
  156|   611k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   611k|    {
 1034|   611k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   611k|    {
  142|   611k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   611k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   611k|    {
 1191|   611k|        return has_value();
 1192|   611k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.22M|    {
  189|  1.22M|        return m_has_value;
  190|  1.22M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   611k|    {
 1263|   611k|        return std::move(value());
 1264|   611k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   611k|    {
 1221|   611k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   611k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   611k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   611k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   611k|    {
  155|   611k|        return m_value;
  156|   611k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   524k|    {
 1405|   524k|        return detail::transform_error_impl(std::move(*this),
 1406|   524k|                                            std::forward<F>(f));
 1407|   524k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   524k|{
  927|   524k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   524k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   524k|        if (SCN_LIKELY(exp.has_value())) {
  930|   524k|            return result(*std::forward<Exp>(exp));
  931|   524k|        }
  932|       |
  933|   524k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   524k|        return result(unexpect, monostate{});
  935|   524k|    }
  936|   524k|    else {
  937|   524k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   524k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   524k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 240k, False: 284k]
  |  |  ------------------
  ------------------
  939|   524k|                   ? result(*std::forward<Exp>(exp))
  940|   524k|                   : result(unexpect,
  941|   284k|                            std::invoke(std::forward<F>(f),
  942|   284k|                                        std::forward<Exp>(exp).error()));
  943|   524k|    }
  944|   524k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   284k|    {
 1207|   284k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   284k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  43.6k|    {
 1078|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  43.6k|    {
  312|  43.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  43.6k|    {
  373|  43.6k|        scn::detail::construct_at(unexpected_ptr(),
  374|  43.6k|                                  std::forward<Args>(args)...);
  375|  43.6k|        m_has_value = false;
  376|  43.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   131k|    {
  403|   131k|        return reinterpret_cast<unexpected<E>*>(
  404|   131k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   131k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   131k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  87.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  87.4k|    {
  317|  87.4k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 43.7k, False: 43.6k]
  ------------------
  318|  43.7k|            destroy_value();
  319|  43.7k|        }
  320|  43.6k|        else {
  321|  43.6k|            destroy_unexpected();
  322|  43.6k|        }
  323|  87.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   262k|    {
  361|   262k|        return m_has_value;
  362|   262k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  43.7k|    {
  380|  43.7k|        scn::detail::destroy_at(value_ptr());
  381|  43.7k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  107|  43.7k|{
  108|  43.7k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  43.7k|        for (auto& elem : *p) {
  110|  43.7k|            scn::detail::destroy_at(std::addressof(elem));
  111|  43.7k|        }
  112|  43.7k|    }
  113|  43.7k|    else {
  114|  43.7k|        p->~T();
  115|  43.7k|    }
  116|  43.7k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   131k|    {
  390|   131k|        return reinterpret_cast<T*>(
  391|   131k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|   131k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   131k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  43.6k|    {
  384|  43.6k|        scn::detail::destroy_at(unexpected_ptr());
  385|  43.6k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  43.7k|    {
 1034|  43.7k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  302|  43.7k|    {
  303|  43.7k|        construct(std::forward<Args>(args)...);
  304|  43.7k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  366|  43.7k|    {
  367|  43.7k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  43.7k|        m_has_value = true;
  369|  43.7k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  101|  43.7k|{
  102|  43.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  43.7k|        T(std::forward<Args>(args)...);
  104|  43.7k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  87.4k|    {
 1191|  87.4k|        return has_value();
 1192|  87.4k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  43.6k|    {
 1197|  43.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  43.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  43.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  43.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  43.6k|    {
  344|  43.6k|        return *unexpected_ptr();
  345|  43.6k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1262|  43.7k|    {
 1263|  43.7k|        return std::move(value());
 1264|  43.7k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  43.7k|    {
 1221|  43.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  43.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  43.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  43.7k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|  43.7k|    {
  327|  43.7k|        return *value_ptr();
  328|  43.7k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   917k|    {
 1263|   917k|        return std::move(value());
 1264|   917k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.10k|{
  200|  4.10k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.10k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.10k|{
  180|  4.10k|    return p;
  181|  4.10k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.10k|{
  200|  4.10k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.10k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.10k|{
  180|  4.10k|    return p;
  181|  4.10k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.10k|{
  200|  4.10k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.10k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.10k|{
  180|  4.10k|    return p;
  181|  4.10k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  11.1M|{
  200|  11.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  11.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  11.1M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  11.3M|{
  180|  11.3M|    return p;
  181|  11.3M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  7.23M|{
  200|  7.23M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  7.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  7.23M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  7.23M|{
  180|  7.23M|    return p;
  181|  7.23M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   270k|{
  200|   270k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   270k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  7.23M|{
  200|  7.23M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  7.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  7.23M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  7.71M|{
  180|  7.71M|    return p;
  181|  7.71M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   480k|{
  200|   480k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   480k|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  14.2k|    {
  242|  14.2k|        return static_cast<size_type>(m_end - m_ptr);
  243|  14.2k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  2.05k|    {
  181|  2.05k|        return m_ptr;
  182|  2.05k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  2.05k|    {
  185|  2.05k|        return m_end;
  186|  2.05k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.05k|    {
  238|  2.05k|        return m_ptr;
  239|  2.05k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.05k|    {
  120|  2.05k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  49.2k|    {
  181|  49.2k|        return m_ptr;
  182|  49.2k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  49.2k|    {
  185|  49.2k|        return m_end;
  186|  49.2k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.05k|    {
  120|  2.05k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  87.4k|    {
  181|  87.4k|        return m_ptr;
  182|  87.4k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  87.4k|    {
  185|  87.4k|        return m_end;
  186|  87.4k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.05k|    {
  120|  2.05k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  3.61M|    {
  120|  3.61M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  3.61M|    {
  238|  3.61M|        return m_ptr;
  239|  3.61M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  3.61M|    {
  242|  3.61M|        return static_cast<size_type>(m_end - m_ptr);
  243|  3.61M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  2.01M|{
   60|  2.01M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  2.01M|                                          const CharT*, const CharT*>) {
   62|  2.01M|        return {first, last};
   63|  2.01M|    }
   64|  2.01M|    else {
   65|  2.01M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  2.01M|    }
   67|  2.01M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  5.48M|{
   60|  5.48M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  5.48M|                                          const CharT*, const CharT*>) {
   62|  5.48M|        return {first, last};
   63|  5.48M|    }
   64|  5.48M|    else {
   65|  5.48M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  5.48M|    }
   67|  5.48M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  3.69M|{
   44|  3.69M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  3.69M|                                          decltype(first), decltype(last)> &&
   46|  3.69M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  3.69M|        return {first, last};
   48|  3.69M|    }
   49|  3.69M|    else {
   50|  3.69M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  3.69M|                                       to_address(first), to_address(last)))};
   52|  3.69M|    }
   53|  3.69M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  7.11M|{
   75|  7.11M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  7.11M|                      typename std::basic_string_view<CharT>::iterator,
   77|  7.11M|                      decltype(it)> &&
   78|  7.11M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  7.11M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  7.11M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  7.11M|        return it;
   81|  7.11M|    }
   82|  7.11M|    else {
   83|  7.11M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  7.11M|    }
   85|  7.11M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   344k|{
   54|   344k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   344k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   344k|        return true;
   57|   344k|    }
   58|   344k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   344k|                           ranges::iterator_t<Range>,
   60|   344k|                           typename detail::basic_scan_buffer<
   61|   344k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   344k|        auto beg = ranges::begin(r);
   63|   344k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 344k, False: 0]
  ------------------
   64|   344k|            return false;
   65|   344k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   344k|    else {
   79|   344k|        return false;
   80|   344k|    }
   81|   344k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   344k|{
  112|   344k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   344k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   344k|        return r;
  115|   344k|    }
  116|   344k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   344k|                           ranges::iterator_t<Range>,
  118|   344k|                           typename detail::basic_scan_buffer<
  119|   344k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   344k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   344k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   344k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   344k|                ranges::begin(r), ranges::end(r)));
  124|   344k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   344k|        }
  126|   344k|        else {
  127|   344k|            return ranges::begin(r).contiguous_segment();
  128|   344k|        }
  129|   344k|    }
  130|   344k|    else {
  131|   344k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   344k|    }
  133|   344k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   640k|{
  166|   640k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   640k|        return ranges_polyfill::usize(r);
  168|   640k|    }
  169|   640k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   640k|                           ranges::iterator_t<Range>,
  171|   640k|                           typename detail::basic_scan_buffer<
  172|   640k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   640k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   640k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   640k|                                       ranges::begin(r).position());
  176|   640k|        }
  177|   640k|        else {
  178|   640k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 640k, False: 0]
  ------------------
  179|   640k|                return static_cast<size_t>(
  180|   640k|                    ranges::begin(r).parent()->chars_available() -
  181|   640k|                    ranges::begin(r).position());
  182|   640k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   640k|        }
  185|   640k|    }
  186|   640k|    else {
  187|   640k|        return 0;
  188|   640k|    }
  189|   640k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   612k|{
   54|   612k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   612k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   612k|        return true;
   57|   612k|    }
   58|   612k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   612k|                           ranges::iterator_t<Range>,
   60|   612k|                           typename detail::basic_scan_buffer<
   61|   612k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   612k|        auto beg = ranges::begin(r);
   63|   612k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 612k, False: 0]
  ------------------
   64|   612k|            return false;
   65|   612k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   612k|    else {
   79|   612k|        return false;
   80|   612k|    }
   81|   612k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   611k|{
  112|   611k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   611k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   611k|        return r;
  115|   611k|    }
  116|   611k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   611k|                           ranges::iterator_t<Range>,
  118|   611k|                           typename detail::basic_scan_buffer<
  119|   611k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   611k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   611k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   611k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   611k|                ranges::begin(r), ranges::end(r)));
  124|   611k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   611k|        }
  126|   611k|        else {
  127|   611k|            return ranges::begin(r).contiguous_segment();
  128|   611k|        }
  129|   611k|    }
  130|   611k|    else {
  131|   611k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   611k|    }
  133|   611k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  1.13M|{
  166|  1.13M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  1.13M|        return ranges_polyfill::usize(r);
  168|  1.13M|    }
  169|  1.13M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  1.13M|                           ranges::iterator_t<Range>,
  171|  1.13M|                           typename detail::basic_scan_buffer<
  172|  1.13M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  1.13M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  1.13M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  1.13M|                                       ranges::begin(r).position());
  176|  1.13M|        }
  177|  1.13M|        else {
  178|  1.13M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 1.13M, False: 0]
  ------------------
  179|  1.13M|                return static_cast<size_t>(
  180|  1.13M|                    ranges::begin(r).parent()->chars_available() -
  181|  1.13M|                    ranges::begin(r).position());
  182|  1.13M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  1.13M|        }
  185|  1.13M|    }
  186|  1.13M|    else {
  187|  1.13M|        return 0;
  188|  1.13M|    }
  189|  1.13M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.23M|{
  235|  3.23M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.23M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.23M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.23M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.23M|    }
  240|  3.23M|    else {
  241|  3.23M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.23M|    }
  243|  3.23M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.23M|    {
   50|  3.23M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  10.6M|    {
   63|  10.6M|        return sv;
   64|  10.6M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.12M|{
  235|  2.12M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.12M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.12M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.12M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.12M|    }
  240|  2.12M|    else {
  241|  2.12M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.12M|    }
  243|  2.12M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.12M|    {
   50|  2.12M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|   270k|    {
  142|   270k|        return m_view;
  143|   270k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|   135k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   135k|{
  235|   135k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   135k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   135k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   135k|        return string_view_wrapper{SCN_FWD(range)};
  239|   135k|    }
  240|   135k|    else {
  241|   135k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   135k|    }
  243|   135k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   135k|    {
   97|   135k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   135k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   135k|    {
  181|   135k|        using value_t = ranges::range_value_t<Range>;
  182|   135k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   135k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   135k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   135k|            m_storage.reset();
  186|   135k|            m_view = string_view_type{ranges::data(range),
  187|   135k|                                      ranges_polyfill::usize(range)};
  188|   135k|        }
  189|   135k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   135k|                                          std::basic_string<CharT>>) {
  191|   135k|            m_storage.emplace(SCN_FWD(range));
  192|   135k|            m_view = string_view_type{*m_storage};
  193|   135k|        }
  194|   135k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   135k|                                          typename detail::basic_scan_buffer<
  196|   135k|                                              value_t>::forward_iterator> &&
  197|   135k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   135k|            auto beg_seg = range.begin().contiguous_segment();
  199|   135k|            auto end_seg = range.end().contiguous_segment();
  200|   135k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 135k, False: 66]
  |  |  ------------------
  ------------------
  201|   135k|                             detail::to_address(end_seg.end()))) {
  202|   135k|                auto& str = m_storage.emplace();
  203|   135k|                str.reserve(range.end().position() - range.begin().position());
  204|   135k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   135k|                m_view = string_view_type{str};
  206|   135k|                return;
  207|   135k|            }
  208|       |
  209|     66|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     66|                                                            end_seg.data());
  211|     66|            m_storage.reset();
  212|     66|        }
  213|   135k|        else {
  214|   135k|            auto& str = m_storage.emplace();
  215|   135k|            if constexpr (ranges::sized_range<Range>) {
  216|   135k|                str.reserve(ranges_polyfill::usize(range));
  217|   135k|            }
  218|   135k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   135k|                      std::back_inserter(str));
  220|   135k|            m_view = string_view_type{str};
  221|   135k|        }
  222|   135k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  1.99M|{
  235|  1.99M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.99M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.99M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.99M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.99M|    }
  240|  1.99M|    else {
  241|  1.99M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.99M|    }
  243|  1.99M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  1.99M|    {
   50|  1.99M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  3.74M|    {
   63|  3.74M|        return sv;
   64|  3.74M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|   480k|    {
  142|   480k|        return m_view;
  143|   480k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|   240k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   240k|{
  235|   240k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   240k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   240k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   240k|        return string_view_wrapper{SCN_FWD(range)};
  239|   240k|    }
  240|   240k|    else {
  241|   240k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   240k|    }
  243|   240k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   240k|    {
   97|   240k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   240k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   240k|    {
  181|   240k|        using value_t = ranges::range_value_t<Range>;
  182|   240k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   240k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   240k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   240k|            m_storage.reset();
  186|   240k|            m_view = string_view_type{ranges::data(range),
  187|   240k|                                      ranges_polyfill::usize(range)};
  188|   240k|        }
  189|   240k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   240k|                                          std::basic_string<CharT>>) {
  191|   240k|            m_storage.emplace(SCN_FWD(range));
  192|   240k|            m_view = string_view_type{*m_storage};
  193|   240k|        }
  194|   240k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   240k|                                          typename detail::basic_scan_buffer<
  196|   240k|                                              value_t>::forward_iterator> &&
  197|   240k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   240k|            auto beg_seg = range.begin().contiguous_segment();
  199|   240k|            auto end_seg = range.end().contiguous_segment();
  200|   240k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 240k, False: 66]
  |  |  ------------------
  ------------------
  201|   240k|                             detail::to_address(end_seg.end()))) {
  202|   240k|                auto& str = m_storage.emplace();
  203|   240k|                str.reserve(range.end().position() - range.begin().position());
  204|   240k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   240k|                m_view = string_view_type{str};
  206|   240k|                return;
  207|   240k|            }
  208|       |
  209|     66|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     66|                                                            end_seg.data());
  211|     66|            m_storage.reset();
  212|     66|        }
  213|   240k|        else {
  214|   240k|            auto& str = m_storage.emplace();
  215|   240k|            if constexpr (ranges::sized_range<Range>) {
  216|   240k|                str.reserve(ranges_polyfill::usize(range));
  217|   240k|            }
  218|   240k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   240k|                      std::back_inserter(str));
  220|   240k|            m_view = string_view_type{str};
  221|   240k|        }
  222|   240k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  14.0M|{
   97|  14.0M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  14.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.3k, False: 14.0M]
  |  |  ------------------
  ------------------
   98|  27.3k|        return eof_error::eof;
   99|  27.3k|    }
  100|  14.0M|    return eof_error::good;
  101|  14.0M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  14.0M|{
   91|  14.0M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  14.0M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  14.0M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  14.0M|    {
   84|  14.0M|        return begin == end;
   85|  14.0M|    }
   86|  14.0M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.25M|{
   97|  1.25M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78, False: 1.25M]
  |  |  ------------------
  ------------------
   98|     78|        return eof_error::eof;
   99|     78|    }
  100|  1.25M|    return eof_error::good;
  101|  1.25M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.25M|{
   91|  1.25M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.25M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.25M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.25M|    {
   84|  1.25M|        return begin == end;
   85|  1.25M|    }
   86|  1.25M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  13.0M|{
   97|  13.0M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  13.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.7k, False: 13.0M]
  |  |  ------------------
  ------------------
   98|  30.7k|        return eof_error::eof;
   99|  30.7k|    }
  100|  13.0M|    return eof_error::good;
  101|  13.0M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  13.0M|{
   91|  13.0M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  13.0M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  13.0M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  13.0M|    {
   84|  13.0M|        return begin == end;
   85|  13.0M|    }
   86|  13.0M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  2.22M|{
   97|  2.22M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 156, False: 2.22M]
  |  |  ------------------
  ------------------
   98|    156|        return eof_error::eof;
   99|    156|    }
  100|  2.22M|    return eof_error::good;
  101|  2.22M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  2.22M|{
   91|  2.22M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  2.22M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  2.22M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.22M|    {
   84|  2.22M|        return begin == end;
   85|  2.22M|    }
   86|  2.22M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  3.58M|{
  128|  3.58M|    return find_classic_impl(
  129|  3.58M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  3.58M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  3.58M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  3.61M|{
   31|  3.61M|    static_assert(sizeof(*source.data()) == 1);
   32|  3.61M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  3.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  3.61M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  3.61M|    return has_byte_greater(word, 127) != 0;
   37|  3.61M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  3.58M|{
   44|  3.58M|    auto it = source.begin();
   45|       |
   46|  3.62M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 3.61M, False: 3.98k]
  ------------------
   47|  3.61M|        auto sv =
   48|  3.61M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  3.61M|                .substr(0, 8);
   50|       |
   51|  3.61M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 3.56M, False: 54.2k]
  ------------------
   52|  3.56M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  3.56M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  3.56M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 3.52M, False: 38.5k]
  ------------------
   55|  3.52M|                break;
   56|  3.52M|            }
   57|  38.5k|            continue;
   58|  3.56M|        }
   59|       |
   60|  76.6k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 74.8k, False: 1.79k]
  ------------------
   61|  74.8k|            auto tmp =
   62|  74.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  74.8k|            auto res = get_next_code_point(tmp);
   64|  74.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 52.4k, False: 22.3k]
  ------------------
   65|  52.4k|                return it;
   66|  52.4k|            }
   67|  22.3k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  22.3k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  22.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  22.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  22.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  22.3k|        }
   71|  54.2k|    }
   72|       |
   73|  3.52M|    return detail::make_string_view_iterator(source, it);
   74|  3.58M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  6.88M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|  74.8k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  3.23M|{
  300|  3.23M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  3.23M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  3.23M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  3.23M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  3.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  3.23M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  3.23M|        return ranges::next(ranges::begin(range),
  306|  3.23M|                            ranges::distance(buf.view().begin(), it));
  307|  3.23M|    }
  308|  3.23M|    else {
  309|  3.23M|        auto it = ranges::begin(range);
  310|       |
  311|  3.23M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  3.23M|            auto seg = get_contiguous_beginning(range);
  313|  3.23M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  3.23M|                seg_it != seg.end()) {
  315|  3.23M|                return ranges_polyfill::batch_next(
  316|  3.23M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  3.23M|            }
  318|  3.23M|            ranges_polyfill::batch_next(it, seg.size());
  319|  3.23M|        }
  320|       |
  321|  3.23M|        return read_while_code_point(
  322|  3.23M|            SCN_FWD(range),
  323|  3.23M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  3.23M|    }
  325|  3.23M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  3.23M|{
  459|  3.23M|    auto it = read_code_unit(range);
  460|  3.23M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.23M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  6.37M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 6.37M, False: 2.99M]
  ------------------
  465|  6.37M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 239k, False: 6.13M]
  ------------------
  466|   239k|            return *it;
  467|   239k|        }
  468|  6.37M|    }
  469|       |
  470|  2.99M|    return unexpected(parse_error::error);
  471|  3.23M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   706k|{
  482|   706k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 613k, False: 92.9k]
  ------------------
  483|   613k|        return ranges::begin(range);
  484|   613k|    }
  485|  92.9k|    return *result;
  486|   706k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  6.97M|{
  418|  6.97M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  6.97M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  6.97M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  6.97M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 52.3k, False: 6.92M]
  ------------------
  423|  52.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  52.3k|        }
  425|  6.92M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 6.85M, False: 67.5k]
  ------------------
  426|  6.85M|            return unexpected(parse_error::error);
  427|  6.85M|        }
  428|  67.5k|        return ranges::next(ranges::begin(range), str.size());
  429|  6.92M|    }
  430|  6.97M|    else {
  431|  6.97M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.97M|            if (ch < 'A' || ch > 'Z') {
  433|  6.97M|                return ch;
  434|  6.97M|            }
  435|  6.97M|            return static_cast<char_type>(ch +
  436|  6.97M|                                          static_cast<char_type>('a' - 'A'));
  437|  6.97M|        };
  438|       |
  439|  6.97M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  6.97M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  6.97M|        if (SCN_UNLIKELY(!std::equal(
  443|  6.97M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  6.97M|                    return ascii_tolower(a) ==
  445|  6.97M|                           static_cast<detail::char_t<Range>>(b);
  446|  6.97M|                }))) {
  447|  6.97M|            return unexpected(parse_error::error);
  448|  6.97M|        }
  449|       |
  450|  6.97M|        return it;
  451|  6.97M|    }
  452|  6.97M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  6.92M|{
  407|  6.92M|    unsigned char running_diff{0};
  408|  20.7M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 13.8M, False: 6.92M]
  ------------------
  409|  13.8M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  13.8M|    }
  411|  6.92M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 62.4k, False: 6.86M]
  |  Branch (411:33): [True: 5.10k, False: 6.85M]
  ------------------
  412|  6.92M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  2.22M|{
  332|  2.22M|    auto it = read_code_unit(range);
  333|  2.22M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.36k, False: 2.22M]
  |  |  ------------------
  ------------------
  334|  1.36k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.36k|    }
  336|       |
  337|  2.22M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.11M, False: 1.10M]
  |  |  ------------------
  ------------------
  338|  2.22M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.11M|        return unexpected(parse_error::error);
  340|  1.11M|    }
  341|       |
  342|  1.10M|    return *it;
  343|  2.22M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   344k|{
  300|   344k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   344k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   344k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   344k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   344k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   344k|        return ranges::next(ranges::begin(range),
  306|   344k|                            ranges::distance(buf.view().begin(), it));
  307|   344k|    }
  308|   344k|    else {
  309|   344k|        auto it = ranges::begin(range);
  310|       |
  311|   344k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   344k|            auto seg = get_contiguous_beginning(range);
  313|   344k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   344k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 344k, False: 0]
  ------------------
  315|   344k|                return ranges_polyfill::batch_next(
  316|   344k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   344k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   344k|    }
  325|   344k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   344k|{
  459|   344k|    auto it = read_code_unit(range);
  460|   344k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   689k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 689k, False: 344k]
  ------------------
  465|   689k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 689k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   689k|    }
  469|       |
  470|   344k|    return unexpected(parse_error::error);
  471|   344k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   123k|{
  482|   123k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 123k, False: 0]
  ------------------
  483|   123k|        return ranges::begin(range);
  484|   123k|    }
  485|      0|    return *result;
  486|   123k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   640k|{
  418|   640k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   640k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   640k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   640k|        if (ranges::size(range) < str.size()) {
  423|   640k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   640k|        }
  425|   640k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   640k|            return unexpected(parse_error::error);
  427|   640k|        }
  428|   640k|        return ranges::next(ranges::begin(range), str.size());
  429|   640k|    }
  430|   640k|    else {
  431|   640k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   640k|            if (ch < 'A' || ch > 'Z') {
  433|   640k|                return ch;
  434|   640k|            }
  435|   640k|            return static_cast<char_type>(ch +
  436|   640k|                                          static_cast<char_type>('a' - 'A'));
  437|   640k|        };
  438|       |
  439|   640k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   640k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   640k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   640k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 312, False: 639k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    312|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    312|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    312|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    312|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    312|    }                                                  \
  |  |  |  |   70|   640k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   639k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   639k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 639k, False: 0]
  |  |  ------------------
  ------------------
  443|   639k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   639k|                    return ascii_tolower(a) ==
  445|   639k|                           static_cast<detail::char_t<Range>>(b);
  446|   639k|                }))) {
  447|   639k|            return unexpected(parse_error::error);
  448|   639k|        }
  449|       |
  450|      0|        return it;
  451|   639k|    }
  452|   640k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   639k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   639k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 639k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   639k|                return ch;
  434|   639k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   639k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   221k|{
  332|   221k|    auto it = read_code_unit(range);
  333|   221k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   221k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 221k, False: 0]
  |  |  ------------------
  ------------------
  338|   221k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   221k|        return unexpected(parse_error::error);
  340|   221k|    }
  341|       |
  342|      0|    return *it;
  343|   221k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   295k|{
  159|   295k|    auto it = read_while_code_unit(range, pred);
  160|   295k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 159k, False: 135k]
  ------------------
  161|   159k|        return unexpected(parse_error::error);
  162|   159k|    }
  163|   135k|    return it;
  164|   295k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   295k|{
  139|   295k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   295k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   295k|{
  131|   295k|    return ranges::find_if(range, pred);
  132|   295k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.99M|{
  300|  2.99M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.99M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.99M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.99M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  2.99M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.99M|        return ranges::next(ranges::begin(range),
  306|  2.99M|                            ranges::distance(buf.view().begin(), it));
  307|  2.99M|    }
  308|  2.99M|    else {
  309|  2.99M|        auto it = ranges::begin(range);
  310|       |
  311|  2.99M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  2.99M|            auto seg = get_contiguous_beginning(range);
  313|  2.99M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.99M|                seg_it != seg.end()) {
  315|  2.99M|                return ranges_polyfill::batch_next(
  316|  2.99M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.99M|            }
  318|  2.99M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.99M|        }
  320|       |
  321|  2.99M|        return read_while_code_point(
  322|  2.99M|            SCN_FWD(range),
  ------------------
  |  |  248|  2.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  2.99M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.99M|    }
  325|  2.99M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  2.99M|{
  264|  2.99M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  2.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  2.99M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  2.99M|{
  231|  2.99M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  2.99M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  2.99M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  2.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  2.99M|    }
  235|  2.99M|    else {
  236|  2.99M|        auto it = ranges::begin(range);
  237|  2.99M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  2.99M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  2.99M|            seg_it != seg.end()) {
  241|  2.99M|            return ranges_polyfill::batch_next(
  242|  2.99M|                it, ranges::distance(seg.begin(), seg_it));
  243|  2.99M|        }
  244|       |
  245|  2.99M|        while (it != ranges::end(range)) {
  246|  2.99M|            const auto [iter, value] =
  247|  2.99M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  2.99M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  2.99M|            if (pred(cp)) {
  250|  2.99M|                return it;
  251|  2.99M|            }
  252|  2.99M|            it = iter;
  253|  2.99M|        }
  254|       |
  255|  2.99M|        return it;
  256|  2.99M|    }
  257|  2.99M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  2.99M|{
  178|  2.99M|    static_assert(ranges::contiguous_range<Range> &&
  179|  2.99M|                  ranges::sized_range<Range>);
  180|       |
  181|  2.99M|    std::array<char32_t, 16> cp_buf{};
  182|  2.99M|    std::array<uint8_t, 16> idx_buf{};
  183|  2.99M|    auto it = ranges::begin(range);
  184|  3.01M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 3.00M, False: 5.77k]
  ------------------
  185|  3.00M|        auto chunk_begin = it;
  186|  3.00M|        size_t code_point_count = 0;
  187|  3.00M|        uint8_t code_unit_idx = 0;
  188|  47.6M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 44.9M, False: 2.62M]
  |  Branch (188:52): [True: 44.6M, False: 383k]
  ------------------
  189|  44.6M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 44.6M, False: 0]
  ------------------
  190|  44.6M|                idx_buf[code_point_count] = code_unit_idx;
  191|  44.6M|                ++code_point_count;
  192|  44.6M|            }
  193|  44.6M|            ++it;
  194|  44.6M|            ++code_unit_idx;
  195|  44.6M|        }
  196|       |
  197|  3.00M|        auto input = detail::make_string_view_from_pointers(
  198|  3.00M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  3.00M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  3.00M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  3.00M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  3.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.00M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  6.03M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 6.01M, False: 13.9k]
  ------------------
  217|  6.01M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 2.99M, False: 3.02M]
  ------------------
  218|  2.99M|                return chunk_begin + idx_buf[i];
  219|  2.99M|            }
  220|  6.01M|        }
  221|  3.00M|    }
  222|       |
  223|  5.77k|    return it;
  224|  2.99M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  6.01M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.99M|{
  459|  2.99M|    auto it = read_code_unit(range);
  460|  2.99M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.99M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  5.90M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 5.90M, False: 2.80M]
  ------------------
  465|  5.90M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 187k, False: 5.71M]
  ------------------
  466|   187k|            return *it;
  467|   187k|        }
  468|  5.90M|    }
  469|       |
  470|  2.80M|    return unexpected(parse_error::error);
  471|  2.99M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   677k|{
  482|   677k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 596k, False: 80.7k]
  ------------------
  483|   596k|        return ranges::begin(range);
  484|   596k|    }
  485|  80.7k|    return *result;
  486|   677k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  6.42M|{
  418|  6.42M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  6.42M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  6.42M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  6.42M|        if (ranges::size(range) < str.size()) {
  423|  6.42M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  6.42M|        }
  425|  6.42M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  6.42M|            return unexpected(parse_error::error);
  427|  6.42M|        }
  428|  6.42M|        return ranges::next(ranges::begin(range), str.size());
  429|  6.42M|    }
  430|  6.42M|    else {
  431|  6.42M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.42M|            if (ch < 'A' || ch > 'Z') {
  433|  6.42M|                return ch;
  434|  6.42M|            }
  435|  6.42M|            return static_cast<char_type>(ch +
  436|  6.42M|                                          static_cast<char_type>('a' - 'A'));
  437|  6.42M|        };
  438|       |
  439|  6.42M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  6.42M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.42M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.42M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 108k, False: 6.31M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   108k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   108k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   108k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   108k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   108k|    }                                                  \
  |  |  |  |   70|  6.42M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  6.31M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  6.31M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  6.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.24M, False: 63.7k]
  |  |  ------------------
  ------------------
  443|  6.31M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  6.31M|                    return ascii_tolower(a) ==
  445|  6.31M|                           static_cast<detail::char_t<Range>>(b);
  446|  6.31M|                }))) {
  447|  6.24M|            return unexpected(parse_error::error);
  448|  6.24M|        }
  449|       |
  450|  63.7k|        return it;
  451|  6.31M|    }
  452|  6.42M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  9.49M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  9.49M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 9.07M, False: 417k]
  |  Branch (432:29): [True: 385k, False: 32.4k]
  ------------------
  433|  9.46M|                return ch;
  434|  9.46M|            }
  435|  32.4k|            return static_cast<char_type>(ch +
  436|  32.4k|                                          static_cast<char_type>('a' - 'A'));
  437|  9.49M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  2.04M|{
  332|  2.04M|    auto it = read_code_unit(range);
  333|  2.04M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.65k, False: 2.03M]
  |  |  ------------------
  ------------------
  334|  1.65k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.65k|    }
  336|       |
  337|  2.03M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.05M, False: 984k]
  |  |  ------------------
  ------------------
  338|  2.03M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.05M|        return unexpected(parse_error::error);
  340|  1.05M|    }
  341|       |
  342|   984k|    return *it;
  343|  2.03M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   611k|{
  178|   611k|    static_assert(ranges::contiguous_range<Range> &&
  179|   611k|                  ranges::sized_range<Range>);
  180|       |
  181|   611k|    std::array<char32_t, 16> cp_buf{};
  182|   611k|    std::array<uint8_t, 16> idx_buf{};
  183|   611k|    auto it = ranges::begin(range);
  184|   611k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 611k, False: 0]
  ------------------
  185|   611k|        auto chunk_begin = it;
  186|   611k|        size_t code_point_count = 0;
  187|   611k|        uint8_t code_unit_idx = 0;
  188|  1.22M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 1.22M, False: 0]
  |  Branch (188:52): [True: 611k, False: 611k]
  ------------------
  189|   611k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 611k, False: 0]
  ------------------
  190|   611k|                idx_buf[code_point_count] = code_unit_idx;
  191|   611k|                ++code_point_count;
  192|   611k|            }
  193|   611k|            ++it;
  194|   611k|            ++code_unit_idx;
  195|   611k|        }
  196|       |
  197|   611k|        auto input = detail::make_string_view_from_pointers(
  198|   611k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   611k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   611k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   611k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 611k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   611k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 611k, False: 0]
  ------------------
  217|   611k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 611k, False: 0]
  ------------------
  218|   611k|                return chunk_begin + idx_buf[i];
  219|   611k|            }
  220|   611k|        }
  221|   611k|    }
  222|       |
  223|      0|    return it;
  224|   611k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   611k|{
  300|   611k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   611k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   611k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   611k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   611k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   611k|        return ranges::next(ranges::begin(range),
  306|   611k|                            ranges::distance(buf.view().begin(), it));
  307|   611k|    }
  308|   611k|    else {
  309|   611k|        auto it = ranges::begin(range);
  310|       |
  311|   611k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   611k|            auto seg = get_contiguous_beginning(range);
  313|   611k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   611k|                seg_it != seg.end()) {
  315|   611k|                return ranges_polyfill::batch_next(
  316|   611k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   611k|            }
  318|   611k|            ranges_polyfill::batch_next(it, seg.size());
  319|   611k|        }
  320|       |
  321|   611k|        return read_while_code_point(
  322|   611k|            SCN_FWD(range),
  ------------------
  |  |  248|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   611k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   611k|    }
  325|   611k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   611k|{
  264|   611k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   611k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   611k|{
  231|   611k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   611k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   611k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   611k|    }
  235|   611k|    else {
  236|   611k|        auto it = ranges::begin(range);
  237|   611k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   611k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   611k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 611k, False: 0]
  ------------------
  241|   611k|            return ranges_polyfill::batch_next(
  242|   611k|                it, ranges::distance(seg.begin(), seg_it));
  243|   611k|        }
  244|       |
  245|      0|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      0|            const auto [iter, value] =
  247|      0|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|      0|            const auto cp = decode_code_point_exhaustive(value.view());
  249|      0|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 0, False: 0]
  ------------------
  250|      0|                return it;
  251|      0|            }
  252|      0|            it = iter;
  253|      0|        }
  254|       |
  255|      0|        return it;
  256|      0|    }
  257|   611k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   611k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   611k|{
  459|   611k|    auto it = read_code_unit(range);
  460|   611k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 611k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  1.22M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 1.22M, False: 611k]
  ------------------
  465|  1.22M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 1.22M]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  1.22M|    }
  469|       |
  470|   611k|    return unexpected(parse_error::error);
  471|   611k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   218k|{
  482|   218k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 218k, False: 0]
  ------------------
  483|   218k|        return ranges::begin(range);
  484|   218k|    }
  485|      0|    return *result;
  486|   218k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  1.13M|{
  418|  1.13M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  1.13M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  1.13M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  1.13M|        if (ranges::size(range) < str.size()) {
  423|  1.13M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  1.13M|        }
  425|  1.13M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  1.13M|            return unexpected(parse_error::error);
  427|  1.13M|        }
  428|  1.13M|        return ranges::next(ranges::begin(range), str.size());
  429|  1.13M|    }
  430|  1.13M|    else {
  431|  1.13M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.13M|            if (ch < 'A' || ch > 'Z') {
  433|  1.13M|                return ch;
  434|  1.13M|            }
  435|  1.13M|            return static_cast<char_type>(ch +
  436|  1.13M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.13M|        };
  438|       |
  439|  1.13M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  1.13M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 312, False: 1.13M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    312|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    312|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    312|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    312|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    312|    }                                                  \
  |  |  |  |   70|  1.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.13M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.13M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.13M, False: 0]
  |  |  ------------------
  ------------------
  443|  1.13M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.13M|                    return ascii_tolower(a) ==
  445|  1.13M|                           static_cast<detail::char_t<Range>>(b);
  446|  1.13M|                }))) {
  447|  1.13M|            return unexpected(parse_error::error);
  448|  1.13M|        }
  449|       |
  450|      0|        return it;
  451|  1.13M|    }
  452|  1.13M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  1.13M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.13M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 1.13M, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|  1.13M|                return ch;
  434|  1.13M|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  1.13M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   393k|{
  332|   393k|    auto it = read_code_unit(range);
  333|   393k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   393k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 393k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   393k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   393k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 393k, False: 0]
  |  |  ------------------
  ------------------
  338|   393k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   393k|        return unexpected(parse_error::error);
  340|   393k|    }
  341|       |
  342|      0|    return *it;
  343|   393k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   524k|{
  159|   524k|    auto it = read_while_code_unit(range, pred);
  160|   524k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 284k, False: 240k]
  ------------------
  161|   284k|        return unexpected(parse_error::error);
  162|   284k|    }
  163|   240k|    return it;
  164|   524k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   524k|{
  139|   524k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   524k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   524k|{
  131|   524k|    return ranges::find_if(range, pred);
  132|   524k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  5.45M|{
   36|  5.45M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.36k, False: 5.45M]
  |  |  ------------------
  ------------------
   37|  1.36k|        return unexpected(e);
   38|  1.36k|    }
   39|       |
   40|  5.45M|    return ranges::next(ranges::begin(range));
   41|  5.45M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   566k|{
   36|   566k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   566k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 566k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   566k|    return ranges::next(ranges::begin(range));
   41|   566k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   640k|{
   48|   640k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   640k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   640k|        const auto sz = ranges::ssize(range);
   52|   640k|        if (sz < count) {
   53|   640k|            return unexpected(eof_error::eof);
   54|   640k|        }
   55|       |
   56|   640k|        return ranges::next(ranges::begin(range), count);
   57|   640k|    }
   58|   640k|    else {
   59|   640k|        auto it = ranges::begin(range);
   60|   640k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 639k, False: 312]
  ------------------
   61|   639k|            return ranges_polyfill::batch_next(it, count);
   62|   639k|        }
   63|       |
   64|    624|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 624, False: 0]
  ------------------
   65|    624|             ++i, (void)++it) {
   66|    624|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 312, False: 312]
  ------------------
   67|    312|                return unexpected(eof_error::eof);
   68|    312|            }
   69|    624|        }
   70|       |
   71|      0|        return it;
   72|    312|    }
   73|   640k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  5.03M|{
   36|  5.03M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.65k, False: 5.03M]
  |  |  ------------------
  ------------------
   37|  1.65k|        return unexpected(e);
   38|  1.65k|    }
   39|       |
   40|  5.03M|    return ranges::next(ranges::begin(range));
   41|  5.03M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  6.42M|{
   48|  6.42M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  6.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  6.42M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  6.42M|        const auto sz = ranges::ssize(range);
   52|  6.42M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 108k, False: 6.31M]
  ------------------
   53|   108k|            return unexpected(eof_error::eof);
   54|   108k|        }
   55|       |
   56|  6.31M|        return ranges::next(ranges::begin(range), count);
   57|  6.42M|    }
   58|  6.42M|    else {
   59|  6.42M|        auto it = ranges::begin(range);
   60|  6.42M|        if (guaranteed_minimum_size(range) >= count) {
   61|  6.42M|            return ranges_polyfill::batch_next(it, count);
   62|  6.42M|        }
   63|       |
   64|  6.42M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  6.42M|             ++i, (void)++it) {
   66|  6.42M|            if (it == ranges::end(range)) {
   67|  6.42M|                return unexpected(eof_error::eof);
   68|  6.42M|            }
   69|  6.42M|        }
   70|       |
   71|  6.42M|        return it;
   72|  6.42M|    }
   73|  6.42M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|  1.00M|{
   36|  1.00M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  1.00M|    return ranges::next(ranges::begin(range));
   41|  1.00M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  1.13M|{
   48|  1.13M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  1.13M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  1.13M|        const auto sz = ranges::ssize(range);
   52|  1.13M|        if (sz < count) {
   53|  1.13M|            return unexpected(eof_error::eof);
   54|  1.13M|        }
   55|       |
   56|  1.13M|        return ranges::next(ranges::begin(range), count);
   57|  1.13M|    }
   58|  1.13M|    else {
   59|  1.13M|        auto it = ranges::begin(range);
   60|  1.13M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 1.13M, False: 312]
  ------------------
   61|  1.13M|            return ranges_polyfill::batch_next(it, count);
   62|  1.13M|        }
   63|       |
   64|    624|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 624, False: 0]
  ------------------
   65|    624|             ++i, (void)++it) {
   66|    624|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 312, False: 312]
  ------------------
   67|    312|                return unexpected(eof_error::eof);
   68|    312|            }
   69|    624|        }
   70|       |
   71|      0|        return it;
   72|    312|    }
   73|  1.13M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  3.49M|{
   33|  3.49M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  3.49M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|   965k|{
   39|   965k|    static_assert(std::is_same_v<Locale, std::locale>);
   40|   965k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 482k, False: 482k]
  ------------------
   41|   965k|                    : std::locale{};
   42|   965k|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   479k|    {
  112|   479k|        auto stdloc = loc.get<std::locale>();
  113|   479k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   479k|        grouping = numpunct.grouping();
  115|   479k|        thousands_sep =
  116|   479k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 479k]
  ------------------
  117|   479k|        decimal_point = numpunct.decimal_point();
  118|   479k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   479k|{
   49|   479k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 479k, False: 0]
  ------------------
   50|   479k|        return std::use_facet<Facet>(stdloc);
   51|   479k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   479k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   486k|    {
  112|   486k|        auto stdloc = loc.get<std::locale>();
  113|   486k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   486k|        grouping = numpunct.grouping();
  115|   486k|        thousands_sep =
  116|   486k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 486k]
  ------------------
  117|   486k|        decimal_point = numpunct.decimal_point();
  118|   486k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   486k|{
   49|   486k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 486k, False: 0]
  ------------------
   50|   486k|        return std::use_facet<Facet>(stdloc);
   51|   486k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   486k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  3.23M|{
   46|  3.23M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 3.23M, False: 0]
  ------------------
   47|  3.23M|        auto it = read_while_classic_space(range);
   48|  3.23M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  3.23M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.98k, False: 3.23M]
  |  |  ------------------
  ------------------
   50|  3.98k|            return unexpected(e);
   51|  3.98k|        }
   52|       |
   53|  3.23M|        return it;
   54|  3.23M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  3.23M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  3.60M|    {
  126|  3.60M|        return true;
  127|  3.60M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   344k|{
   46|   344k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 344k, False: 0]
  ------------------
   47|   344k|        auto it = read_while_classic_space(range);
   48|   344k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   344k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   344k|        return it;
   54|   344k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   344k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  2.61M|    {
  131|  2.61M|        reader_error_handler eh{};
  132|  2.61M|        get_derived().check_specs_impl(specs, eh);
  133|  2.61M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  2.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.61M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.61M|        return {};
  137|  2.61M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  2.61M|    {
  142|  2.61M|        return static_cast<Derived&>(*this);
  143|  2.61M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  5.28M|    {
   35|  5.28M|        return m_msg == nullptr;
   36|  5.28M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.99M|{
   46|  2.99M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.99M, False: 0]
  ------------------
   47|  2.99M|        auto it = read_while_classic_space(range);
   48|  2.99M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.99M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.77k, False: 2.99M]
  |  |  ------------------
  ------------------
   50|  5.77k|            return unexpected(e);
   51|  5.77k|        }
   52|       |
   53|  2.99M|        return it;
   54|  2.99M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.99M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  3.63M|    {
  126|  3.63M|        return true;
  127|  3.63M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  2.66M|    {
  131|  2.66M|        reader_error_handler eh{};
  132|  2.66M|        get_derived().check_specs_impl(specs, eh);
  133|  2.66M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  2.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.66M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.66M|        return {};
  137|  2.66M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  2.66M|    {
  142|  2.66M|        return static_cast<Derived&>(*this);
  143|  2.66M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   611k|{
   46|   611k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 611k, False: 0]
  ------------------
   47|   611k|        auto it = read_while_classic_space(range);
   48|   611k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   611k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 611k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   611k|        return it;
   54|   611k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   611k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   378k|{
  218|   378k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   378k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   378k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   378k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   378k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   378k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   378k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   378k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   378k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   378k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   378k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   378k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   378k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 14.3k, False: 363k]
  ------------------
  224|  14.3k|        SCN_UNLIKELY_ATTR
  225|  14.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  14.3k|                                     "Invalid integer value");
  227|  14.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   363k|    auto start = source.data();
  231|   363k|    const auto end = source.data() + source.size();
  232|   363k|    {
  233|   831k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 820k, False: 11.5k]
  ------------------
  234|   820k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 352k, False: 468k]
  ------------------
  235|   352k|                break;
  236|   352k|            }
  237|   820k|        }
  238|   363k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   715k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.8k, False: 287k]
  |  |  |  Branch (153:45): [True: 11.5k, False: 352k]
  |  |  |  Branch (153:45): [True: 64.2k, False: 287k]
  |  |  ------------------
  ------------------
  239|  75.8k|            value = 0;
  240|  75.8k|            return ranges::next(source.begin(),
  241|  75.8k|                                ranges::distance(source.data(), start));
  242|  75.8k|        }
  243|   363k|    }
  244|       |
  245|   287k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   287k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 208k, False: 79.7k]
  ------------------
  247|   208k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   208k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   208k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   208k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.23k, False: 201k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.23k|    }                                                  \
  |  |  |  |   70|   208k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   201k|                             detail::make_string_view_from_pointers(start, end),
  249|   201k|                             value, sign == sign_type::minus_sign));
  250|   201k|            return ranges::next(source.begin(),
  251|   201k|                                ranges::distance(source.data(), ptr));
  252|   208k|        }
  253|   287k|    }
  254|       |
  255|  79.7k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  79.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.05k, False: 74.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.05k|    }                                                  \
  |  |  |  |   70|  79.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  74.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  74.6k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  74.6k|                     base, sign == sign_type::minus_sign));
  258|  74.6k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  79.7k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   370k|{
  218|   370k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   370k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   370k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   370k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   370k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 36.4k, False: 334k]
  ------------------
  224|  36.4k|        SCN_UNLIKELY_ATTR
  225|  36.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  36.4k|                                     "Invalid integer value");
  227|  36.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   334k|    auto start = source.data();
  231|   334k|    const auto end = source.data() + source.size();
  232|   334k|    {
  233|   739k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 728k, False: 10.9k]
  ------------------
  234|   728k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 323k, False: 404k]
  ------------------
  235|   323k|                break;
  236|   323k|            }
  237|   728k|        }
  238|   334k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   657k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 69.2k, False: 265k]
  |  |  |  Branch (153:45): [True: 10.9k, False: 323k]
  |  |  |  Branch (153:45): [True: 58.3k, False: 265k]
  |  |  ------------------
  ------------------
  239|  69.2k|            value = 0;
  240|  69.2k|            return ranges::next(source.begin(),
  241|  69.2k|                                ranges::distance(source.data(), start));
  242|  69.2k|        }
  243|   334k|    }
  244|       |
  245|   265k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   265k|        if (base == 10) {
  247|   265k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   265k|                             detail::make_string_view_from_pointers(start, end),
  249|   265k|                             value, sign == sign_type::minus_sign));
  250|   265k|            return ranges::next(source.begin(),
  251|   265k|                                ranges::distance(source.data(), ptr));
  252|   265k|        }
  253|   265k|    }
  254|       |
  255|   265k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   265k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   265k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   265k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.00k, False: 256k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.00k|    }                                                  \
  |  |  |  |   70|   265k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   256k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   256k|                     base, sign == sign_type::minus_sign));
  258|   256k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   265k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   532k|{
  218|   532k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   532k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   532k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   532k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   532k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 17.8k, False: 514k]
  ------------------
  224|  17.8k|        SCN_UNLIKELY_ATTR
  225|  17.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  17.8k|                                     "Invalid integer value");
  227|  17.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   514k|    auto start = source.data();
  231|   514k|    const auto end = source.data() + source.size();
  232|   514k|    {
  233|  1.09M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.08M, False: 15.5k]
  ------------------
  234|  1.08M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 499k, False: 581k]
  ------------------
  235|   499k|                break;
  236|   499k|            }
  237|  1.08M|        }
  238|   514k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 118k, False: 396k]
  |  |  |  Branch (153:45): [True: 15.5k, False: 499k]
  |  |  |  Branch (153:45): [True: 103k, False: 396k]
  |  |  ------------------
  ------------------
  239|   118k|            value = 0;
  240|   118k|            return ranges::next(source.begin(),
  241|   118k|                                ranges::distance(source.data(), start));
  242|   118k|        }
  243|   514k|    }
  244|       |
  245|   396k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   396k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 267k, False: 129k]
  ------------------
  247|   267k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   267k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   267k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   267k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.77k, False: 264k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.77k|    }                                                  \
  |  |  |  |   70|   267k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   264k|                             detail::make_string_view_from_pointers(start, end),
  249|   264k|                             value, sign == sign_type::minus_sign));
  250|   264k|            return ranges::next(source.begin(),
  251|   264k|                                ranges::distance(source.data(), ptr));
  252|   267k|        }
  253|   396k|    }
  254|       |
  255|   129k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.97k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.97k|    }                                                  \
  |  |  |  |   70|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   127k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   127k|                     base, sign == sign_type::minus_sign));
  258|   127k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   129k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   507k|{
  218|   507k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   507k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   507k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   507k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   507k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   507k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   507k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   507k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   507k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   507k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   507k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   507k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   507k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 38.8k, False: 468k]
  ------------------
  224|  38.8k|        SCN_UNLIKELY_ATTR
  225|  38.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  38.8k|                                     "Invalid integer value");
  227|  38.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   468k|    auto start = source.data();
  231|   468k|    const auto end = source.data() + source.size();
  232|   468k|    {
  233|   978k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 964k, False: 14.7k]
  ------------------
  234|   964k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 453k, False: 510k]
  ------------------
  235|   453k|                break;
  236|   453k|            }
  237|   964k|        }
  238|   468k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   921k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 109k, False: 358k]
  |  |  |  Branch (153:45): [True: 14.7k, False: 453k]
  |  |  |  Branch (153:45): [True: 94.5k, False: 358k]
  |  |  ------------------
  ------------------
  239|   109k|            value = 0;
  240|   109k|            return ranges::next(source.begin(),
  241|   109k|                                ranges::distance(source.data(), start));
  242|   109k|        }
  243|   468k|    }
  244|       |
  245|   358k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   358k|        if (base == 10) {
  247|   358k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   358k|                             detail::make_string_view_from_pointers(start, end),
  249|   358k|                             value, sign == sign_type::minus_sign));
  250|   358k|            return ranges::next(source.begin(),
  251|   358k|                                ranges::distance(source.data(), ptr));
  252|   358k|        }
  253|   358k|    }
  254|       |
  255|   358k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   358k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   358k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   358k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.72k, False: 355k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.72k|    }                                                  \
  |  |  |  |   70|   358k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   355k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   355k|                     base, sign == sign_type::minus_sign));
  258|   355k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   358k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   545k|{
  218|   545k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   545k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   545k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   545k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   545k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   545k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   545k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   545k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   545k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   545k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   545k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   545k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   545k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 19.2k, False: 525k]
  ------------------
  224|  19.2k|        SCN_UNLIKELY_ATTR
  225|  19.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  19.2k|                                     "Invalid integer value");
  227|  19.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   525k|    auto start = source.data();
  231|   525k|    const auto end = source.data() + source.size();
  232|   525k|    {
  233|  1.12M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.10M, False: 15.6k]
  ------------------
  234|  1.10M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 510k, False: 594k]
  ------------------
  235|   510k|                break;
  236|   510k|            }
  237|  1.10M|        }
  238|   525k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 119k, False: 406k]
  |  |  |  Branch (153:45): [True: 15.6k, False: 510k]
  |  |  |  Branch (153:45): [True: 103k, False: 406k]
  |  |  ------------------
  ------------------
  239|   119k|            value = 0;
  240|   119k|            return ranges::next(source.begin(),
  241|   119k|                                ranges::distance(source.data(), start));
  242|   119k|        }
  243|   525k|    }
  244|       |
  245|   406k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   406k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 273k, False: 133k]
  ------------------
  247|   273k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   273k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.37k, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.37k|    }                                                  \
  |  |  |  |   70|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   271k|                             detail::make_string_view_from_pointers(start, end),
  249|   271k|                             value, sign == sign_type::minus_sign));
  250|   271k|            return ranges::next(source.begin(),
  251|   271k|                                ranges::distance(source.data(), ptr));
  252|   273k|        }
  253|   406k|    }
  254|       |
  255|   133k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.18k, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.18k|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   132k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   132k|                     base, sign == sign_type::minus_sign));
  258|   132k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   133k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   518k|{
  218|   518k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   518k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   518k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   518k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   518k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 39.7k, False: 478k]
  ------------------
  224|  39.7k|        SCN_UNLIKELY_ATTR
  225|  39.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  39.7k|                                     "Invalid integer value");
  227|  39.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   478k|    auto start = source.data();
  231|   478k|    const auto end = source.data() + source.size();
  232|   478k|    {
  233|   996k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 981k, False: 14.8k]
  ------------------
  234|   981k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 463k, False: 518k]
  ------------------
  235|   463k|                break;
  236|   463k|            }
  237|   981k|        }
  238|   478k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   941k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 110k, False: 368k]
  |  |  |  Branch (153:45): [True: 14.8k, False: 463k]
  |  |  |  Branch (153:45): [True: 95.1k, False: 368k]
  |  |  ------------------
  ------------------
  239|   110k|            value = 0;
  240|   110k|            return ranges::next(source.begin(),
  241|   110k|                                ranges::distance(source.data(), start));
  242|   110k|        }
  243|   478k|    }
  244|       |
  245|   368k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   368k|        if (base == 10) {
  247|   368k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   368k|                             detail::make_string_view_from_pointers(start, end),
  249|   368k|                             value, sign == sign_type::minus_sign));
  250|   368k|            return ranges::next(source.begin(),
  251|   368k|                                ranges::distance(source.data(), ptr));
  252|   368k|        }
  253|   368k|    }
  254|       |
  255|   368k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   368k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   368k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   368k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.13k, False: 366k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.13k|    }                                                  \
  |  |  |  |   70|   368k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   366k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   366k|                     base, sign == sign_type::minus_sign));
  258|   366k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   368k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   364k|{
  218|   364k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   364k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   364k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   364k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   364k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 10.8k, False: 353k]
  ------------------
  224|  10.8k|        SCN_UNLIKELY_ATTR
  225|  10.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  10.8k|                                     "Invalid integer value");
  227|  10.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   353k|    auto start = source.data();
  231|   353k|    const auto end = source.data() + source.size();
  232|   353k|    {
  233|   846k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 835k, False: 11.8k]
  ------------------
  234|   835k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 341k, False: 493k]
  ------------------
  235|   341k|                break;
  236|   341k|            }
  237|   835k|        }
  238|   353k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 87.1k, False: 266k]
  |  |  |  Branch (153:45): [True: 11.8k, False: 341k]
  |  |  |  Branch (153:45): [True: 75.3k, False: 266k]
  |  |  ------------------
  ------------------
  239|  87.1k|            value = 0;
  240|  87.1k|            return ranges::next(source.begin(),
  241|  87.1k|                                ranges::distance(source.data(), start));
  242|  87.1k|        }
  243|   353k|    }
  244|       |
  245|   266k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   266k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 182k, False: 83.6k]
  ------------------
  247|   182k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   182k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   182k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   182k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.87k, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.87k|    }                                                  \
  |  |  |  |   70|   182k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   180k|                             detail::make_string_view_from_pointers(start, end),
  249|   180k|                             value, sign == sign_type::minus_sign));
  250|   180k|            return ranges::next(source.begin(),
  251|   180k|                                ranges::distance(source.data(), ptr));
  252|   182k|        }
  253|   266k|    }
  254|       |
  255|  83.6k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  83.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.53k, False: 81.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.53k|    }                                                  \
  |  |  |  |   70|  83.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  81.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  81.0k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  81.0k|                     base, sign == sign_type::minus_sign));
  258|  81.0k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  83.6k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   370k|{
  218|   370k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   370k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   370k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   370k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   370k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 34.2k, False: 336k]
  ------------------
  224|  34.2k|        SCN_UNLIKELY_ATTR
  225|  34.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  34.2k|                                     "Invalid integer value");
  227|  34.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   336k|    auto start = source.data();
  231|   336k|    const auto end = source.data() + source.size();
  232|   336k|    {
  233|   765k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 753k, False: 11.1k]
  ------------------
  234|   753k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 325k, False: 428k]
  ------------------
  235|   325k|                break;
  236|   325k|            }
  237|   753k|        }
  238|   336k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   661k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 80.7k, False: 255k]
  |  |  |  Branch (153:45): [True: 11.1k, False: 325k]
  |  |  |  Branch (153:45): [True: 69.6k, False: 255k]
  |  |  ------------------
  ------------------
  239|  80.7k|            value = 0;
  240|  80.7k|            return ranges::next(source.begin(),
  241|  80.7k|                                ranges::distance(source.data(), start));
  242|  80.7k|        }
  243|   336k|    }
  244|       |
  245|   255k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   255k|        if (base == 10) {
  247|   255k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   255k|                             detail::make_string_view_from_pointers(start, end),
  249|   255k|                             value, sign == sign_type::minus_sign));
  250|   255k|            return ranges::next(source.begin(),
  251|   255k|                                ranges::distance(source.data(), ptr));
  252|   255k|        }
  253|   255k|    }
  254|       |
  255|   255k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.39k, False: 251k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.39k|    }                                                  \
  |  |  |  |   70|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   251k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   251k|                     base, sign == sign_type::minus_sign));
  258|   251k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   255k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   437k|{
  218|   437k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   437k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   437k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   437k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   437k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 12.0k, False: 425k]
  ------------------
  224|  12.0k|        SCN_UNLIKELY_ATTR
  225|  12.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  12.0k|                                     "Invalid integer value");
  227|  12.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   425k|    auto start = source.data();
  231|   425k|    const auto end = source.data() + source.size();
  232|   425k|    {
  233|   968k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 955k, False: 13.1k]
  ------------------
  234|   955k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 412k, False: 542k]
  ------------------
  235|   412k|                break;
  236|   412k|            }
  237|   955k|        }
  238|   425k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 99.6k, False: 326k]
  |  |  |  Branch (153:45): [True: 13.1k, False: 412k]
  |  |  |  Branch (153:45): [True: 86.4k, False: 326k]
  |  |  ------------------
  ------------------
  239|  99.6k|            value = 0;
  240|  99.6k|            return ranges::next(source.begin(),
  241|  99.6k|                                ranges::distance(source.data(), start));
  242|  99.6k|        }
  243|   425k|    }
  244|       |
  245|   326k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   326k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 219k, False: 106k]
  ------------------
  247|   219k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   219k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.24k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.24k|    }                                                  \
  |  |  |  |   70|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   218k|                             detail::make_string_view_from_pointers(start, end),
  249|   218k|                             value, sign == sign_type::minus_sign));
  250|   218k|            return ranges::next(source.begin(),
  251|   218k|                                ranges::distance(source.data(), ptr));
  252|   219k|        }
  253|   326k|    }
  254|       |
  255|   106k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.16k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.16k|    }                                                  \
  |  |  |  |   70|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   105k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   105k|                     base, sign == sign_type::minus_sign));
  258|   105k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   106k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   436k|{
  218|   436k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   436k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   436k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   436k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   436k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   436k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   436k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   436k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   436k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   436k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   436k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   436k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   436k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 35.0k, False: 401k]
  ------------------
  224|  35.0k|        SCN_UNLIKELY_ATTR
  225|  35.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  35.0k|                                     "Invalid integer value");
  227|  35.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   401k|    auto start = source.data();
  231|   401k|    const auto end = source.data() + source.size();
  232|   401k|    {
  233|   876k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 863k, False: 12.4k]
  ------------------
  234|   863k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 389k, False: 474k]
  ------------------
  235|   389k|                break;
  236|   389k|            }
  237|   863k|        }
  238|   401k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   791k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 92.0k, False: 309k]
  |  |  |  Branch (153:45): [True: 12.4k, False: 389k]
  |  |  |  Branch (153:45): [True: 79.5k, False: 309k]
  |  |  ------------------
  ------------------
  239|  92.0k|            value = 0;
  240|  92.0k|            return ranges::next(source.begin(),
  241|  92.0k|                                ranges::distance(source.data(), start));
  242|  92.0k|        }
  243|   401k|    }
  244|       |
  245|   309k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   309k|        if (base == 10) {
  247|   309k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   309k|                             detail::make_string_view_from_pointers(start, end),
  249|   309k|                             value, sign == sign_type::minus_sign));
  250|   309k|            return ranges::next(source.begin(),
  251|   309k|                                ranges::distance(source.data(), ptr));
  252|   309k|        }
  253|   309k|    }
  254|       |
  255|   309k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.87k, False: 307k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.87k|    }                                                  \
  |  |  |  |   70|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   307k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   307k|                     base, sign == sign_type::minus_sign));
  258|   307k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   309k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   442k|{
  218|   442k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   442k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   442k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   442k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   442k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 12.3k, False: 430k]
  ------------------
  224|  12.3k|        SCN_UNLIKELY_ATTR
  225|  12.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  12.3k|                                     "Invalid integer value");
  227|  12.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   430k|    auto start = source.data();
  231|   430k|    const auto end = source.data() + source.size();
  232|   430k|    {
  233|   974k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 961k, False: 13.2k]
  ------------------
  234|   961k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 416k, False: 544k]
  ------------------
  235|   416k|                break;
  236|   416k|            }
  237|   961k|        }
  238|   430k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 100k, False: 330k]
  |  |  |  Branch (153:45): [True: 13.2k, False: 416k]
  |  |  |  Branch (153:45): [True: 86.7k, False: 330k]
  |  |  ------------------
  ------------------
  239|   100k|            value = 0;
  240|   100k|            return ranges::next(source.begin(),
  241|   100k|                                ranges::distance(source.data(), start));
  242|   100k|        }
  243|   430k|    }
  244|       |
  245|   330k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   330k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 222k, False: 108k]
  ------------------
  247|   222k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 587, False: 221k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    587|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    587|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    587|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    587|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    587|    }                                                  \
  |  |  |  |   70|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   221k|                             detail::make_string_view_from_pointers(start, end),
  249|   221k|                             value, sign == sign_type::minus_sign));
  250|   221k|            return ranges::next(source.begin(),
  251|   221k|                                ranges::distance(source.data(), ptr));
  252|   222k|        }
  253|   330k|    }
  254|       |
  255|   108k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 722, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    722|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    722|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    722|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    722|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    722|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   107k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   107k|                     base, sign == sign_type::minus_sign));
  258|   107k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   108k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   441k|{
  218|   441k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   441k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   441k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   441k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   441k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   441k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   441k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 35.2k, False: 405k]
  ------------------
  224|  35.2k|        SCN_UNLIKELY_ATTR
  225|  35.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  35.2k|                                     "Invalid integer value");
  227|  35.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   405k|    auto start = source.data();
  231|   405k|    const auto end = source.data() + source.size();
  232|   405k|    {
  233|   882k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 869k, False: 12.4k]
  ------------------
  234|   869k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 393k, False: 476k]
  ------------------
  235|   393k|                break;
  236|   393k|            }
  237|   869k|        }
  238|   405k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   799k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 92.3k, False: 313k]
  |  |  |  Branch (153:45): [True: 12.4k, False: 393k]
  |  |  |  Branch (153:45): [True: 79.8k, False: 313k]
  |  |  ------------------
  ------------------
  239|  92.3k|            value = 0;
  240|  92.3k|            return ranges::next(source.begin(),
  241|  92.3k|                                ranges::distance(source.data(), start));
  242|  92.3k|        }
  243|   405k|    }
  244|       |
  245|   313k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   313k|        if (base == 10) {
  247|   313k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   313k|                             detail::make_string_view_from_pointers(start, end),
  249|   313k|                             value, sign == sign_type::minus_sign));
  250|   313k|            return ranges::next(source.begin(),
  251|   313k|                                ranges::distance(source.data(), ptr));
  252|   313k|        }
  253|   313k|    }
  254|       |
  255|   313k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   313k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   313k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   313k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.07k, False: 312k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.07k|    }                                                  \
  |  |  |  |   70|   313k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   312k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   312k|                     base, sign == sign_type::minus_sign));
  258|   312k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   313k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   553k|{
  126|   553k|    auto max_digits = maxdigits_u64(base);
  127|   553k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.06k, False: 549k]
  ------------------
  128|  3.06k|        return true;
  129|  3.06k|    }
  130|   549k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 601, False: 549k]
  |  Branch (130:39): [True: 76, False: 525]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   549k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   549k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 17.1k, False: 532k]
  ------------------
  135|   549k|                      static_cast<uint64_t>(is_negative)) {
  136|  17.1k|            SCN_UNLIKELY_ATTR
  137|  17.1k|            return true;
  138|  17.1k|        }
  139|   549k|    }
  140|       |
  141|   532k|    return false;
  142|   549k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  3.88M|{
   96|  3.88M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  3.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  3.88M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  3.64k|{
  116|  3.64k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  3.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  3.64k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   532k|{
  147|   532k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 44.2k, False: 488k]
  ------------------
  148|  44.2k|        SCN_MSVC_PUSH
  149|  44.2k|        SCN_MSVC_IGNORE(4146)
  150|  44.2k|        return static_cast<T>(
  151|  44.2k|            -std::numeric_limits<T>::max() -
  152|  44.2k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  44.2k|        SCN_MSVC_POP
  154|  44.2k|    }
  155|       |
  156|   488k|    return static_cast<T>(u64val);
  157|   532k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|   755k|{
  126|   755k|    auto max_digits = maxdigits_u64(base);
  127|   755k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.35k, False: 751k]
  ------------------
  128|  3.35k|        return true;
  129|  3.35k|    }
  130|   751k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 657, False: 751k]
  |  Branch (130:39): [True: 76, False: 581]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   751k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   751k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 5.04k, False: 746k]
  ------------------
  135|   751k|                      static_cast<uint64_t>(is_negative)) {
  136|  5.04k|            SCN_UNLIKELY_ATTR
  137|  5.04k|            return true;
  138|  5.04k|        }
  139|   751k|    }
  140|       |
  141|   746k|    return false;
  142|   751k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|   746k|{
  147|   746k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 57.7k, False: 688k]
  ------------------
  148|  57.7k|        SCN_MSVC_PUSH
  149|  57.7k|        SCN_MSVC_IGNORE(4146)
  150|  57.7k|        return static_cast<T>(
  151|  57.7k|            -std::numeric_limits<T>::max() -
  152|  57.7k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  57.7k|        SCN_MSVC_POP
  154|  57.7k|    }
  155|       |
  156|   688k|    return static_cast<T>(u64val);
  157|   746k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|   774k|{
  126|   774k|    auto max_digits = maxdigits_u64(base);
  127|   774k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 4.14k, False: 770k]
  ------------------
  128|  4.14k|        return true;
  129|  4.14k|    }
  130|   770k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.08k, False: 769k]
  |  Branch (130:39): [True: 80, False: 1.00k]
  ------------------
  131|     80|        return true;
  132|     80|    }
  133|   770k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   770k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 462, False: 769k]
  ------------------
  135|   770k|                      static_cast<uint64_t>(is_negative)) {
  136|    462|            SCN_UNLIKELY_ATTR
  137|    462|            return true;
  138|    462|        }
  139|   770k|    }
  140|       |
  141|   769k|    return false;
  142|   770k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|   769k|{
  147|   769k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 64.5k, False: 705k]
  ------------------
  148|  64.5k|        SCN_MSVC_PUSH
  149|  64.5k|        SCN_MSVC_IGNORE(4146)
  150|  64.5k|        return static_cast<T>(
  151|  64.5k|            -std::numeric_limits<T>::max() -
  152|  64.5k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  64.5k|        SCN_MSVC_POP
  154|  64.5k|    }
  155|       |
  156|   705k|    return static_cast<T>(u64val);
  157|   769k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   522k|{
  126|   522k|    auto max_digits = maxdigits_u64(base);
  127|   522k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.95k, False: 520k]
  ------------------
  128|  1.95k|        return true;
  129|  1.95k|    }
  130|   520k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 351, False: 519k]
  |  Branch (130:39): [True: 76, False: 275]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   520k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   520k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 7.77k, False: 512k]
  ------------------
  135|   520k|                      static_cast<uint64_t>(is_negative)) {
  136|  7.77k|            SCN_UNLIKELY_ATTR
  137|  7.77k|            return true;
  138|  7.77k|        }
  139|   520k|    }
  140|       |
  141|   512k|    return false;
  142|   520k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   512k|{
  147|   512k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 512k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   512k|    return static_cast<T>(u64val);
  157|   512k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   635k|{
  126|   635k|    auto max_digits = maxdigits_u64(base);
  127|   635k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.07k, False: 633k]
  ------------------
  128|  2.07k|        return true;
  129|  2.07k|    }
  130|   633k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 351, False: 633k]
  |  Branch (130:39): [True: 76, False: 275]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   633k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   633k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 2.12k, False: 631k]
  ------------------
  135|   633k|                      static_cast<uint64_t>(is_negative)) {
  136|  2.12k|            SCN_UNLIKELY_ATTR
  137|  2.12k|            return true;
  138|  2.12k|        }
  139|   633k|    }
  140|       |
  141|   631k|    return false;
  142|   633k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   631k|{
  147|   631k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 631k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   631k|    return static_cast<T>(u64val);
  157|   631k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   643k|{
  126|   643k|    auto max_digits = maxdigits_u64(base);
  127|   643k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.30k, False: 641k]
  ------------------
  128|  2.30k|        return true;
  129|  2.30k|    }
  130|   641k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 603, False: 640k]
  |  Branch (130:39): [True: 76, False: 527]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   641k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   641k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 641k]
  ------------------
  135|   641k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   641k|    }
  140|       |
  141|   641k|    return false;
  142|   641k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   641k|{
  147|   641k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 641k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   641k|    return static_cast<T>(u64val);
  157|   641k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  1.06M|{
   34|  1.06M|    uint64_t val{};
   35|  1.06M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  1.06M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  542|  1.06M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (542:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  1.06M|    return val;
   40|  1.06M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  62.6k|{
   44|  62.6k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  62.6k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  62.6k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  62.6k|    word -= 0x3030303030303030;
   48|  62.6k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  62.6k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  62.6k|    return static_cast<uint32_t>(word);
   51|  62.6k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|  1.00M|{
   55|  1.00M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|  1.00M|              0x8080808080808080));
   57|  1.00M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   208k|{
  164|   208k|    uint64_t u64val{};
  165|   208k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   208k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   208k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   208k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.23k, False: 201k]
  |  |  ------------------
  ------------------
  170|   208k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  6.23k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  6.23k|                                     "Integer overflow");
  173|  6.23k|    }
  174|       |
  175|   201k|    val = store_result<T>(u64val, is_negative);
  176|   201k|    return ptr;
  177|   208k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  1.37M|{
   76|  1.37M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  3.26M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 2.86M, False: 397k]
  ------------------
   79|  2.86M|        const auto digit = char_to_int(*begin);
   80|  2.86M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 975k, False: 1.89M]
  ------------------
   81|   975k|            break;
   82|   975k|        }
   83|  1.89M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  1.89M|        ++begin;
   85|  1.89M|    }
   86|       |
   87|  1.37M|    return begin;
   88|  1.37M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  1.37M|{
   63|  1.37M|    while (
   64|  1.43M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 1.00M, False: 430k]
  ------------------
   65|  1.43M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 62.6k, False: 942k]
  ------------------
   66|  62.6k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  62.6k|                                      get_eight_digits_word(p));
   68|  62.6k|        p += 8;
   69|  62.6k|    }
   70|  1.37M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  79.7k|{
  185|  79.7k|    uint64_t u64val{};
  186|  79.7k|    const CharT* begin = input.data();
  187|  79.7k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   267k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 248k, False: 18.3k]
  ------------------
  190|   248k|        const auto digit = char_to_int(*begin);
  191|   248k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 61.3k, False: 187k]
  ------------------
  192|  61.3k|            break;
  193|  61.3k|        }
  194|   187k|        u64val =
  195|   187k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   187k|        ++begin;
  197|   187k|    }
  198|       |
  199|  79.7k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  79.7k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.05k, False: 74.6k]
  |  |  ------------------
  ------------------
  201|  79.7k|                                               is_negative))) {
  202|  5.05k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  5.05k|                                     "Integer overflow");
  204|  5.05k|    }
  205|       |
  206|  74.6k|    val = store_result<T>(u64val, is_negative);
  207|  74.6k|    return begin;
  208|  79.7k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   265k|{
  185|   265k|    uint64_t u64val{};
  186|   265k|    const CharT* begin = input.data();
  187|   265k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   815k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 721k, False: 94.1k]
  ------------------
  190|   721k|        const auto digit = char_to_int(*begin);
  191|   721k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 171k, False: 550k]
  ------------------
  192|   171k|            break;
  193|   171k|        }
  194|   550k|        u64val =
  195|   550k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   550k|        ++begin;
  197|   550k|    }
  198|       |
  199|   265k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   265k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.00k, False: 256k]
  |  |  ------------------
  ------------------
  201|   265k|                                               is_negative))) {
  202|  9.00k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  9.00k|                                     "Integer overflow");
  204|  9.00k|    }
  205|       |
  206|   256k|    val = store_result<T>(u64val, is_negative);
  207|   256k|    return begin;
  208|   265k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   267k|{
  164|   267k|    uint64_t u64val{};
  165|   267k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   267k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   267k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   267k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.77k, False: 264k]
  |  |  ------------------
  ------------------
  170|   267k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.77k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.77k|                                     "Integer overflow");
  173|  2.77k|    }
  174|       |
  175|   264k|    val = store_result<T>(u64val, is_negative);
  176|   264k|    return ptr;
  177|   267k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   129k|{
  185|   129k|    uint64_t u64val{};
  186|   129k|    const CharT* begin = input.data();
  187|   129k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   392k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 371k, False: 21.2k]
  ------------------
  190|   371k|        const auto digit = char_to_int(*begin);
  191|   371k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 107k, False: 263k]
  ------------------
  192|   107k|            break;
  193|   107k|        }
  194|   263k|        u64val =
  195|   263k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   263k|        ++begin;
  197|   263k|    }
  198|       |
  199|   129k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   129k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.97k, False: 127k]
  |  |  ------------------
  ------------------
  201|   129k|                                               is_negative))) {
  202|  1.97k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.97k|                                     "Integer overflow");
  204|  1.97k|    }
  205|       |
  206|   127k|    val = store_result<T>(u64val, is_negative);
  207|   127k|    return begin;
  208|   129k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   358k|{
  185|   358k|    uint64_t u64val{};
  186|   358k|    const CharT* begin = input.data();
  187|   358k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.08M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 974k, False: 106k]
  ------------------
  190|   974k|        const auto digit = char_to_int(*begin);
  191|   974k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 252k, False: 722k]
  ------------------
  192|   252k|            break;
  193|   252k|        }
  194|   722k|        u64val =
  195|   722k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   722k|        ++begin;
  197|   722k|    }
  198|       |
  199|   358k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   358k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.72k, False: 355k]
  |  |  ------------------
  ------------------
  201|   358k|                                               is_negative))) {
  202|  3.72k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.72k|                                     "Integer overflow");
  204|  3.72k|    }
  205|       |
  206|   355k|    val = store_result<T>(u64val, is_negative);
  207|   355k|    return begin;
  208|   358k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   273k|{
  164|   273k|    uint64_t u64val{};
  165|   273k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   273k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   273k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   273k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.37k, False: 271k]
  |  |  ------------------
  ------------------
  170|   273k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.37k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.37k|                                     "Integer overflow");
  173|  1.37k|    }
  174|       |
  175|   271k|    val = store_result<T>(u64val, is_negative);
  176|   271k|    return ptr;
  177|   273k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   133k|{
  185|   133k|    uint64_t u64val{};
  186|   133k|    const CharT* begin = input.data();
  187|   133k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   418k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 397k, False: 21.6k]
  ------------------
  190|   397k|        const auto digit = char_to_int(*begin);
  191|   397k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 111k, False: 285k]
  ------------------
  192|   111k|            break;
  193|   111k|        }
  194|   285k|        u64val =
  195|   285k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   285k|        ++begin;
  197|   285k|    }
  198|       |
  199|   133k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   133k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.18k, False: 132k]
  |  |  ------------------
  ------------------
  201|   133k|                                               is_negative))) {
  202|  1.18k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.18k|                                     "Integer overflow");
  204|  1.18k|    }
  205|       |
  206|   132k|    val = store_result<T>(u64val, is_negative);
  207|   132k|    return begin;
  208|   133k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   368k|{
  185|   368k|    uint64_t u64val{};
  186|   368k|    const CharT* begin = input.data();
  187|   368k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.13M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.02M, False: 108k]
  ------------------
  190|  1.02M|        const auto digit = char_to_int(*begin);
  191|  1.02M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 259k, False: 763k]
  ------------------
  192|   259k|            break;
  193|   259k|        }
  194|   763k|        u64val =
  195|   763k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   763k|        ++begin;
  197|   763k|    }
  198|       |
  199|   368k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   368k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.13k, False: 366k]
  |  |  ------------------
  ------------------
  201|   368k|                                               is_negative))) {
  202|  2.13k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.13k|                                     "Integer overflow");
  204|  2.13k|    }
  205|       |
  206|   366k|    val = store_result<T>(u64val, is_negative);
  207|   366k|    return begin;
  208|   368k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   182k|{
  164|   182k|    uint64_t u64val{};
  165|   182k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   182k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   182k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   182k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.87k, False: 180k]
  |  |  ------------------
  ------------------
  170|   182k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.87k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.87k|                                     "Integer overflow");
  173|  2.87k|    }
  174|       |
  175|   180k|    val = store_result<T>(u64val, is_negative);
  176|   180k|    return ptr;
  177|   182k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  83.6k|{
  185|  83.6k|    uint64_t u64val{};
  186|  83.6k|    const CharT* begin = input.data();
  187|  83.6k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   242k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 224k, False: 17.7k]
  ------------------
  190|   224k|        const auto digit = char_to_int(*begin);
  191|   224k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 65.8k, False: 158k]
  ------------------
  192|  65.8k|            break;
  193|  65.8k|        }
  194|   158k|        u64val =
  195|   158k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   158k|        ++begin;
  197|   158k|    }
  198|       |
  199|  83.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  83.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  83.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.53k, False: 81.0k]
  |  |  ------------------
  ------------------
  201|  83.6k|                                               is_negative))) {
  202|  2.53k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.53k|                                     "Integer overflow");
  204|  2.53k|    }
  205|       |
  206|  81.0k|    val = store_result<T>(u64val, is_negative);
  207|  81.0k|    return begin;
  208|  83.6k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   255k|{
  185|   255k|    uint64_t u64val{};
  186|   255k|    const CharT* begin = input.data();
  187|   255k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   693k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 603k, False: 89.7k]
  ------------------
  190|   603k|        const auto digit = char_to_int(*begin);
  191|   603k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 165k, False: 437k]
  ------------------
  192|   165k|            break;
  193|   165k|        }
  194|   437k|        u64val =
  195|   437k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   437k|        ++begin;
  197|   437k|    }
  198|       |
  199|   255k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   255k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.39k, False: 251k]
  |  |  ------------------
  ------------------
  201|   255k|                                               is_negative))) {
  202|  4.39k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  4.39k|                                     "Integer overflow");
  204|  4.39k|    }
  205|       |
  206|   251k|    val = store_result<T>(u64val, is_negative);
  207|   251k|    return begin;
  208|   255k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   219k|{
  164|   219k|    uint64_t u64val{};
  165|   219k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   219k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   219k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   219k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.24k, False: 218k]
  |  |  ------------------
  ------------------
  170|   219k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.24k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.24k|                                     "Integer overflow");
  173|  1.24k|    }
  174|       |
  175|   218k|    val = store_result<T>(u64val, is_negative);
  176|   218k|    return ptr;
  177|   219k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   106k|{
  185|   106k|    uint64_t u64val{};
  186|   106k|    const CharT* begin = input.data();
  187|   106k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   302k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 283k, False: 19.1k]
  ------------------
  190|   283k|        const auto digit = char_to_int(*begin);
  191|   283k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 87.0k, False: 196k]
  ------------------
  192|  87.0k|            break;
  193|  87.0k|        }
  194|   196k|        u64val =
  195|   196k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   196k|        ++begin;
  197|   196k|    }
  198|       |
  199|   106k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   106k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.16k, False: 105k]
  |  |  ------------------
  ------------------
  201|   106k|                                               is_negative))) {
  202|  1.16k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.16k|                                     "Integer overflow");
  204|  1.16k|    }
  205|       |
  206|   105k|    val = store_result<T>(u64val, is_negative);
  207|   105k|    return begin;
  208|   106k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   309k|{
  185|   309k|    uint64_t u64val{};
  186|   309k|    const CharT* begin = input.data();
  187|   309k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   857k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 761k, False: 96.9k]
  ------------------
  190|   761k|        const auto digit = char_to_int(*begin);
  191|   761k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 212k, False: 548k]
  ------------------
  192|   212k|            break;
  193|   212k|        }
  194|   548k|        u64val =
  195|   548k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   548k|        ++begin;
  197|   548k|    }
  198|       |
  199|   309k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   309k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.87k, False: 307k]
  |  |  ------------------
  ------------------
  201|   309k|                                               is_negative))) {
  202|  1.87k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.87k|                                     "Integer overflow");
  204|  1.87k|    }
  205|       |
  206|   307k|    val = store_result<T>(u64val, is_negative);
  207|   307k|    return begin;
  208|   309k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   222k|{
  164|   222k|    uint64_t u64val{};
  165|   222k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   222k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   222k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   222k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 587, False: 221k]
  |  |  ------------------
  ------------------
  170|   222k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    587|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    587|                                     "Integer overflow");
  173|    587|    }
  174|       |
  175|   221k|    val = store_result<T>(u64val, is_negative);
  176|   221k|    return ptr;
  177|   222k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   108k|{
  185|   108k|    uint64_t u64val{};
  186|   108k|    const CharT* begin = input.data();
  187|   108k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   313k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 293k, False: 19.3k]
  ------------------
  190|   293k|        const auto digit = char_to_int(*begin);
  191|   293k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 88.7k, False: 205k]
  ------------------
  192|  88.7k|            break;
  193|  88.7k|        }
  194|   205k|        u64val =
  195|   205k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   205k|        ++begin;
  197|   205k|    }
  198|       |
  199|   108k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   108k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 722, False: 107k]
  |  |  ------------------
  ------------------
  201|   108k|                                               is_negative))) {
  202|    722|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    722|                                     "Integer overflow");
  204|    722|    }
  205|       |
  206|   107k|    val = store_result<T>(u64val, is_negative);
  207|   107k|    return begin;
  208|   108k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   313k|{
  185|   313k|    uint64_t u64val{};
  186|   313k|    const CharT* begin = input.data();
  187|   313k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   880k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 783k, False: 97.3k]
  ------------------
  190|   783k|        const auto digit = char_to_int(*begin);
  191|   783k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 216k, False: 566k]
  ------------------
  192|   216k|            break;
  193|   216k|        }
  194|   566k|        u64val =
  195|   566k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   566k|        ++begin;
  197|   566k|    }
  198|       |
  199|   313k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   313k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.07k, False: 312k]
  |  |  ------------------
  ------------------
  201|   313k|                                               is_negative))) {
  202|  1.07k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.07k|                                     "Integer overflow");
  204|  1.07k|    }
  205|       |
  206|   312k|    val = store_result<T>(u64val, is_negative);
  207|   312k|    return begin;
  208|   313k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   135k|    {
  324|   135k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   135k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   135k|        return read_default_with_base(range, value, 0);
  326|   135k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   135k|    {
  287|   135k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   135k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   135k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   135k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   135k|                return unexpected_scan_error(
  293|   135k|                    scan_error::invalid_scanned_value,
  294|   135k|                    "Unexpected '-' sign when parsing an "
  295|   135k|                    "unsigned value");
  296|   135k|            }
  297|   135k|        }
  298|       |
  299|   135k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 37.9k, False: 97.7k]
  ------------------
  300|  37.9k|            value = T{0};
  301|  37.9k|            return std::next(prefix_result.iterator);
  302|  37.9k|        }
  303|       |
  304|   195k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  97.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  97.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  97.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  97.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 57, False: 97.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     57|    }                                                  \
  |  |  |  |   70|  97.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   195k|                                     ranges::subrange{prefix_result.iterator,
  306|   195k|                                                      ranges::end(range)},
  307|   195k|                                     prefix_result.parsed_base));
  308|       |
  309|   195k|        auto buf = make_contiguous_buffer(
  310|   195k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   195k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  97.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  97.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  97.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  97.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.25k, False: 92.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.25k|    }                                                  \
  |  |  |  |   70|  97.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  92.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  92.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  92.4k|                                    prefix_result.parsed_base));
  314|       |
  315|  92.4k|        return ranges_polyfill::batch_next(
  316|  92.4k|            prefix_result.iterator,
  317|  92.4k|            ranges::distance(buf.view().begin(), result_it));
  318|   195k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  3.23M|{
  121|  3.23M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  3.23M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.23M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.23M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.23M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.23M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  3.23M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  3.23M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  3.23M|        parse_integer_base_prefix(
  126|  3.23M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  3.23M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 1.10M, False: 2.12M]
  ------------------
  129|  1.10M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.00k, False: 1.10M]
  ------------------
  130|  1.10M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 647k, False: 458k]
  ------------------
  131|   649k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   649k|                digits_begin_it, ranges::begin(range));
  133|   649k|        }
  134|   458k|        else {
  135|   458k|            parsed_zero = false;
  136|   458k|        }
  137|  1.10M|    }
  138|  2.12M|    else {
  139|  2.12M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 4.89k, False: 2.12M]
  ------------------
  140|  2.12M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 103k, False: 2.01M]
  ------------------
  141|   108k|            digits_begin_it = base_prefix_begin_it;
  142|   108k|        }
  143|  2.12M|    }
  144|       |
  145|  3.23M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 2.99M, False: 239k]
  ------------------
  146|  2.99M|        sign = sign_type::plus_sign;
  147|  2.99M|    }
  148|  3.23M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  3.23M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  3.23M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  3.23M|{
   88|  3.23M|    switch (base) {
   89|  76.3k|        case 2:
  ------------------
  |  Branch (89:9): [True: 76.3k, False: 3.15M]
  ------------------
   90|       |            // allow 0b/0B
   91|  76.3k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  76.3k|                    false};
   93|       |
   94|   168k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 168k, False: 3.06M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   168k|            bool zero_parsed = false;
   97|   168k|            auto it = apply_opt(
   98|   168k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   168k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   461k|        case 16:
  ------------------
  |  Branch (102:9): [True: 461k, False: 2.77M]
  ------------------
  103|       |            // allow 0x/0X
  104|   461k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   461k|                    false};
  106|       |
  107|  2.11M|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.11M, False: 1.12M]
  ------------------
  108|       |            // detect base
  109|  2.11M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   414k|        default:
  ------------------
  |  Branch (111:9): [True: 414k, False: 2.81M]
  ------------------
  112|       |            // no base prefix allowed
  113|   414k|            return {ranges::begin(range), base, false};
  114|  3.23M|    }
  115|  3.23M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.15M|{
   38|  2.15M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.15M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.24M|{
   53|  2.24M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 26.2k, False: 2.22M]
  ------------------
   54|  26.2k|        return *r;
   55|  26.2k|    }
   56|       |
   57|  2.22M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 1.10M, False: 1.11M]
  ------------------
   58|  1.10M|        zero_parsed = true;
   59|  1.10M|        return *r;
   60|  1.10M|    }
   61|       |
   62|  1.11M|    return unexpected(parse_error::error);
   63|  2.22M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  2.57M|{
   45|  2.57M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  2.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.57M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.11M|{
   69|  2.11M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 31.3k, False: 2.08M]
  ------------------
   70|  31.3k|        return {*r, 16, false};
   71|  31.3k|    }
   72|  2.08M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 1.84k, False: 2.07M]
  ------------------
   73|  1.84k|        return {*r, 2, false};
   74|  1.84k|    }
   75|  2.07M|    {
   76|  2.07M|        bool zero_parsed{false};
   77|  2.07M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.04M, False: 1.02M]
  ------------------
   78|  1.04M|            return {*r, 8, zero_parsed};
   79|  1.04M|        }
   80|  2.07M|    }
   81|  1.02M|    return {ranges::begin(range), 10, false};
   82|  2.07M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.12M|{
  156|  2.12M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.12M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.12M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.28k, False: 2.12M]
  |  |  ------------------
  ------------------
  160|  1.28k|            return unexpected_scan_error(
  161|  1.28k|                scan_error::invalid_scanned_value,
  162|  1.28k|                "Failed to parse integer: No digits found");
  163|  1.28k|        }
  164|  2.12M|        return ranges::end(range);
  165|  2.12M|    }
  166|  2.12M|    else {
  167|  2.12M|        return read_while1_code_unit(
  168|  2.12M|                   range, [&](char_type ch)
  169|  2.12M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.12M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.12M|                scan_error::invalid_scanned_value,
  172|  2.12M|                "Failed to parse integer: No digits found"));
  173|  2.12M|    }
  174|  2.12M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   173k|    {
  324|   173k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   173k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   173k|        return read_default_with_base(range, value, 0);
  326|   173k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   173k|    {
  287|   173k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   173k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   173k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   173k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 173k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   173k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   173k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   173k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   173k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   173k|                return unexpected_scan_error(
  293|   173k|                    scan_error::invalid_scanned_value,
  294|   173k|                    "Unexpected '-' sign when parsing an "
  295|   173k|                    "unsigned value");
  296|   173k|            }
  297|   173k|        }
  298|       |
  299|   173k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 49.2k, False: 124k]
  ------------------
  300|  49.2k|            value = T{0};
  301|  49.2k|            return std::next(prefix_result.iterator);
  302|  49.2k|        }
  303|       |
  304|   248k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 114, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    114|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   248k|                                     ranges::subrange{prefix_result.iterator,
  306|   248k|                                                      ranges::end(range)},
  307|   248k|                                     prefix_result.parsed_base));
  308|       |
  309|   248k|        auto buf = make_contiguous_buffer(
  310|   248k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   248k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.65k, False: 119k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.65k|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   119k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   119k|                                    prefix_result.parsed_base));
  314|       |
  315|   119k|        return ranges_polyfill::batch_next(
  316|   119k|            prefix_result.iterator,
  317|   119k|            ranges::distance(buf.view().begin(), result_it));
  318|   248k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   177k|    {
  324|   177k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   177k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   177k|        return read_default_with_base(range, value, 0);
  326|   177k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   177k|    {
  287|   177k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   177k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   177k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   177k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 177k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   177k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   177k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   177k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   177k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   177k|                return unexpected_scan_error(
  293|   177k|                    scan_error::invalid_scanned_value,
  294|   177k|                    "Unexpected '-' sign when parsing an "
  295|   177k|                    "unsigned value");
  296|   177k|            }
  297|   177k|        }
  298|       |
  299|   177k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 49.7k, False: 127k]
  ------------------
  300|  49.7k|            value = T{0};
  301|  49.7k|            return std::next(prefix_result.iterator);
  302|  49.7k|        }
  303|       |
  304|   254k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 132, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    132|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   254k|                                     ranges::subrange{prefix_result.iterator,
  306|   254k|                                                      ranges::end(range)},
  307|   254k|                                     prefix_result.parsed_base));
  308|       |
  309|   254k|        auto buf = make_contiguous_buffer(
  310|   254k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   254k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.52k, False: 122k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.52k|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   122k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   122k|                                    prefix_result.parsed_base));
  314|       |
  315|   122k|        return ranges_polyfill::batch_next(
  316|   122k|            prefix_result.iterator,
  317|   122k|            ranges::distance(buf.view().begin(), result_it));
  318|   254k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   128k|    {
  324|   128k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   128k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   128k|        return read_default_with_base(range, value, 0);
  326|   128k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   128k|    {
  287|   128k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   128k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   128k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   128k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.29k, False: 126k]
  ------------------
  292|  2.29k|                return unexpected_scan_error(
  293|  2.29k|                    scan_error::invalid_scanned_value,
  294|  2.29k|                    "Unexpected '-' sign when parsing an "
  295|  2.29k|                    "unsigned value");
  296|  2.29k|            }
  297|   128k|        }
  298|       |
  299|   126k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 37.3k, False: 88.6k]
  ------------------
  300|  37.3k|            value = T{0};
  301|  37.3k|            return std::next(prefix_result.iterator);
  302|  37.3k|        }
  303|       |
  304|   177k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  88.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  88.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27, False: 88.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     27|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     27|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     27|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     27|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     27|    }                                                  \
  |  |  |  |   70|  88.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   177k|                                     ranges::subrange{prefix_result.iterator,
  306|   177k|                                                      ranges::end(range)},
  307|   177k|                                     prefix_result.parsed_base));
  308|       |
  309|   177k|        auto buf = make_contiguous_buffer(
  310|   177k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   177k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  88.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  88.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.12k, False: 85.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.12k|    }                                                  \
  |  |  |  |   70|  88.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  85.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  85.5k|                                    prefix_result.parsed_base));
  314|       |
  315|  85.5k|        return ranges_polyfill::batch_next(
  316|  85.5k|            prefix_result.iterator,
  317|  85.5k|            ranges::distance(buf.view().begin(), result_it));
  318|   177k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   144k|    {
  324|   144k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   144k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   144k|        return read_default_with_base(range, value, 0);
  326|   144k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   144k|    {
  287|   144k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   144k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   144k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   144k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 144k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   144k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   144k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   144k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   144k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.42k, False: 141k]
  ------------------
  292|  2.42k|                return unexpected_scan_error(
  293|  2.42k|                    scan_error::invalid_scanned_value,
  294|  2.42k|                    "Unexpected '-' sign when parsing an "
  295|  2.42k|                    "unsigned value");
  296|  2.42k|            }
  297|   144k|        }
  298|       |
  299|   141k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 40.3k, False: 101k]
  ------------------
  300|  40.3k|            value = T{0};
  301|  40.3k|            return std::next(prefix_result.iterator);
  302|  40.3k|        }
  303|       |
  304|   202k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   202k|                                     ranges::subrange{prefix_result.iterator,
  306|   202k|                                                      ranges::end(range)},
  307|   202k|                                     prefix_result.parsed_base));
  308|       |
  309|   202k|        auto buf = make_contiguous_buffer(
  310|   202k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   202k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.76k, False: 98.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.76k|    }                                                  \
  |  |  |  |   70|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  98.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  98.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  98.6k|        return ranges_polyfill::batch_next(
  316|  98.6k|            prefix_result.iterator,
  317|  98.6k|            ranges::distance(buf.view().begin(), result_it));
  318|   202k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   145k|    {
  324|   145k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   145k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   145k|        return read_default_with_base(range, value, 0);
  326|   145k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   145k|    {
  287|   145k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   145k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   145k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   145k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.55k, False: 142k]
  ------------------
  292|  2.55k|                return unexpected_scan_error(
  293|  2.55k|                    scan_error::invalid_scanned_value,
  294|  2.55k|                    "Unexpected '-' sign when parsing an "
  295|  2.55k|                    "unsigned value");
  296|  2.55k|            }
  297|   145k|        }
  298|       |
  299|   142k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 40.4k, False: 102k]
  ------------------
  300|  40.4k|            value = T{0};
  301|  40.4k|            return std::next(prefix_result.iterator);
  302|  40.4k|        }
  303|       |
  304|   204k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   204k|                                     ranges::subrange{prefix_result.iterator,
  306|   204k|                                                      ranges::end(range)},
  307|   204k|                                     prefix_result.parsed_base));
  308|       |
  309|   204k|        auto buf = make_contiguous_buffer(
  310|   204k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   204k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.55k, False: 99.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  99.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  99.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  99.6k|        return ranges_polyfill::batch_next(
  316|  99.6k|            prefix_result.iterator,
  317|  99.6k|            ranges::distance(buf.view().begin(), result_it));
  318|   204k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   429k|{
  185|   429k|    std::basic_string<CharT> output;
  186|   429k|    std::string thsep_indices;
  187|   429k|    auto it = ranges::begin(range);
  188|   429k|    bool digit_matched = false;
  189|  1.92M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.91M, False: 4.88k]
  ------------------
  190|  1.91M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 77.8k, False: 1.83M]
  ------------------
  191|  77.8k|            thsep_indices.push_back(static_cast<char>(
  192|  77.8k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  77.8k|        }
  194|  1.83M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 425k, False: 1.41M]
  ------------------
  195|   425k|            break;
  196|   425k|        }
  197|  1.41M|        else {
  198|  1.41M|            output.push_back(*it);
  199|  1.41M|            digit_matched = true;
  200|  1.41M|        }
  201|  1.91M|    }
  202|   429k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.40k, False: 420k]
  |  |  ------------------
  ------------------
  203|  9.40k|        return unexpected_scan_error(
  204|  9.40k|            scan_error::invalid_scanned_value,
  205|  9.40k|            "Failed to parse integer: No digits found");
  206|  9.40k|    }
  207|   420k|    return std::tuple{it, output, thsep_indices};
  208|   429k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.3k|    {
  324|  12.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.3k|        return read_default_with_base(range, value, 0);
  326|  12.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.3k|    {
  287|  12.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  12.3k|                return unexpected_scan_error(
  293|  12.3k|                    scan_error::invalid_scanned_value,
  294|  12.3k|                    "Unexpected '-' sign when parsing an "
  295|  12.3k|                    "unsigned value");
  296|  12.3k|            }
  297|  12.3k|        }
  298|       |
  299|  12.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.4k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.15k, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.15k|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.4k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.4k|                                                      ranges::end(range)},
  307|  18.4k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.4k|        auto buf = make_contiguous_buffer(
  310|  18.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.4k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.15k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.15k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.15k|        return ranges_polyfill::batch_next(
  316|  6.15k|            prefix_result.iterator,
  317|  6.15k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.4k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   344k|{
  121|   344k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   344k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   344k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   344k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 344k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   344k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   344k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   344k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   344k|        parse_integer_base_prefix(
  126|   344k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   344k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 344k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   344k|    else {
  139|   344k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 344k]
  ------------------
  140|   344k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 184k, False: 160k]
  ------------------
  141|   184k|            digits_begin_it = base_prefix_begin_it;
  142|   184k|        }
  143|   344k|    }
  144|       |
  145|   344k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 344k, False: 0]
  ------------------
  146|   344k|        sign = sign_type::plus_sign;
  147|   344k|    }
  148|   344k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   344k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   344k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   344k|{
   88|   344k|    switch (base) {
   89|  24.6k|        case 2:
  ------------------
  |  Branch (89:9): [True: 24.6k, False: 320k]
  ------------------
   90|       |            // allow 0b/0B
   91|  24.6k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  24.6k|                    false};
   93|       |
   94|  49.2k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 49.2k, False: 295k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  49.2k|            bool zero_parsed = false;
   97|  49.2k|            auto it = apply_opt(
   98|  49.2k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  49.2k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  49.2k|        case 16:
  ------------------
  |  Branch (102:9): [True: 49.2k, False: 295k]
  ------------------
  103|       |            // allow 0x/0X
  104|  49.2k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  49.2k|                    false};
  106|       |
  107|   172k|        case 0:
  ------------------
  |  Branch (107:9): [True: 172k, False: 172k]
  ------------------
  108|       |            // detect base
  109|   172k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  49.2k|        default:
  ------------------
  |  Branch (111:9): [True: 49.2k, False: 295k]
  ------------------
  112|       |            // no base prefix allowed
  113|  49.2k|            return {ranges::begin(range), base, false};
  114|   344k|    }
  115|   344k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   196k|{
   38|   196k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   196k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   221k|{
   53|   221k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 221k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   221k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 221k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   221k|    return unexpected(parse_error::error);
   63|   221k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   221k|{
   45|   221k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   221k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   172k|{
   69|   172k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 172k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   172k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 172k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   172k|    {
   76|   172k|        bool zero_parsed{false};
   77|   172k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 172k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   172k|    }
   81|   172k|    return {ranges::begin(range), 10, false};
   82|   172k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   295k|{
  156|   295k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   295k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   295k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   295k|            return unexpected_scan_error(
  161|   295k|                scan_error::invalid_scanned_value,
  162|   295k|                "Failed to parse integer: No digits found");
  163|   295k|        }
  164|   295k|        return ranges::end(range);
  165|   295k|    }
  166|   295k|    else {
  167|   295k|        return read_while1_code_unit(
  168|   295k|                   range, [&](char_type ch)
  169|   295k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   295k|            .transform_error(map_parse_error_to_scan_error(
  171|   295k|                scan_error::invalid_scanned_value,
  172|   295k|                "Failed to parse integer: No digits found"));
  173|   295k|    }
  174|   295k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   430k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.3k|    {
  324|  12.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.3k|        return read_default_with_base(range, value, 0);
  326|  12.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.3k|    {
  287|  12.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  12.3k|                return unexpected_scan_error(
  293|  12.3k|                    scan_error::invalid_scanned_value,
  294|  12.3k|                    "Unexpected '-' sign when parsing an "
  295|  12.3k|                    "unsigned value");
  296|  12.3k|            }
  297|  12.3k|        }
  298|       |
  299|  12.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.4k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.15k, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.15k|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.4k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.4k|                                                      ranges::end(range)},
  307|  18.4k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.4k|        auto buf = make_contiguous_buffer(
  310|  18.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.4k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.15k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.15k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.15k|        return ranges_polyfill::batch_next(
  316|  6.15k|            prefix_result.iterator,
  317|  6.15k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.3k|    {
  324|  12.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.3k|        return read_default_with_base(range, value, 0);
  326|  12.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.3k|    {
  287|  12.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  12.3k|                return unexpected_scan_error(
  293|  12.3k|                    scan_error::invalid_scanned_value,
  294|  12.3k|                    "Unexpected '-' sign when parsing an "
  295|  12.3k|                    "unsigned value");
  296|  12.3k|            }
  297|  12.3k|        }
  298|       |
  299|  12.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.4k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.15k, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.15k|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.4k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.4k|                                                      ranges::end(range)},
  307|  18.4k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.4k|        auto buf = make_contiguous_buffer(
  310|  18.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.4k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.15k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.15k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.15k|        return ranges_polyfill::batch_next(
  316|  6.15k|            prefix_result.iterator,
  317|  6.15k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.3k|    {
  324|  12.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.3k|        return read_default_with_base(range, value, 0);
  326|  12.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.3k|    {
  287|  12.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 12.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  12.3k|        }
  298|       |
  299|  12.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.4k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.15k, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.15k|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.4k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.4k|                                                      ranges::end(range)},
  307|  18.4k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.4k|        auto buf = make_contiguous_buffer(
  310|  18.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.4k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.15k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.15k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.15k|        return ranges_polyfill::batch_next(
  316|  6.15k|            prefix_result.iterator,
  317|  6.15k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.3k|    {
  324|  12.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.3k|        return read_default_with_base(range, value, 0);
  326|  12.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.3k|    {
  287|  12.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 12.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  12.3k|        }
  298|       |
  299|  12.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.4k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.15k, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.15k|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.4k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.4k|                                                      ranges::end(range)},
  307|  18.4k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.4k|        auto buf = make_contiguous_buffer(
  310|  18.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.4k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.15k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.15k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.15k|        return ranges_polyfill::batch_next(
  316|  6.15k|            prefix_result.iterator,
  317|  6.15k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.3k|    {
  324|  12.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.3k|        return read_default_with_base(range, value, 0);
  326|  12.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.3k|    {
  287|  12.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 12.3k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  12.3k|        }
  298|       |
  299|  12.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.3k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.4k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.15k, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.15k|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.4k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.4k|                                                      ranges::end(range)},
  307|  18.4k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.4k|        auto buf = make_contiguous_buffer(
  310|  18.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.4k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.15k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.15k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.15k|        return ranges_polyfill::batch_next(
  316|  6.15k|            prefix_result.iterator,
  317|  6.15k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.4k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  49.2k|{
  185|  49.2k|    std::basic_string<CharT> output;
  186|  49.2k|    std::string thsep_indices;
  187|  49.2k|    auto it = ranges::begin(range);
  188|  49.2k|    bool digit_matched = false;
  189|  73.8k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 73.8k, False: 12]
  ------------------
  190|  73.8k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 73.8k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  73.8k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 49.2k, False: 24.6k]
  ------------------
  195|  49.2k|            break;
  196|  49.2k|        }
  197|  24.6k|        else {
  198|  24.6k|            output.push_back(*it);
  199|  24.6k|            digit_matched = true;
  200|  24.6k|        }
  201|  73.8k|    }
  202|  49.2k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.6k, False: 24.6k]
  |  |  ------------------
  ------------------
  203|  24.6k|        return unexpected_scan_error(
  204|  24.6k|            scan_error::invalid_scanned_value,
  205|  24.6k|            "Failed to parse integer: No digits found");
  206|  24.6k|    }
  207|  24.6k|    return std::tuple{it, output, thsep_indices};
  208|  49.2k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  2.61M|    {
  280|  2.61M|        detail::check_int_type_specs(specs, eh);
  281|  2.61M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   314k|    {
  335|   314k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   314k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   314k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   314k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   314k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   314k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   314k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 25.9k, False: 288k]
  ------------------
  339|  25.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  25.9k|                return unexpected_scan_error(
  341|  25.9k|                    scan_error::invalid_scanned_value,
  342|  25.9k|                    "Unexpected '-' sign when parsing an "
  343|  25.9k|                    "unsigned value");
  344|  25.9k|            }
  345|  25.9k|            else {
  346|  25.9k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 25.9k]
  ------------------
  347|  25.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  25.9k|            }
  353|  25.9k|        }
  354|       |
  355|   314k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 58.6k, False: 255k]
  ------------------
  356|  58.6k|            value = T{0};
  357|  58.6k|            return std::next(prefix_result.iterator);
  358|  58.6k|        }
  359|       |
  360|   255k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   255k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 190k, False: 65.5k]
  |  |  ------------------
  ------------------
  361|   190k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   190k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   190k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   190k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 136, False: 189k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    136|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    136|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    136|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    136|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    136|    }                                                  \
  |  |  |  |   70|   190k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   189k|                    parse_integer_digits_without_thsep(
  363|   189k|                        ranges::subrange{prefix_result.iterator,
  364|   189k|                                         ranges::end(range)},
  365|   189k|                        prefix_result.parsed_base));
  366|       |
  367|   189k|            auto buf = make_contiguous_buffer(
  368|   189k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   189k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   189k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   189k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   189k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.6k, False: 171k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.6k|    }                                                  \
  |  |  |  |   70|   189k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   171k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   171k|                                        prefix_result.parsed_base));
  372|       |
  373|   171k|            return ranges_polyfill::batch_next(
  374|   171k|                prefix_result.iterator,
  375|   171k|                ranges::distance(buf.view().begin(), result_it));
  376|   189k|        }
  377|       |
  378|  65.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  65.5k|            localized_number_formatting_options<CharT>{loc};
  383|  65.5k|#endif
  384|       |
  385|  65.5k|        SCN_TRY(
  ------------------
  |  |   71|  65.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.50k, False: 64.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.50k|    }                                                  \
  |  |  |  |   70|  65.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  64.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  64.0k|            parse_digits_result,
  387|  64.0k|            parse_integer_digits_with_thsep(
  388|  64.0k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  64.0k|                prefix_result.parsed_base, locale_options));
  390|  64.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  64.0k|            parse_digits_result;
  392|       |
  393|  64.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 932, False: 63.0k]
  ------------------
  394|    932|            if (auto e = check_thsep_grouping(
  395|    932|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    932|                    thsep_indices, locale_options.grouping);
  397|    932|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    932|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 328, False: 604]
  |  |  ------------------
  ------------------
  398|    328|                return unexpected(e);
  399|    328|            }
  400|    932|        }
  401|       |
  402|  63.6k|        auto nothsep_source_view =
  403|  63.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  63.6k|        SCN_TRY(
  ------------------
  |  |   71|  63.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  63.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  63.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.69k, False: 62.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.69k|    }                                                  \
  |  |  |  |   70|  63.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  62.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  62.0k|            nothsep_source_it,
  406|  62.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  62.0k|                                prefix_result.parsed_base));
  408|       |
  409|  62.0k|        return ranges_polyfill::batch_next(
  410|  62.0k|            prefix_result.iterator,
  411|  62.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  62.0k|                ranges::ssize(thsep_indices));
  413|  63.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   459k|    {
  335|   459k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   459k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   459k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   459k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   459k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 459k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   459k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   459k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   459k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 31.1k, False: 428k]
  ------------------
  339|  31.1k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  31.1k|                return unexpected_scan_error(
  341|  31.1k|                    scan_error::invalid_scanned_value,
  342|  31.1k|                    "Unexpected '-' sign when parsing an "
  343|  31.1k|                    "unsigned value");
  344|  31.1k|            }
  345|  31.1k|            else {
  346|  31.1k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 31.1k]
  ------------------
  347|  31.1k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  31.1k|            }
  353|  31.1k|        }
  354|       |
  355|   459k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 75.2k, False: 384k]
  ------------------
  356|  75.2k|            value = T{0};
  357|  75.2k|            return std::next(prefix_result.iterator);
  358|  75.2k|        }
  359|       |
  360|   384k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   384k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 301k, False: 83.1k]
  |  |  ------------------
  ------------------
  361|   301k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 260, False: 300k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    260|    }                                                  \
  |  |  |  |   70|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   300k|                    parse_integer_digits_without_thsep(
  363|   300k|                        ranges::subrange{prefix_result.iterator,
  364|   300k|                                         ranges::end(range)},
  365|   300k|                        prefix_result.parsed_base));
  366|       |
  367|   300k|            auto buf = make_contiguous_buffer(
  368|   300k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   300k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   300k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   300k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   300k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.1k, False: 283k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.1k|    }                                                  \
  |  |  |  |   70|   300k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   283k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   283k|                                        prefix_result.parsed_base));
  372|       |
  373|   283k|            return ranges_polyfill::batch_next(
  374|   283k|                prefix_result.iterator,
  375|   283k|                ranges::distance(buf.view().begin(), result_it));
  376|   300k|        }
  377|       |
  378|  83.1k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  83.1k|            localized_number_formatting_options<CharT>{loc};
  383|  83.1k|#endif
  384|       |
  385|  83.1k|        SCN_TRY(
  ------------------
  |  |   71|  83.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.03k, False: 81.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.03k|    }                                                  \
  |  |  |  |   70|  83.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  81.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  81.1k|            parse_digits_result,
  387|  81.1k|            parse_integer_digits_with_thsep(
  388|  81.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  81.1k|                prefix_result.parsed_base, locale_options));
  390|  81.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  81.1k|            parse_digits_result;
  392|       |
  393|  81.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.00k, False: 80.1k]
  ------------------
  394|  1.00k|            if (auto e = check_thsep_grouping(
  395|  1.00k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.00k|                    thsep_indices, locale_options.grouping);
  397|  1.00k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 398, False: 604]
  |  |  ------------------
  ------------------
  398|    398|                return unexpected(e);
  399|    398|            }
  400|  1.00k|        }
  401|       |
  402|  80.7k|        auto nothsep_source_view =
  403|  80.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  80.7k|        SCN_TRY(
  ------------------
  |  |   71|  80.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 736, False: 80.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    736|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    736|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    736|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    736|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    736|    }                                                  \
  |  |  |  |   70|  80.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  80.0k|            nothsep_source_it,
  406|  80.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  80.0k|                                prefix_result.parsed_base));
  408|       |
  409|  80.0k|        return ranges_polyfill::batch_next(
  410|  80.0k|            prefix_result.iterator,
  411|  80.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  80.0k|                ranges::ssize(thsep_indices));
  413|  80.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   469k|    {
  335|   469k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   469k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   469k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   469k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 469k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   469k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   469k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   469k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 33.0k, False: 436k]
  ------------------
  339|  33.0k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  33.0k|                return unexpected_scan_error(
  341|  33.0k|                    scan_error::invalid_scanned_value,
  342|  33.0k|                    "Unexpected '-' sign when parsing an "
  343|  33.0k|                    "unsigned value");
  344|  33.0k|            }
  345|  33.0k|            else {
  346|  33.0k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 33.0k]
  ------------------
  347|  33.0k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  33.0k|            }
  353|  33.0k|        }
  354|       |
  355|   469k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 75.9k, False: 393k]
  ------------------
  356|  75.9k|            value = T{0};
  357|  75.9k|            return std::next(prefix_result.iterator);
  358|  75.9k|        }
  359|       |
  360|   393k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   393k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 308k, False: 85.2k]
  |  |  ------------------
  ------------------
  361|   308k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   308k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   308k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   308k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 300, False: 308k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    300|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    300|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    300|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    300|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    300|    }                                                  \
  |  |  |  |   70|   308k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   308k|                    parse_integer_digits_without_thsep(
  363|   308k|                        ranges::subrange{prefix_result.iterator,
  364|   308k|                                         ranges::end(range)},
  365|   308k|                        prefix_result.parsed_base));
  366|       |
  367|   308k|            auto buf = make_contiguous_buffer(
  368|   308k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   308k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   308k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   308k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   308k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.8k, False: 291k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.8k|    }                                                  \
  |  |  |  |   70|   308k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   291k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   291k|                                        prefix_result.parsed_base));
  372|       |
  373|   291k|            return ranges_polyfill::batch_next(
  374|   291k|                prefix_result.iterator,
  375|   291k|                ranges::distance(buf.view().begin(), result_it));
  376|   308k|        }
  377|       |
  378|  85.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  85.2k|            localized_number_formatting_options<CharT>{loc};
  383|  85.2k|#endif
  384|       |
  385|  85.2k|        SCN_TRY(
  ------------------
  |  |   71|  85.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.23k, False: 82.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.23k|    }                                                  \
  |  |  |  |   70|  85.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  82.9k|            parse_digits_result,
  387|  82.9k|            parse_integer_digits_with_thsep(
  388|  82.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  82.9k|                prefix_result.parsed_base, locale_options));
  390|  82.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  82.9k|            parse_digits_result;
  392|       |
  393|  82.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.09k, False: 81.8k]
  ------------------
  394|  1.09k|            if (auto e = check_thsep_grouping(
  395|  1.09k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.09k|                    thsep_indices, locale_options.grouping);
  397|  1.09k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 478, False: 612]
  |  |  ------------------
  ------------------
  398|    478|                return unexpected(e);
  399|    478|            }
  400|  1.09k|        }
  401|       |
  402|  82.5k|        auto nothsep_source_view =
  403|  82.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  82.5k|        SCN_TRY(
  ------------------
  |  |   71|  82.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 374, False: 82.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    374|    }                                                  \
  |  |  |  |   70|  82.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  82.1k|            nothsep_source_it,
  406|  82.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  82.1k|                                prefix_result.parsed_base));
  408|       |
  409|  82.1k|        return ranges_polyfill::batch_next(
  410|  82.1k|            prefix_result.iterator,
  411|  82.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  82.1k|                ranges::ssize(thsep_indices));
  413|  82.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   316k|    {
  335|   316k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   316k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   316k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.19k, False: 308k]
  ------------------
  339|  8.19k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.19k|                return unexpected_scan_error(
  341|  8.19k|                    scan_error::invalid_scanned_value,
  342|  8.19k|                    "Unexpected '-' sign when parsing an "
  343|  8.19k|                    "unsigned value");
  344|  8.19k|            }
  345|  8.19k|            else {
  346|  8.19k|                if (specs.type ==
  347|  8.19k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.19k|                    return unexpected_scan_error(
  349|  8.19k|                        scan_error::invalid_scanned_value,
  350|  8.19k|                        "'u'-option disallows negative values");
  351|  8.19k|                }
  352|  8.19k|            }
  353|  8.19k|        }
  354|       |
  355|   308k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 58.0k, False: 250k]
  ------------------
  356|  58.0k|            value = T{0};
  357|  58.0k|            return std::next(prefix_result.iterator);
  358|  58.0k|        }
  359|       |
  360|   250k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   250k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 191k, False: 59.4k]
  |  |  ------------------
  ------------------
  361|   191k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 56, False: 191k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     56|    }                                                  \
  |  |  |  |   70|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   191k|                    parse_integer_digits_without_thsep(
  363|   191k|                        ranges::subrange{prefix_result.iterator,
  364|   191k|                                         ranges::end(range)},
  365|   191k|                        prefix_result.parsed_base));
  366|       |
  367|   191k|            auto buf = make_contiguous_buffer(
  368|   191k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   191k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.4k, False: 178k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.4k|    }                                                  \
  |  |  |  |   70|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   178k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   178k|                                        prefix_result.parsed_base));
  372|       |
  373|   178k|            return ranges_polyfill::batch_next(
  374|   178k|                prefix_result.iterator,
  375|   178k|                ranges::distance(buf.view().begin(), result_it));
  376|   191k|        }
  377|       |
  378|  59.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  59.4k|            localized_number_formatting_options<CharT>{loc};
  383|  59.4k|#endif
  384|       |
  385|  59.4k|        SCN_TRY(
  ------------------
  |  |   71|  59.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.11k, False: 58.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.11k|    }                                                  \
  |  |  |  |   70|  59.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  58.3k|            parse_digits_result,
  387|  58.3k|            parse_integer_digits_with_thsep(
  388|  58.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  58.3k|                prefix_result.parsed_base, locale_options));
  390|  58.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  58.3k|            parse_digits_result;
  392|       |
  393|  58.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 770, False: 57.5k]
  ------------------
  394|    770|            if (auto e = check_thsep_grouping(
  395|    770|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    770|                    thsep_indices, locale_options.grouping);
  397|    770|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    770|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 198, False: 572]
  |  |  ------------------
  ------------------
  398|    198|                return unexpected(e);
  399|    198|            }
  400|    770|        }
  401|       |
  402|  58.1k|        auto nothsep_source_view =
  403|  58.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  58.1k|        SCN_TRY(
  ------------------
  |  |   71|  58.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  58.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  58.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  58.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 754, False: 57.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    754|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    754|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    754|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    754|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    754|    }                                                  \
  |  |  |  |   70|  58.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  57.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  57.4k|            nothsep_source_it,
  406|  57.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  57.4k|                                prefix_result.parsed_base));
  408|       |
  409|  57.4k|        return ranges_polyfill::batch_next(
  410|  57.4k|            prefix_result.iterator,
  411|  57.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  57.4k|                ranges::ssize(thsep_indices));
  413|  58.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   382k|    {
  335|   382k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   382k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   382k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   382k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   382k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 382k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   382k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   382k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   382k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.64k, False: 373k]
  ------------------
  339|  8.64k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.64k|                return unexpected_scan_error(
  341|  8.64k|                    scan_error::invalid_scanned_value,
  342|  8.64k|                    "Unexpected '-' sign when parsing an "
  343|  8.64k|                    "unsigned value");
  344|  8.64k|            }
  345|  8.64k|            else {
  346|  8.64k|                if (specs.type ==
  347|  8.64k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.64k|                    return unexpected_scan_error(
  349|  8.64k|                        scan_error::invalid_scanned_value,
  350|  8.64k|                        "'u'-option disallows negative values");
  351|  8.64k|                }
  352|  8.64k|            }
  353|  8.64k|        }
  354|       |
  355|   373k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 62.0k, False: 311k]
  ------------------
  356|  62.0k|            value = T{0};
  357|  62.0k|            return std::next(prefix_result.iterator);
  358|  62.0k|        }
  359|       |
  360|   311k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   311k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 243k, False: 68.0k]
  |  |  ------------------
  ------------------
  361|   243k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   243k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 70, False: 243k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     70|    }                                                  \
  |  |  |  |   70|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   243k|                    parse_integer_digits_without_thsep(
  363|   243k|                        ranges::subrange{prefix_result.iterator,
  364|   243k|                                         ranges::end(range)},
  365|   243k|                        prefix_result.parsed_base));
  366|       |
  367|   243k|            auto buf = make_contiguous_buffer(
  368|   243k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   243k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   243k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.3k, False: 231k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.3k|    }                                                  \
  |  |  |  |   70|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   231k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   231k|                                        prefix_result.parsed_base));
  372|       |
  373|   231k|            return ranges_polyfill::batch_next(
  374|   231k|                prefix_result.iterator,
  375|   231k|                ranges::distance(buf.view().begin(), result_it));
  376|   243k|        }
  377|       |
  378|  68.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  68.0k|            localized_number_formatting_options<CharT>{loc};
  383|  68.0k|#endif
  384|       |
  385|  68.0k|        SCN_TRY(
  ------------------
  |  |   71|  68.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  68.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  68.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  68.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.24k, False: 66.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.24k|    }                                                  \
  |  |  |  |   70|  68.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  66.7k|            parse_digits_result,
  387|  66.7k|            parse_integer_digits_with_thsep(
  388|  66.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  66.7k|                prefix_result.parsed_base, locale_options));
  390|  66.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  66.7k|            parse_digits_result;
  392|       |
  393|  66.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 798, False: 65.9k]
  ------------------
  394|    798|            if (auto e = check_thsep_grouping(
  395|    798|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    798|                    thsep_indices, locale_options.grouping);
  397|    798|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    798|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 226, False: 572]
  |  |  ------------------
  ------------------
  398|    226|                return unexpected(e);
  399|    226|            }
  400|    798|        }
  401|       |
  402|  66.5k|        auto nothsep_source_view =
  403|  66.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  66.5k|        SCN_TRY(
  ------------------
  |  |   71|  66.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 360, False: 66.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    360|    }                                                  \
  |  |  |  |   70|  66.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  66.1k|            nothsep_source_it,
  406|  66.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  66.1k|                                prefix_result.parsed_base));
  408|       |
  409|  66.1k|        return ranges_polyfill::batch_next(
  410|  66.1k|            prefix_result.iterator,
  411|  66.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  66.1k|                ranges::ssize(thsep_indices));
  413|  66.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   386k|    {
  335|   386k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   386k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   386k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   386k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 386k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   386k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   386k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   386k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.01k, False: 377k]
  ------------------
  339|  9.01k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.01k|                return unexpected_scan_error(
  341|  9.01k|                    scan_error::invalid_scanned_value,
  342|  9.01k|                    "Unexpected '-' sign when parsing an "
  343|  9.01k|                    "unsigned value");
  344|  9.01k|            }
  345|  9.01k|            else {
  346|  9.01k|                if (specs.type ==
  347|  9.01k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.01k|                    return unexpected_scan_error(
  349|  9.01k|                        scan_error::invalid_scanned_value,
  350|  9.01k|                        "'u'-option disallows negative values");
  351|  9.01k|                }
  352|  9.01k|            }
  353|  9.01k|        }
  354|       |
  355|   377k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 62.2k, False: 315k]
  ------------------
  356|  62.2k|            value = T{0};
  357|  62.2k|            return std::next(prefix_result.iterator);
  358|  62.2k|        }
  359|       |
  360|   315k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   315k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 246k, False: 68.4k]
  |  |  ------------------
  ------------------
  361|   246k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   246k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 70, False: 246k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     70|    }                                                  \
  |  |  |  |   70|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   246k|                    parse_integer_digits_without_thsep(
  363|   246k|                        ranges::subrange{prefix_result.iterator,
  364|   246k|                                         ranges::end(range)},
  365|   246k|                        prefix_result.parsed_base));
  366|       |
  367|   246k|            auto buf = make_contiguous_buffer(
  368|   246k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   246k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   246k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.8k, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.8k|    }                                                  \
  |  |  |  |   70|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   235k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   235k|                                        prefix_result.parsed_base));
  372|       |
  373|   235k|            return ranges_polyfill::batch_next(
  374|   235k|                prefix_result.iterator,
  375|   235k|                ranges::distance(buf.view().begin(), result_it));
  376|   246k|        }
  377|       |
  378|  68.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  68.4k|            localized_number_formatting_options<CharT>{loc};
  383|  68.4k|#endif
  384|       |
  385|  68.4k|        SCN_TRY(
  ------------------
  |  |   71|  68.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  68.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  68.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.27k, False: 67.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.27k|    }                                                  \
  |  |  |  |   70|  68.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  67.1k|            parse_digits_result,
  387|  67.1k|            parse_integer_digits_with_thsep(
  388|  67.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  67.1k|                prefix_result.parsed_base, locale_options));
  390|  67.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  67.1k|            parse_digits_result;
  392|       |
  393|  67.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 800, False: 66.3k]
  ------------------
  394|    800|            if (auto e = check_thsep_grouping(
  395|    800|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    800|                    thsep_indices, locale_options.grouping);
  397|    800|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    800|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 226, False: 574]
  |  |  ------------------
  ------------------
  398|    226|                return unexpected(e);
  399|    226|            }
  400|    800|        }
  401|       |
  402|  66.9k|        auto nothsep_source_view =
  403|  66.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  66.9k|        SCN_TRY(
  ------------------
  |  |   71|  66.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 186, False: 66.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    186|    }                                                  \
  |  |  |  |   70|  66.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  66.7k|            nothsep_source_it,
  406|  66.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  66.7k|                                prefix_result.parsed_base));
  408|       |
  409|  66.7k|        return ranges_polyfill::batch_next(
  410|  66.7k|            prefix_result.iterator,
  411|  66.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  66.7k|                ranges::ssize(thsep_indices));
  413|  66.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  45.1k|    {
  335|  45.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  45.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  45.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 45.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  45.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 45.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.9k, False: 8.20k]
  |  |  ------------------
  ------------------
  361|  36.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.5k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.5k|    }                                                  \
  |  |  |  |   70|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.4k|                    parse_integer_digits_without_thsep(
  363|  16.4k|                        ranges::subrange{prefix_result.iterator,
  364|  16.4k|                                         ranges::end(range)},
  365|  16.4k|                        prefix_result.parsed_base));
  366|       |
  367|  16.4k|            auto buf = make_contiguous_buffer(
  368|  16.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.4k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  16.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  16.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  16.4k|                                        prefix_result.parsed_base));
  372|       |
  373|  16.4k|            return ranges_polyfill::batch_next(
  374|  16.4k|                prefix_result.iterator,
  375|  16.4k|                ranges::distance(buf.view().begin(), result_it));
  376|  16.4k|        }
  377|       |
  378|  8.20k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.20k|            localized_number_formatting_options<CharT>{loc};
  383|  8.20k|#endif
  384|       |
  385|  8.20k|        SCN_TRY(
  ------------------
  |  |   71|  8.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.10k, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.10k|    }                                                  \
  |  |  |  |   70|  8.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.10k|            parse_digits_result,
  387|  4.10k|            parse_integer_digits_with_thsep(
  388|  4.10k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.10k|                prefix_result.parsed_base, locale_options));
  390|  4.10k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.10k|            parse_digits_result;
  392|       |
  393|  4.10k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.10k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.10k|        auto nothsep_source_view =
  403|  4.10k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.10k|        SCN_TRY(
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.10k|            nothsep_source_it,
  406|  4.10k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.10k|                                prefix_result.parsed_base));
  408|       |
  409|  4.10k|        return ranges_polyfill::batch_next(
  410|  4.10k|            prefix_result.iterator,
  411|  4.10k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.10k|                ranges::ssize(thsep_indices));
  413|  4.10k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  45.1k|    {
  335|  45.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  45.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  45.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 45.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  45.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 45.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.9k, False: 8.20k]
  |  |  ------------------
  ------------------
  361|  36.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.5k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.5k|    }                                                  \
  |  |  |  |   70|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.4k|                    parse_integer_digits_without_thsep(
  363|  16.4k|                        ranges::subrange{prefix_result.iterator,
  364|  16.4k|                                         ranges::end(range)},
  365|  16.4k|                        prefix_result.parsed_base));
  366|       |
  367|  16.4k|            auto buf = make_contiguous_buffer(
  368|  16.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.4k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  16.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  16.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  16.4k|                                        prefix_result.parsed_base));
  372|       |
  373|  16.4k|            return ranges_polyfill::batch_next(
  374|  16.4k|                prefix_result.iterator,
  375|  16.4k|                ranges::distance(buf.view().begin(), result_it));
  376|  16.4k|        }
  377|       |
  378|  8.20k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.20k|            localized_number_formatting_options<CharT>{loc};
  383|  8.20k|#endif
  384|       |
  385|  8.20k|        SCN_TRY(
  ------------------
  |  |   71|  8.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.10k, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.10k|    }                                                  \
  |  |  |  |   70|  8.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.10k|            parse_digits_result,
  387|  4.10k|            parse_integer_digits_with_thsep(
  388|  4.10k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.10k|                prefix_result.parsed_base, locale_options));
  390|  4.10k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.10k|            parse_digits_result;
  392|       |
  393|  4.10k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.10k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.10k|        auto nothsep_source_view =
  403|  4.10k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.10k|        SCN_TRY(
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.10k|            nothsep_source_it,
  406|  4.10k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.10k|                                prefix_result.parsed_base));
  408|       |
  409|  4.10k|        return ranges_polyfill::batch_next(
  410|  4.10k|            prefix_result.iterator,
  411|  4.10k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.10k|                ranges::ssize(thsep_indices));
  413|  4.10k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  45.1k|    {
  335|  45.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  45.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  45.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 45.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  45.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 45.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.9k, False: 8.20k]
  |  |  ------------------
  ------------------
  361|  36.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.5k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.5k|    }                                                  \
  |  |  |  |   70|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.4k|                    parse_integer_digits_without_thsep(
  363|  16.4k|                        ranges::subrange{prefix_result.iterator,
  364|  16.4k|                                         ranges::end(range)},
  365|  16.4k|                        prefix_result.parsed_base));
  366|       |
  367|  16.4k|            auto buf = make_contiguous_buffer(
  368|  16.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.4k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  16.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  16.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  16.4k|                                        prefix_result.parsed_base));
  372|       |
  373|  16.4k|            return ranges_polyfill::batch_next(
  374|  16.4k|                prefix_result.iterator,
  375|  16.4k|                ranges::distance(buf.view().begin(), result_it));
  376|  16.4k|        }
  377|       |
  378|  8.20k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.20k|            localized_number_formatting_options<CharT>{loc};
  383|  8.20k|#endif
  384|       |
  385|  8.20k|        SCN_TRY(
  ------------------
  |  |   71|  8.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.10k, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.10k|    }                                                  \
  |  |  |  |   70|  8.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.10k|            parse_digits_result,
  387|  4.10k|            parse_integer_digits_with_thsep(
  388|  4.10k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.10k|                prefix_result.parsed_base, locale_options));
  390|  4.10k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.10k|            parse_digits_result;
  392|       |
  393|  4.10k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.10k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.10k|        auto nothsep_source_view =
  403|  4.10k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.10k|        SCN_TRY(
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.10k|            nothsep_source_it,
  406|  4.10k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.10k|                                prefix_result.parsed_base));
  408|       |
  409|  4.10k|        return ranges_polyfill::batch_next(
  410|  4.10k|            prefix_result.iterator,
  411|  4.10k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.10k|                ranges::ssize(thsep_indices));
  413|  4.10k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  45.1k|    {
  335|  45.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  45.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  45.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 45.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  45.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 45.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.9k, False: 8.20k]
  |  |  ------------------
  ------------------
  361|  36.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.5k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.5k|    }                                                  \
  |  |  |  |   70|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.4k|                    parse_integer_digits_without_thsep(
  363|  16.4k|                        ranges::subrange{prefix_result.iterator,
  364|  16.4k|                                         ranges::end(range)},
  365|  16.4k|                        prefix_result.parsed_base));
  366|       |
  367|  16.4k|            auto buf = make_contiguous_buffer(
  368|  16.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.4k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  16.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  16.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  16.4k|                                        prefix_result.parsed_base));
  372|       |
  373|  16.4k|            return ranges_polyfill::batch_next(
  374|  16.4k|                prefix_result.iterator,
  375|  16.4k|                ranges::distance(buf.view().begin(), result_it));
  376|  16.4k|        }
  377|       |
  378|  8.20k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.20k|            localized_number_formatting_options<CharT>{loc};
  383|  8.20k|#endif
  384|       |
  385|  8.20k|        SCN_TRY(
  ------------------
  |  |   71|  8.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.10k, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.10k|    }                                                  \
  |  |  |  |   70|  8.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.10k|            parse_digits_result,
  387|  4.10k|            parse_integer_digits_with_thsep(
  388|  4.10k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.10k|                prefix_result.parsed_base, locale_options));
  390|  4.10k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.10k|            parse_digits_result;
  392|       |
  393|  4.10k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.10k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.10k|        auto nothsep_source_view =
  403|  4.10k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.10k|        SCN_TRY(
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.10k|            nothsep_source_it,
  406|  4.10k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.10k|                                prefix_result.parsed_base));
  408|       |
  409|  4.10k|        return ranges_polyfill::batch_next(
  410|  4.10k|            prefix_result.iterator,
  411|  4.10k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.10k|                ranges::ssize(thsep_indices));
  413|  4.10k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  45.1k|    {
  335|  45.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  45.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  45.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 45.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  45.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 45.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.9k, False: 8.20k]
  |  |  ------------------
  ------------------
  361|  36.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.5k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.5k|    }                                                  \
  |  |  |  |   70|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.4k|                    parse_integer_digits_without_thsep(
  363|  16.4k|                        ranges::subrange{prefix_result.iterator,
  364|  16.4k|                                         ranges::end(range)},
  365|  16.4k|                        prefix_result.parsed_base));
  366|       |
  367|  16.4k|            auto buf = make_contiguous_buffer(
  368|  16.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.4k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  16.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  16.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  16.4k|                                        prefix_result.parsed_base));
  372|       |
  373|  16.4k|            return ranges_polyfill::batch_next(
  374|  16.4k|                prefix_result.iterator,
  375|  16.4k|                ranges::distance(buf.view().begin(), result_it));
  376|  16.4k|        }
  377|       |
  378|  8.20k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.20k|            localized_number_formatting_options<CharT>{loc};
  383|  8.20k|#endif
  384|       |
  385|  8.20k|        SCN_TRY(
  ------------------
  |  |   71|  8.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.10k, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.10k|    }                                                  \
  |  |  |  |   70|  8.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.10k|            parse_digits_result,
  387|  4.10k|            parse_integer_digits_with_thsep(
  388|  4.10k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.10k|                prefix_result.parsed_base, locale_options));
  390|  4.10k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.10k|            parse_digits_result;
  392|       |
  393|  4.10k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.10k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.10k|        auto nothsep_source_view =
  403|  4.10k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.10k|        SCN_TRY(
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.10k|            nothsep_source_it,
  406|  4.10k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.10k|                                prefix_result.parsed_base));
  408|       |
  409|  4.10k|        return ranges_polyfill::batch_next(
  410|  4.10k|            prefix_result.iterator,
  411|  4.10k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.10k|                ranges::ssize(thsep_indices));
  413|  4.10k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  45.1k|    {
  335|  45.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  45.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  45.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 45.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  45.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 45.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.9k, False: 8.20k]
  |  |  ------------------
  ------------------
  361|  36.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  36.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.5k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.5k|    }                                                  \
  |  |  |  |   70|  36.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.4k|                    parse_integer_digits_without_thsep(
  363|  16.4k|                        ranges::subrange{prefix_result.iterator,
  364|  16.4k|                                         ranges::end(range)},
  365|  16.4k|                        prefix_result.parsed_base));
  366|       |
  367|  16.4k|            auto buf = make_contiguous_buffer(
  368|  16.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.4k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  16.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  16.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  16.4k|                                        prefix_result.parsed_base));
  372|       |
  373|  16.4k|            return ranges_polyfill::batch_next(
  374|  16.4k|                prefix_result.iterator,
  375|  16.4k|                ranges::distance(buf.view().begin(), result_it));
  376|  16.4k|        }
  377|       |
  378|  8.20k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.20k|            localized_number_formatting_options<CharT>{loc};
  383|  8.20k|#endif
  384|       |
  385|  8.20k|        SCN_TRY(
  ------------------
  |  |   71|  8.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.10k, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.10k|    }                                                  \
  |  |  |  |   70|  8.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.10k|            parse_digits_result,
  387|  4.10k|            parse_integer_digits_with_thsep(
  388|  4.10k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.10k|                prefix_result.parsed_base, locale_options));
  390|  4.10k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.10k|            parse_digits_result;
  392|       |
  393|  4.10k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.10k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.10k|        auto nothsep_source_view =
  403|  4.10k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.10k|        SCN_TRY(
  ------------------
  |  |   71|  4.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.10k|            nothsep_source_it,
  406|  4.10k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.10k|                                prefix_result.parsed_base));
  408|       |
  409|  4.10k|        return ranges_polyfill::batch_next(
  410|  4.10k|            prefix_result.iterator,
  411|  4.10k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.10k|                ranges::ssize(thsep_indices));
  413|  4.10k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   123k|    {
  324|   123k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   123k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   123k|        return read_default_with_base(range, value, 0);
  326|   123k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   123k|    {
  287|   123k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   123k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   123k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   123k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   123k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   123k|                return unexpected_scan_error(
  293|   123k|                    scan_error::invalid_scanned_value,
  294|   123k|                    "Unexpected '-' sign when parsing an "
  295|   123k|                    "unsigned value");
  296|   123k|            }
  297|   123k|        }
  298|       |
  299|   123k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 33.2k, False: 89.9k]
  ------------------
  300|  33.2k|            value = T{0};
  301|  33.2k|            return std::next(prefix_result.iterator);
  302|  33.2k|        }
  303|       |
  304|   179k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  89.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  89.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  89.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  89.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 75, False: 89.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     75|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     75|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     75|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     75|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     75|    }                                                  \
  |  |  |  |   70|  89.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   179k|                                     ranges::subrange{prefix_result.iterator,
  306|   179k|                                                      ranges::end(range)},
  307|   179k|                                     prefix_result.parsed_base));
  308|       |
  309|   179k|        auto buf = make_contiguous_buffer(
  310|   179k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   179k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  89.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  89.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  89.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.90k, False: 79.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.90k|    }                                                  \
  |  |  |  |   70|  89.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  79.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  79.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  79.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  79.9k|        return ranges_polyfill::batch_next(
  316|  79.9k|            prefix_result.iterator,
  317|  79.9k|            ranges::distance(buf.view().begin(), result_it));
  318|   179k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  2.99M|{
  121|  2.99M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  2.99M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.99M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.99M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.99M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.99M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  2.99M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  2.99M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  2.99M|        parse_integer_base_prefix(
  126|  2.99M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  2.99M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 984k, False: 2.00M]
  ------------------
  129|   984k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.16k, False: 982k]
  ------------------
  130|   984k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 573k, False: 408k]
  ------------------
  131|   575k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   575k|                digits_begin_it, ranges::begin(range));
  133|   575k|        }
  134|   408k|        else {
  135|   408k|            parsed_zero = false;
  136|   408k|        }
  137|   984k|    }
  138|  2.00M|    else {
  139|  2.00M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.39k, False: 2.00M]
  ------------------
  140|  2.00M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 255k, False: 1.74M]
  ------------------
  141|   260k|            digits_begin_it = base_prefix_begin_it;
  142|   260k|        }
  143|  2.00M|    }
  144|       |
  145|  2.99M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 2.80M, False: 187k]
  ------------------
  146|  2.80M|        sign = sign_type::plus_sign;
  147|  2.80M|    }
  148|  2.99M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  2.99M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  2.99M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  2.99M|{
   88|  2.99M|    switch (base) {
   89|  89.2k|        case 2:
  ------------------
  |  Branch (89:9): [True: 89.2k, False: 2.90M]
  ------------------
   90|       |            // allow 0b/0B
   91|  89.2k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  89.2k|                    false};
   93|       |
   94|   161k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 161k, False: 2.83M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   161k|            bool zero_parsed = false;
   97|   161k|            auto it = apply_opt(
   98|   161k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   161k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   426k|        case 16:
  ------------------
  |  Branch (102:9): [True: 426k, False: 2.56M]
  ------------------
  103|       |            // allow 0x/0X
  104|   426k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   426k|                    false};
  106|       |
  107|  1.93M|        case 0:
  ------------------
  |  Branch (107:9): [True: 1.93M, False: 1.05M]
  ------------------
  108|       |            // detect base
  109|  1.93M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  1.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   379k|        default:
  ------------------
  |  Branch (111:9): [True: 379k, False: 2.61M]
  ------------------
  112|       |            // no base prefix allowed
  113|   379k|            return {ranges::begin(range), base, false};
  114|  2.99M|    }
  115|  2.99M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  1.99M|{
   38|  1.99M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  1.99M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.06M|{
   53|  2.06M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 23.8k, False: 2.04M]
  ------------------
   54|  23.8k|        return *r;
   55|  23.8k|    }
   56|       |
   57|  2.04M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 984k, False: 1.05M]
  ------------------
   58|   984k|        zero_parsed = true;
   59|   984k|        return *r;
   60|   984k|    }
   61|       |
   62|  1.05M|    return unexpected(parse_error::error);
   63|  2.04M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  2.36M|{
   45|  2.36M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  2.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.36M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  1.93M|{
   69|  1.93M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 30.2k, False: 1.90M]
  ------------------
   70|  30.2k|        return {*r, 16, false};
   71|  30.2k|    }
   72|  1.90M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 1.83k, False: 1.90M]
  ------------------
   73|  1.83k|        return {*r, 2, false};
   74|  1.83k|    }
   75|  1.90M|    {
   76|  1.90M|        bool zero_parsed{false};
   77|  1.90M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 935k, False: 968k]
  ------------------
   78|   935k|            return {*r, 8, zero_parsed};
   79|   935k|        }
   80|  1.90M|    }
   81|   968k|    return {ranges::begin(range), 10, false};
   82|  1.90M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  1.99M|{
  156|  1.99M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  1.99M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  1.99M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.56k, False: 1.99M]
  |  |  ------------------
  ------------------
  160|  1.56k|            return unexpected_scan_error(
  161|  1.56k|                scan_error::invalid_scanned_value,
  162|  1.56k|                "Failed to parse integer: No digits found");
  163|  1.56k|        }
  164|  1.99M|        return ranges::end(range);
  165|  1.99M|    }
  166|  1.99M|    else {
  167|  1.99M|        return read_while1_code_unit(
  168|  1.99M|                   range, [&](char_type ch)
  169|  1.99M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  1.99M|            .transform_error(map_parse_error_to_scan_error(
  171|  1.99M|                scan_error::invalid_scanned_value,
  172|  1.99M|                "Failed to parse integer: No digits found"));
  173|  1.99M|    }
  174|  1.99M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   157k|    {
  324|   157k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   157k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   157k|        return read_default_with_base(range, value, 0);
  326|   157k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   157k|    {
  287|   157k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   157k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   157k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   157k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   157k|                return unexpected_scan_error(
  293|   157k|                    scan_error::invalid_scanned_value,
  294|   157k|                    "Unexpected '-' sign when parsing an "
  295|   157k|                    "unsigned value");
  296|   157k|            }
  297|   157k|        }
  298|       |
  299|   157k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 43.7k, False: 113k]
  ------------------
  300|  43.7k|            value = T{0};
  301|  43.7k|            return std::next(prefix_result.iterator);
  302|  43.7k|        }
  303|       |
  304|   226k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 129, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    129|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    129|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    129|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    129|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    129|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   226k|                                     ranges::subrange{prefix_result.iterator,
  306|   226k|                                                      ranges::end(range)},
  307|   226k|                                     prefix_result.parsed_base));
  308|       |
  309|   226k|        auto buf = make_contiguous_buffer(
  310|   226k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   226k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.31k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.31k|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   104k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   104k|                                    prefix_result.parsed_base));
  314|       |
  315|   104k|        return ranges_polyfill::batch_next(
  316|   104k|            prefix_result.iterator,
  317|   104k|            ranges::distance(buf.view().begin(), result_it));
  318|   226k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   160k|    {
  324|   160k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   160k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   160k|        return read_default_with_base(range, value, 0);
  326|   160k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   160k|    {
  287|   160k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   160k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   160k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   160k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   160k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   160k|                return unexpected_scan_error(
  293|   160k|                    scan_error::invalid_scanned_value,
  294|   160k|                    "Unexpected '-' sign when parsing an "
  295|   160k|                    "unsigned value");
  296|   160k|            }
  297|   160k|        }
  298|       |
  299|   160k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 44.2k, False: 116k]
  ------------------
  300|  44.2k|            value = T{0};
  301|  44.2k|            return std::next(prefix_result.iterator);
  302|  44.2k|        }
  303|       |
  304|   232k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 147, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    147|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    147|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    147|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    147|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    147|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   232k|                                     ranges::subrange{prefix_result.iterator,
  306|   232k|                                                      ranges::end(range)},
  307|   232k|                                     prefix_result.parsed_base));
  308|       |
  309|   232k|        auto buf = make_contiguous_buffer(
  310|   232k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   232k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.18k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.18k|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   106k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   106k|                                    prefix_result.parsed_base));
  314|       |
  315|   106k|        return ranges_polyfill::batch_next(
  316|   106k|            prefix_result.iterator,
  317|   106k|            ranges::distance(buf.view().begin(), result_it));
  318|   232k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   118k|    {
  324|   118k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   118k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   118k|        return read_default_with_base(range, value, 0);
  326|   118k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   118k|    {
  287|   118k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 118k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   118k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   118k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   118k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   118k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.73k, False: 117k]
  ------------------
  292|  1.73k|                return unexpected_scan_error(
  293|  1.73k|                    scan_error::invalid_scanned_value,
  294|  1.73k|                    "Unexpected '-' sign when parsing an "
  295|  1.73k|                    "unsigned value");
  296|  1.73k|            }
  297|   118k|        }
  298|       |
  299|   117k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 33.2k, False: 83.9k]
  ------------------
  300|  33.2k|            value = T{0};
  301|  33.2k|            return std::next(prefix_result.iterator);
  302|  33.2k|        }
  303|       |
  304|   167k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  83.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 83.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|  83.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   167k|                                     ranges::subrange{prefix_result.iterator,
  306|   167k|                                                      ranges::end(range)},
  307|   167k|                                     prefix_result.parsed_base));
  308|       |
  309|   167k|        auto buf = make_contiguous_buffer(
  310|   167k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   167k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  83.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.36k, False: 75.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.36k|    }                                                  \
  |  |  |  |   70|  83.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  75.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  75.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  75.5k|                                    prefix_result.parsed_base));
  314|       |
  315|  75.5k|        return ranges_polyfill::batch_next(
  316|  75.5k|            prefix_result.iterator,
  317|  75.5k|            ranges::distance(buf.view().begin(), result_it));
  318|   167k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   133k|    {
  324|   133k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   133k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   133k|        return read_default_with_base(range, value, 0);
  326|   133k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   133k|    {
  287|   133k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   133k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   133k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   133k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.84k, False: 132k]
  ------------------
  292|  1.84k|                return unexpected_scan_error(
  293|  1.84k|                    scan_error::invalid_scanned_value,
  294|  1.84k|                    "Unexpected '-' sign when parsing an "
  295|  1.84k|                    "unsigned value");
  296|  1.84k|            }
  297|   133k|        }
  298|       |
  299|   132k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 36.0k, False: 96.1k]
  ------------------
  300|  36.0k|            value = T{0};
  301|  36.0k|            return std::next(prefix_result.iterator);
  302|  36.0k|        }
  303|       |
  304|   192k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  96.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 33, False: 96.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     33|    }                                                  \
  |  |  |  |   70|  96.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   192k|                                     ranges::subrange{prefix_result.iterator,
  306|   192k|                                                      ranges::end(range)},
  307|   192k|                                     prefix_result.parsed_base));
  308|       |
  309|   192k|        auto buf = make_contiguous_buffer(
  310|   192k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   192k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  96.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.02k, False: 88.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.02k|    }                                                  \
  |  |  |  |   70|  96.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  88.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  88.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  88.0k|        return ranges_polyfill::batch_next(
  316|  88.0k|            prefix_result.iterator,
  317|  88.0k|            ranges::distance(buf.view().begin(), result_it));
  318|   192k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   134k|    {
  324|   134k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   134k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   134k|        return read_default_with_base(range, value, 0);
  326|   134k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   134k|    {
  287|   134k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   134k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   134k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   134k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.94k, False: 132k]
  ------------------
  292|  1.94k|                return unexpected_scan_error(
  293|  1.94k|                    scan_error::invalid_scanned_value,
  294|  1.94k|                    "Unexpected '-' sign when parsing an "
  295|  1.94k|                    "unsigned value");
  296|  1.94k|            }
  297|   134k|        }
  298|       |
  299|   132k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 36.1k, False: 96.7k]
  ------------------
  300|  36.1k|            value = T{0};
  301|  36.1k|            return std::next(prefix_result.iterator);
  302|  36.1k|        }
  303|       |
  304|   193k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  96.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 33, False: 96.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     33|    }                                                  \
  |  |  |  |   70|  96.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   193k|                                     ranges::subrange{prefix_result.iterator,
  306|   193k|                                                      ranges::end(range)},
  307|   193k|                                     prefix_result.parsed_base));
  308|       |
  309|   193k|        auto buf = make_contiguous_buffer(
  310|   193k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   193k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  96.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.85k, False: 88.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.85k|    }                                                  \
  |  |  |  |   70|  96.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  88.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  88.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  88.9k|        return ranges_polyfill::batch_next(
  316|  88.9k|            prefix_result.iterator,
  317|  88.9k|            ranges::distance(buf.view().begin(), result_it));
  318|   193k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   399k|{
  185|   399k|    std::basic_string<CharT> output;
  186|   399k|    std::string thsep_indices;
  187|   399k|    auto it = ranges::begin(range);
  188|   399k|    bool digit_matched = false;
  189|  1.66M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.65M, False: 5.24k]
  ------------------
  190|  1.65M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 66.9k, False: 1.59M]
  ------------------
  191|  66.9k|            thsep_indices.push_back(static_cast<char>(
  192|  66.9k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  66.9k|        }
  194|  1.59M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 393k, False: 1.19M]
  ------------------
  195|   393k|            break;
  196|   393k|        }
  197|  1.19M|        else {
  198|  1.19M|            output.push_back(*it);
  199|  1.19M|            digit_matched = true;
  200|  1.19M|        }
  201|  1.65M|    }
  202|   399k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.3k, False: 368k]
  |  |  ------------------
  ------------------
  203|  30.3k|        return unexpected_scan_error(
  204|  30.3k|            scan_error::invalid_scanned_value,
  205|  30.3k|            "Failed to parse integer: No digits found");
  206|  30.3k|    }
  207|   368k|    return std::tuple{it, output, thsep_indices};
  208|   399k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  2.66M|    {
  280|  2.66M|        detail::check_int_type_specs(specs, eh);
  281|  2.66M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   290k|    {
  335|   290k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   290k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   290k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 16.6k, False: 273k]
  ------------------
  339|  16.6k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  16.6k|                return unexpected_scan_error(
  341|  16.6k|                    scan_error::invalid_scanned_value,
  342|  16.6k|                    "Unexpected '-' sign when parsing an "
  343|  16.6k|                    "unsigned value");
  344|  16.6k|            }
  345|  16.6k|            else {
  346|  16.6k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 16.6k]
  ------------------
  347|  16.6k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  16.6k|            }
  353|  16.6k|        }
  354|       |
  355|   290k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 51.2k, False: 239k]
  ------------------
  356|  51.2k|            value = T{0};
  357|  51.2k|            return std::next(prefix_result.iterator);
  358|  51.2k|        }
  359|       |
  360|   239k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   239k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 178k, False: 60.2k]
  |  |  ------------------
  ------------------
  361|   178k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 196, False: 178k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    196|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    196|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    196|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    196|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    196|    }                                                  \
  |  |  |  |   70|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   178k|                    parse_integer_digits_without_thsep(
  363|   178k|                        ranges::subrange{prefix_result.iterator,
  364|   178k|                                         ranges::end(range)},
  365|   178k|                        prefix_result.parsed_base));
  366|       |
  367|   178k|            auto buf = make_contiguous_buffer(
  368|   178k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   178k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 34.1k, False: 144k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.1k|    }                                                  \
  |  |  |  |   70|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   144k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   144k|                                        prefix_result.parsed_base));
  372|       |
  373|   144k|            return ranges_polyfill::batch_next(
  374|   144k|                prefix_result.iterator,
  375|   144k|                ranges::distance(buf.view().begin(), result_it));
  376|   178k|        }
  377|       |
  378|  60.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  60.2k|            localized_number_formatting_options<CharT>{loc};
  383|  60.2k|#endif
  384|       |
  385|  60.2k|        SCN_TRY(
  ------------------
  |  |   71|  60.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.99k, False: 55.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.99k|    }                                                  \
  |  |  |  |   70|  60.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  55.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  55.2k|            parse_digits_result,
  387|  55.2k|            parse_integer_digits_with_thsep(
  388|  55.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  55.2k|                prefix_result.parsed_base, locale_options));
  390|  55.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  55.2k|            parse_digits_result;
  392|       |
  393|  55.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 768, False: 54.4k]
  ------------------
  394|    768|            if (auto e = check_thsep_grouping(
  395|    768|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    768|                    thsep_indices, locale_options.grouping);
  397|    768|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 284, False: 484]
  |  |  ------------------
  ------------------
  398|    284|                return unexpected(e);
  399|    284|            }
  400|    768|        }
  401|       |
  402|  54.9k|        auto nothsep_source_view =
  403|  54.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  54.9k|        SCN_TRY(
  ------------------
  |  |   71|  54.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.36k, False: 53.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.36k|    }                                                  \
  |  |  |  |   70|  54.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  53.5k|            nothsep_source_it,
  406|  53.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  53.5k|                                prefix_result.parsed_base));
  408|       |
  409|  53.5k|        return ranges_polyfill::batch_next(
  410|  53.5k|            prefix_result.iterator,
  411|  53.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  53.5k|                ranges::ssize(thsep_indices));
  413|  54.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   418k|    {
  335|   418k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   418k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   418k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   418k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 418k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   418k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   418k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   418k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 20.8k, False: 397k]
  ------------------
  339|  20.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  20.8k|                return unexpected_scan_error(
  341|  20.8k|                    scan_error::invalid_scanned_value,
  342|  20.8k|                    "Unexpected '-' sign when parsing an "
  343|  20.8k|                    "unsigned value");
  344|  20.8k|            }
  345|  20.8k|            else {
  346|  20.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 20.8k]
  ------------------
  347|  20.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  20.8k|            }
  353|  20.8k|        }
  354|       |
  355|   418k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 66.4k, False: 352k]
  ------------------
  356|  66.4k|            value = T{0};
  357|  66.4k|            return std::next(prefix_result.iterator);
  358|  66.4k|        }
  359|       |
  360|   352k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   352k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 276k, False: 75.8k]
  |  |  ------------------
  ------------------
  361|   276k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   276k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 316, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    316|    }                                                  \
  |  |  |  |   70|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   276k|                    parse_integer_digits_without_thsep(
  363|   276k|                        ranges::subrange{prefix_result.iterator,
  364|   276k|                                         ranges::end(range)},
  365|   276k|                        prefix_result.parsed_base));
  366|       |
  367|   276k|            auto buf = make_contiguous_buffer(
  368|   276k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   276k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   276k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32.6k, False: 243k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  32.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  32.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  32.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  32.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  32.6k|    }                                                  \
  |  |  |  |   70|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   243k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   243k|                                        prefix_result.parsed_base));
  372|       |
  373|   243k|            return ranges_polyfill::batch_next(
  374|   243k|                prefix_result.iterator,
  375|   243k|                ranges::distance(buf.view().begin(), result_it));
  376|   276k|        }
  377|       |
  378|  75.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  75.8k|            localized_number_formatting_options<CharT>{loc};
  383|  75.8k|#endif
  384|       |
  385|  75.8k|        SCN_TRY(
  ------------------
  |  |   71|  75.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  75.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  75.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.35k, False: 70.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.35k|    }                                                  \
  |  |  |  |   70|  75.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  70.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  70.4k|            parse_digits_result,
  387|  70.4k|            parse_integer_digits_with_thsep(
  388|  70.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  70.4k|                prefix_result.parsed_base, locale_options));
  390|  70.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  70.4k|            parse_digits_result;
  392|       |
  393|  70.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 830, False: 69.6k]
  ------------------
  394|    830|            if (auto e = check_thsep_grouping(
  395|    830|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    830|                    thsep_indices, locale_options.grouping);
  397|    830|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    830|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 346, False: 484]
  |  |  ------------------
  ------------------
  398|    346|                return unexpected(e);
  399|    346|            }
  400|    830|        }
  401|       |
  402|  70.1k|        auto nothsep_source_view =
  403|  70.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  70.1k|        SCN_TRY(
  ------------------
  |  |   71|  70.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 578, False: 69.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    578|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    578|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    578|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    578|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    578|    }                                                  \
  |  |  |  |   70|  70.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  69.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  69.5k|            nothsep_source_it,
  406|  69.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  69.5k|                                prefix_result.parsed_base));
  408|       |
  409|  69.5k|        return ranges_polyfill::batch_next(
  410|  69.5k|            prefix_result.iterator,
  411|  69.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  69.5k|                ranges::ssize(thsep_indices));
  413|  70.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   427k|    {
  335|   427k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   427k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   427k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   427k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 427k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   427k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   427k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   427k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 22.5k, False: 405k]
  ------------------
  339|  22.5k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  22.5k|                return unexpected_scan_error(
  341|  22.5k|                    scan_error::invalid_scanned_value,
  342|  22.5k|                    "Unexpected '-' sign when parsing an "
  343|  22.5k|                    "unsigned value");
  344|  22.5k|            }
  345|  22.5k|            else {
  346|  22.5k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 22.5k]
  ------------------
  347|  22.5k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  22.5k|            }
  353|  22.5k|        }
  354|       |
  355|   427k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 67.1k, False: 360k]
  ------------------
  356|  67.1k|            value = T{0};
  357|  67.1k|            return std::next(prefix_result.iterator);
  358|  67.1k|        }
  359|       |
  360|   360k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   360k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 283k, False: 77.6k]
  |  |  ------------------
  ------------------
  361|   283k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 356, False: 282k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    356|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    356|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    356|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    356|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    356|    }                                                  \
  |  |  |  |   70|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   282k|                    parse_integer_digits_without_thsep(
  363|   282k|                        ranges::subrange{prefix_result.iterator,
  364|   282k|                                         ranges::end(range)},
  365|   282k|                        prefix_result.parsed_base));
  366|       |
  367|   282k|            auto buf = make_contiguous_buffer(
  368|   282k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   282k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   282k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   282k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   282k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32.3k, False: 250k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  32.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  32.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  32.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  32.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  32.3k|    }                                                  \
  |  |  |  |   70|   282k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   250k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   250k|                                        prefix_result.parsed_base));
  372|       |
  373|   250k|            return ranges_polyfill::batch_next(
  374|   250k|                prefix_result.iterator,
  375|   250k|                ranges::distance(buf.view().begin(), result_it));
  376|   282k|        }
  377|       |
  378|  77.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  77.6k|            localized_number_formatting_options<CharT>{loc};
  383|  77.6k|#endif
  384|       |
  385|  77.6k|        SCN_TRY(
  ------------------
  |  |   71|  77.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.51k, False: 72.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.51k|    }                                                  \
  |  |  |  |   70|  77.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  72.1k|            parse_digits_result,
  387|  72.1k|            parse_integer_digits_with_thsep(
  388|  72.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  72.1k|                prefix_result.parsed_base, locale_options));
  390|  72.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  72.1k|            parse_digits_result;
  392|       |
  393|  72.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 862, False: 71.3k]
  ------------------
  394|    862|            if (auto e = check_thsep_grouping(
  395|    862|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    862|                    thsep_indices, locale_options.grouping);
  397|    862|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    862|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 376, False: 486]
  |  |  ------------------
  ------------------
  398|    376|                return unexpected(e);
  399|    376|            }
  400|    862|        }
  401|       |
  402|  71.7k|        auto nothsep_source_view =
  403|  71.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  71.7k|        SCN_TRY(
  ------------------
  |  |   71|  71.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 312, False: 71.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    312|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    312|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    312|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    312|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    312|    }                                                  \
  |  |  |  |   70|  71.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  71.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  71.4k|            nothsep_source_it,
  406|  71.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  71.4k|                                prefix_result.parsed_base));
  408|       |
  409|  71.4k|        return ranges_polyfill::batch_next(
  410|  71.4k|            prefix_result.iterator,
  411|  71.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  71.4k|                ranges::ssize(thsep_indices));
  413|  71.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   302k|    {
  335|   302k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   302k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   302k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.20k, False: 295k]
  ------------------
  339|  6.20k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.20k|                return unexpected_scan_error(
  341|  6.20k|                    scan_error::invalid_scanned_value,
  342|  6.20k|                    "Unexpected '-' sign when parsing an "
  343|  6.20k|                    "unsigned value");
  344|  6.20k|            }
  345|  6.20k|            else {
  346|  6.20k|                if (specs.type ==
  347|  6.20k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.20k|                    return unexpected_scan_error(
  349|  6.20k|                        scan_error::invalid_scanned_value,
  350|  6.20k|                        "'u'-option disallows negative values");
  351|  6.20k|                }
  352|  6.20k|            }
  353|  6.20k|        }
  354|       |
  355|   295k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 51.6k, False: 244k]
  ------------------
  356|  51.6k|            value = T{0};
  357|  51.6k|            return std::next(prefix_result.iterator);
  358|  51.6k|        }
  359|       |
  360|   244k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   244k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 187k, False: 56.2k]
  |  |  ------------------
  ------------------
  361|   187k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 74, False: 187k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     74|    }                                                  \
  |  |  |  |   70|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   187k|                    parse_integer_digits_without_thsep(
  363|   187k|                        ranges::subrange{prefix_result.iterator,
  364|   187k|                                         ranges::end(range)},
  365|   187k|                        prefix_result.parsed_base));
  366|       |
  367|   187k|            auto buf = make_contiguous_buffer(
  368|   187k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   187k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 29.6k, False: 158k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  29.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  29.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  29.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  29.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  29.6k|    }                                                  \
  |  |  |  |   70|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   158k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   158k|                                        prefix_result.parsed_base));
  372|       |
  373|   158k|            return ranges_polyfill::batch_next(
  374|   158k|                prefix_result.iterator,
  375|   158k|                ranges::distance(buf.view().begin(), result_it));
  376|   187k|        }
  377|       |
  378|  56.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  56.2k|            localized_number_formatting_options<CharT>{loc};
  383|  56.2k|#endif
  384|       |
  385|  56.2k|        SCN_TRY(
  ------------------
  |  |   71|  56.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.76k, False: 51.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.76k|    }                                                  \
  |  |  |  |   70|  56.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  51.5k|            parse_digits_result,
  387|  51.5k|            parse_integer_digits_with_thsep(
  388|  51.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  51.5k|                prefix_result.parsed_base, locale_options));
  390|  51.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  51.5k|            parse_digits_result;
  392|       |
  393|  51.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 628, False: 50.8k]
  ------------------
  394|    628|            if (auto e = check_thsep_grouping(
  395|    628|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    628|                    thsep_indices, locale_options.grouping);
  397|    628|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 176, False: 452]
  |  |  ------------------
  ------------------
  398|    176|                return unexpected(e);
  399|    176|            }
  400|    628|        }
  401|       |
  402|  51.3k|        auto nothsep_source_view =
  403|  51.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  51.3k|        SCN_TRY(
  ------------------
  |  |   71|  51.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  51.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 624, False: 50.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    624|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    624|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    624|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    624|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    624|    }                                                  \
  |  |  |  |   70|  51.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  50.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  50.7k|            nothsep_source_it,
  406|  50.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  50.7k|                                prefix_result.parsed_base));
  408|       |
  409|  50.7k|        return ranges_polyfill::batch_next(
  410|  50.7k|            prefix_result.iterator,
  411|  50.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  50.7k|                ranges::ssize(thsep_indices));
  413|  51.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   360k|    {
  335|   360k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   360k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   360k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   360k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 360k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   360k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   360k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   360k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.56k, False: 353k]
  ------------------
  339|  6.56k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.56k|                return unexpected_scan_error(
  341|  6.56k|                    scan_error::invalid_scanned_value,
  342|  6.56k|                    "Unexpected '-' sign when parsing an "
  343|  6.56k|                    "unsigned value");
  344|  6.56k|            }
  345|  6.56k|            else {
  346|  6.56k|                if (specs.type ==
  347|  6.56k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.56k|                    return unexpected_scan_error(
  349|  6.56k|                        scan_error::invalid_scanned_value,
  350|  6.56k|                        "'u'-option disallows negative values");
  351|  6.56k|                }
  352|  6.56k|            }
  353|  6.56k|        }
  354|       |
  355|   353k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 55.3k, False: 298k]
  ------------------
  356|  55.3k|            value = T{0};
  357|  55.3k|            return std::next(prefix_result.iterator);
  358|  55.3k|        }
  359|       |
  360|   298k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   298k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 234k, False: 64.3k]
  |  |  ------------------
  ------------------
  361|   234k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   234k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 86, False: 234k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     86|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     86|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     86|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     86|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     86|    }                                                  \
  |  |  |  |   70|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   234k|                    parse_integer_digits_without_thsep(
  363|   234k|                        ranges::subrange{prefix_result.iterator,
  364|   234k|                                         ranges::end(range)},
  365|   234k|                        prefix_result.parsed_base));
  366|       |
  367|   234k|            auto buf = make_contiguous_buffer(
  368|   234k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   234k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   234k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 28.6k, False: 205k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  28.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  28.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  28.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  28.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  28.6k|    }                                                  \
  |  |  |  |   70|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   205k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   205k|                                        prefix_result.parsed_base));
  372|       |
  373|   205k|            return ranges_polyfill::batch_next(
  374|   205k|                prefix_result.iterator,
  375|   205k|                ranges::distance(buf.view().begin(), result_it));
  376|   234k|        }
  377|       |
  378|  64.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  64.3k|            localized_number_formatting_options<CharT>{loc};
  383|  64.3k|#endif
  384|       |
  385|  64.3k|        SCN_TRY(
  ------------------
  |  |   71|  64.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  64.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  64.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.86k, False: 59.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.86k|    }                                                  \
  |  |  |  |   70|  64.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  59.5k|            parse_digits_result,
  387|  59.5k|            parse_integer_digits_with_thsep(
  388|  59.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  59.5k|                prefix_result.parsed_base, locale_options));
  390|  59.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  59.5k|            parse_digits_result;
  392|       |
  393|  59.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 652, False: 58.8k]
  ------------------
  394|    652|            if (auto e = check_thsep_grouping(
  395|    652|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    652|                    thsep_indices, locale_options.grouping);
  397|    652|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 200, False: 452]
  |  |  ------------------
  ------------------
  398|    200|                return unexpected(e);
  399|    200|            }
  400|    652|        }
  401|       |
  402|  59.3k|        auto nothsep_source_view =
  403|  59.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  59.3k|        SCN_TRY(
  ------------------
  |  |   71|  59.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 280, False: 59.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    280|    }                                                  \
  |  |  |  |   70|  59.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  59.0k|            nothsep_source_it,
  406|  59.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  59.0k|                                prefix_result.parsed_base));
  408|       |
  409|  59.0k|        return ranges_polyfill::batch_next(
  410|  59.0k|            prefix_result.iterator,
  411|  59.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  59.0k|                ranges::ssize(thsep_indices));
  413|  59.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   364k|    {
  335|   364k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   364k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   364k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   364k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 364k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   364k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   364k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   364k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.81k, False: 357k]
  ------------------
  339|  6.81k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.81k|                return unexpected_scan_error(
  341|  6.81k|                    scan_error::invalid_scanned_value,
  342|  6.81k|                    "Unexpected '-' sign when parsing an "
  343|  6.81k|                    "unsigned value");
  344|  6.81k|            }
  345|  6.81k|            else {
  346|  6.81k|                if (specs.type ==
  347|  6.81k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.81k|                    return unexpected_scan_error(
  349|  6.81k|                        scan_error::invalid_scanned_value,
  350|  6.81k|                        "'u'-option disallows negative values");
  351|  6.81k|                }
  352|  6.81k|            }
  353|  6.81k|        }
  354|       |
  355|   357k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 55.5k, False: 302k]
  ------------------
  356|  55.5k|            value = T{0};
  357|  55.5k|            return std::next(prefix_result.iterator);
  358|  55.5k|        }
  359|       |
  360|   302k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   302k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 237k, False: 64.7k]
  |  |  ------------------
  ------------------
  361|   237k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 86, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     86|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     86|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     86|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     86|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     86|    }                                                  \
  |  |  |  |   70|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   237k|                    parse_integer_digits_without_thsep(
  363|   237k|                        ranges::subrange{prefix_result.iterator,
  364|   237k|                                         ranges::end(range)},
  365|   237k|                        prefix_result.parsed_base));
  366|       |
  367|   237k|            auto buf = make_contiguous_buffer(
  368|   237k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   237k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 28.2k, False: 208k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  28.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  28.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  28.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  28.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  28.2k|    }                                                  \
  |  |  |  |   70|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   208k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   208k|                                        prefix_result.parsed_base));
  372|       |
  373|   208k|            return ranges_polyfill::batch_next(
  374|   208k|                prefix_result.iterator,
  375|   208k|                ranges::distance(buf.view().begin(), result_it));
  376|   237k|        }
  377|       |
  378|  64.7k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  64.7k|            localized_number_formatting_options<CharT>{loc};
  383|  64.7k|#endif
  384|       |
  385|  64.7k|        SCN_TRY(
  ------------------
  |  |   71|  64.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  64.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  64.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.87k, False: 59.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.87k|    }                                                  \
  |  |  |  |   70|  64.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  59.9k|            parse_digits_result,
  387|  59.9k|            parse_integer_digits_with_thsep(
  388|  59.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  59.9k|                prefix_result.parsed_base, locale_options));
  390|  59.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  59.9k|            parse_digits_result;
  392|       |
  393|  59.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 654, False: 59.2k]
  ------------------
  394|    654|            if (auto e = check_thsep_grouping(
  395|    654|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    654|                    thsep_indices, locale_options.grouping);
  397|    654|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 200, False: 454]
  |  |  ------------------
  ------------------
  398|    200|                return unexpected(e);
  399|    200|            }
  400|    654|        }
  401|       |
  402|  59.7k|        auto nothsep_source_view =
  403|  59.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  59.7k|        SCN_TRY(
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 154, False: 59.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    154|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    154|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    154|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    154|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    154|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  59.5k|            nothsep_source_it,
  406|  59.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  59.5k|                                prefix_result.parsed_base));
  408|       |
  409|  59.5k|        return ranges_polyfill::batch_next(
  410|  59.5k|            prefix_result.iterator,
  411|  59.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  59.5k|                ranges::ssize(thsep_indices));
  413|  59.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.8k|    {
  324|  21.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.8k|        return read_default_with_base(range, value, 0);
  326|  21.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.8k|    {
  287|  21.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  21.8k|                return unexpected_scan_error(
  293|  21.8k|                    scan_error::invalid_scanned_value,
  294|  21.8k|                    "Unexpected '-' sign when parsing an "
  295|  21.8k|                    "unsigned value");
  296|  21.8k|            }
  297|  21.8k|        }
  298|       |
  299|  21.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  32.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  32.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  32.7k|                                                      ranges::end(range)},
  307|  32.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  32.7k|        auto buf = make_contiguous_buffer(
  310|  32.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  32.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  10.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  10.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  10.9k|        return ranges_polyfill::batch_next(
  316|  10.9k|            prefix_result.iterator,
  317|  10.9k|            ranges::distance(buf.view().begin(), result_it));
  318|  32.7k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   611k|{
  121|   611k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   611k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   611k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   611k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 611k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   611k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   611k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   611k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   611k|        parse_integer_base_prefix(
  126|   611k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   611k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 611k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   611k|    else {
  139|   611k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 611k]
  ------------------
  140|   611k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 327k, False: 284k]
  ------------------
  141|   327k|            digits_begin_it = base_prefix_begin_it;
  142|   327k|        }
  143|   611k|    }
  144|       |
  145|   611k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 611k, False: 0]
  ------------------
  146|   611k|        sign = sign_type::plus_sign;
  147|   611k|    }
  148|   611k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   611k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   611k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   611k|{
   88|   611k|    switch (base) {
   89|  43.7k|        case 2:
  ------------------
  |  Branch (89:9): [True: 43.7k, False: 568k]
  ------------------
   90|       |            // allow 0b/0B
   91|  43.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  43.7k|                    false};
   93|       |
   94|  87.4k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 87.4k, False: 524k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  87.4k|            bool zero_parsed = false;
   97|  87.4k|            auto it = apply_opt(
   98|  87.4k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  87.4k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  87.4k|        case 16:
  ------------------
  |  Branch (102:9): [True: 87.4k, False: 524k]
  ------------------
  103|       |            // allow 0x/0X
  104|  87.4k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  87.4k|                    false};
  106|       |
  107|   305k|        case 0:
  ------------------
  |  Branch (107:9): [True: 305k, False: 305k]
  ------------------
  108|       |            // detect base
  109|   305k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  87.4k|        default:
  ------------------
  |  Branch (111:9): [True: 87.4k, False: 524k]
  ------------------
  112|       |            // no base prefix allowed
  113|  87.4k|            return {ranges::begin(range), base, false};
  114|   611k|    }
  115|   611k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   349k|{
   38|   349k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   349k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   393k|{
   53|   393k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 393k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   393k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 393k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   393k|    return unexpected(parse_error::error);
   63|   393k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   393k|{
   45|   393k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   393k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   393k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   305k|{
   69|   305k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 305k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   305k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 305k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   305k|    {
   76|   305k|        bool zero_parsed{false};
   77|   305k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 305k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   305k|    }
   81|   305k|    return {ranges::begin(range), 10, false};
   82|   305k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   524k|{
  156|   524k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   524k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   524k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   524k|            return unexpected_scan_error(
  161|   524k|                scan_error::invalid_scanned_value,
  162|   524k|                "Failed to parse integer: No digits found");
  163|   524k|        }
  164|   524k|        return ranges::end(range);
  165|   524k|    }
  166|   524k|    else {
  167|   524k|        return read_while1_code_unit(
  168|   524k|                   range, [&](char_type ch)
  169|   524k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   524k|            .transform_error(map_parse_error_to_scan_error(
  171|   524k|                scan_error::invalid_scanned_value,
  172|   524k|                "Failed to parse integer: No digits found"));
  173|   524k|    }
  174|   524k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|  1.00M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.8k|    {
  324|  21.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.8k|        return read_default_with_base(range, value, 0);
  326|  21.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.8k|    {
  287|  21.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  21.8k|                return unexpected_scan_error(
  293|  21.8k|                    scan_error::invalid_scanned_value,
  294|  21.8k|                    "Unexpected '-' sign when parsing an "
  295|  21.8k|                    "unsigned value");
  296|  21.8k|            }
  297|  21.8k|        }
  298|       |
  299|  21.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  32.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  32.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  32.7k|                                                      ranges::end(range)},
  307|  32.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  32.7k|        auto buf = make_contiguous_buffer(
  310|  32.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  32.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  10.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  10.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  10.9k|        return ranges_polyfill::batch_next(
  316|  10.9k|            prefix_result.iterator,
  317|  10.9k|            ranges::distance(buf.view().begin(), result_it));
  318|  32.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.8k|    {
  324|  21.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.8k|        return read_default_with_base(range, value, 0);
  326|  21.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.8k|    {
  287|  21.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  21.8k|                return unexpected_scan_error(
  293|  21.8k|                    scan_error::invalid_scanned_value,
  294|  21.8k|                    "Unexpected '-' sign when parsing an "
  295|  21.8k|                    "unsigned value");
  296|  21.8k|            }
  297|  21.8k|        }
  298|       |
  299|  21.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  32.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  32.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  32.7k|                                                      ranges::end(range)},
  307|  32.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  32.7k|        auto buf = make_contiguous_buffer(
  310|  32.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  32.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  10.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  10.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  10.9k|        return ranges_polyfill::batch_next(
  316|  10.9k|            prefix_result.iterator,
  317|  10.9k|            ranges::distance(buf.view().begin(), result_it));
  318|  32.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.8k|    {
  324|  21.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.8k|        return read_default_with_base(range, value, 0);
  326|  21.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.8k|    {
  287|  21.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 21.8k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  21.8k|        }
  298|       |
  299|  21.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  32.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  32.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  32.7k|                                                      ranges::end(range)},
  307|  32.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  32.7k|        auto buf = make_contiguous_buffer(
  310|  32.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  32.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  10.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  10.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  10.9k|        return ranges_polyfill::batch_next(
  316|  10.9k|            prefix_result.iterator,
  317|  10.9k|            ranges::distance(buf.view().begin(), result_it));
  318|  32.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.8k|    {
  324|  21.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.8k|        return read_default_with_base(range, value, 0);
  326|  21.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.8k|    {
  287|  21.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 21.8k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  21.8k|        }
  298|       |
  299|  21.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  32.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  32.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  32.7k|                                                      ranges::end(range)},
  307|  32.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  32.7k|        auto buf = make_contiguous_buffer(
  310|  32.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  32.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  10.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  10.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  10.9k|        return ranges_polyfill::batch_next(
  316|  10.9k|            prefix_result.iterator,
  317|  10.9k|            ranges::distance(buf.view().begin(), result_it));
  318|  32.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  21.8k|    {
  324|  21.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  21.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  21.8k|        return read_default_with_base(range, value, 0);
  326|  21.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  21.8k|    {
  287|  21.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  21.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  21.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  21.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 21.8k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  21.8k|        }
  298|       |
  299|  21.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 21.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  32.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  32.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  32.7k|                                                      ranges::end(range)},
  307|  32.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  32.7k|        auto buf = make_contiguous_buffer(
  310|  32.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  32.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  10.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  10.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  10.9k|        return ranges_polyfill::batch_next(
  316|  10.9k|            prefix_result.iterator,
  317|  10.9k|            ranges::distance(buf.view().begin(), result_it));
  318|  32.7k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  87.4k|{
  185|  87.4k|    std::basic_string<CharT> output;
  186|  87.4k|    std::string thsep_indices;
  187|  87.4k|    auto it = ranges::begin(range);
  188|  87.4k|    bool digit_matched = false;
  189|   174k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 174k, False: 24]
  ------------------
  190|   174k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 174k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|   174k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 87.3k, False: 87.4k]
  ------------------
  195|  87.3k|            break;
  196|  87.3k|        }
  197|  87.4k|        else {
  198|  87.4k|            output.push_back(*it);
  199|  87.4k|            digit_matched = true;
  200|  87.4k|        }
  201|   174k|    }
  202|  87.4k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.6k, False: 43.7k]
  |  |  ------------------
  ------------------
  203|  43.6k|        return unexpected_scan_error(
  204|  43.6k|            scan_error::invalid_scanned_value,
  205|  43.6k|            "Failed to parse integer: No digits found");
  206|  43.6k|    }
  207|  43.7k|    return std::tuple{it, output, thsep_indices};
  208|  87.4k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  80.1k|    {
  335|  80.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  80.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  80.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 80.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  80.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 80.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  80.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  80.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 65.5k, False: 14.5k]
  |  |  ------------------
  ------------------
  361|  65.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  65.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.4k, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.4k|    }                                                  \
  |  |  |  |   70|  65.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  29.1k|                    parse_integer_digits_without_thsep(
  363|  29.1k|                        ranges::subrange{prefix_result.iterator,
  364|  29.1k|                                         ranges::end(range)},
  365|  29.1k|                        prefix_result.parsed_base));
  366|       |
  367|  29.1k|            auto buf = make_contiguous_buffer(
  368|  29.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  29.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  29.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  29.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  29.1k|            return ranges_polyfill::batch_next(
  374|  29.1k|                prefix_result.iterator,
  375|  29.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  29.1k|        }
  377|       |
  378|  14.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.5k|            localized_number_formatting_options<CharT>{loc};
  383|  14.5k|#endif
  384|       |
  385|  14.5k|        SCN_TRY(
  ------------------
  |  |   71|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.28k, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.28k|    }                                                  \
  |  |  |  |   70|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.28k|            parse_digits_result,
  387|  7.28k|            parse_integer_digits_with_thsep(
  388|  7.28k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.28k|                prefix_result.parsed_base, locale_options));
  390|  7.28k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.28k|            parse_digits_result;
  392|       |
  393|  7.28k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.28k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.28k|        auto nothsep_source_view =
  403|  7.28k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.28k|        SCN_TRY(
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.28k|            nothsep_source_it,
  406|  7.28k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.28k|                                prefix_result.parsed_base));
  408|       |
  409|  7.28k|        return ranges_polyfill::batch_next(
  410|  7.28k|            prefix_result.iterator,
  411|  7.28k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.28k|                ranges::ssize(thsep_indices));
  413|  7.28k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  80.1k|    {
  335|  80.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  80.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  80.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 80.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  80.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 80.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  80.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  80.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 65.5k, False: 14.5k]
  |  |  ------------------
  ------------------
  361|  65.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  65.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.4k, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.4k|    }                                                  \
  |  |  |  |   70|  65.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  29.1k|                    parse_integer_digits_without_thsep(
  363|  29.1k|                        ranges::subrange{prefix_result.iterator,
  364|  29.1k|                                         ranges::end(range)},
  365|  29.1k|                        prefix_result.parsed_base));
  366|       |
  367|  29.1k|            auto buf = make_contiguous_buffer(
  368|  29.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  29.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  29.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  29.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  29.1k|            return ranges_polyfill::batch_next(
  374|  29.1k|                prefix_result.iterator,
  375|  29.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  29.1k|        }
  377|       |
  378|  14.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.5k|            localized_number_formatting_options<CharT>{loc};
  383|  14.5k|#endif
  384|       |
  385|  14.5k|        SCN_TRY(
  ------------------
  |  |   71|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.28k, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.28k|    }                                                  \
  |  |  |  |   70|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.28k|            parse_digits_result,
  387|  7.28k|            parse_integer_digits_with_thsep(
  388|  7.28k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.28k|                prefix_result.parsed_base, locale_options));
  390|  7.28k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.28k|            parse_digits_result;
  392|       |
  393|  7.28k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.28k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.28k|        auto nothsep_source_view =
  403|  7.28k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.28k|        SCN_TRY(
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.28k|            nothsep_source_it,
  406|  7.28k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.28k|                                prefix_result.parsed_base));
  408|       |
  409|  7.28k|        return ranges_polyfill::batch_next(
  410|  7.28k|            prefix_result.iterator,
  411|  7.28k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.28k|                ranges::ssize(thsep_indices));
  413|  7.28k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  80.1k|    {
  335|  80.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  80.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  80.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 80.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  80.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 80.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  80.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  80.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 65.5k, False: 14.5k]
  |  |  ------------------
  ------------------
  361|  65.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  65.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.4k, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.4k|    }                                                  \
  |  |  |  |   70|  65.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  29.1k|                    parse_integer_digits_without_thsep(
  363|  29.1k|                        ranges::subrange{prefix_result.iterator,
  364|  29.1k|                                         ranges::end(range)},
  365|  29.1k|                        prefix_result.parsed_base));
  366|       |
  367|  29.1k|            auto buf = make_contiguous_buffer(
  368|  29.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  29.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  29.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  29.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  29.1k|            return ranges_polyfill::batch_next(
  374|  29.1k|                prefix_result.iterator,
  375|  29.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  29.1k|        }
  377|       |
  378|  14.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.5k|            localized_number_formatting_options<CharT>{loc};
  383|  14.5k|#endif
  384|       |
  385|  14.5k|        SCN_TRY(
  ------------------
  |  |   71|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.28k, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.28k|    }                                                  \
  |  |  |  |   70|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.28k|            parse_digits_result,
  387|  7.28k|            parse_integer_digits_with_thsep(
  388|  7.28k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.28k|                prefix_result.parsed_base, locale_options));
  390|  7.28k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.28k|            parse_digits_result;
  392|       |
  393|  7.28k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.28k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.28k|        auto nothsep_source_view =
  403|  7.28k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.28k|        SCN_TRY(
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.28k|            nothsep_source_it,
  406|  7.28k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.28k|                                prefix_result.parsed_base));
  408|       |
  409|  7.28k|        return ranges_polyfill::batch_next(
  410|  7.28k|            prefix_result.iterator,
  411|  7.28k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.28k|                ranges::ssize(thsep_indices));
  413|  7.28k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  80.1k|    {
  335|  80.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  80.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  80.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 80.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  80.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 80.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  80.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  80.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 65.5k, False: 14.5k]
  |  |  ------------------
  ------------------
  361|  65.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  65.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.4k, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.4k|    }                                                  \
  |  |  |  |   70|  65.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  29.1k|                    parse_integer_digits_without_thsep(
  363|  29.1k|                        ranges::subrange{prefix_result.iterator,
  364|  29.1k|                                         ranges::end(range)},
  365|  29.1k|                        prefix_result.parsed_base));
  366|       |
  367|  29.1k|            auto buf = make_contiguous_buffer(
  368|  29.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  29.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  29.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  29.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  29.1k|            return ranges_polyfill::batch_next(
  374|  29.1k|                prefix_result.iterator,
  375|  29.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  29.1k|        }
  377|       |
  378|  14.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.5k|            localized_number_formatting_options<CharT>{loc};
  383|  14.5k|#endif
  384|       |
  385|  14.5k|        SCN_TRY(
  ------------------
  |  |   71|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.28k, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.28k|    }                                                  \
  |  |  |  |   70|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.28k|            parse_digits_result,
  387|  7.28k|            parse_integer_digits_with_thsep(
  388|  7.28k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.28k|                prefix_result.parsed_base, locale_options));
  390|  7.28k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.28k|            parse_digits_result;
  392|       |
  393|  7.28k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.28k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.28k|        auto nothsep_source_view =
  403|  7.28k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.28k|        SCN_TRY(
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.28k|            nothsep_source_it,
  406|  7.28k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.28k|                                prefix_result.parsed_base));
  408|       |
  409|  7.28k|        return ranges_polyfill::batch_next(
  410|  7.28k|            prefix_result.iterator,
  411|  7.28k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.28k|                ranges::ssize(thsep_indices));
  413|  7.28k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  80.1k|    {
  335|  80.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  80.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  80.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 80.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  80.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 80.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  80.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  80.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 65.5k, False: 14.5k]
  |  |  ------------------
  ------------------
  361|  65.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  65.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.4k, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.4k|    }                                                  \
  |  |  |  |   70|  65.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  29.1k|                    parse_integer_digits_without_thsep(
  363|  29.1k|                        ranges::subrange{prefix_result.iterator,
  364|  29.1k|                                         ranges::end(range)},
  365|  29.1k|                        prefix_result.parsed_base));
  366|       |
  367|  29.1k|            auto buf = make_contiguous_buffer(
  368|  29.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  29.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  29.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  29.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  29.1k|            return ranges_polyfill::batch_next(
  374|  29.1k|                prefix_result.iterator,
  375|  29.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  29.1k|        }
  377|       |
  378|  14.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.5k|            localized_number_formatting_options<CharT>{loc};
  383|  14.5k|#endif
  384|       |
  385|  14.5k|        SCN_TRY(
  ------------------
  |  |   71|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.28k, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.28k|    }                                                  \
  |  |  |  |   70|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.28k|            parse_digits_result,
  387|  7.28k|            parse_integer_digits_with_thsep(
  388|  7.28k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.28k|                prefix_result.parsed_base, locale_options));
  390|  7.28k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.28k|            parse_digits_result;
  392|       |
  393|  7.28k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.28k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.28k|        auto nothsep_source_view =
  403|  7.28k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.28k|        SCN_TRY(
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.28k|            nothsep_source_it,
  406|  7.28k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.28k|                                prefix_result.parsed_base));
  408|       |
  409|  7.28k|        return ranges_polyfill::batch_next(
  410|  7.28k|            prefix_result.iterator,
  411|  7.28k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.28k|                ranges::ssize(thsep_indices));
  413|  7.28k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  80.1k|    {
  335|  80.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  80.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  80.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 80.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  80.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 80.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  80.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  80.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 65.5k, False: 14.5k]
  |  |  ------------------
  ------------------
  361|  65.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  65.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.4k, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.4k|    }                                                  \
  |  |  |  |   70|  65.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  29.1k|                    parse_integer_digits_without_thsep(
  363|  29.1k|                        ranges::subrange{prefix_result.iterator,
  364|  29.1k|                                         ranges::end(range)},
  365|  29.1k|                        prefix_result.parsed_base));
  366|       |
  367|  29.1k|            auto buf = make_contiguous_buffer(
  368|  29.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  29.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 29.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  29.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  29.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  29.1k|            return ranges_polyfill::batch_next(
  374|  29.1k|                prefix_result.iterator,
  375|  29.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  29.1k|        }
  377|       |
  378|  14.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  14.5k|            localized_number_formatting_options<CharT>{loc};
  383|  14.5k|#endif
  384|       |
  385|  14.5k|        SCN_TRY(
  ------------------
  |  |   71|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.28k, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.28k|    }                                                  \
  |  |  |  |   70|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  7.28k|            parse_digits_result,
  387|  7.28k|            parse_integer_digits_with_thsep(
  388|  7.28k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  7.28k|                prefix_result.parsed_base, locale_options));
  390|  7.28k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  7.28k|            parse_digits_result;
  392|       |
  393|  7.28k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 7.28k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  7.28k|        auto nothsep_source_view =
  403|  7.28k|            std::basic_string_view<CharT>{nothsep_source};
  404|  7.28k|        SCN_TRY(
  ------------------
  |  |   71|  7.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  7.28k|            nothsep_source_it,
  406|  7.28k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  7.28k|                                prefix_result.parsed_base));
  408|       |
  409|  7.28k|        return ranges_polyfill::batch_next(
  410|  7.28k|            prefix_result.iterator,
  411|  7.28k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  7.28k|                ranges::ssize(thsep_indices));
  413|  7.28k|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  3.23M|{
   69|  3.23M|    auto r = read_one_of_code_unit(range, "+-");
   70|  3.23M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 2.99M, False: 239k]
  ------------------
   71|  2.99M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 2.99M, False: 0]
  ------------------
   72|  2.99M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  2.99M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  2.99M|    }
   76|       |
   77|   239k|    auto& it = *r;
   78|   239k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 151k, False: 88.4k]
  ------------------
   79|   151k|        return std::pair{it, sign_type::minus_sign};
   80|   151k|    }
   81|  88.4k|    return std::pair{it, sign_type::plus_sign};
   82|   239k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  31.7M|{
   51|  31.7M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  31.7M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  5.39k|{
  140|  5.39k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  5.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  5.39k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 1.85k, False: 3.53k]
  ------------------
  143|  1.85k|        SCN_UNLIKELY_ATTR
  144|  1.85k|        return {scan_error::invalid_scanned_value,
  145|  1.85k|                "Invalid thousands separator grouping"};
  146|  1.85k|    }
  147|       |
  148|  3.53k|    return {};
  149|  5.39k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  5.39k|{
  101|  5.39k|    transform_thsep_indices(
  102|  5.39k|        thsep_indices,
  103|  5.39k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  5.39k|    auto thsep_it = thsep_indices.rbegin();
  106|  5.39k|    for (auto grouping_it = grouping.begin();
  107|  5.39k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 5.39k]
  |  Branch (107:10): [True: 0, False: 5.39k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  5.39k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  5.39k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  5.39k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  70.4k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 65.8k, False: 4.59k]
  ------------------
  119|  65.8k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 800, False: 65.0k]
  ------------------
  120|    800|            return false;
  121|    800|        }
  122|  65.8k|    }
  123|       |
  124|  4.59k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 4.59k, False: 0]
  ------------------
  125|  4.59k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.05k, False: 3.53k]
  ------------------
  126|  1.05k|            return false;
  127|  1.05k|        }
  128|  4.59k|    }
  129|       |
  130|  3.53k|    SCN_CLANG_POP
  131|       |
  132|  3.53k|    return true;
  133|  4.59k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  9.78k|{
   87|   148k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 138k, False: 9.78k]
  ------------------
   88|   138k|         ++thsep_it) {
   89|   138k|        const auto tmp = *thsep_it;
   90|   138k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|   138k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|   138k|    }
   93|  9.78k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  9.78k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   344k|{
   69|   344k|    auto r = read_one_of_code_unit(range, "+-");
   70|   344k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 344k, False: 0]
  ------------------
   71|   344k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 344k, False: 0]
  ------------------
   72|   344k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   344k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   344k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.99M|{
   69|  2.99M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.99M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 2.80M, False: 187k]
  ------------------
   71|  2.80M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 2.80M, False: 0]
  ------------------
   72|  2.80M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  2.80M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  2.80M|    }
   76|       |
   77|   187k|    auto& it = *r;
   78|   187k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 104k, False: 82.9k]
  ------------------
   79|   104k|        return std::pair{it, sign_type::minus_sign};
   80|   104k|    }
   81|  82.9k|    return std::pair{it, sign_type::plus_sign};
   82|   187k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  16.2M|{
   55|  16.2M|#if WCHAR_MIN < 0
   56|  16.2M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 16.2M, False: 23.0k]
  |  Branch (56:20): [True: 15.8M, False: 339k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  15.8M|        return char_to_int(static_cast<char>(ch));
   61|  15.8M|    }
   62|   362k|    return 255;
   63|  16.2M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  4.39k|{
  140|  4.39k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  4.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  4.39k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 1.58k, False: 2.81k]
  ------------------
  143|  1.58k|        SCN_UNLIKELY_ATTR
  144|  1.58k|        return {scan_error::invalid_scanned_value,
  145|  1.58k|                "Invalid thousands separator grouping"};
  146|  1.58k|    }
  147|       |
  148|  2.81k|    return {};
  149|  4.39k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  4.39k|{
  101|  4.39k|    transform_thsep_indices(
  102|  4.39k|        thsep_indices,
  103|  4.39k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  4.39k|    auto thsep_it = thsep_indices.rbegin();
  106|  4.39k|    for (auto grouping_it = grouping.begin();
  107|  4.39k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 4.39k]
  |  Branch (107:10): [True: 0, False: 4.39k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  4.39k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  4.39k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  4.39k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  60.1k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 56.3k, False: 3.81k]
  ------------------
  119|  56.3k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 580, False: 55.7k]
  ------------------
  120|    580|            return false;
  121|    580|        }
  122|  56.3k|    }
  123|       |
  124|  3.81k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 3.81k, False: 0]
  ------------------
  125|  3.81k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.00k, False: 2.81k]
  ------------------
  126|  1.00k|            return false;
  127|  1.00k|        }
  128|  3.81k|    }
  129|       |
  130|  2.81k|    SCN_CLANG_POP
  131|       |
  132|  2.81k|    return true;
  133|  3.81k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   611k|{
   69|   611k|    auto r = read_one_of_code_unit(range, "+-");
   70|   611k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 611k, False: 0]
  ------------------
   71|   611k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 611k, False: 0]
  ------------------
   72|   611k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   611k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   611k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   136k|    {
  122|   136k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   136k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   136k|                          basic_contiguous_scan_context<char_type>>) {
  126|   136k|            auto rd = make_reader<T, char_type>();
  127|   136k|            return impl(rd, range, value);
  128|   136k|        }
  129|   136k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   136k|            auto rd = make_reader<T, char_type>();
  131|   136k|            if (!is_segment_contiguous(range)) {
  132|   136k|                return impl(rd, range, value);
  133|   136k|            }
  134|   136k|            auto crange = get_as_contiguous(range);
  135|   136k|            SCN_TRY(it, impl(rd, crange, value));
  136|   136k|            return ranges_polyfill::batch_next(
  137|   136k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   136k|        }
  139|   136k|        else {
  140|   136k|            SCN_EXPECT(false);
  141|   136k|            SCN_UNREACHABLE;
  142|   136k|        }
  143|   136k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   136k|    {
  112|   136k|        SCN_TRY(it,
  ------------------
  |  |   71|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 849, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    849|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    849|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    849|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    849|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    849|    }                                                  \
  |  |  |  |   70|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   135k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   135k|                    .transform_error(make_eof_scan_error));
  115|   135k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   135k|                               loc);
  117|   136k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  3.25M|{
   43|  3.25M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 20.6k, False: 3.23M]
  |  |  ------------------
  ------------------
   44|  20.6k|        return unexpected(e);
   45|  20.6k|    }
   46|       |
   47|  3.23M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 3.23M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  3.23M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  3.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  3.23M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   175k|    {
  122|   175k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   175k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   175k|                          basic_contiguous_scan_context<char_type>>) {
  126|   175k|            auto rd = make_reader<T, char_type>();
  127|   175k|            return impl(rd, range, value);
  128|   175k|        }
  129|   175k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   175k|            auto rd = make_reader<T, char_type>();
  131|   175k|            if (!is_segment_contiguous(range)) {
  132|   175k|                return impl(rd, range, value);
  133|   175k|            }
  134|   175k|            auto crange = get_as_contiguous(range);
  135|   175k|            SCN_TRY(it, impl(rd, crange, value));
  136|   175k|            return ranges_polyfill::batch_next(
  137|   175k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   175k|        }
  139|   175k|        else {
  140|   175k|            SCN_EXPECT(false);
  141|   175k|            SCN_UNREACHABLE;
  142|   175k|        }
  143|   175k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   175k|    {
  112|   175k|        SCN_TRY(it,
  ------------------
  |  |   71|   175k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   175k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   175k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.38k, False: 173k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.38k|    }                                                  \
  |  |  |  |   70|   175k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   173k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   173k|                    .transform_error(make_eof_scan_error));
  115|   173k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   173k|                               loc);
  117|   175k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   178k|    {
  122|   178k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   178k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   178k|                          basic_contiguous_scan_context<char_type>>) {
  126|   178k|            auto rd = make_reader<T, char_type>();
  127|   178k|            return impl(rd, range, value);
  128|   178k|        }
  129|   178k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   178k|            auto rd = make_reader<T, char_type>();
  131|   178k|            if (!is_segment_contiguous(range)) {
  132|   178k|                return impl(rd, range, value);
  133|   178k|            }
  134|   178k|            auto crange = get_as_contiguous(range);
  135|   178k|            SCN_TRY(it, impl(rd, crange, value));
  136|   178k|            return ranges_polyfill::batch_next(
  137|   178k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   178k|        }
  139|   178k|        else {
  140|   178k|            SCN_EXPECT(false);
  141|   178k|            SCN_UNREACHABLE;
  142|   178k|        }
  143|   178k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   178k|    {
  112|   178k|        SCN_TRY(it,
  ------------------
  |  |   71|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.49k, False: 177k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.49k|    }                                                  \
  |  |  |  |   70|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   177k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   177k|                    .transform_error(make_eof_scan_error));
  115|   177k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   177k|                               loc);
  117|   178k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   129k|    {
  122|   129k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   129k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   129k|                          basic_contiguous_scan_context<char_type>>) {
  126|   129k|            auto rd = make_reader<T, char_type>();
  127|   129k|            return impl(rd, range, value);
  128|   129k|        }
  129|   129k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   129k|            auto rd = make_reader<T, char_type>();
  131|   129k|            if (!is_segment_contiguous(range)) {
  132|   129k|                return impl(rd, range, value);
  133|   129k|            }
  134|   129k|            auto crange = get_as_contiguous(range);
  135|   129k|            SCN_TRY(it, impl(rd, crange, value));
  136|   129k|            return ranges_polyfill::batch_next(
  137|   129k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   129k|        }
  139|   129k|        else {
  140|   129k|            SCN_EXPECT(false);
  141|   129k|            SCN_UNREACHABLE;
  142|   129k|        }
  143|   129k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   129k|    {
  112|   129k|        SCN_TRY(it,
  ------------------
  |  |   71|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 714, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    714|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    714|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    714|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    714|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    714|    }                                                  \
  |  |  |  |   70|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   128k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   128k|                    .transform_error(make_eof_scan_error));
  115|   128k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   128k|                               loc);
  117|   129k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   145k|    {
  122|   145k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   145k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   145k|                          basic_contiguous_scan_context<char_type>>) {
  126|   145k|            auto rd = make_reader<T, char_type>();
  127|   145k|            return impl(rd, range, value);
  128|   145k|        }
  129|   145k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   145k|            auto rd = make_reader<T, char_type>();
  131|   145k|            if (!is_segment_contiguous(range)) {
  132|   145k|                return impl(rd, range, value);
  133|   145k|            }
  134|   145k|            auto crange = get_as_contiguous(range);
  135|   145k|            SCN_TRY(it, impl(rd, crange, value));
  136|   145k|            return ranges_polyfill::batch_next(
  137|   145k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   145k|        }
  139|   145k|        else {
  140|   145k|            SCN_EXPECT(false);
  141|   145k|            SCN_UNREACHABLE;
  142|   145k|        }
  143|   145k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   145k|    {
  112|   145k|        SCN_TRY(it,
  ------------------
  |  |   71|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 939, False: 144k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    939|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    939|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    939|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    939|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    939|    }                                                  \
  |  |  |  |   70|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   144k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   144k|                    .transform_error(make_eof_scan_error));
  115|   144k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   144k|                               loc);
  117|   145k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   146k|    {
  122|   146k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   146k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   146k|                          basic_contiguous_scan_context<char_type>>) {
  126|   146k|            auto rd = make_reader<T, char_type>();
  127|   146k|            return impl(rd, range, value);
  128|   146k|        }
  129|   146k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   146k|            auto rd = make_reader<T, char_type>();
  131|   146k|            if (!is_segment_contiguous(range)) {
  132|   146k|                return impl(rd, range, value);
  133|   146k|            }
  134|   146k|            auto crange = get_as_contiguous(range);
  135|   146k|            SCN_TRY(it, impl(rd, crange, value));
  136|   146k|            return ranges_polyfill::batch_next(
  137|   146k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   146k|        }
  139|   146k|        else {
  140|   146k|            SCN_EXPECT(false);
  141|   146k|            SCN_UNREACHABLE;
  142|   146k|        }
  143|   146k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   146k|    {
  112|   146k|        SCN_TRY(it,
  ------------------
  |  |   71|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.01k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.01k|    }                                                  \
  |  |  |  |   70|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   145k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   145k|                    .transform_error(make_eof_scan_error));
  115|   145k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   145k|                               loc);
  117|   146k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.3k|    {
  122|  12.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.3k|            auto rd = make_reader<T, char_type>();
  127|  12.3k|            return impl(rd, range, value);
  128|  12.3k|        }
  129|  12.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.3k|            auto rd = make_reader<T, char_type>();
  131|  12.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.3k, False: 0]
  ------------------
  132|  12.3k|                return impl(rd, range, value);
  133|  12.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.3k|        else {
  140|  12.3k|            SCN_EXPECT(false);
  141|  12.3k|            SCN_UNREACHABLE;
  142|  12.3k|        }
  143|  12.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.3k|    {
  112|  12.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.3k|                    .transform_error(make_eof_scan_error));
  115|  12.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.3k|                               loc);
  117|  12.3k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   344k|{
   43|   344k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78, False: 344k]
  |  |  ------------------
  ------------------
   44|     78|        return unexpected(e);
   45|     78|    }
   46|       |
   47|   344k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 344k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   344k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   344k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.3k|    {
  122|  12.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.3k|            auto rd = make_reader<T, char_type>();
  127|  12.3k|            return impl(rd, range, value);
  128|  12.3k|        }
  129|  12.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.3k|            auto rd = make_reader<T, char_type>();
  131|  12.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.3k, False: 0]
  ------------------
  132|  12.3k|                return impl(rd, range, value);
  133|  12.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.3k|        else {
  140|  12.3k|            SCN_EXPECT(false);
  141|  12.3k|            SCN_UNREACHABLE;
  142|  12.3k|        }
  143|  12.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.3k|    {
  112|  12.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.3k|                    .transform_error(make_eof_scan_error));
  115|  12.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.3k|                               loc);
  117|  12.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.3k|    {
  122|  12.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.3k|            auto rd = make_reader<T, char_type>();
  127|  12.3k|            return impl(rd, range, value);
  128|  12.3k|        }
  129|  12.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.3k|            auto rd = make_reader<T, char_type>();
  131|  12.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.3k, False: 0]
  ------------------
  132|  12.3k|                return impl(rd, range, value);
  133|  12.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.3k|        else {
  140|  12.3k|            SCN_EXPECT(false);
  141|  12.3k|            SCN_UNREACHABLE;
  142|  12.3k|        }
  143|  12.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.3k|    {
  112|  12.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.3k|                    .transform_error(make_eof_scan_error));
  115|  12.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.3k|                               loc);
  117|  12.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.3k|    {
  122|  12.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.3k|            auto rd = make_reader<T, char_type>();
  127|  12.3k|            return impl(rd, range, value);
  128|  12.3k|        }
  129|  12.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.3k|            auto rd = make_reader<T, char_type>();
  131|  12.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.3k, False: 0]
  ------------------
  132|  12.3k|                return impl(rd, range, value);
  133|  12.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.3k|        else {
  140|  12.3k|            SCN_EXPECT(false);
  141|  12.3k|            SCN_UNREACHABLE;
  142|  12.3k|        }
  143|  12.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.3k|    {
  112|  12.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.3k|                    .transform_error(make_eof_scan_error));
  115|  12.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.3k|                               loc);
  117|  12.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.3k|    {
  122|  12.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.3k|            auto rd = make_reader<T, char_type>();
  127|  12.3k|            return impl(rd, range, value);
  128|  12.3k|        }
  129|  12.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.3k|            auto rd = make_reader<T, char_type>();
  131|  12.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.3k, False: 0]
  ------------------
  132|  12.3k|                return impl(rd, range, value);
  133|  12.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.3k|        else {
  140|  12.3k|            SCN_EXPECT(false);
  141|  12.3k|            SCN_UNREACHABLE;
  142|  12.3k|        }
  143|  12.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.3k|    {
  112|  12.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.3k|                    .transform_error(make_eof_scan_error));
  115|  12.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.3k|                               loc);
  117|  12.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  12.3k|    {
  122|  12.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.3k|            auto rd = make_reader<T, char_type>();
  127|  12.3k|            return impl(rd, range, value);
  128|  12.3k|        }
  129|  12.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.3k|            auto rd = make_reader<T, char_type>();
  131|  12.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.3k, False: 0]
  ------------------
  132|  12.3k|                return impl(rd, range, value);
  133|  12.3k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.3k|        else {
  140|  12.3k|            SCN_EXPECT(false);
  141|  12.3k|            SCN_UNREACHABLE;
  142|  12.3k|        }
  143|  12.3k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.3k|    {
  112|  12.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  12.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.3k|                    .transform_error(make_eof_scan_error));
  115|  12.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.3k|                               loc);
  117|  12.3k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   316k|    {
  223|   316k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   316k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   316k|                          basic_contiguous_scan_context<char_type>>) {
  227|   316k|            auto rd = make_reader<T, char_type>();
  228|   316k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   316k|            return impl(rd, range, value);
  233|   316k|        }
  234|   316k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   316k|            auto rd = make_reader<T, char_type>();
  236|   316k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   316k|                return unexpected(e);
  238|   316k|            }
  239|       |
  240|   316k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   316k|                return impl(rd, range, value);
  242|   316k|            }
  243|       |
  244|   316k|            auto crange = get_as_contiguous(range);
  245|   316k|            SCN_TRY(it, impl(rd, crange, value));
  246|   316k|            return ranges_polyfill::batch_next(
  247|   316k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   316k|        }
  249|   316k|        else {
  250|   316k|            SCN_EXPECT(false);
  251|   316k|            SCN_UNREACHABLE;
  252|   316k|        }
  253|   316k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   316k|    {
  205|   316k|        SCN_TRY(it,
  ------------------
  |  |   71|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.30k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.30k|    }                                                  \
  |  |  |  |   70|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   314k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   314k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   314k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   314k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 314k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   314k|        return rd.read_specs(subr, specs, value, loc);
  218|   314k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   463k|    {
  223|   463k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   463k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   463k|                          basic_contiguous_scan_context<char_type>>) {
  227|   463k|            auto rd = make_reader<T, char_type>();
  228|   463k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 463k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   463k|            return impl(rd, range, value);
  233|   463k|        }
  234|   463k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   463k|            auto rd = make_reader<T, char_type>();
  236|   463k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   463k|                return unexpected(e);
  238|   463k|            }
  239|       |
  240|   463k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   463k|                return impl(rd, range, value);
  242|   463k|            }
  243|       |
  244|   463k|            auto crange = get_as_contiguous(range);
  245|   463k|            SCN_TRY(it, impl(rd, crange, value));
  246|   463k|            return ranges_polyfill::batch_next(
  247|   463k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   463k|        }
  249|   463k|        else {
  250|   463k|            SCN_EXPECT(false);
  251|   463k|            SCN_UNREACHABLE;
  252|   463k|        }
  253|   463k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   463k|    {
  205|   463k|        SCN_TRY(it,
  ------------------
  |  |   71|   463k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   463k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   463k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.02k, False: 459k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.02k|    }                                                  \
  |  |  |  |   70|   463k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   459k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   459k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   459k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   459k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 459k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   459k|        return rd.read_specs(subr, specs, value, loc);
  218|   459k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   474k|    {
  223|   474k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   474k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   474k|                          basic_contiguous_scan_context<char_type>>) {
  227|   474k|            auto rd = make_reader<T, char_type>();
  228|   474k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 474k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   474k|            return impl(rd, range, value);
  233|   474k|        }
  234|   474k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   474k|            auto rd = make_reader<T, char_type>();
  236|   474k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   474k|                return unexpected(e);
  238|   474k|            }
  239|       |
  240|   474k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   474k|                return impl(rd, range, value);
  242|   474k|            }
  243|       |
  244|   474k|            auto crange = get_as_contiguous(range);
  245|   474k|            SCN_TRY(it, impl(rd, crange, value));
  246|   474k|            return ranges_polyfill::batch_next(
  247|   474k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   474k|        }
  249|   474k|        else {
  250|   474k|            SCN_EXPECT(false);
  251|   474k|            SCN_UNREACHABLE;
  252|   474k|        }
  253|   474k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   474k|    {
  205|   474k|        SCN_TRY(it,
  ------------------
  |  |   71|   474k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   474k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   474k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.35k, False: 469k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.35k|    }                                                  \
  |  |  |  |   70|   474k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   469k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   469k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   469k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   469k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 469k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   469k|        return rd.read_specs(subr, specs, value, loc);
  218|   469k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   318k|    {
  223|   318k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   318k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   318k|                          basic_contiguous_scan_context<char_type>>) {
  227|   318k|            auto rd = make_reader<T, char_type>();
  228|   318k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 318k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   318k|            return impl(rd, range, value);
  233|   318k|        }
  234|   318k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   318k|            auto rd = make_reader<T, char_type>();
  236|   318k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   318k|                return unexpected(e);
  238|   318k|            }
  239|       |
  240|   318k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   318k|                return impl(rd, range, value);
  242|   318k|            }
  243|       |
  244|   318k|            auto crange = get_as_contiguous(range);
  245|   318k|            SCN_TRY(it, impl(rd, crange, value));
  246|   318k|            return ranges_polyfill::batch_next(
  247|   318k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   318k|        }
  249|   318k|        else {
  250|   318k|            SCN_EXPECT(false);
  251|   318k|            SCN_UNREACHABLE;
  252|   318k|        }
  253|   318k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   318k|    {
  205|   318k|        SCN_TRY(it,
  ------------------
  |  |   71|   318k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   318k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   318k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.90k, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.90k|    }                                                  \
  |  |  |  |   70|   318k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   316k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   316k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   316k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   316k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 316k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   316k|        return rd.read_specs(subr, specs, value, loc);
  218|   316k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   384k|    {
  223|   384k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   384k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   384k|                          basic_contiguous_scan_context<char_type>>) {
  227|   384k|            auto rd = make_reader<T, char_type>();
  228|   384k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 384k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   384k|            return impl(rd, range, value);
  233|   384k|        }
  234|   384k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   384k|            auto rd = make_reader<T, char_type>();
  236|   384k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   384k|                return unexpected(e);
  238|   384k|            }
  239|       |
  240|   384k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   384k|                return impl(rd, range, value);
  242|   384k|            }
  243|       |
  244|   384k|            auto crange = get_as_contiguous(range);
  245|   384k|            SCN_TRY(it, impl(rd, crange, value));
  246|   384k|            return ranges_polyfill::batch_next(
  247|   384k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   384k|        }
  249|   384k|        else {
  250|   384k|            SCN_EXPECT(false);
  251|   384k|            SCN_UNREACHABLE;
  252|   384k|        }
  253|   384k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   384k|    {
  205|   384k|        SCN_TRY(it,
  ------------------
  |  |   71|   384k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   384k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   384k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.73k, False: 382k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.73k|    }                                                  \
  |  |  |  |   70|   384k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   382k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   382k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   382k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   382k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 382k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   382k|        return rd.read_specs(subr, specs, value, loc);
  218|   382k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   389k|    {
  223|   389k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   389k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   389k|                          basic_contiguous_scan_context<char_type>>) {
  227|   389k|            auto rd = make_reader<T, char_type>();
  228|   389k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 389k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   389k|            return impl(rd, range, value);
  233|   389k|        }
  234|   389k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   389k|            auto rd = make_reader<T, char_type>();
  236|   389k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   389k|                return unexpected(e);
  238|   389k|            }
  239|       |
  240|   389k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   389k|                return impl(rd, range, value);
  242|   389k|            }
  243|       |
  244|   389k|            auto crange = get_as_contiguous(range);
  245|   389k|            SCN_TRY(it, impl(rd, crange, value));
  246|   389k|            return ranges_polyfill::batch_next(
  247|   389k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   389k|        }
  249|   389k|        else {
  250|   389k|            SCN_EXPECT(false);
  251|   389k|            SCN_UNREACHABLE;
  252|   389k|        }
  253|   389k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   389k|    {
  205|   389k|        SCN_TRY(it,
  ------------------
  |  |   71|   389k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   389k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   389k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.95k, False: 386k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.95k|    }                                                  \
  |  |  |  |   70|   389k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   386k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   386k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   386k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   386k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 386k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   386k|        return rd.read_specs(subr, specs, value, loc);
  218|   386k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  45.1k|    {
  223|  45.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  45.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  45.1k|            auto rd = make_reader<T, char_type>();
  228|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  45.1k|                return unexpected(e);
  230|  45.1k|            }
  231|       |
  232|  45.1k|            return impl(rd, range, value);
  233|  45.1k|        }
  234|  45.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  45.1k|            auto rd = make_reader<T, char_type>();
  236|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  45.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 45.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  45.1k|                return impl(rd, range, value);
  242|  45.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  45.1k|        else {
  250|  45.1k|            SCN_EXPECT(false);
  251|  45.1k|            SCN_UNREACHABLE;
  252|  45.1k|        }
  253|  45.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  45.1k|    {
  205|  45.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  45.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  45.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  45.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  45.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 45.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  45.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  45.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  45.1k|    {
  223|  45.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  45.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  45.1k|            auto rd = make_reader<T, char_type>();
  228|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  45.1k|                return unexpected(e);
  230|  45.1k|            }
  231|       |
  232|  45.1k|            return impl(rd, range, value);
  233|  45.1k|        }
  234|  45.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  45.1k|            auto rd = make_reader<T, char_type>();
  236|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  45.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 45.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  45.1k|                return impl(rd, range, value);
  242|  45.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  45.1k|        else {
  250|  45.1k|            SCN_EXPECT(false);
  251|  45.1k|            SCN_UNREACHABLE;
  252|  45.1k|        }
  253|  45.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  45.1k|    {
  205|  45.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  45.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  45.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  45.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  45.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 45.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  45.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  45.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  45.1k|    {
  223|  45.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  45.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  45.1k|            auto rd = make_reader<T, char_type>();
  228|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  45.1k|                return unexpected(e);
  230|  45.1k|            }
  231|       |
  232|  45.1k|            return impl(rd, range, value);
  233|  45.1k|        }
  234|  45.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  45.1k|            auto rd = make_reader<T, char_type>();
  236|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  45.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 45.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  45.1k|                return impl(rd, range, value);
  242|  45.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  45.1k|        else {
  250|  45.1k|            SCN_EXPECT(false);
  251|  45.1k|            SCN_UNREACHABLE;
  252|  45.1k|        }
  253|  45.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  45.1k|    {
  205|  45.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  45.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  45.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  45.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  45.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 45.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  45.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  45.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  45.1k|    {
  223|  45.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  45.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  45.1k|            auto rd = make_reader<T, char_type>();
  228|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  45.1k|                return unexpected(e);
  230|  45.1k|            }
  231|       |
  232|  45.1k|            return impl(rd, range, value);
  233|  45.1k|        }
  234|  45.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  45.1k|            auto rd = make_reader<T, char_type>();
  236|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  45.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 45.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  45.1k|                return impl(rd, range, value);
  242|  45.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  45.1k|        else {
  250|  45.1k|            SCN_EXPECT(false);
  251|  45.1k|            SCN_UNREACHABLE;
  252|  45.1k|        }
  253|  45.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  45.1k|    {
  205|  45.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  45.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  45.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  45.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  45.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 45.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  45.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  45.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  45.1k|    {
  223|  45.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  45.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  45.1k|            auto rd = make_reader<T, char_type>();
  228|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  45.1k|                return unexpected(e);
  230|  45.1k|            }
  231|       |
  232|  45.1k|            return impl(rd, range, value);
  233|  45.1k|        }
  234|  45.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  45.1k|            auto rd = make_reader<T, char_type>();
  236|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  45.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 45.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  45.1k|                return impl(rd, range, value);
  242|  45.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  45.1k|        else {
  250|  45.1k|            SCN_EXPECT(false);
  251|  45.1k|            SCN_UNREACHABLE;
  252|  45.1k|        }
  253|  45.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  45.1k|    {
  205|  45.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  45.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  45.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  45.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  45.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 45.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  45.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  45.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  45.1k|    {
  223|  45.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  45.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  45.1k|            auto rd = make_reader<T, char_type>();
  228|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  45.1k|                return unexpected(e);
  230|  45.1k|            }
  231|       |
  232|  45.1k|            return impl(rd, range, value);
  233|  45.1k|        }
  234|  45.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  45.1k|            auto rd = make_reader<T, char_type>();
  236|  45.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  45.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 45.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  45.1k|                return impl(rd, range, value);
  242|  45.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  45.1k|        else {
  250|  45.1k|            SCN_EXPECT(false);
  251|  45.1k|            SCN_UNREACHABLE;
  252|  45.1k|        }
  253|  45.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  45.1k|    {
  205|  45.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 45.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  45.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  45.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  45.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  45.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 45.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  45.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  45.1k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   124k|    {
  122|   124k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   124k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   124k|                          basic_contiguous_scan_context<char_type>>) {
  126|   124k|            auto rd = make_reader<T, char_type>();
  127|   124k|            return impl(rd, range, value);
  128|   124k|        }
  129|   124k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   124k|            auto rd = make_reader<T, char_type>();
  131|   124k|            if (!is_segment_contiguous(range)) {
  132|   124k|                return impl(rd, range, value);
  133|   124k|            }
  134|   124k|            auto crange = get_as_contiguous(range);
  135|   124k|            SCN_TRY(it, impl(rd, crange, value));
  136|   124k|            return ranges_polyfill::batch_next(
  137|   124k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   124k|        }
  139|   124k|        else {
  140|   124k|            SCN_EXPECT(false);
  141|   124k|            SCN_UNREACHABLE;
  142|   124k|        }
  143|   124k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   124k|    {
  112|   124k|        SCN_TRY(it,
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 948, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    948|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    948|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    948|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    948|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    948|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   123k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   123k|                    .transform_error(make_eof_scan_error));
  115|   123k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   123k|                               loc);
  117|   124k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  3.02M|{
   43|  3.02M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.7k, False: 2.99M]
  |  |  ------------------
  ------------------
   44|  21.7k|        return unexpected(e);
   45|  21.7k|    }
   46|       |
   47|  2.99M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.99M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.99M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  2.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.99M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   158k|    {
  122|   158k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   158k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   158k|                          basic_contiguous_scan_context<char_type>>) {
  126|   158k|            auto rd = make_reader<T, char_type>();
  127|   158k|            return impl(rd, range, value);
  128|   158k|        }
  129|   158k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   158k|            auto rd = make_reader<T, char_type>();
  131|   158k|            if (!is_segment_contiguous(range)) {
  132|   158k|                return impl(rd, range, value);
  133|   158k|            }
  134|   158k|            auto crange = get_as_contiguous(range);
  135|   158k|            SCN_TRY(it, impl(rd, crange, value));
  136|   158k|            return ranges_polyfill::batch_next(
  137|   158k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   158k|        }
  139|   158k|        else {
  140|   158k|            SCN_EXPECT(false);
  141|   158k|            SCN_UNREACHABLE;
  142|   158k|        }
  143|   158k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   158k|    {
  112|   158k|        SCN_TRY(it,
  ------------------
  |  |   71|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.48k, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.48k|    }                                                  \
  |  |  |  |   70|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   157k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   157k|                    .transform_error(make_eof_scan_error));
  115|   157k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   157k|                               loc);
  117|   158k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   162k|    {
  122|   162k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   162k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   162k|                          basic_contiguous_scan_context<char_type>>) {
  126|   162k|            auto rd = make_reader<T, char_type>();
  127|   162k|            return impl(rd, range, value);
  128|   162k|        }
  129|   162k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   162k|            auto rd = make_reader<T, char_type>();
  131|   162k|            if (!is_segment_contiguous(range)) {
  132|   162k|                return impl(rd, range, value);
  133|   162k|            }
  134|   162k|            auto crange = get_as_contiguous(range);
  135|   162k|            SCN_TRY(it, impl(rd, crange, value));
  136|   162k|            return ranges_polyfill::batch_next(
  137|   162k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   162k|        }
  139|   162k|        else {
  140|   162k|            SCN_EXPECT(false);
  141|   162k|            SCN_UNREACHABLE;
  142|   162k|        }
  143|   162k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   162k|    {
  112|   162k|        SCN_TRY(it,
  ------------------
  |  |   71|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.60k, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.60k|    }                                                  \
  |  |  |  |   70|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   160k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   160k|                    .transform_error(make_eof_scan_error));
  115|   160k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   160k|                               loc);
  117|   162k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   119k|    {
  122|   119k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   119k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   119k|                          basic_contiguous_scan_context<char_type>>) {
  126|   119k|            auto rd = make_reader<T, char_type>();
  127|   119k|            return impl(rd, range, value);
  128|   119k|        }
  129|   119k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   119k|            auto rd = make_reader<T, char_type>();
  131|   119k|            if (!is_segment_contiguous(range)) {
  132|   119k|                return impl(rd, range, value);
  133|   119k|            }
  134|   119k|            auto crange = get_as_contiguous(range);
  135|   119k|            SCN_TRY(it, impl(rd, crange, value));
  136|   119k|            return ranges_polyfill::batch_next(
  137|   119k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   119k|        }
  139|   119k|        else {
  140|   119k|            SCN_EXPECT(false);
  141|   119k|            SCN_UNREACHABLE;
  142|   119k|        }
  143|   119k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   119k|    {
  112|   119k|        SCN_TRY(it,
  ------------------
  |  |   71|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 798, False: 118k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    798|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    798|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    798|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    798|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    798|    }                                                  \
  |  |  |  |   70|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   118k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   118k|                    .transform_error(make_eof_scan_error));
  115|   118k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   118k|                               loc);
  117|   119k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   135k|    {
  122|   135k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   135k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   135k|                          basic_contiguous_scan_context<char_type>>) {
  126|   135k|            auto rd = make_reader<T, char_type>();
  127|   135k|            return impl(rd, range, value);
  128|   135k|        }
  129|   135k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   135k|            auto rd = make_reader<T, char_type>();
  131|   135k|            if (!is_segment_contiguous(range)) {
  132|   135k|                return impl(rd, range, value);
  133|   135k|            }
  134|   135k|            auto crange = get_as_contiguous(range);
  135|   135k|            SCN_TRY(it, impl(rd, crange, value));
  136|   135k|            return ranges_polyfill::batch_next(
  137|   135k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   135k|        }
  139|   135k|        else {
  140|   135k|            SCN_EXPECT(false);
  141|   135k|            SCN_UNREACHABLE;
  142|   135k|        }
  143|   135k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   135k|    {
  112|   135k|        SCN_TRY(it,
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.02k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.02k|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   133k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   133k|                    .transform_error(make_eof_scan_error));
  115|   133k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   133k|                               loc);
  117|   135k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   135k|    {
  122|   135k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   135k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   135k|                          basic_contiguous_scan_context<char_type>>) {
  126|   135k|            auto rd = make_reader<T, char_type>();
  127|   135k|            return impl(rd, range, value);
  128|   135k|        }
  129|   135k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   135k|            auto rd = make_reader<T, char_type>();
  131|   135k|            if (!is_segment_contiguous(range)) {
  132|   135k|                return impl(rd, range, value);
  133|   135k|            }
  134|   135k|            auto crange = get_as_contiguous(range);
  135|   135k|            SCN_TRY(it, impl(rd, crange, value));
  136|   135k|            return ranges_polyfill::batch_next(
  137|   135k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   135k|        }
  139|   135k|        else {
  140|   135k|            SCN_EXPECT(false);
  141|   135k|            SCN_UNREACHABLE;
  142|   135k|        }
  143|   135k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   135k|    {
  112|   135k|        SCN_TRY(it,
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.10k, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   134k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   134k|                    .transform_error(make_eof_scan_error));
  115|   134k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   134k|                               loc);
  117|   135k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   293k|    {
  223|   293k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   293k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   293k|                          basic_contiguous_scan_context<char_type>>) {
  227|   293k|            auto rd = make_reader<T, char_type>();
  228|   293k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 293k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   293k|            return impl(rd, range, value);
  233|   293k|        }
  234|   293k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   293k|            auto rd = make_reader<T, char_type>();
  236|   293k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   293k|                return unexpected(e);
  238|   293k|            }
  239|       |
  240|   293k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   293k|                return impl(rd, range, value);
  242|   293k|            }
  243|       |
  244|   293k|            auto crange = get_as_contiguous(range);
  245|   293k|            SCN_TRY(it, impl(rd, crange, value));
  246|   293k|            return ranges_polyfill::batch_next(
  247|   293k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   293k|        }
  249|   293k|        else {
  250|   293k|            SCN_EXPECT(false);
  251|   293k|            SCN_UNREACHABLE;
  252|   293k|        }
  253|   293k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   293k|    {
  205|   293k|        SCN_TRY(it,
  ------------------
  |  |   71|   293k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   293k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   293k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.70k, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.70k|    }                                                  \
  |  |  |  |   70|   293k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   290k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   290k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   290k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   290k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 290k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   290k|        return rd.read_specs(subr, specs, value, loc);
  218|   290k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   423k|    {
  223|   423k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   423k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   423k|                          basic_contiguous_scan_context<char_type>>) {
  227|   423k|            auto rd = make_reader<T, char_type>();
  228|   423k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 423k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   423k|            return impl(rd, range, value);
  233|   423k|        }
  234|   423k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   423k|            auto rd = make_reader<T, char_type>();
  236|   423k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   423k|                return unexpected(e);
  238|   423k|            }
  239|       |
  240|   423k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   423k|                return impl(rd, range, value);
  242|   423k|            }
  243|       |
  244|   423k|            auto crange = get_as_contiguous(range);
  245|   423k|            SCN_TRY(it, impl(rd, crange, value));
  246|   423k|            return ranges_polyfill::batch_next(
  247|   423k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   423k|        }
  249|   423k|        else {
  250|   423k|            SCN_EXPECT(false);
  251|   423k|            SCN_UNREACHABLE;
  252|   423k|        }
  253|   423k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   423k|    {
  205|   423k|        SCN_TRY(it,
  ------------------
  |  |   71|   423k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   423k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   423k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.44k, False: 418k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.44k|    }                                                  \
  |  |  |  |   70|   423k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   418k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   418k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   418k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   418k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 418k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   418k|        return rd.read_specs(subr, specs, value, loc);
  218|   418k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   432k|    {
  223|   432k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   432k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   432k|                          basic_contiguous_scan_context<char_type>>) {
  227|   432k|            auto rd = make_reader<T, char_type>();
  228|   432k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 432k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   432k|            return impl(rd, range, value);
  233|   432k|        }
  234|   432k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   432k|            auto rd = make_reader<T, char_type>();
  236|   432k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   432k|                return unexpected(e);
  238|   432k|            }
  239|       |
  240|   432k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   432k|                return impl(rd, range, value);
  242|   432k|            }
  243|       |
  244|   432k|            auto crange = get_as_contiguous(range);
  245|   432k|            SCN_TRY(it, impl(rd, crange, value));
  246|   432k|            return ranges_polyfill::batch_next(
  247|   432k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   432k|        }
  249|   432k|        else {
  250|   432k|            SCN_EXPECT(false);
  251|   432k|            SCN_UNREACHABLE;
  252|   432k|        }
  253|   432k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   432k|    {
  205|   432k|        SCN_TRY(it,
  ------------------
  |  |   71|   432k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   432k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   432k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.77k, False: 427k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.77k|    }                                                  \
  |  |  |  |   70|   432k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   427k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   427k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   427k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   427k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 427k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   427k|        return rd.read_specs(subr, specs, value, loc);
  218|   427k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   304k|    {
  223|   304k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   304k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   304k|                          basic_contiguous_scan_context<char_type>>) {
  227|   304k|            auto rd = make_reader<T, char_type>();
  228|   304k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 304k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   304k|            return impl(rd, range, value);
  233|   304k|        }
  234|   304k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   304k|            auto rd = make_reader<T, char_type>();
  236|   304k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   304k|                return unexpected(e);
  238|   304k|            }
  239|       |
  240|   304k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   304k|                return impl(rd, range, value);
  242|   304k|            }
  243|       |
  244|   304k|            auto crange = get_as_contiguous(range);
  245|   304k|            SCN_TRY(it, impl(rd, crange, value));
  246|   304k|            return ranges_polyfill::batch_next(
  247|   304k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   304k|        }
  249|   304k|        else {
  250|   304k|            SCN_EXPECT(false);
  251|   304k|            SCN_UNREACHABLE;
  252|   304k|        }
  253|   304k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   304k|    {
  205|   304k|        SCN_TRY(it,
  ------------------
  |  |   71|   304k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   304k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   304k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.25k, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.25k|    }                                                  \
  |  |  |  |   70|   304k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   302k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   302k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   302k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   302k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 302k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   302k|        return rd.read_specs(subr, specs, value, loc);
  218|   302k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   363k|    {
  223|   363k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   363k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   363k|                          basic_contiguous_scan_context<char_type>>) {
  227|   363k|            auto rd = make_reader<T, char_type>();
  228|   363k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 363k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   363k|            return impl(rd, range, value);
  233|   363k|        }
  234|   363k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   363k|            auto rd = make_reader<T, char_type>();
  236|   363k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   363k|                return unexpected(e);
  238|   363k|            }
  239|       |
  240|   363k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   363k|                return impl(rd, range, value);
  242|   363k|            }
  243|       |
  244|   363k|            auto crange = get_as_contiguous(range);
  245|   363k|            SCN_TRY(it, impl(rd, crange, value));
  246|   363k|            return ranges_polyfill::batch_next(
  247|   363k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   363k|        }
  249|   363k|        else {
  250|   363k|            SCN_EXPECT(false);
  251|   363k|            SCN_UNREACHABLE;
  252|   363k|        }
  253|   363k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   363k|    {
  205|   363k|        SCN_TRY(it,
  ------------------
  |  |   71|   363k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   363k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   363k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.08k, False: 360k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.08k|    }                                                  \
  |  |  |  |   70|   363k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   360k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   360k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   360k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   360k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 360k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   360k|        return rd.read_specs(subr, specs, value, loc);
  218|   360k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   367k|    {
  223|   367k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   367k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   367k|                          basic_contiguous_scan_context<char_type>>) {
  227|   367k|            auto rd = make_reader<T, char_type>();
  228|   367k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   367k|            return impl(rd, range, value);
  233|   367k|        }
  234|   367k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   367k|            auto rd = make_reader<T, char_type>();
  236|   367k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   367k|                return unexpected(e);
  238|   367k|            }
  239|       |
  240|   367k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   367k|                return impl(rd, range, value);
  242|   367k|            }
  243|       |
  244|   367k|            auto crange = get_as_contiguous(range);
  245|   367k|            SCN_TRY(it, impl(rd, crange, value));
  246|   367k|            return ranges_polyfill::batch_next(
  247|   367k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   367k|        }
  249|   367k|        else {
  250|   367k|            SCN_EXPECT(false);
  251|   367k|            SCN_UNREACHABLE;
  252|   367k|        }
  253|   367k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   367k|    {
  205|   367k|        SCN_TRY(it,
  ------------------
  |  |   71|   367k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   367k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   367k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.30k, False: 364k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.30k|    }                                                  \
  |  |  |  |   70|   367k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   364k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   364k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   364k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   364k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 364k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   364k|        return rd.read_specs(subr, specs, value, loc);
  218|   364k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.8k|    {
  122|  21.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.8k|            auto rd = make_reader<T, char_type>();
  127|  21.8k|            return impl(rd, range, value);
  128|  21.8k|        }
  129|  21.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.8k|            auto rd = make_reader<T, char_type>();
  131|  21.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.8k, False: 0]
  ------------------
  132|  21.8k|                return impl(rd, range, value);
  133|  21.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.8k|        else {
  140|  21.8k|            SCN_EXPECT(false);
  141|  21.8k|            SCN_UNREACHABLE;
  142|  21.8k|        }
  143|  21.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.8k|    {
  112|  21.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.8k|                    .transform_error(make_eof_scan_error));
  115|  21.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.8k|                               loc);
  117|  21.8k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   612k|{
   43|   612k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 156, False: 611k]
  |  |  ------------------
  ------------------
   44|    156|        return unexpected(e);
   45|    156|    }
   46|       |
   47|   611k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 611k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   611k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   611k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.8k|    {
  122|  21.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.8k|            auto rd = make_reader<T, char_type>();
  127|  21.8k|            return impl(rd, range, value);
  128|  21.8k|        }
  129|  21.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.8k|            auto rd = make_reader<T, char_type>();
  131|  21.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.8k, False: 0]
  ------------------
  132|  21.8k|                return impl(rd, range, value);
  133|  21.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.8k|        else {
  140|  21.8k|            SCN_EXPECT(false);
  141|  21.8k|            SCN_UNREACHABLE;
  142|  21.8k|        }
  143|  21.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.8k|    {
  112|  21.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.8k|                    .transform_error(make_eof_scan_error));
  115|  21.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.8k|                               loc);
  117|  21.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.8k|    {
  122|  21.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.8k|            auto rd = make_reader<T, char_type>();
  127|  21.8k|            return impl(rd, range, value);
  128|  21.8k|        }
  129|  21.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.8k|            auto rd = make_reader<T, char_type>();
  131|  21.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.8k, False: 0]
  ------------------
  132|  21.8k|                return impl(rd, range, value);
  133|  21.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.8k|        else {
  140|  21.8k|            SCN_EXPECT(false);
  141|  21.8k|            SCN_UNREACHABLE;
  142|  21.8k|        }
  143|  21.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.8k|    {
  112|  21.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.8k|                    .transform_error(make_eof_scan_error));
  115|  21.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.8k|                               loc);
  117|  21.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.8k|    {
  122|  21.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.8k|            auto rd = make_reader<T, char_type>();
  127|  21.8k|            return impl(rd, range, value);
  128|  21.8k|        }
  129|  21.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.8k|            auto rd = make_reader<T, char_type>();
  131|  21.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.8k, False: 0]
  ------------------
  132|  21.8k|                return impl(rd, range, value);
  133|  21.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.8k|        else {
  140|  21.8k|            SCN_EXPECT(false);
  141|  21.8k|            SCN_UNREACHABLE;
  142|  21.8k|        }
  143|  21.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.8k|    {
  112|  21.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.8k|                    .transform_error(make_eof_scan_error));
  115|  21.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.8k|                               loc);
  117|  21.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.8k|    {
  122|  21.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.8k|            auto rd = make_reader<T, char_type>();
  127|  21.8k|            return impl(rd, range, value);
  128|  21.8k|        }
  129|  21.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.8k|            auto rd = make_reader<T, char_type>();
  131|  21.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.8k, False: 0]
  ------------------
  132|  21.8k|                return impl(rd, range, value);
  133|  21.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.8k|        else {
  140|  21.8k|            SCN_EXPECT(false);
  141|  21.8k|            SCN_UNREACHABLE;
  142|  21.8k|        }
  143|  21.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.8k|    {
  112|  21.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.8k|                    .transform_error(make_eof_scan_error));
  115|  21.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.8k|                               loc);
  117|  21.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  21.8k|    {
  122|  21.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  21.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  21.8k|            auto rd = make_reader<T, char_type>();
  127|  21.8k|            return impl(rd, range, value);
  128|  21.8k|        }
  129|  21.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  21.8k|            auto rd = make_reader<T, char_type>();
  131|  21.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 21.8k, False: 0]
  ------------------
  132|  21.8k|                return impl(rd, range, value);
  133|  21.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  21.8k|        else {
  140|  21.8k|            SCN_EXPECT(false);
  141|  21.8k|            SCN_UNREACHABLE;
  142|  21.8k|        }
  143|  21.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  21.8k|    {
  112|  21.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 21.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  21.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  21.8k|                    .transform_error(make_eof_scan_error));
  115|  21.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  21.8k|                               loc);
  117|  21.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  80.1k|    {
  223|  80.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  80.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  80.1k|            auto rd = make_reader<T, char_type>();
  228|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  80.1k|                return unexpected(e);
  230|  80.1k|            }
  231|       |
  232|  80.1k|            return impl(rd, range, value);
  233|  80.1k|        }
  234|  80.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  80.1k|            auto rd = make_reader<T, char_type>();
  236|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  80.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 80.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  80.1k|                return impl(rd, range, value);
  242|  80.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  80.1k|        else {
  250|  80.1k|            SCN_EXPECT(false);
  251|  80.1k|            SCN_UNREACHABLE;
  252|  80.1k|        }
  253|  80.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  80.1k|    {
  205|  80.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  80.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  80.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  80.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  80.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 80.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  80.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  80.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  80.1k|    {
  223|  80.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  80.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  80.1k|            auto rd = make_reader<T, char_type>();
  228|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  80.1k|                return unexpected(e);
  230|  80.1k|            }
  231|       |
  232|  80.1k|            return impl(rd, range, value);
  233|  80.1k|        }
  234|  80.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  80.1k|            auto rd = make_reader<T, char_type>();
  236|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  80.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 80.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  80.1k|                return impl(rd, range, value);
  242|  80.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  80.1k|        else {
  250|  80.1k|            SCN_EXPECT(false);
  251|  80.1k|            SCN_UNREACHABLE;
  252|  80.1k|        }
  253|  80.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  80.1k|    {
  205|  80.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  80.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  80.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  80.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  80.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 80.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  80.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  80.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  80.1k|    {
  223|  80.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  80.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  80.1k|            auto rd = make_reader<T, char_type>();
  228|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  80.1k|                return unexpected(e);
  230|  80.1k|            }
  231|       |
  232|  80.1k|            return impl(rd, range, value);
  233|  80.1k|        }
  234|  80.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  80.1k|            auto rd = make_reader<T, char_type>();
  236|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  80.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 80.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  80.1k|                return impl(rd, range, value);
  242|  80.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  80.1k|        else {
  250|  80.1k|            SCN_EXPECT(false);
  251|  80.1k|            SCN_UNREACHABLE;
  252|  80.1k|        }
  253|  80.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  80.1k|    {
  205|  80.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  80.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  80.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  80.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  80.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 80.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  80.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  80.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  80.1k|    {
  223|  80.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  80.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  80.1k|            auto rd = make_reader<T, char_type>();
  228|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  80.1k|                return unexpected(e);
  230|  80.1k|            }
  231|       |
  232|  80.1k|            return impl(rd, range, value);
  233|  80.1k|        }
  234|  80.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  80.1k|            auto rd = make_reader<T, char_type>();
  236|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  80.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 80.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  80.1k|                return impl(rd, range, value);
  242|  80.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  80.1k|        else {
  250|  80.1k|            SCN_EXPECT(false);
  251|  80.1k|            SCN_UNREACHABLE;
  252|  80.1k|        }
  253|  80.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  80.1k|    {
  205|  80.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  80.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  80.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  80.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  80.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 80.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  80.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  80.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  80.1k|    {
  223|  80.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  80.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  80.1k|            auto rd = make_reader<T, char_type>();
  228|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  80.1k|                return unexpected(e);
  230|  80.1k|            }
  231|       |
  232|  80.1k|            return impl(rd, range, value);
  233|  80.1k|        }
  234|  80.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  80.1k|            auto rd = make_reader<T, char_type>();
  236|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  80.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 80.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  80.1k|                return impl(rd, range, value);
  242|  80.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  80.1k|        else {
  250|  80.1k|            SCN_EXPECT(false);
  251|  80.1k|            SCN_UNREACHABLE;
  252|  80.1k|        }
  253|  80.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  80.1k|    {
  205|  80.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  80.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  80.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  80.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  80.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 80.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  80.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  80.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  80.1k|    {
  223|  80.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  80.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  80.1k|            auto rd = make_reader<T, char_type>();
  228|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  80.1k|                return unexpected(e);
  230|  80.1k|            }
  231|       |
  232|  80.1k|            return impl(rd, range, value);
  233|  80.1k|        }
  234|  80.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  80.1k|            auto rd = make_reader<T, char_type>();
  236|  80.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  80.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 80.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  80.1k|                return impl(rd, range, value);
  242|  80.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  80.1k|        else {
  250|  80.1k|            SCN_EXPECT(false);
  251|  80.1k|            SCN_UNREACHABLE;
  252|  80.1k|        }
  253|  80.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  80.1k|    {
  205|  80.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 80.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  80.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  80.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  80.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  80.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 80.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  80.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  80.1k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   134k|{
  110|   134k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   134k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|  74.8k|{
  263|  74.8k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  74.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  74.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|  74.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  74.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.09k, False: 70.7k]
  |  |  ------------------
  ------------------
  267|  4.09k|        return {get_start_of_next_code_point(input),
  268|  4.09k|                detail::invalid_code_point};
  269|  4.09k|    }
  270|  70.7k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  70.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.86k, False: 68.8k]
  |  |  ------------------
  ------------------
  271|  1.86k|        return {input.end(), detail::invalid_code_point};
  272|  1.86k|    }
  273|       |
  274|  68.8k|    constexpr auto enc = get_encoding<CharT>();
  275|  68.8k|    std::size_t result{1};
  276|  68.8k|    char32_t output{};
  277|  68.8k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  68.8k|        result = simdutf::convert_utf8_to_utf32(
  279|  68.8k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  68.8k|    }
  281|  68.8k|    else if constexpr (enc == encoding::utf16) {
  282|  68.8k|        result = simdutf::convert_utf16_to_utf32(
  283|  68.8k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  68.8k|    }
  285|  68.8k|    else if constexpr (enc == encoding::utf32) {
  286|  68.8k|        SCN_EXPECT(len == 1);
  287|  68.8k|        output = static_cast<char32_t>(input[0]);
  288|  68.8k|    }
  289|       |
  290|  68.8k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  68.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.30k, False: 64.5k]
  |  |  ------------------
  ------------------
  291|  4.30k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  4.30k|                detail::invalid_code_point};
  293|  4.30k|    }
  294|       |
  295|  64.5k|    return {input.begin() + len, output};
  296|  68.8k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  8.39k|{
  248|  8.39k|    auto it = input.begin();
  249|  61.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 60.1k, False: 1.75k]
  ------------------
  250|  60.1k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 6.63k, False: 53.4k]
  ------------------
  251|  6.63k|            break;
  252|  6.63k|        }
  253|  60.1k|    }
  254|       |
  255|  8.39k|    return it;
  256|  8.39k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  45.2M|{
  110|  45.2M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  45.2M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  3.61M|{
  449|  3.61M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 3.61M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  3.61M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  3.61M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  3.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  3.61M|                    input.size() * sizeof(SourceCharT));
  457|  3.61M|        return input.size();
  458|  3.61M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  6.70M|{
   29|       |    // Pattern_White_Space property
   30|  6.70M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 6.69M, False: 13.9k]
  |  Branch (30:27): [True: 2.99M, False: 3.69M]
  ------------------
   31|  6.70M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 46.6k, False: 3.66M]
  ------------------
   32|  6.70M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 3.97k, False: 3.66M]
  ------------------
   33|  6.70M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 654, False: 3.65M]
  ------------------
   34|  6.70M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 750, False: 3.65M]
  ------------------
   35|  6.70M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 1.59k, False: 3.65M]
  ------------------
   36|  6.70M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 3.65M]
  ------------------
   37|  6.70M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  6.88M|{
   58|  6.88M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  6.88M|        static_cast<unsigned char>(ch))];
   60|  6.88M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  3.61M|{
   92|  3.61M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  3.61M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  2.42M|    {
   57|  2.42M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  6.96M|    {
   61|  6.96M|        return m_current;
   62|  6.96M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  4.54M|    {
   66|  4.54M|        return m_range.end();
   67|  4.54M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  2.19M|    {
   81|  2.19M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  2.19M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  2.19M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 2.19M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  2.19M|        }
   87|  2.19M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  2.19M|    static_cast<    \
  |  |  247|  2.19M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  2.19M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  2.34M|    {
   71|  2.34M|        return ranges::subrange{begin(), end()};
   72|  2.34M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  2.31M|    {
   57|  2.31M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  6.42M|    {
   61|  6.42M|        return m_current;
   62|  6.42M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  4.10M|    {
   66|  4.10M|        return m_range.end();
   67|  4.10M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  1.92M|    {
   81|  1.92M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.92M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.92M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.92M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.92M|        }
   87|  1.92M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.92M|    static_cast<    \
  |  |  247|  1.92M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.92M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  2.18M|    {
   71|  2.18M|        return ranges::subrange{begin(), end()};
   72|  2.18M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   861k|    {
  205|   861k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   861k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   861k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   295k|    {
  196|   295k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   430k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   430k|              cvref<T> obj = *get<T>(fn);
  187|   430k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   430k|                  obj(static_cast<decltype(args)>(args)...);
  189|   430k|              }
  190|   430k|              else {
  191|   430k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   430k|              }
  193|   430k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   430k|    {
  126|   430k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   430k|            return static_cast<T*>(s.m_cp);
  128|   430k|        }
  129|   430k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   430k|            return static_cast<T*>(s.m_p);
  131|   430k|        }
  132|   430k|        else {
  133|   430k|            return reinterpret_cast<T*>(s.m_fp);
  134|   430k|        }
  135|   430k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   295k|        {
  104|   295k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  13.2M|    {
  205|  13.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  13.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  13.2M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  3.61M|    {
  196|  3.61M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  6.62M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.62M|              cvref<T> obj = *get<T>(fn);
  187|  6.62M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.62M|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.62M|              }
  190|  6.62M|              else {
  191|  6.62M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.62M|              }
  193|  6.62M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  6.62M|    {
  126|  6.62M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.62M|            return static_cast<T*>(s.m_cp);
  128|  6.62M|        }
  129|  6.62M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.62M|            return static_cast<T*>(s.m_p);
  131|  6.62M|        }
  132|  6.62M|        else {
  133|  6.62M|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.62M|        }
  135|  6.62M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  3.61M|        {
  104|  3.61M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   295k|    {
  196|   295k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   430k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   430k|              cvref<T> obj = *get<T>(fn);
  187|   430k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   430k|                  obj(static_cast<decltype(args)>(args)...);
  189|   430k|              }
  190|   430k|              else {
  191|   430k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   430k|              }
  193|   430k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   430k|    {
  126|   430k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   430k|            return static_cast<T*>(s.m_cp);
  128|   430k|        }
  129|   430k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   430k|            return static_cast<T*>(s.m_p);
  131|   430k|        }
  132|   430k|        else {
  133|   430k|            return reinterpret_cast<T*>(s.m_fp);
  134|   430k|        }
  135|   430k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   295k|        {
  104|   295k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  2.99M|    {
  196|  2.99M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  6.01M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.01M|              cvref<T> obj = *get<T>(fn);
  187|  6.01M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.01M|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.01M|              }
  190|  6.01M|              else {
  191|  6.01M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.01M|              }
  193|  6.01M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  6.01M|    {
  126|  6.01M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.01M|            return static_cast<T*>(s.m_cp);
  128|  6.01M|        }
  129|  6.01M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.01M|            return static_cast<T*>(s.m_p);
  131|  6.01M|        }
  132|  6.01M|        else {
  133|  6.01M|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.01M|        }
  135|  6.01M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  2.99M|        {
  104|  2.99M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  2.01M|    {
  205|  2.01M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.01M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   524k|    {
  196|   524k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  1.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.00M|              cvref<T> obj = *get<T>(fn);
  187|  1.00M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.00M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.00M|              }
  190|  1.00M|              else {
  191|  1.00M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.00M|              }
  193|  1.00M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  1.00M|    {
  126|  1.00M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.00M|            return static_cast<T*>(s.m_cp);
  128|  1.00M|        }
  129|  1.00M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.00M|            return static_cast<T*>(s.m_p);
  131|  1.00M|        }
  132|  1.00M|        else {
  133|  1.00M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.00M|        }
  135|  1.00M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   524k|        {
  104|   524k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   611k|    {
  196|   611k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   611k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   611k|              cvref<T> obj = *get<T>(fn);
  187|   611k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   611k|                  obj(static_cast<decltype(args)>(args)...);
  189|   611k|              }
  190|   611k|              else {
  191|   611k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   611k|              }
  193|   611k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   611k|    {
  126|   611k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   611k|            return static_cast<T*>(s.m_cp);
  128|   611k|        }
  129|   611k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   611k|            return static_cast<T*>(s.m_p);
  131|   611k|        }
  132|   611k|        else {
  133|   611k|            return reinterpret_cast<T*>(s.m_fp);
  134|   611k|        }
  135|   611k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   611k|        {
  104|   611k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   524k|    {
  196|   524k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|  1.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.00M|              cvref<T> obj = *get<T>(fn);
  187|  1.00M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.00M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.00M|              }
  190|  1.00M|              else {
  191|  1.00M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.00M|              }
  193|  1.00M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|  1.00M|    {
  126|  1.00M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.00M|            return static_cast<T*>(s.m_cp);
  128|  1.00M|        }
  129|  1.00M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.00M|            return static_cast<T*>(s.m_p);
  131|  1.00M|        }
  132|  1.00M|        else {
  133|  1.00M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.00M|        }
  135|  1.00M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   524k|        {
  104|   524k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  52.4k|{
   44|  52.4k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  52.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  52.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  52.4k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  30.6M|{
   30|  30.6M|    return e != eof_error::good;
   31|  30.6M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   164k|{
   91|   164k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   164k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  7.64M|    {
   69|  7.64M|        return a.m_code == b.m_code;
   70|  7.64M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  35.4M|    {
   55|  35.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  35.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  35.4M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   444k|    return [code, msg](parse_error err) {
  115|   444k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   444k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   444k|{
  100|   444k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 444k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   444k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 444k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   444k|    return scan_error{code, msg};
  109|   444k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   819k|{
  114|   819k|    return [code, msg](parse_error err) {
  115|   819k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   819k|    };
  117|   819k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.51M|{
  587|  1.51M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.51M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   196k|{
  595|   196k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   196k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   196k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 73.8k, False: 123k]
  |  |  ------------------
  ------------------
  597|  73.8k|        source.sync(*n);
  598|  73.8k|    }
  599|   123k|    else {
  600|   123k|        source.sync_all();
  601|   123k|    }
  602|   196k|    return n;
  603|   196k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  1.43M|{
  611|  1.43M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  1.43M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   349k|{
  619|   349k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   349k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   349k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 131k, False: 218k]
  |  |  ------------------
  ------------------
  621|   131k|        source.sync(*n);
  622|   131k|    }
  623|   218k|    else {
  624|   218k|        source.sync_all();
  625|   218k|    }
  626|   349k|    return n;
  627|   349k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.51M|{
  544|  1.51M|    return vscan_internal(source, format, args);
  545|  1.51M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   196k|{
  550|   196k|    auto n = vscan_internal(source, format, args);
  551|   196k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   196k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 73.8k, False: 123k]
  |  |  ------------------
  ------------------
  552|  73.8k|        source.sync(*n);
  553|  73.8k|    }
  554|   123k|    else {
  555|   123k|        source.sync_all();
  556|   123k|    }
  557|   196k|    return n;
  558|   196k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  1.43M|{
  564|  1.43M|    return vscan_internal(source, format, args);
  565|  1.43M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   349k|{
  570|   349k|    auto n = vscan_internal(source, format, args);
  571|   349k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   349k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 131k, False: 218k]
  |  |  ------------------
  ------------------
  572|   131k|        source.sync(*n);
  573|   131k|    }
  574|   218k|    else {
  575|   218k|        source.sync_all();
  576|   218k|    }
  577|   349k|    return n;
  578|   349k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   303k|{
  654|   303k|    return vscan_value_internal(source, arg);
  655|   303k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  24.6k|{
  659|  24.6k|    auto n = vscan_value_internal(source, arg);
  660|  24.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  24.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 12.3k, False: 12.3k]
  |  |  ------------------
  ------------------
  661|  12.3k|        source.sync(*n);
  662|  12.3k|    }
  663|  12.3k|    else {
  664|  12.3k|        source.sync_all();
  665|  12.3k|    }
  666|  24.6k|    return n;
  667|  24.6k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   278k|{
  673|   278k|    return vscan_value_internal(source, arg);
  674|   278k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  43.7k|{
  679|  43.7k|    auto n = vscan_value_internal(source, arg);
  680|  43.7k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  43.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 21.8k, False: 21.8k]
  |  |  ------------------
  ------------------
  681|  21.8k|        source.sync(*n);
  682|  21.8k|    }
  683|  21.8k|    else {
  684|  21.8k|        source.sync_all();
  685|  21.8k|    }
  686|  43.7k|    return n;
  687|  43.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   393k|{
  476|   393k|    const auto argcount = args.size();
  477|   393k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 49.2k, False: 344k]
  |  Branch (477:60): [True: 49.2k, False: 0]
  ------------------
  478|  49.2k|        auto arg = args.get(0);
  479|  49.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  49.2k|    static_cast<    \
  |  |  247|  49.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  49.2k|    }
  481|       |
  482|   344k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 344k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   344k|    SCN_UNLIKELY_ATTR
  490|   344k|    {
  491|   344k|        auto handler = format_handler<false, CharT>{
  492|   344k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   344k|    static_cast<    \
  |  |  247|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   344k|    static_cast<    \
  |  |  247|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   344k|        return vscan_parse_format_string(format, handler);
  494|   344k|    }
  495|   344k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  3.42M|{
   36|  3.42M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.76M, False: 656k]
  ------------------
   37|  2.76M|        return false;
   38|  2.76M|    }
   39|   656k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 656k, False: 0]
  |  Branch (39:39): [True: 656k, False: 0]
  ------------------
   40|  3.42M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  73.8k|{
   69|  73.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  73.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 73.8k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  73.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  73.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 73.8k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  73.8k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  73.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  73.8k|    static_cast<    \
  |  |  247|  73.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  73.8k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  73.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  73.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  73.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  73.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.9k, False: 36.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.9k|    }                                                  \
  |  |  |  |   70|  73.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  36.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  36.9k|    return it.position();
   86|  73.8k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  2.42M|    {
  314|  2.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  5.69M|    {
  133|  5.69M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  5.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.69M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  5.69M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  2.42M|    {
  264|  2.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  2.42M|{
  441|  2.42M|    const auto beg = handler.get_ctx().begin();
  442|  2.42M|    detail::parse_format_string<false>(format, handler);
  443|  2.42M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 221k, False: 2.19M]
  |  |  ------------------
  ------------------
  444|   221k|        return unexpected(handler.error);
  445|   221k|    }
  446|  2.19M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  2.42M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  16.3M|    {
  425|  16.3M|        return ctx.get();
  426|  16.3M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  16.3M|    {
  268|  16.3M|        return contiguous_ctx;
  269|  16.3M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  4.62M|    {
  318|  4.62M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 4.62M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  4.62M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  2.42M|{
   92|  2.42M|    auto arg = ctx.arg(id);
   93|  2.42M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.42M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  2.42M|    return arg;
   97|  2.42M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  5.69M|    {
  208|  5.69M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  5.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.69M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  5.69M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  5.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.69M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  5.69M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  5.69M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.69M, False: 0]
  |  |  ------------------
  ------------------
  218|  5.69M|            visited_args_lower64 |= (1ull << id);
  219|  5.69M|            return;
  220|  5.69M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  5.69M|    {
  193|  5.69M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  5.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.69M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  5.69M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  5.69M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.69M, False: 0]
  |  |  ------------------
  ------------------
  199|  5.69M|            return (visited_args_lower64 >> id) & 1ull;
  200|  5.69M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  5.69M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   820k|    {
  177|   820k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   820k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 820k, False: 0]
  |  |  ------------------
  ------------------
  178|   820k|            error = err;
  179|   820k|        }
  180|   820k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  2.42M|    {
  347|  2.42M|        return parse_ctx.next_arg_id();
  348|  2.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  2.42M|    {
  388|  2.42M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  2.42M|        set_arg_as_visited(arg_id);
  390|       |
  391|  2.42M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 2.42M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  2.42M|        auto specs = detail::format_specs{};
  401|  2.42M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  2.42M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  2.42M|            arg.type()};
  404|       |
  405|  2.42M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  2.42M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 2.42M]
  |  Branch (406:29): [True: 49.2k, False: 2.37M]
  ------------------
  407|  49.2k|            SCN_UNLIKELY_ATTR
  408|  49.2k|            on_error("Missing '}' in format string");
  409|  49.2k|            return parse_ctx.begin();
  410|  49.2k|        }
  411|  2.37M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.6k, False: 2.34M]
  |  |  ------------------
  ------------------
  412|  24.6k|            return parse_ctx.begin();
  413|  24.6k|        }
  414|  2.34M|        parse_ctx.advance_to(begin);
  415|       |
  416|  2.34M|        on_visit_scan_arg(
  417|  2.34M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  2.34M|                                           get_ctx().locale()},
  419|  2.34M|            arg);
  420|  2.34M|        return parse_ctx.begin();
  421|  2.37M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  2.42M|    {
  112|  2.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  2.34M|    {
  359|  2.34M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 2.34M]
  |  Branch (359:23): [True: 0, False: 2.34M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  2.34M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  2.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  2.34M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  2.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 147k, False: 2.19M]
  |  |  ------------------
  ------------------
  366|   147k|            on_error(r.error());
  367|   147k|        }
  368|  2.19M|        else {
  369|  2.19M|            get_ctx().advance_to(*r);
  370|  2.19M|        }
  371|  2.34M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   683k|    {
  172|   683k|        SCN_UNLIKELY_ATTR
  173|   683k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   683k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  5.69M|    {
  140|  5.69M|        {
  141|  5.69M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 5.69M]
  ------------------
  142|  5.69M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 5.69M]
  ------------------
  143|  5.69M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  5.69M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  5.69M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 5.69M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  5.69M|        }
  150|       |
  151|  5.69M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 5.69M, False: 0]
  ------------------
  152|  5.69M|            return;
  153|  5.69M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  5.69M|    {
  188|  5.69M|        return error;
  189|  5.69M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  16.6M|    {
  184|  16.6M|        return static_cast<bool>(error);
  185|  16.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   344k|    {
  314|   344k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   344k|    {
  241|   344k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   344k|{
  441|   344k|    const auto beg = handler.get_ctx().begin();
  442|   344k|    detail::parse_format_string<false>(format, handler);
  443|   344k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 221k, False: 123k]
  |  |  ------------------
  ------------------
  444|   221k|        return unexpected(handler.error);
  445|   221k|    }
  446|   123k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   344k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.82M|    {
  425|  1.82M|        return ctx.get();
  426|  1.82M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.82M|    {
  245|  1.82M|        return ctx;
  246|  1.82M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   467k|    {
  318|   467k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 467k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   467k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   344k|{
   92|   344k|    auto arg = ctx.arg(id);
   93|   344k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   344k|    return arg;
   97|   344k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   344k|    {
  347|   344k|        return parse_ctx.next_arg_id();
  348|   344k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   344k|    {
  388|   344k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   344k|        set_arg_as_visited(arg_id);
  390|       |
  391|   344k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 344k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   344k|        auto specs = detail::format_specs{};
  401|   344k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   344k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   344k|            arg.type()};
  404|       |
  405|   344k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   344k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 344k]
  |  Branch (406:29): [True: 49.2k, False: 295k]
  ------------------
  407|  49.2k|            SCN_UNLIKELY_ATTR
  408|  49.2k|            on_error("Missing '}' in format string");
  409|  49.2k|            return parse_ctx.begin();
  410|  49.2k|        }
  411|   295k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.6k, False: 270k]
  |  |  ------------------
  ------------------
  412|  24.6k|            return parse_ctx.begin();
  413|  24.6k|        }
  414|   270k|        parse_ctx.advance_to(begin);
  415|       |
  416|   270k|        on_visit_scan_arg(
  417|   270k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   270k|                                           get_ctx().locale()},
  419|   270k|            arg);
  420|   270k|        return parse_ctx.begin();
  421|   295k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   344k|    {
  112|   344k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   270k|    {
  359|   270k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 270k]
  |  Branch (359:23): [True: 0, False: 270k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   270k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   270k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 147k, False: 123k]
  |  |  ------------------
  ------------------
  366|   147k|            on_error(r.error());
  367|   147k|        }
  368|   123k|        else {
  369|   123k|            get_ctx().advance_to(*r);
  370|   123k|        }
  371|   270k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  3.02M|{
  456|  3.02M|    const auto argcount = args.size();
  457|  3.02M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 607k, False: 2.42M]
  |  Branch (457:60): [True: 607k, False: 0]
  ------------------
  458|   607k|        auto arg = args.get(0);
  459|   607k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   607k|    static_cast<    \
  |  |  247|   607k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   607k|    }
  461|       |
  462|  2.42M|    auto handler = format_handler<true, CharT>{
  463|  2.42M|        ranges::subrange<const CharT*>{source.data(),
  464|  2.42M|                                       source.data() + source.size()},
  465|  2.42M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.42M|    static_cast<    \
  |  |  247|  2.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.42M|    static_cast<    \
  |  |  247|  2.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  2.42M|    return vscan_parse_format_string(format, handler);
  467|  3.02M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   910k|{
   49|   910k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   910k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 910k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   910k|    auto reader =
   55|   910k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   910k|            ranges::subrange<const CharT*>{source.data(),
   57|   910k|                                           source.data() + source.size()},
   58|   910k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   910k|    static_cast<    \
  |  |  247|   910k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   910k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   910k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   910k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   910k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   910k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.9k, False: 873k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.9k|    }                                                  \
  |  |  |  |   70|   910k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   873k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   873k|    return ranges::distance(source.data(), it);
   61|   910k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.87M|{
  456|  2.87M|    const auto argcount = args.size();
  457|  2.87M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 557k, False: 2.31M]
  |  Branch (457:60): [True: 557k, False: 0]
  ------------------
  458|   557k|        auto arg = args.get(0);
  459|   557k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   557k|    static_cast<    \
  |  |  247|   557k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   557k|    }
  461|       |
  462|  2.31M|    auto handler = format_handler<true, CharT>{
  463|  2.31M|        ranges::subrange<const CharT*>{source.data(),
  464|  2.31M|                                       source.data() + source.size()},
  465|  2.31M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.31M|    static_cast<    \
  |  |  247|  2.31M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.31M|    static_cast<    \
  |  |  247|  2.31M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  2.31M|    return vscan_parse_format_string(format, handler);
  467|  2.87M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  3.57M|{
   36|  3.57M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 2.92M, False: 644k]
  ------------------
   37|  2.92M|        return false;
   38|  2.92M|    }
   39|   644k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 644k, False: 0]
  |  Branch (39:39): [True: 644k, False: 0]
  ------------------
   40|  3.57M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   835k|{
   49|   835k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   835k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 835k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   835k|    auto reader =
   55|   835k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   835k|            ranges::subrange<const CharT*>{source.data(),
   57|   835k|                                           source.data() + source.size()},
   58|   835k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   835k|    static_cast<    \
  |  |  247|   835k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   835k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   835k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   835k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   835k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   835k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 65.5k, False: 770k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  65.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  65.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  65.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  65.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  65.5k|    }                                                  \
  |  |  |  |   70|   835k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   770k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   770k|    return ranges::distance(source.data(), it);
   61|   835k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  2.31M|    {
  314|  2.31M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  2.31M|    {
  264|  2.31M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  2.31M|{
  441|  2.31M|    const auto beg = handler.get_ctx().begin();
  442|  2.31M|    detail::parse_format_string<false>(format, handler);
  443|  2.31M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 393k, False: 1.92M]
  |  |  ------------------
  ------------------
  444|   393k|        return unexpected(handler.error);
  445|   393k|    }
  446|  1.92M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  2.31M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  15.1M|    {
  425|  15.1M|        return ctx.get();
  426|  15.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  15.1M|    {
  268|  15.1M|        return contiguous_ctx;
  269|  15.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  4.23M|    {
  318|  4.23M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 4.23M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  4.23M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  2.31M|{
   92|  2.31M|    auto arg = ctx.arg(id);
   93|  2.31M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.31M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  2.31M|    return arg;
   97|  2.31M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  2.31M|    {
  347|  2.31M|        return parse_ctx.next_arg_id();
  348|  2.31M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  2.31M|    {
  388|  2.31M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  2.31M|        set_arg_as_visited(arg_id);
  390|       |
  391|  2.31M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 2.31M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  2.31M|        auto specs = detail::format_specs{};
  401|  2.31M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  2.31M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  2.31M|            arg.type()};
  404|       |
  405|  2.31M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  2.31M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 2.31M]
  |  Branch (406:29): [True: 87.4k, False: 2.22M]
  ------------------
  407|  87.4k|            SCN_UNLIKELY_ATTR
  408|  87.4k|            on_error("Missing '}' in format string");
  409|  87.4k|            return parse_ctx.begin();
  410|  87.4k|        }
  411|  2.22M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.7k, False: 2.18M]
  |  |  ------------------
  ------------------
  412|  43.7k|            return parse_ctx.begin();
  413|  43.7k|        }
  414|  2.18M|        parse_ctx.advance_to(begin);
  415|       |
  416|  2.18M|        on_visit_scan_arg(
  417|  2.18M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  2.18M|                                           get_ctx().locale()},
  419|  2.18M|            arg);
  420|  2.18M|        return parse_ctx.begin();
  421|  2.22M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  2.31M|    {
  112|  2.31M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  2.18M|    {
  359|  2.18M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 2.18M]
  |  Branch (359:23): [True: 0, False: 2.18M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  2.18M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  2.18M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 262k, False: 1.92M]
  |  |  ------------------
  ------------------
  366|   262k|            on_error(r.error());
  367|   262k|        }
  368|  1.92M|        else {
  369|  1.92M|            get_ctx().advance_to(*r);
  370|  1.92M|        }
  371|  2.18M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   699k|{
  476|   699k|    const auto argcount = args.size();
  477|   699k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 87.4k, False: 612k]
  |  Branch (477:60): [True: 87.4k, False: 0]
  ------------------
  478|  87.4k|        auto arg = args.get(0);
  479|  87.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  87.4k|    static_cast<    \
  |  |  247|  87.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  87.4k|    }
  481|       |
  482|   612k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 612k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   612k|    SCN_UNLIKELY_ATTR
  490|   612k|    {
  491|   612k|        auto handler = format_handler<false, CharT>{
  492|   612k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   612k|    static_cast<    \
  |  |  247|   612k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   612k|    static_cast<    \
  |  |  247|   612k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   612k|        return vscan_parse_format_string(format, handler);
  494|   612k|    }
  495|   612k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|   131k|{
   69|   131k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 131k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|   131k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|   131k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 131k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|   131k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|   131k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|   131k|    static_cast<    \
  |  |  247|   131k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|   131k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 65.5k, False: 65.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  65.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  65.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  65.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  65.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  65.5k|    }                                                  \
  |  |  |  |   70|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  65.5k|    return it.position();
   86|   131k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   612k|    {
  314|   612k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   612k|    {
  241|   612k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   612k|{
  441|   612k|    const auto beg = handler.get_ctx().begin();
  442|   612k|    detail::parse_format_string<false>(format, handler);
  443|   612k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 393k, False: 218k]
  |  |  ------------------
  ------------------
  444|   393k|        return unexpected(handler.error);
  445|   393k|    }
  446|   218k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   612k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  3.23M|    {
  425|  3.23M|        return ctx.get();
  426|  3.23M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  3.23M|    {
  245|  3.23M|        return ctx;
  246|  3.23M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   830k|    {
  318|   830k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 830k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   830k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   612k|{
   92|   612k|    auto arg = ctx.arg(id);
   93|   612k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 612k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   612k|    return arg;
   97|   612k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   612k|    {
  347|   612k|        return parse_ctx.next_arg_id();
  348|   612k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   612k|    {
  388|   612k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   612k|        set_arg_as_visited(arg_id);
  390|       |
  391|   612k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 612k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   612k|        auto specs = detail::format_specs{};
  401|   612k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   612k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   612k|            arg.type()};
  404|       |
  405|   612k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   612k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 612k]
  |  Branch (406:29): [True: 87.4k, False: 524k]
  ------------------
  407|  87.4k|            SCN_UNLIKELY_ATTR
  408|  87.4k|            on_error("Missing '}' in format string");
  409|  87.4k|            return parse_ctx.begin();
  410|  87.4k|        }
  411|   524k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.7k, False: 480k]
  |  |  ------------------
  ------------------
  412|  43.7k|            return parse_ctx.begin();
  413|  43.7k|        }
  414|   480k|        parse_ctx.advance_to(begin);
  415|       |
  416|   480k|        on_visit_scan_arg(
  417|   480k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   480k|                                           get_ctx().locale()},
  419|   480k|            arg);
  420|   480k|        return parse_ctx.begin();
  421|   524k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   612k|    {
  112|   612k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   480k|    {
  359|   480k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 480k]
  |  Branch (359:23): [True: 0, False: 480k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   480k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   480k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 262k, False: 218k]
  |  |  ------------------
  ------------------
  366|   262k|            on_error(r.error());
  367|   262k|        }
  368|   218k|        else {
  369|   218k|            get_ctx().advance_to(*r);
  370|   218k|        }
  371|   480k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   303k|{
  502|   303k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   303k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  24.6k|{
  502|  24.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  24.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  24.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   278k|{
  502|   278k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   278k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  43.7k|{
  502|  43.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  43.7k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  2.05k|{
   52|  2.05k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  2.05k|    std::copy(data.begin(), data.end(),
   57|  2.05k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.05k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.05k|    const auto wsv_reinterpret_size =
   62|  2.05k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 127, False: 1.92k]
  ------------------
   63|  2.05k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.05k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  2.05k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.05k|    std::wstring_view wsv_transcoded;
   69|  2.05k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 1.59k, False: 461]
  ------------------
   70|  1.59k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  1.59k|        else {
   79|  1.59k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  1.59k|            wstring_buffer_transcoded_wide.resize(size);
   81|  1.59k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  1.59k|                sv.data(), sv.size(),
   83|  1.59k|                reinterpret_cast<char32_t*>(
   84|  1.59k|                    wstring_buffer_transcoded_wide.data()));
   85|  1.59k|        }
   86|  1.59k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  1.59k|    }
   88|       |
   89|  2.05k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  2.05k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.05k|{
  140|  2.05k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.05k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.05k|    buf.resize(sizeof...(Args));
  143|  2.05k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.05k|    return {buf.data(), buf.size()};
  145|  2.05k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  2.05k|{
  126|  2.05k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.05k|        return format_string_view_buffer;
  128|  2.05k|    }
  129|  2.05k|    else {
  130|  2.05k|        return wformat_string_view_buffer;
  131|  2.05k|    }
  132|  2.05k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.05k|{
  200|  2.05k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.05k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.05k|                                   format_strings);
  203|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|   209k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   209k|            auto result = scn::scan<T>(
  156|   209k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   209k|                scn::runtime_format(f));
  158|   209k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 189k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|   189k|            it = result->begin();
  162|   189k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|   209k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   209k|            auto result = scn::scan<T>(
  170|   209k|                global_locale,
  171|   209k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   209k|                scn::runtime_format(f));
  173|   209k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 189k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|   189k|            it = result->begin();
  177|   189k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  45.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  45.5k|            auto result = scn::scan_value<T>(
  185|  45.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  45.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 43.4k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  43.4k|            it = result->begin();
  190|  43.4k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|   208k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   208k|            auto result = scn::scan<T>(
  156|   208k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   208k|                scn::runtime_format(f));
  158|   208k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 188k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|   188k|            it = result->begin();
  162|   188k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|   208k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   208k|            auto result = scn::scan<T>(
  170|   208k|                global_locale,
  171|   208k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   208k|                scn::runtime_format(f));
  173|   208k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 188k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|   188k|            it = result->begin();
  177|   188k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  43.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  43.0k|            auto result = scn::scan_value<T>(
  185|  43.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  43.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 40.9k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  40.9k|            it = result->begin();
  190|  40.9k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|   296k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   296k|            auto result = scn::scan<T>(
  156|   296k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   296k|                scn::runtime_format(f));
  158|   296k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 275k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|   275k|            it = result->begin();
  162|   275k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|   296k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   296k|            auto result = scn::scan<T>(
  170|   296k|                global_locale,
  171|   296k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   296k|                scn::runtime_format(f));
  173|   296k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 275k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|   275k|            it = result->begin();
  177|   275k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  58.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  58.3k|            auto result = scn::scan_value<T>(
  185|  58.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  58.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 56.2k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  56.2k|            it = result->begin();
  190|  56.2k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|   246k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   246k|            auto result = scn::scan<T>(
  156|   246k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   246k|                scn::runtime_format(f));
  158|   246k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 226k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|   226k|            it = result->begin();
  162|   226k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|   246k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   246k|            auto result = scn::scan<T>(
  170|   246k|                global_locale,
  171|   246k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   246k|                scn::runtime_format(f));
  173|   246k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 226k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|   226k|            it = result->begin();
  177|   226k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  48.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  48.3k|            auto result = scn::scan_value<T>(
  185|  48.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  48.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 46.3k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  46.3k|            it = result->begin();
  190|  46.3k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|   302k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   302k|            auto result = scn::scan<T>(
  156|   302k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   302k|                scn::runtime_format(f));
  158|   302k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 282k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|   282k|            it = result->begin();
  162|   282k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|   302k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   302k|            auto result = scn::scan<T>(
  170|   302k|                global_locale,
  171|   302k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   302k|                scn::runtime_format(f));
  173|   302k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 282k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|   282k|            it = result->begin();
  177|   282k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  59.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  59.6k|            auto result = scn::scan_value<T>(
  185|  59.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  59.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 57.5k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  57.5k|            it = result->begin();
  190|  57.5k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|   249k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   249k|            auto result = scn::scan<T>(
  156|   249k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   249k|                scn::runtime_format(f));
  158|   249k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 229k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|   229k|            it = result->begin();
  162|   229k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|   249k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   249k|            auto result = scn::scan<T>(
  170|   249k|                global_locale,
  171|   249k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   249k|                scn::runtime_format(f));
  173|   249k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 229k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|   229k|            it = result->begin();
  177|   229k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  48.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  48.7k|            auto result = scn::scan_value<T>(
  185|  48.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  48.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 46.6k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  46.6k|            it = result->begin();
  190|  46.6k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|  32.8k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  32.8k|            auto result = scn::scan<T>(
  156|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.8k|                scn::runtime_format(f));
  158|  32.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 12.3k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|  12.3k|            it = result->begin();
  162|  12.3k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|  32.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.8k|            auto result = scn::scan<T>(
  170|  32.8k|                global_locale,
  171|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  32.8k|                scn::runtime_format(f));
  173|  32.8k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 12.3k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|  12.3k|            it = result->begin();
  177|  12.3k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  4.10k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.10k|            auto result = scn::scan_value<T>(
  185|  4.10k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.10k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 2.05k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  2.05k|            it = result->begin();
  190|  2.05k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|  32.8k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  32.8k|            auto result = scn::scan<T>(
  156|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.8k|                scn::runtime_format(f));
  158|  32.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 12.3k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|  12.3k|            it = result->begin();
  162|  12.3k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|  32.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.8k|            auto result = scn::scan<T>(
  170|  32.8k|                global_locale,
  171|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  32.8k|                scn::runtime_format(f));
  173|  32.8k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 12.3k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|  12.3k|            it = result->begin();
  177|  12.3k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  4.10k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.10k|            auto result = scn::scan_value<T>(
  185|  4.10k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.10k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 2.05k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  2.05k|            it = result->begin();
  190|  2.05k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|  32.8k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  32.8k|            auto result = scn::scan<T>(
  156|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.8k|                scn::runtime_format(f));
  158|  32.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 12.3k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|  12.3k|            it = result->begin();
  162|  12.3k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|  32.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.8k|            auto result = scn::scan<T>(
  170|  32.8k|                global_locale,
  171|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  32.8k|                scn::runtime_format(f));
  173|  32.8k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 12.3k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|  12.3k|            it = result->begin();
  177|  12.3k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  4.10k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.10k|            auto result = scn::scan_value<T>(
  185|  4.10k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.10k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 2.05k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  2.05k|            it = result->begin();
  190|  2.05k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|  32.8k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  32.8k|            auto result = scn::scan<T>(
  156|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.8k|                scn::runtime_format(f));
  158|  32.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 12.3k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|  12.3k|            it = result->begin();
  162|  12.3k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|  32.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.8k|            auto result = scn::scan<T>(
  170|  32.8k|                global_locale,
  171|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  32.8k|                scn::runtime_format(f));
  173|  32.8k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 12.3k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|  12.3k|            it = result->begin();
  177|  12.3k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  4.10k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.10k|            auto result = scn::scan_value<T>(
  185|  4.10k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.10k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 2.05k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  2.05k|            it = result->begin();
  190|  2.05k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|  32.8k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  32.8k|            auto result = scn::scan<T>(
  156|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.8k|                scn::runtime_format(f));
  158|  32.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 12.3k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|  12.3k|            it = result->begin();
  162|  12.3k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|  32.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.8k|            auto result = scn::scan<T>(
  170|  32.8k|                global_locale,
  171|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  32.8k|                scn::runtime_format(f));
  173|  32.8k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 12.3k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|  12.3k|            it = result->begin();
  177|  12.3k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  4.10k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.10k|            auto result = scn::scan_value<T>(
  185|  4.10k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.10k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 2.05k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  2.05k|            it = result->begin();
  190|  2.05k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.05k|{
  151|       |    // Regular scan
  152|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.5k, False: 2.05k]
  ------------------
  153|  20.5k|        auto it = scn::ranges::begin(source);
  154|  32.8k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  32.8k|            auto result = scn::scan<T>(
  156|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.8k|                scn::runtime_format(f));
  158|  32.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.5k, False: 12.3k]
  ------------------
  159|  20.5k|                break;
  160|  20.5k|            }
  161|  12.3k|            it = result->begin();
  162|  12.3k|        }
  163|  20.5k|    }
  164|       |
  165|       |    // scan localized
  166|  20.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.5k, False: 2.05k]
  ------------------
  167|  20.5k|        auto it = scn::ranges::begin(source);
  168|  32.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.8k|            auto result = scn::scan<T>(
  170|  32.8k|                global_locale,
  171|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  32.8k|                scn::runtime_format(f));
  173|  32.8k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.5k, False: 12.3k]
  ------------------
  174|  20.5k|                break;
  175|  20.5k|            }
  176|  12.3k|            it = result->begin();
  177|  12.3k|        }
  178|  20.5k|    }
  179|       |
  180|       |    // scan_value
  181|  2.05k|    {
  182|  2.05k|        auto it = scn::ranges::begin(source);
  183|  4.10k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.10k|            auto result = scn::scan_value<T>(
  185|  4.10k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.10k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.05k, False: 2.05k]
  ------------------
  187|  2.05k|                break;
  188|  2.05k|            }
  189|  2.05k|            it = result->begin();
  190|  2.05k|        }
  191|  2.05k|    }
  192|  2.05k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  2.05k|{
  109|  2.05k|    using char_type = ranges::range_value_t<Source>;
  110|  2.05k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.05k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.05k|              std::back_inserter(deque));
  113|  2.05k|    return deque;
  114|  2.05k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  2.05k|{
   98|  2.05k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.05k|        return noncontiguous_buffer;
  100|  2.05k|    }
  101|  2.05k|    else {
  102|  2.05k|        return wnoncontiguous_buffer;
  103|  2.05k|    }
  104|  2.05k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.05k|{
  140|  2.05k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.05k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.05k|    buf.resize(sizeof...(Args));
  143|  2.05k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.05k|    return {buf.data(), buf.size()};
  145|  2.05k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  2.05k|{
  126|  2.05k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.05k|        return format_string_view_buffer;
  128|  2.05k|    }
  129|  2.05k|    else {
  130|  2.05k|        return wformat_string_view_buffer;
  131|  2.05k|    }
  132|  2.05k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  3.64k|{
  200|  3.64k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  3.64k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  3.64k|                                   format_strings);
  203|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|   198k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   198k|            auto result = scn::scan<T>(
  156|   198k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   198k|                scn::runtime_format(f));
  158|   198k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 162k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|   162k|            it = result->begin();
  162|   162k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|   198k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   198k|            auto result = scn::scan<T>(
  170|   198k|                global_locale,
  171|   198k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   198k|                scn::runtime_format(f));
  173|   198k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 162k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|   162k|            it = result->begin();
  177|   162k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  41.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  41.3k|            auto result = scn::scan_value<T>(
  185|  41.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  41.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 37.7k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  37.7k|            it = result->begin();
  190|  37.7k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|   202k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   202k|            auto result = scn::scan<T>(
  156|   202k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   202k|                scn::runtime_format(f));
  158|   202k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 166k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|   166k|            it = result->begin();
  162|   166k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|   202k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   202k|            auto result = scn::scan<T>(
  170|   202k|                global_locale,
  171|   202k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   202k|                scn::runtime_format(f));
  173|   202k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 166k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|   166k|            it = result->begin();
  177|   166k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  39.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  39.9k|            auto result = scn::scan_value<T>(
  185|  39.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  39.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 36.2k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  36.2k|            it = result->begin();
  190|  36.2k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|   275k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   275k|            auto result = scn::scan<T>(
  156|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   275k|                scn::runtime_format(f));
  158|   275k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 239k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|   239k|            it = result->begin();
  162|   239k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|   275k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   275k|            auto result = scn::scan<T>(
  170|   275k|                global_locale,
  171|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   275k|                scn::runtime_format(f));
  173|   275k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 239k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|   239k|            it = result->begin();
  177|   239k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  52.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  52.9k|            auto result = scn::scan_value<T>(
  185|  52.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  52.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 49.2k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  49.2k|            it = result->begin();
  190|  49.2k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|   237k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   237k|            auto result = scn::scan<T>(
  156|   237k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   237k|                scn::runtime_format(f));
  158|   237k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 201k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|   201k|            it = result->begin();
  162|   201k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|   237k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   237k|            auto result = scn::scan<T>(
  170|   237k|                global_locale,
  171|   237k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   237k|                scn::runtime_format(f));
  173|   237k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 201k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|   201k|            it = result->begin();
  177|   201k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  45.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  45.0k|            auto result = scn::scan_value<T>(
  185|  45.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  45.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 41.3k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  41.3k|            it = result->begin();
  190|  41.3k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|   281k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   281k|            auto result = scn::scan<T>(
  156|   281k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   281k|                scn::runtime_format(f));
  158|   281k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 244k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|   244k|            it = result->begin();
  162|   244k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|   281k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   281k|            auto result = scn::scan<T>(
  170|   281k|                global_locale,
  171|   281k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   281k|                scn::runtime_format(f));
  173|   281k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 244k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|   244k|            it = result->begin();
  177|   244k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  54.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  54.0k|            auto result = scn::scan_value<T>(
  185|  54.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  54.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 50.4k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  50.4k|            it = result->begin();
  190|  50.4k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|   240k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   240k|            auto result = scn::scan<T>(
  156|   240k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   240k|                scn::runtime_format(f));
  158|   240k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 203k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|   203k|            it = result->begin();
  162|   203k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|   240k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   240k|            auto result = scn::scan<T>(
  170|   240k|                global_locale,
  171|   240k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   240k|                scn::runtime_format(f));
  173|   240k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 203k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|   203k|            it = result->begin();
  177|   203k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  45.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  45.3k|            auto result = scn::scan_value<T>(
  185|  45.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  45.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 41.6k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  41.6k|            it = result->begin();
  190|  41.6k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|  58.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.2k|            auto result = scn::scan<T>(
  156|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.2k|                scn::runtime_format(f));
  158|  58.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 21.8k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|  21.8k|            it = result->begin();
  162|  21.8k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|  58.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.2k|            auto result = scn::scan<T>(
  170|  58.2k|                global_locale,
  171|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.2k|                scn::runtime_format(f));
  173|  58.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 21.8k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|  21.8k|            it = result->begin();
  177|  21.8k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  7.28k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.28k|            auto result = scn::scan_value<T>(
  185|  7.28k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.28k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 3.64k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  3.64k|            it = result->begin();
  190|  3.64k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|  58.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.2k|            auto result = scn::scan<T>(
  156|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.2k|                scn::runtime_format(f));
  158|  58.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 21.8k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|  21.8k|            it = result->begin();
  162|  21.8k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|  58.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.2k|            auto result = scn::scan<T>(
  170|  58.2k|                global_locale,
  171|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.2k|                scn::runtime_format(f));
  173|  58.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 21.8k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|  21.8k|            it = result->begin();
  177|  21.8k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  7.28k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.28k|            auto result = scn::scan_value<T>(
  185|  7.28k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.28k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 3.64k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  3.64k|            it = result->begin();
  190|  3.64k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|  58.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.2k|            auto result = scn::scan<T>(
  156|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.2k|                scn::runtime_format(f));
  158|  58.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 21.8k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|  21.8k|            it = result->begin();
  162|  21.8k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|  58.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.2k|            auto result = scn::scan<T>(
  170|  58.2k|                global_locale,
  171|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.2k|                scn::runtime_format(f));
  173|  58.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 21.8k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|  21.8k|            it = result->begin();
  177|  21.8k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  7.28k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.28k|            auto result = scn::scan_value<T>(
  185|  7.28k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.28k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 3.64k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  3.64k|            it = result->begin();
  190|  3.64k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|  58.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.2k|            auto result = scn::scan<T>(
  156|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.2k|                scn::runtime_format(f));
  158|  58.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 21.8k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|  21.8k|            it = result->begin();
  162|  21.8k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|  58.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.2k|            auto result = scn::scan<T>(
  170|  58.2k|                global_locale,
  171|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.2k|                scn::runtime_format(f));
  173|  58.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 21.8k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|  21.8k|            it = result->begin();
  177|  21.8k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  7.28k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.28k|            auto result = scn::scan_value<T>(
  185|  7.28k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.28k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 3.64k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  3.64k|            it = result->begin();
  190|  3.64k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|  58.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.2k|            auto result = scn::scan<T>(
  156|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.2k|                scn::runtime_format(f));
  158|  58.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 21.8k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|  21.8k|            it = result->begin();
  162|  21.8k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|  58.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.2k|            auto result = scn::scan<T>(
  170|  58.2k|                global_locale,
  171|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.2k|                scn::runtime_format(f));
  173|  58.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 21.8k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|  21.8k|            it = result->begin();
  177|  21.8k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  7.28k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.28k|            auto result = scn::scan_value<T>(
  185|  7.28k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.28k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 3.64k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  3.64k|            it = result->begin();
  190|  3.64k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.64k|{
  151|       |    // Regular scan
  152|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 36.4k, False: 3.64k]
  ------------------
  153|  36.4k|        auto it = scn::ranges::begin(source);
  154|  58.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.2k|            auto result = scn::scan<T>(
  156|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.2k|                scn::runtime_format(f));
  158|  58.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 36.4k, False: 21.8k]
  ------------------
  159|  36.4k|                break;
  160|  36.4k|            }
  161|  21.8k|            it = result->begin();
  162|  21.8k|        }
  163|  36.4k|    }
  164|       |
  165|       |    // scan localized
  166|  36.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 36.4k, False: 3.64k]
  ------------------
  167|  36.4k|        auto it = scn::ranges::begin(source);
  168|  58.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.2k|            auto result = scn::scan<T>(
  170|  58.2k|                global_locale,
  171|  58.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.2k|                scn::runtime_format(f));
  173|  58.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 36.4k, False: 21.8k]
  ------------------
  174|  36.4k|                break;
  175|  36.4k|            }
  176|  21.8k|            it = result->begin();
  177|  21.8k|        }
  178|  36.4k|    }
  179|       |
  180|       |    // scan_value
  181|  3.64k|    {
  182|  3.64k|        auto it = scn::ranges::begin(source);
  183|  7.28k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  7.28k|            auto result = scn::scan_value<T>(
  185|  7.28k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  7.28k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.64k, False: 3.64k]
  ------------------
  187|  3.64k|                break;
  188|  3.64k|            }
  189|  3.64k|            it = result->begin();
  190|  3.64k|        }
  191|  3.64k|    }
  192|  3.64k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  3.64k|{
  109|  3.64k|    using char_type = ranges::range_value_t<Source>;
  110|  3.64k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  3.64k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  3.64k|              std::back_inserter(deque));
  113|  3.64k|    return deque;
  114|  3.64k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  3.64k|{
   98|  3.64k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  3.64k|        return noncontiguous_buffer;
  100|  3.64k|    }
  101|  3.64k|    else {
  102|  3.64k|        return wnoncontiguous_buffer;
  103|  3.64k|    }
  104|  3.64k|}

LLVMFuzzerTestOneInput:
   59|  2.05k|{
   60|  2.05k|    scn::fuzz::run({data, size});
   61|  2.05k|    return 0;
   62|  2.05k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  2.05k|{
   36|  2.05k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.05k]
  |  Branch (36:42): [True: 0, False: 2.05k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.05k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   41|       |
   42|  2.05k|    auto f =
   43|  2.05k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  2.05k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  2.05k|    do_basic_run(sv, f);
   46|       |
   47|  2.05k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   48|  2.05k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  2.05k|                                          L"{:'}", L"{:'L}");
   50|  2.05k|    do_basic_run(wsv_reinterpret, wf);
   51|  2.05k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 1.59k, False: 461]
  ------------------
   52|  1.59k|        do_basic_run(wsv_transcode, wf);
   53|  1.59k|    }
   54|  2.05k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.05k|{
   25|  2.05k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.05k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.05k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.05k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.05k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.05k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.05k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.05k|{
   25|  2.05k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.05k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.05k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.05k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.05k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.05k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.05k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  3.64k|{
   25|  3.64k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.64k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.64k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.64k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.64k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.64k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.64k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  3.64k|{
   25|  3.64k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.64k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.64k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.64k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.64k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.64k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.64k|}

