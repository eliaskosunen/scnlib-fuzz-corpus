_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|  82.1k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  2.22k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  9.67k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  9.67k|  return idx < lenminusstep;
   70|  9.67k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  7.45k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  7.45k|  return &buf[idx];
   75|  7.45k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  9.67k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  9.67k|  idx += STEP_SIZE;
   88|  9.67k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  2.22k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  2.22k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 2.22k]
  ------------------
   80|  2.22k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  2.22k|  std::memcpy(dst, buf + idx, len - idx);
   82|  2.22k|  return len - idx;
   83|  2.22k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  1.73k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  1.73k|    size_t pos = 0;
   12|  1.73k|    size_t count = 0;
   13|  7.59k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 5.85k, False: 1.73k]
  ------------------
   14|  5.85k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  5.85k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  5.85k|      count += count_ones(utf8_continuation_mask);
   17|  5.85k|    }
   18|  1.73k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  1.73k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  76.4k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  76.4k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  76.4k|      size_t pos = 0;
  131|  76.4k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|  76.4k|      size_t leading_byte = 0;
  139|  76.4k|      size_t margin = size;
  140|   169k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 92.7k, False: 76.4k]
  |  Branch (140:27): [True: 92.7k, False: 0]
  ------------------
  141|  92.7k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|  92.7k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  76.4k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  76.4k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 76.4k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  76.4k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 76.4k]
  ------------------
  195|  76.4k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 76.4k, False: 0]
  ------------------
  196|  76.4k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  76.4k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 3.67k, False: 72.7k]
  ------------------
  198|  72.7k|        utf32_output += howmany;
  199|  72.7k|      }
  200|  72.7k|      return utf32_output - start;
  201|  76.4k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  76.4k|    simdutf_really_inline bool errors() const {
  291|  76.4k|      return this->error.any_bits_set_anywhere();
  292|  76.4k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.73k|    char32_t* utf32_output) noexcept {
   13|  1.73k|  size_t pos = 0;
   14|  1.73k|  char32_t* start{utf32_output};
   15|  1.73k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  7.49k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 5.76k, False: 1.73k]
  ------------------
   17|  5.76k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  5.76k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 4.65k, False: 1.10k]
  ------------------
   19|  4.65k|      in.store_ascii_as_utf32(utf32_output);
   20|  4.65k|      utf32_output += 64;
   21|  4.65k|      pos += 64;
   22|  4.65k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|  1.10k|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|  1.10k|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|  1.10k|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|  1.10k|    size_t max_starting_point = (pos + 64) - 12;
   28|  7.58k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 6.47k, False: 1.10k]
  ------------------
   29|  6.47k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  6.47k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  6.47k|      pos += consumed;
   32|  6.47k|      utf8_end_of_code_point_mask >>= consumed;
   33|  6.47k|      }
   34|  1.10k|    }
   35|  5.76k|  }
   36|  1.73k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.73k|  return utf32_output - start;
   38|  1.73k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  9.67k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  9.67k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  9.67k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 7.81k, False: 1.86k]
  |  |  ------------------
  ------------------
  154|  7.81k|        this->error |= this->prev_incomplete;
  155|  7.81k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.86k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.86k|            "We support either two or four chunks per 64-byte block.");
  159|  1.86k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.86k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.86k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.86k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.86k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.86k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.86k|      }
  172|  9.67k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.73k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.73k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.73k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.73k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.73k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.73k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.73k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.73k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.73k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.73k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.73k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.73k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.73k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.73k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.73k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.73k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.73k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.73k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.73k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.73k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.73k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.73k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.73k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.73k|    );
   51|  3.73k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.73k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.73k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.73k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.73k|      CARRY,
   59|  3.73k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.73k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.73k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.73k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.73k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.73k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.73k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.73k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.73k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.73k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.73k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.73k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.73k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.73k|    );
   80|  3.73k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.73k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.73k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.73k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.73k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.73k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.73k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.73k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.73k|    );
   96|  3.73k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.73k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.73k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.73k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.73k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.73k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.73k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.73k|    return must23_80 ^ sc;
  105|  3.73k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.86k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.86k|    static const uint8_t max_array[32] = {
  115|  1.86k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.86k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.86k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.86k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.86k|    };
  120|  1.86k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.86k|    return input.gt_bits(max_value);
  122|  1.86k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  2.22k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  2.22k|      this->error |= this->prev_incomplete;
  150|  2.22k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  2.22k|    simdutf_really_inline bool errors() const {
  176|  2.22k|      return this->error.any_bits_set_anywhere();
  177|  2.22k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  2.22k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  2.22k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  2.22k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  2.22k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  2.22k|    checker c{};
   12|  2.22k|    buf_block_reader<64> reader(input, length);
   13|  9.67k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 7.45k, False: 2.22k]
  ------------------
   14|  7.45k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  7.45k|      c.check_next_input(in);
   16|  7.45k|      reader.advance();
   17|  7.45k|    }
   18|  2.22k|    uint8_t block[64]{};
   19|  2.22k|    reader.get_remainder(block);
   20|  2.22k|    simd::simd8x64<uint8_t> in(block);
   21|  2.22k|    c.check_next_input(in);
   22|  2.22k|    reader.advance();
   23|  2.22k|    c.check_eof();
   24|  2.22k|    return !c.errors();
   25|  2.22k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  6.47k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  6.47k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  6.47k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  6.47k|      utf8_end_of_code_point_mask & 0xfff;
   24|  6.47k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.99k, False: 4.48k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.99k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.99k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.99k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.99k|    return 16; // We consumed 16 bytes.
   30|  1.99k|  }
   31|  4.48k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 131, False: 4.35k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|    131|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|    131|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|    131|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|    131|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|    131|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|    131|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|    131|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|    131|    return 16;
   42|    131|  }
   43|  4.35k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 173, False: 4.17k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|    173|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|    173|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|    173|    const __m128i ascii =
   49|    173|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|    173|    const __m128i middlebyte =
   51|    173|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|    173|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|    173|    const __m128i highbyte =
   54|    173|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|    173|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|    173|    const __m128i composed =
   57|    173|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|    173|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|    173|    utf32_output += 4;
   60|    173|    return 12;
   61|    173|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  4.17k|  const uint8_t idx =
   65|  4.17k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  4.17k|  const uint8_t consumed =
   67|  4.17k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  4.17k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.87k, False: 1.30k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.87k|    const __m128i sh =
   75|  2.87k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.87k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.87k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.87k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.87k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.87k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.87k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.87k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 1.18k, False: 124]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|  1.18k|    const __m128i sh =
   86|  1.18k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|  1.18k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|  1.18k|    const __m128i ascii =
   89|  1.18k|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|  1.18k|    const __m128i middlebyte =
   91|  1.18k|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|  1.18k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|  1.18k|    const __m128i highbyte =
   94|  1.18k|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|  1.18k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|  1.18k|    const __m128i composed =
   97|  1.18k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|  1.18k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|  1.18k|    utf32_output += 4;
  100|  1.18k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 124, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    124|    const __m128i sh =
  103|    124|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    124|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    124|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    124|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    124|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    124|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    124|    const __m128i correct =
  111|    124|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    124|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    124|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    124|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    124|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    124|    const __m128i composed =
  117|    124|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    124|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    124|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    124|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    124|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  4.17k|  return consumed;
  125|  4.35k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|  2.22k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|  2.22k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|  2.22k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|  76.4k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|  76.4k|  utf8_to_utf32::validating_transcoder converter;
  276|  76.4k|  return converter.convert(buf, len, utf32_output);
  277|  76.4k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  1.73k|    char32_t* utf32_output) const noexcept {
  286|  1.73k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  1.73k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|  1.73k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|  1.73k|  return utf8::count_code_points(input, length);
  778|  1.73k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  9.67k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  9.67k|  return input.reduce_or().is_ascii();
   25|  9.67k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.73k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.73k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  3.73k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  3.73k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  3.73k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|  82.1k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|  82.1k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|  82.1k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|  82.1k|    return active_implementation;
  815|  82.1k|}
_ZN7simdutf13validate_utf8EPKcm:
  817|  2.22k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|  2.22k|  return get_active_implementation()->validate_utf8(buf, len);
  819|  2.22k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|  76.4k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|  76.4k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|  76.4k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  1.73k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  1.73k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  1.73k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|  1.73k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|  1.73k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|  1.73k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  1.73k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  1.73k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  1.73k|    size_t counter{0};
  171|  45.1k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 43.4k, False: 1.73k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  43.4k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 42.8k, False: 553]
  ------------------
  174|  43.4k|    }
  175|  1.73k|    return counter;
  176|  1.73k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  76.4k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  76.4k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  76.4k|  size_t pos = 0;
   12|  76.4k|  char32_t* start{utf32_output};
   13|   149k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 76.4k, False: 72.7k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  76.4k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 76.4k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  76.4k|    uint8_t leading_byte = data[pos]; // leading byte
   31|  76.4k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 66.0k, False: 10.3k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  66.0k|      *utf32_output++ = char32_t(leading_byte);
   34|  66.0k|      pos++;
   35|  66.0k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 6.21k, False: 4.10k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  6.21k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 6.21k]
  ------------------
   38|  6.21k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 1.80k, False: 4.40k]
  ------------------
   39|       |      // range check
   40|  4.40k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  4.40k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 4.26k]
  |  Branch (41:32): [True: 0, False: 4.26k]
  ------------------
   42|  4.26k|      *utf32_output++ = char32_t(code_point);
   43|  4.26k|      pos += 2;
   44|  4.26k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 2.15k, False: 1.94k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  2.15k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 2.15k]
  ------------------
   47|       |
   48|  2.15k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 211, False: 1.94k]
  ------------------
   49|  1.94k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 141, False: 1.80k]
  ------------------
   50|       |      // range check
   51|  1.80k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  1.80k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  1.80k|                   (data[pos + 2] & 0b00111111);
   54|  1.80k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 1.66k]
  |  Branch (54:33): [True: 0, False: 1.66k]
  ------------------
   55|  1.80k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 277, False: 1.38k]
  |  Branch (55:35): [True: 136, False: 141]
  ------------------
   56|    277|        return 0;
   57|    277|      }
   58|  1.52k|      *utf32_output++ = char32_t(code_point);
   59|  1.52k|      pos += 3;
   60|  1.94k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 1.94k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  1.94k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 1.94k]
  ------------------
   63|  1.94k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 308, False: 1.63k]
  ------------------
   64|  1.63k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 153, False: 1.48k]
  ------------------
   65|  1.48k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 141, False: 1.34k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.34k|      uint32_t code_point =
   69|  1.34k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.34k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.34k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 276, False: 1.06k]
  |  Branch (71:35): [True: 214, False: 853]
  ------------------
   72|    853|      *utf32_output++ = char32_t(code_point);
   73|    853|      pos += 4;
   74|    853|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  76.4k|  }
   78|  72.7k|  return utf32_output - start;
   79|  76.4k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.73k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.73k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.73k|  size_t pos = 0;
   12|  1.73k|  char32_t* start{utf32_output};
   13|  14.6k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 12.9k, False: 1.73k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  12.9k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 6.97k, False: 5.96k]
  ------------------
   16|  6.97k|      uint64_t v;
   17|  6.97k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  6.97k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 6.46k, False: 515]
  ------------------
   19|  6.46k|        size_t final_pos = pos + 8;
   20|  58.1k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 51.6k, False: 6.46k]
  ------------------
   21|  51.6k|          *utf32_output++ = char32_t(buf[pos]);
   22|  51.6k|          pos++;
   23|  51.6k|        }
   24|  6.46k|        continue;
   25|  6.46k|      }
   26|  6.97k|    }
   27|  6.47k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  6.47k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 6.11k, False: 366]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  6.11k|      *utf32_output++ = char32_t(leading_byte);
   31|  6.11k|      pos++;
   32|  6.11k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 176, False: 190]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    176|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 176]
  ------------------
   35|    176|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    176|      pos += 2;
   37|    190|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 139, False: 51]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    139|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 139]
  ------------------
   40|    139|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    139|      pos += 3;
   42|    139|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 51, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     51|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 51]
  ------------------
   45|     51|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     51|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     51|      *utf32_output++ = char32_t(code_word);
   48|     51|      pos += 4;
   49|     51|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  6.47k|  }
   54|  1.73k|  return utf32_output - start;
   55|  1.73k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  5.85k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  5.85k|  return _popcnt64(input_num);
   16|  5.85k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  6.68k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  6.68k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  6.68k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  6.68k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  9.67k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  21.2k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  21.2k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  21.2k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   227k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   227k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   227k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   227k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  9.67k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  9.67k|      return this->chunks[0] | this->chunks[1];
  297|  9.67k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  27.1k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   344k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  9.67k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  13.7k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.73k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.73k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.73k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  7.46k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  11.1k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  11.1k|      return lookup_16(simd8<L>::repeat_16(
  140|  11.1k|        replace0,  replace1,  replace2,  replace3,
  141|  11.1k|        replace4,  replace5,  replace6,  replace7,
  142|  11.1k|        replace8,  replace9,  replace10, replace11,
  143|  11.1k|        replace12, replace13, replace14, replace15
  144|  11.1k|      ));
  145|  11.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  11.1k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  11.1k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  11.1k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  14.9k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  11.1k|    ) {
  218|  11.1k|      return simd8<uint8_t>(
  219|  11.1k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  11.1k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  11.1k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  11.1k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  11.1k|      );
  224|  11.1k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  11.1k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  22.3k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|  98.7k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|  98.7k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.73k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.73k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.73k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.73k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.73k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.73k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  9.32k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  43.4k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  43.4k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  43.4k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  43.4k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  15.4k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  89.8k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  17.6k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  17.6k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  17.6k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  3.73k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  10.6k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.73k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.73k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.86k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.86k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  78.6k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  78.6k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  11.6k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  23.2k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  23.2k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  23.2k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  5.76k|    simdutf_really_inline bool is_ascii() const {
  300|  5.76k|      return this->reduce_or().is_ascii();
  301|  5.76k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  5.76k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  5.76k|      return this->chunks[0] | this->chunks[1];
  297|  5.76k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  5.76k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  5.76k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|  1.10k|    simdutf_really_inline uint64_t lt(const T m) const {
  363|  1.10k|      const simd8<T> mask = simd8<T>::splat(m);
  364|  1.10k|      return  simd8x64<bool>(
  365|  1.10k|        this->chunks[0] < mask,
  366|  1.10k|        this->chunks[1] < mask
  367|  1.10k|      ).to_bitmask();
  368|  1.10k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  2.21k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  6.96k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  6.96k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  6.96k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  6.96k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  6.96k|      return r_lo | (r_hi << 32);
  287|  6.96k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  13.9k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  13.9k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  4.65k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  4.65k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  4.65k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  4.65k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  9.30k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  9.30k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  9.30k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  9.30k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  9.30k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  9.30k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  5.85k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  5.85k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  5.85k|      return  simd8x64<bool>(
  373|  5.85k|        this->chunks[0] > mask,
  374|  5.85k|        this->chunks[1] > mask
  375|  5.85k|      ).to_bitmask();
  376|  5.85k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   558k|{
  619|   558k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   558k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   558k|    static_cast<    \
  |  |  247|   558k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   558k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  1.23M|{
  387|  1.23M|    static_assert(
  388|  1.23M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.23M|        "Scan argument types must be default constructible");
  390|  1.23M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.23M|                  "Scan argument types must be Destructible");
  392|  1.23M|    static_assert(
  393|  1.23M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.23M|        "Scan argument types must not be references");
  395|  1.23M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   558k|    {
  564|   558k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   558k|    {
  574|   558k|        return {
  575|   558k|            detail::make_arg<base::is_packed, Context,
  576|   558k|                             detail::mapped_type_constant<
  577|   558k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   558k|                args)...};
  579|   558k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   558k|{
  415|   558k|    return make_value<Context>(value);
  416|   558k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   615k|{
  372|   615k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   615k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   615k|                                  needs_context_tag>) {
  376|   615k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   615k|    }
  378|   615k|    else {
  379|   615k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   615k|            value, context_tag<Context>{}));
  381|   615k|    }
  382|   615k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   615k|    {                                                                        \
  217|   615k|        return val;                                                          \
  218|   615k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  1.23M|{
  341|  1.23M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.23M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.23M|    constexpr bool scannable_char =
  345|  1.23M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.23M|    static_assert(scannable_char,
  347|  1.23M|                  "Cannot scan an argument of an unsupported character "
  348|  1.23M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.23M|    constexpr bool scannable_const =
  351|  1.23M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.23M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.23M|    constexpr bool scannable_disabled =
  355|  1.23M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.23M|    static_assert(scannable_disabled,
  357|  1.23M|                  "Cannot scan an argument that has been disabled by "
  358|  1.23M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.23M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.23M|    static_assert(
  362|  1.23M|        scannable,
  363|  1.23M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.23M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.23M|    return arg_value{arg};
  367|  1.23M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  1.23M|    {
  160|  1.23M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   558k|    {
  647|   558k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  4.00M|    {
  694|  4.00M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   469k|    {
  554|   469k|        return m_args;
  555|   469k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  57.4k|{
  400|  57.4k|    check_scan_arg_types<T>();
  401|       |
  402|  57.4k|    basic_scan_arg<Context> arg;
  403|  57.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  57.4k|    arg.m_value = make_value<Context>(value);
  405|  57.4k|    return arg;
  406|  57.4k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  4.39M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  8.70M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   560k|{
  619|   560k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   560k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   560k|    static_cast<    \
  |  |  247|   560k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   560k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  1.23M|{
  387|  1.23M|    static_assert(
  388|  1.23M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.23M|        "Scan argument types must be default constructible");
  390|  1.23M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.23M|                  "Scan argument types must be Destructible");
  392|  1.23M|    static_assert(
  393|  1.23M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.23M|        "Scan argument types must not be references");
  395|  1.23M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   560k|    {
  564|   560k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   560k|    {
  574|   560k|        return {
  575|   560k|            detail::make_arg<base::is_packed, Context,
  576|   560k|                             detail::mapped_type_constant<
  577|   560k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   560k|                args)...};
  579|   560k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   560k|{
  415|   560k|    return make_value<Context>(value);
  416|   560k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   616k|{
  372|   616k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   616k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   616k|                                  needs_context_tag>) {
  376|   616k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   616k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   616k|    }
  378|   616k|    else {
  379|   616k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   616k|            value, context_tag<Context>{}));
  381|   616k|    }
  382|   616k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   616k|    {                                                                        \
  217|   616k|        return val;                                                          \
  218|   616k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  1.23M|{
  341|  1.23M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.23M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.23M|    constexpr bool scannable_char =
  345|  1.23M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.23M|    static_assert(scannable_char,
  347|  1.23M|                  "Cannot scan an argument of an unsupported character "
  348|  1.23M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.23M|    constexpr bool scannable_const =
  351|  1.23M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.23M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.23M|    constexpr bool scannable_disabled =
  355|  1.23M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.23M|    static_assert(scannable_disabled,
  357|  1.23M|                  "Cannot scan an argument that has been disabled by "
  358|  1.23M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.23M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.23M|    static_assert(
  362|  1.23M|        scannable,
  363|  1.23M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.23M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.23M|    return arg_value{arg};
  367|  1.23M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  1.23M|    {
  160|  1.23M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   560k|    {
  647|   560k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   470k|    {
  554|   470k|        return m_args;
  555|   470k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  56.8k|{
  400|  56.8k|    check_scan_arg_types<T>();
  401|       |
  402|  56.8k|    basic_scan_arg<Context> arg;
  403|  56.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  56.8k|    arg.m_value = make_value<Context>(value);
  405|  56.8k|    return arg;
  406|  56.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   778k|{
  619|   778k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   778k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   778k|    static_cast<    \
  |  |  247|   778k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   778k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  1.67M|{
  387|  1.67M|    static_assert(
  388|  1.67M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.67M|        "Scan argument types must be default constructible");
  390|  1.67M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.67M|                  "Scan argument types must be Destructible");
  392|  1.67M|    static_assert(
  393|  1.67M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.67M|        "Scan argument types must not be references");
  395|  1.67M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   778k|    {
  564|   778k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   778k|    {
  574|   778k|        return {
  575|   778k|            detail::make_arg<base::is_packed, Context,
  576|   778k|                             detail::mapped_type_constant<
  577|   778k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   778k|                args)...};
  579|   778k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   778k|{
  415|   778k|    return make_value<Context>(value);
  416|   778k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|   855k|{
  372|   855k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   855k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   855k|                                  needs_context_tag>) {
  376|   855k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   855k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   855k|    }
  378|   855k|    else {
  379|   855k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   855k|            value, context_tag<Context>{}));
  381|   855k|    }
  382|   855k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|   855k|    {                                                                        \
  217|   855k|        return val;                                                          \
  218|   855k|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  1.67M|{
  341|  1.67M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.67M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.67M|    constexpr bool scannable_char =
  345|  1.67M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.67M|    static_assert(scannable_char,
  347|  1.67M|                  "Cannot scan an argument of an unsupported character "
  348|  1.67M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.67M|    constexpr bool scannable_const =
  351|  1.67M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.67M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.67M|    constexpr bool scannable_disabled =
  355|  1.67M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.67M|    static_assert(scannable_disabled,
  357|  1.67M|                  "Cannot scan an argument that has been disabled by "
  358|  1.67M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.67M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.67M|    static_assert(
  362|  1.67M|        scannable,
  363|  1.67M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.67M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.67M|    return arg_value{arg};
  367|  1.67M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  1.67M|    {
  160|  1.67M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   778k|    {
  647|   778k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|   689k|    {
  554|   689k|        return m_args;
  555|   689k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  76.9k|{
  400|  76.9k|    check_scan_arg_types<T>();
  401|       |
  402|  76.9k|    basic_scan_arg<Context> arg;
  403|  76.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  76.9k|    arg.m_value = make_value<Context>(value);
  405|  76.9k|    return arg;
  406|  76.9k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   653k|{
  619|   653k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   653k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   653k|    static_cast<    \
  |  |  247|   653k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   653k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  1.42M|{
  387|  1.42M|    static_assert(
  388|  1.42M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.42M|        "Scan argument types must be default constructible");
  390|  1.42M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.42M|                  "Scan argument types must be Destructible");
  392|  1.42M|    static_assert(
  393|  1.42M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.42M|        "Scan argument types must not be references");
  395|  1.42M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   653k|    {
  564|   653k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   653k|    {
  574|   653k|        return {
  575|   653k|            detail::make_arg<base::is_packed, Context,
  576|   653k|                             detail::mapped_type_constant<
  577|   653k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   653k|                args)...};
  579|   653k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   653k|{
  415|   653k|    return make_value<Context>(value);
  416|   653k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|   718k|{
  372|   718k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   718k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   718k|                                  needs_context_tag>) {
  376|   718k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   718k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   718k|    }
  378|   718k|    else {
  379|   718k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   718k|            value, context_tag<Context>{}));
  381|   718k|    }
  382|   718k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|   718k|    {                                                                        \
  217|   718k|        return val;                                                          \
  218|   718k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  1.42M|{
  341|  1.42M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.42M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.42M|    constexpr bool scannable_char =
  345|  1.42M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.42M|    static_assert(scannable_char,
  347|  1.42M|                  "Cannot scan an argument of an unsupported character "
  348|  1.42M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.42M|    constexpr bool scannable_const =
  351|  1.42M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.42M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.42M|    constexpr bool scannable_disabled =
  355|  1.42M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.42M|    static_assert(scannable_disabled,
  357|  1.42M|                  "Cannot scan an argument that has been disabled by "
  358|  1.42M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.42M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.42M|    static_assert(
  362|  1.42M|        scannable,
  363|  1.42M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.42M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.42M|    return arg_value{arg};
  367|  1.42M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  1.42M|    {
  160|  1.42M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   653k|    {
  647|   653k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   564k|    {
  554|   564k|        return m_args;
  555|   564k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  64.2k|{
  400|  64.2k|    check_scan_arg_types<T>();
  401|       |
  402|  64.2k|    basic_scan_arg<Context> arg;
  403|  64.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  64.2k|    arg.m_value = make_value<Context>(value);
  405|  64.2k|    return arg;
  406|  64.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   792k|{
  619|   792k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   792k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   792k|    static_cast<    \
  |  |  247|   792k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   792k|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  1.70M|{
  387|  1.70M|    static_assert(
  388|  1.70M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.70M|        "Scan argument types must be default constructible");
  390|  1.70M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.70M|                  "Scan argument types must be Destructible");
  392|  1.70M|    static_assert(
  393|  1.70M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.70M|        "Scan argument types must not be references");
  395|  1.70M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   792k|    {
  564|   792k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   792k|    {
  574|   792k|        return {
  575|   792k|            detail::make_arg<base::is_packed, Context,
  576|   792k|                             detail::mapped_type_constant<
  577|   792k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   792k|                args)...};
  579|   792k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   792k|{
  415|   792k|    return make_value<Context>(value);
  416|   792k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|   871k|{
  372|   871k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   871k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   871k|                                  needs_context_tag>) {
  376|   871k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   871k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   871k|    }
  378|   871k|    else {
  379|   871k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   871k|            value, context_tag<Context>{}));
  381|   871k|    }
  382|   871k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|   871k|    {                                                                        \
  217|   871k|        return val;                                                          \
  218|   871k|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  1.70M|{
  341|  1.70M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.70M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.70M|    constexpr bool scannable_char =
  345|  1.70M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.70M|    static_assert(scannable_char,
  347|  1.70M|                  "Cannot scan an argument of an unsupported character "
  348|  1.70M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.70M|    constexpr bool scannable_const =
  351|  1.70M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.70M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.70M|    constexpr bool scannable_disabled =
  355|  1.70M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.70M|    static_assert(scannable_disabled,
  357|  1.70M|                  "Cannot scan an argument that has been disabled by "
  358|  1.70M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.70M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.70M|    static_assert(
  362|  1.70M|        scannable,
  363|  1.70M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.70M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.70M|    return arg_value{arg};
  367|  1.70M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  1.70M|    {
  160|  1.70M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   792k|    {
  647|   792k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|   703k|    {
  554|   703k|        return m_args;
  555|   703k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|  78.3k|{
  400|  78.3k|    check_scan_arg_types<T>();
  401|       |
  402|  78.3k|    basic_scan_arg<Context> arg;
  403|  78.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  78.3k|    arg.m_value = make_value<Context>(value);
  405|  78.3k|    return arg;
  406|  78.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   658k|{
  619|   658k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   658k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   658k|    static_cast<    \
  |  |  247|   658k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   658k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  1.43M|{
  387|  1.43M|    static_assert(
  388|  1.43M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.43M|        "Scan argument types must be default constructible");
  390|  1.43M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.43M|                  "Scan argument types must be Destructible");
  392|  1.43M|    static_assert(
  393|  1.43M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.43M|        "Scan argument types must not be references");
  395|  1.43M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   658k|    {
  564|   658k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   658k|    {
  574|   658k|        return {
  575|   658k|            detail::make_arg<base::is_packed, Context,
  576|   658k|                             detail::mapped_type_constant<
  577|   658k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   658k|                args)...};
  579|   658k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   658k|{
  415|   658k|    return make_value<Context>(value);
  416|   658k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|   722k|{
  372|   722k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   722k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   722k|                                  needs_context_tag>) {
  376|   722k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   722k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   722k|    }
  378|   722k|    else {
  379|   722k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   722k|            value, context_tag<Context>{}));
  381|   722k|    }
  382|   722k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|   722k|    {                                                                        \
  217|   722k|        return val;                                                          \
  218|   722k|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  1.43M|{
  341|  1.43M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.43M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.43M|    constexpr bool scannable_char =
  345|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.43M|    static_assert(scannable_char,
  347|  1.43M|                  "Cannot scan an argument of an unsupported character "
  348|  1.43M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.43M|    constexpr bool scannable_const =
  351|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.43M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.43M|    constexpr bool scannable_disabled =
  355|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.43M|    static_assert(scannable_disabled,
  357|  1.43M|                  "Cannot scan an argument that has been disabled by "
  358|  1.43M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.43M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.43M|    static_assert(
  362|  1.43M|        scannable,
  363|  1.43M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.43M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.43M|    return arg_value{arg};
  367|  1.43M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  1.43M|    {
  160|  1.43M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   658k|    {
  647|   658k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   569k|    {
  554|   569k|        return m_args;
  555|   569k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  64.5k|{
  400|  64.5k|    check_scan_arg_types<T>();
  401|       |
  402|  64.5k|    basic_scan_arg<Context> arg;
  403|  64.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  64.5k|    arg.m_value = make_value<Context>(value);
  405|  64.5k|    return arg;
  406|  64.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   563k|{
  619|   563k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   563k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   563k|    static_cast<    \
  |  |  247|   563k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   563k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   563k|    {
  564|   563k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   563k|    {
  574|   563k|        return {
  575|   563k|            detail::make_arg<base::is_packed, Context,
  576|   563k|                             detail::mapped_type_constant<
  577|   563k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   563k|                args)...};
  579|   563k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   563k|{
  415|   563k|    return make_value<Context>(value);
  416|   563k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|   617k|{
  372|   617k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   617k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   617k|                                  needs_context_tag>) {
  376|   617k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   617k|    }
  378|   617k|    else {
  379|   617k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   617k|            value, context_tag<Context>{}));
  381|   617k|    }
  382|   617k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|   617k|    {                                                                        \
  217|   617k|        return val;                                                          \
  218|   617k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   563k|    {
  647|   563k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  3.93M|    {
  694|  3.93M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   405k|    {
  554|   405k|        return m_args;
  555|   405k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  53.7k|{
  400|  53.7k|    check_scan_arg_types<T>();
  401|       |
  402|  53.7k|    basic_scan_arg<Context> arg;
  403|  53.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  53.7k|    arg.m_value = make_value<Context>(value);
  405|  53.7k|    return arg;
  406|  53.7k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  4.30M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   566k|{
  619|   566k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   566k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   566k|    static_cast<    \
  |  |  247|   566k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   566k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   566k|    {
  564|   566k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   566k|    {
  574|   566k|        return {
  575|   566k|            detail::make_arg<base::is_packed, Context,
  576|   566k|                             detail::mapped_type_constant<
  577|   566k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   566k|                args)...};
  579|   566k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   566k|{
  415|   566k|    return make_value<Context>(value);
  416|   566k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|   619k|{
  372|   619k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   619k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   619k|                                  needs_context_tag>) {
  376|   619k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   619k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   619k|    }
  378|   619k|    else {
  379|   619k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   619k|            value, context_tag<Context>{}));
  381|   619k|    }
  382|   619k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|   619k|    {                                                                        \
  217|   619k|        return val;                                                          \
  218|   619k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   566k|    {
  647|   566k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   407k|    {
  554|   407k|        return m_args;
  555|   407k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  52.9k|{
  400|  52.9k|    check_scan_arg_types<T>();
  401|       |
  402|  52.9k|    basic_scan_arg<Context> arg;
  403|  52.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  52.9k|    arg.m_value = make_value<Context>(value);
  405|  52.9k|    return arg;
  406|  52.9k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   749k|{
  619|   749k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   749k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   749k|    static_cast<    \
  |  |  247|   749k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   749k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   749k|    {
  564|   749k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   749k|    {
  574|   749k|        return {
  575|   749k|            detail::make_arg<base::is_packed, Context,
  576|   749k|                             detail::mapped_type_constant<
  577|   749k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   749k|                args)...};
  579|   749k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   749k|{
  415|   749k|    return make_value<Context>(value);
  416|   749k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|   819k|{
  372|   819k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   819k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   819k|                                  needs_context_tag>) {
  376|   819k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   819k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   819k|    }
  378|   819k|    else {
  379|   819k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   819k|            value, context_tag<Context>{}));
  381|   819k|    }
  382|   819k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|   819k|    {                                                                        \
  217|   819k|        return val;                                                          \
  218|   819k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   749k|    {
  647|   749k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|   590k|    {
  554|   590k|        return m_args;
  555|   590k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  70.3k|{
  400|  70.3k|    check_scan_arg_types<T>();
  401|       |
  402|  70.3k|    basic_scan_arg<Context> arg;
  403|  70.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  70.3k|    arg.m_value = make_value<Context>(value);
  405|  70.3k|    return arg;
  406|  70.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   648k|{
  619|   648k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   648k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   648k|    static_cast<    \
  |  |  247|   648k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   648k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   648k|    {
  564|   648k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   648k|    {
  574|   648k|        return {
  575|   648k|            detail::make_arg<base::is_packed, Context,
  576|   648k|                             detail::mapped_type_constant<
  577|   648k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   648k|                args)...};
  579|   648k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   648k|{
  415|   648k|    return make_value<Context>(value);
  416|   648k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|   708k|{
  372|   708k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   708k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   708k|                                  needs_context_tag>) {
  376|   708k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   708k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   708k|    }
  378|   708k|    else {
  379|   708k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   708k|            value, context_tag<Context>{}));
  381|   708k|    }
  382|   708k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|   708k|    {                                                                        \
  217|   708k|        return val;                                                          \
  218|   708k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   648k|    {
  647|   648k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   489k|    {
  554|   489k|        return m_args;
  555|   489k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  59.8k|{
  400|  59.8k|    check_scan_arg_types<T>();
  401|       |
  402|  59.8k|    basic_scan_arg<Context> arg;
  403|  59.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  59.8k|    arg.m_value = make_value<Context>(value);
  405|  59.8k|    return arg;
  406|  59.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   759k|{
  619|   759k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   759k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   759k|    static_cast<    \
  |  |  247|   759k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   759k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   759k|    {
  564|   759k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   759k|    {
  574|   759k|        return {
  575|   759k|            detail::make_arg<base::is_packed, Context,
  576|   759k|                             detail::mapped_type_constant<
  577|   759k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   759k|                args)...};
  579|   759k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   759k|{
  415|   759k|    return make_value<Context>(value);
  416|   759k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|   831k|{
  372|   831k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   831k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   831k|                                  needs_context_tag>) {
  376|   831k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   831k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   831k|    }
  378|   831k|    else {
  379|   831k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   831k|            value, context_tag<Context>{}));
  381|   831k|    }
  382|   831k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|   831k|    {                                                                        \
  217|   831k|        return val;                                                          \
  218|   831k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   759k|    {
  647|   759k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|   601k|    {
  554|   601k|        return m_args;
  555|   601k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|  71.4k|{
  400|  71.4k|    check_scan_arg_types<T>();
  401|       |
  402|  71.4k|    basic_scan_arg<Context> arg;
  403|  71.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  71.4k|    arg.m_value = make_value<Context>(value);
  405|  71.4k|    return arg;
  406|  71.4k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   651k|{
  619|   651k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   651k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   651k|    static_cast<    \
  |  |  247|   651k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   651k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   651k|    {
  564|   651k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   651k|    {
  574|   651k|        return {
  575|   651k|            detail::make_arg<base::is_packed, Context,
  576|   651k|                             detail::mapped_type_constant<
  577|   651k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   651k|                args)...};
  579|   651k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   651k|{
  415|   651k|    return make_value<Context>(value);
  416|   651k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|   711k|{
  372|   711k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   711k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   711k|                                  needs_context_tag>) {
  376|   711k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   711k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   711k|    }
  378|   711k|    else {
  379|   711k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   711k|            value, context_tag<Context>{}));
  381|   711k|    }
  382|   711k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|   711k|    {                                                                        \
  217|   711k|        return val;                                                          \
  218|   711k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   651k|    {
  647|   651k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   493k|    {
  554|   493k|        return m_args;
  555|   493k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  60.1k|{
  400|  60.1k|    check_scan_arg_types<T>();
  401|       |
  402|  60.1k|    basic_scan_arg<Context> arg;
  403|  60.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  60.1k|    arg.m_value = make_value<Context>(value);
  405|  60.1k|    return arg;
  406|  60.1k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  4.00M|    {
  682|  4.00M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.00M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  4.00M|        return static_cast<std::size_t>(m_desc &
  687|  4.00M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  4.00M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  8.00M|    {
  702|  8.00M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  8.00M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  4.00M|    {
  655|  4.00M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.00M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  4.00M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  4.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.00M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  4.00M|        const auto t = type(id);
  667|  4.00M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  4.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.00M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  4.00M|        basic_scan_arg<Context> arg;
  672|  4.00M|        arg.m_type = t;
  673|  4.00M|        arg.m_value = m_values[id];
  674|  4.00M|        return arg;
  675|  4.00M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  4.00M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  4.00M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  4.00M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  4.00M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  4.00M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  7.44M|    {
  483|  7.44M|        return m_type != detail::arg_type::none_type;
  484|  7.44M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  6.40M|    {
  488|  6.40M|        return m_type;
  489|  6.40M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  3.93M|    {
  682|  3.93M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.93M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  3.93M|        return static_cast<std::size_t>(m_desc &
  687|  3.93M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  3.93M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  7.87M|    {
  702|  7.87M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  7.87M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  3.93M|    {
  655|  3.93M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  3.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.93M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  3.93M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  3.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.93M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  3.93M|        const auto t = type(id);
  667|  3.93M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  3.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.93M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  3.93M|        basic_scan_arg<Context> arg;
  672|  3.93M|        arg.m_type = t;
  673|  3.93M|        arg.m_value = m_values[id];
  674|  3.93M|        return arg;
  675|  3.93M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  3.93M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  3.93M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  3.93M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  3.93M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  3.93M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  7.22M|    {
  483|  7.22M|        return m_type != detail::arg_type::none_type;
  484|  7.22M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  6.40M|    {
  488|  6.40M|        return m_type;
  489|  6.40M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   398k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   368k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   240k|    {
  109|   240k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  3.20M|    {
   60|  3.20M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   401k|    {
  124|   401k|        return m_current;
  125|   401k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  3.20M|    {
   43|  3.20M|        return m_args.get(id);
   44|  3.20M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  3.04M|    {
   53|  3.04M|        return m_locale;
   54|  3.04M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   160k|    {
  132|   160k|        return ranges_std::default_sentinel;
  133|   160k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   160k|    {
  140|   160k|        return ranges::subrange{begin(), end()};
  141|   160k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   428k|    {
  109|   428k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  3.20M|    {
   60|  3.20M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   713k|    {
  124|   713k|        return m_current;
  125|   713k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  3.20M|    {
   43|  3.20M|        return m_args.get(id);
   44|  3.20M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  2.91M|    {
   53|  2.91M|        return m_locale;
   54|  2.91M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   285k|    {
  132|   285k|        return ranges_std::default_sentinel;
  133|   285k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   285k|    {
  140|   285k|        return ranges::subrange{begin(), end()};
  141|   285k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  2.15M|    {
   69|  2.15M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  2.15M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  2.15M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  30.8M|    {
   75|  30.8M|        return m_code == good;
   76|  30.8M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   891k|    {
   86|   891k|        return m_code;
   87|   891k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   891k|{
  111|   891k|    return a.code() == b;
  112|   891k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   891k|{
  116|   891k|    return !(a == b);
  117|   891k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  18.7M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   513k|    {
  675|   513k|        return m_str;
  676|   513k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  4.00M|{
  385|  4.00M|    return s;
  386|  4.00M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  4.00M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   513k|    {
  671|   513k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   515k|    {
  675|   515k|        return m_str;
  676|   515k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   515k|    {
  671|   515k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   733k|    {
  675|   733k|        return m_str;
  676|   733k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   733k|    {
  671|   733k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   609k|    {
  675|   609k|        return m_str;
  676|   609k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   609k|    {
  671|   609k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   748k|    {
  675|   748k|        return m_str;
  676|   748k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   748k|    {
  671|   748k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   613k|    {
  675|   613k|        return m_str;
  676|   613k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   613k|    {
  671|   613k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  44.5k|    {
  675|  44.5k|        return m_str;
  676|  44.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  44.5k|    {
  671|  44.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  44.5k|    {
  675|  44.5k|        return m_str;
  676|  44.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  44.5k|    {
  671|  44.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  44.5k|    {
  675|  44.5k|        return m_str;
  676|  44.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  44.5k|    {
  671|  44.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  44.5k|    {
  675|  44.5k|        return m_str;
  676|  44.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  44.5k|    {
  671|  44.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  44.5k|    {
  675|  44.5k|        return m_str;
  676|  44.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  44.5k|    {
  671|  44.5k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  44.5k|    {
  675|  44.5k|        return m_str;
  676|  44.5k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  44.5k|    {
  671|  44.5k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   484k|    {
  675|   484k|        return m_str;
  676|   484k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  3.93M|{
  390|  3.93M|    return s;
  391|  3.93M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  3.93M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   484k|    {
  671|   484k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   486k|    {
  675|   486k|        return m_str;
  676|   486k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   486k|    {
  671|   486k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   669k|    {
  675|   669k|        return m_str;
  676|   669k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   669k|    {
  671|   669k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   569k|    {
  675|   569k|        return m_str;
  676|   569k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   569k|    {
  671|   569k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   680k|    {
  675|   680k|        return m_str;
  676|   680k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   680k|    {
  671|   680k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   572k|    {
  675|   572k|        return m_str;
  676|   572k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   572k|    {
  671|   572k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  79.3k|    {
  675|  79.3k|        return m_str;
  676|  79.3k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  79.3k|    {
  671|  79.3k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  79.3k|    {
  675|  79.3k|        return m_str;
  676|  79.3k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  79.3k|    {
  671|  79.3k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  79.3k|    {
  675|  79.3k|        return m_str;
  676|  79.3k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  79.3k|    {
  671|  79.3k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  79.3k|    {
  675|  79.3k|        return m_str;
  676|  79.3k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  79.3k|    {
  671|  79.3k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  79.3k|    {
  675|  79.3k|        return m_str;
  676|  79.3k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  79.3k|    {
  671|  79.3k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  79.3k|    {
  675|  79.3k|        return m_str;
  676|  79.3k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  79.3k|    {
  671|  79.3k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  5.92M|    {
  196|  5.92M|        SCN_GCC_COMPAT_PUSH
  197|  5.92M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  5.92M|        switch (type) {
  199|  1.54M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 1.54M, False: 4.37M]
  ------------------
  200|  3.06M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 1.52M, False: 4.39M]
  ------------------
  201|  3.06M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 5.92M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   282k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 282k, False: 5.63M]
  ------------------
  206|   282k|                return 2;
  207|   488k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 488k, False: 5.43M]
  ------------------
  208|   488k|                return 8;
  209|   976k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 976k, False: 4.94M]
  ------------------
  210|   976k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 5.92M]
  ------------------
  211|   976k|                return 10;
  212|  1.10M|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 1.10M, False: 4.81M]
  ------------------
  213|  1.10M|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 5.92M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  5.92M|        }
  219|  5.92M|        SCN_GCC_COMPAT_POP
  220|  5.92M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  6.40M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  1.55M|    {
  245|  1.55M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  1.55M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  1.55M|            m_specs.localized = true;
  247|  1.55M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  1.55M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  4.55M|    {
  260|  4.55M|        m_specs.type = type;
  261|  4.55M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   297k|    {
  322|   297k|        SCN_UNLIKELY_ATTR
  323|   297k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   297k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  6.10M|    {
  333|  6.10M|        return static_cast<bool>(m_error);
  334|  6.10M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.55M|{
  987|  1.55M|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 1.55M]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|   225k|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 225k, False: 1.32M]
  ------------------
  992|   225k|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.55M]
  ------------------
  993|   524k|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 298k, False: 1.25M]
  ------------------
  994|   524k|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.55M]
  ------------------
  995|   829k|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 305k, False: 1.24M]
  ------------------
  996|   829k|            return arg_type_category::integer;
  997|       |
  998|   222k|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 222k, False: 1.33M]
  ------------------
  999|   222k|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.55M]
  ------------------
 1000|   472k|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 250k, False: 1.30M]
  ------------------
 1001|   472k|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.55M]
  ------------------
 1002|   725k|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 252k, False: 1.30M]
  ------------------
 1003|   725k|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 1.55M]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 1.55M]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 1.55M]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 1.55M]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.55M]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 1.55M]
  ------------------
 1015|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 1.55M]
  ------------------
 1016|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 1.55M]
  ------------------
 1017|      0|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 1.55M]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 1.55M]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 1.55M]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 1.55M]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.55M]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.55M]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.55M|            SCN_CLANG_POP
 1034|  1.55M|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.55M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  2.96M|{
  968|  2.96M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  2.96M|    handler.check_args_exhausted();
  970|  2.96M|    return handler.get_error();
  971|  2.96M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  2.96M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  2.96M|    auto begin = format.data();
  937|  2.96M|    auto it = begin;
  938|  2.96M|    const auto end = format.data() + format.size();
  939|       |
  940|  5.68M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 2.96M, False: 2.72M]
  ------------------
  941|  2.96M|        const auto ch = *it++;
  942|  2.96M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 2.96M, False: 0]
  ------------------
  943|  2.96M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  2.96M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  2.96M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 240k, False: 2.72M]
  ------------------
  947|   240k|                return;
  948|   240k|            }
  949|  2.96M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  2.96M|    }
  960|       |
  961|  2.72M|    handler.on_literal_text(begin, end);
  962|  2.72M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  2.96M|{
  866|  2.96M|    struct id_adapter {
  867|  2.96M|        constexpr void operator()()
  868|  2.96M|        {
  869|  2.96M|            arg_id = handler.on_arg_id();
  870|  2.96M|        }
  871|  2.96M|        constexpr void operator()(std::size_t id)
  872|  2.96M|        {
  873|  2.96M|            arg_id = handler.on_arg_id(id);
  874|  2.96M|        }
  875|       |
  876|  2.96M|        constexpr void on_error(const char* msg)
  877|  2.96M|        {
  878|  2.96M|            SCN_UNLIKELY_ATTR
  879|  2.96M|            handler.on_error(msg);
  880|  2.96M|        }
  881|       |
  882|  2.96M|        Handler& handler;
  883|  2.96M|        std::size_t arg_id;
  884|  2.96M|    };
  885|       |
  886|  2.96M|    ++begin;
  887|  2.96M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.96M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  2.96M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 2.96M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  2.96M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 2.96M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  2.96M|    else {
  899|  2.96M|        auto adapter = id_adapter{handler, 0};
  900|  2.96M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  2.96M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.96M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  2.96M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 2.96M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  2.96M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 2.96M, False: 0]
  ------------------
  911|  2.96M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.96M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  2.96M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  2.96M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  5.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 80.2k, False: 2.88M]
  |  |  |  Branch (153:45): [True: 0, False: 2.96M]
  |  |  |  Branch (153:45): [True: 80.2k, False: 2.88M]
  |  |  ------------------
  ------------------
  917|  80.2k|                handler.on_error("Unknown format specifier");
  918|  80.2k|                return begin;
  919|  80.2k|            }
  920|  2.96M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  2.96M|    }
  927|  2.88M|    return begin + 1;
  928|  2.96M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  2.96M|{
  400|  2.96M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  2.96M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 2.96M, False: 0]
  |  Branch (401:26): [True: 0, False: 2.96M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  2.96M|    handler();
  406|  2.96M|    return begin;
  407|  2.96M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  2.96M|        {
  869|  2.96M|            arg_id = handler.on_arg_id();
  870|  2.96M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  2.96M|    {
 1046|  2.96M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  2.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  2.96M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  2.96M|{
  795|  2.96M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.96M|        if (*begin == CharT{'['}) {
  797|  2.96M|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.96M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  2.96M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  2.96M|                return begin;
  803|  2.96M|            }
  804|  2.96M|            handler.on_character_set_string(set);
  805|  2.96M|            return begin;
  806|  2.96M|        }
  807|  2.96M|        if (*begin == CharT{'/'}) {
  808|  2.96M|            return parse_presentation_regex(begin, end, handler);
  809|  2.96M|        }
  810|  2.96M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.96M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  2.96M|            handler.on_error("Invalid type specifier in format string");
  813|  2.96M|            return begin;
  814|  2.96M|        }
  815|  2.96M|        handler.on_type(type);
  816|  2.96M|        return begin;
  817|  2.96M|    };
  818|       |
  819|  2.96M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 2.96M, False: 0]
  |  Branch (819:28): [True: 2.91M, False: 53.4k]
  ------------------
  820|  2.96M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.88M, False: 26.7k]
  |  Branch (820:36): [True: 2.09M, False: 784k]
  ------------------
  821|  2.09M|        return do_presentation();
  822|  2.09M|    }
  823|       |
  824|   864k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 864k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   864k|    begin = parse_align(begin, end, handler);
  830|   864k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 864k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   864k|    begin = parse_width(begin, end, handler);
  836|   864k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 864k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   864k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 784k, False: 80.2k]
  ------------------
  842|   784k|        handler.on_localized();
  843|   784k|        ++begin;
  844|   784k|    }
  845|   864k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 864k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   864k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 864k, False: 0]
  |  Branch (850:25): [True: 80.2k, False: 784k]
  ------------------
  851|  80.2k|        do_presentation();
  852|  80.2k|    }
  853|   864k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 864k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   864k|    return begin;
  859|   864k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  3.09M|{
  464|  3.09M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.23M, False: 864k]
  |  Branch (464:33): [True: 2.23M, False: 0]
  ------------------
  465|  3.09M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 810k, False: 53.4k]
  |  Branch (465:33): [True: 810k, False: 0]
  ------------------
  466|  3.09M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  2.17M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.17M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 2.17M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  2.17M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 2.17M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  2.17M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.17M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 53.4k, False: 2.12M]
  |  |  ------------------
  ------------------
  812|  53.4k|            handler.on_error("Invalid type specifier in format string");
  813|  53.4k|            return begin;
  814|  53.4k|        }
  815|  2.12M|        handler.on_type(type);
  816|  2.12M|        return begin;
  817|  2.17M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  2.39M|{
  412|  2.39M|    switch (type) {
  413|   124k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 124k, False: 2.26M]
  ------------------
  414|   177k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 53.4k, False: 2.34M]
  ------------------
  415|   177k|            return presentation_type::int_binary;
  416|   502k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 502k, False: 1.89M]
  ------------------
  417|   502k|            return presentation_type::int_decimal;
  418|   796k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 796k, False: 1.59M]
  ------------------
  419|   796k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.39M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   238k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 238k, False: 2.15M]
  ------------------
  423|   238k|            return presentation_type::int_octal;
  424|   571k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 571k, False: 1.82M]
  ------------------
  425|   571k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.39M]
  ------------------
  426|   571k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.39M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.39M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.39M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.39M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.39M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.39M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.39M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.39M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.39M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.39M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.39M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.39M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.39M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.39M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.39M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.39M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   106k|        default:
  ------------------
  |  Branch (456:9): [True: 106k, False: 2.28M]
  ------------------
  457|   106k|            return presentation_type::none;
  458|  2.39M|    }
  459|  2.39M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   864k|{
  489|   864k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   864k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   864k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   864k|        switch (ch) {
  493|   864k|            case L'<':
  494|   864k|                return align_type::left;
  495|   864k|            case L'>':
  496|   864k|                return align_type::right;
  497|   864k|            case L'^':
  498|   864k|                return align_type::center;
  499|   864k|            default:
  500|   864k|                return align_type::none;
  501|   864k|        }
  502|   864k|    };
  503|       |
  504|   864k|    auto potential_fill_len = code_point_length(begin, end);
  505|   864k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 864k]
  |  |  |  Branch (153:45): [True: 0, False: 864k]
  |  |  |  Branch (153:45): [True: 0, False: 864k]
  |  |  ------------------
  ------------------
  506|   864k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   864k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   864k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   864k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   864k|    const auto begin_before_fill = begin;
  516|   864k|    begin += potential_fill_len;
  517|       |
  518|   864k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 864k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   864k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   864k|    const auto begin_after_fill = begin;
  524|   864k|    ++begin;
  525|       |
  526|   864k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 864k, False: 0]
  ------------------
  527|   864k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 864k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   864k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 864k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   864k|    }
  535|       |
  536|   864k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 864k, False: 0]
  ------------------
  537|   864k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 864k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   864k|        return begin_before_fill;
  542|   864k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   864k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   971k|{
  471|   971k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   971k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   971k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   971k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   971k|        return 1;
  474|   971k|    }
  475|   971k|    else {
  476|   971k|        const auto lengths =
  477|   971k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   971k|            "\3\4";
  479|   971k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   971k|        return len;
  481|   971k|    }
  482|   971k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.72M|    auto check_align = [](wchar_t ch) {
  492|  1.72M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.72M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.72M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.72M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.72M|            default:
  ------------------
  |  Branch (499:13): [True: 1.72M, False: 0]
  ------------------
  500|  1.72M|                return align_type::none;
  501|  1.72M|        }
  502|  1.72M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   864k|{
  554|   864k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   864k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   864k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   864k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 810k, False: 53.4k]
  |  Branch (556:33): [True: 0, False: 810k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   864k|    return begin;
  567|   864k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   784k|    {
 1051|   784k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   784k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 363k, False: 421k]
  ------------------
 1053|   784k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 363k]
  ------------------
 1054|   784k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   784k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   784k|        Handler::on_localized();
 1063|   784k|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  5.96M|{
 1073|  5.96M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  5.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.96M]
  |  |  ------------------
  ------------------
 1074|      0|        return handler.on_error("Invalid type specifier for integer type");
 1075|      0|    }
 1076|  5.96M|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 1.55M, False: 4.40M]
  ------------------
 1077|  1.55M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.55M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|            return;
 1082|      0|        }
 1083|  1.55M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.55M]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|  1.55M|    }
 1089|  5.96M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   240k|{
  968|   240k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   240k|    handler.check_args_exhausted();
  970|   240k|    return handler.get_error();
  971|   240k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   240k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   240k|    auto begin = format.data();
  937|   240k|    auto it = begin;
  938|   240k|    const auto end = format.data() + format.size();
  939|       |
  940|   240k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 240k, False: 0]
  ------------------
  941|   240k|        const auto ch = *it++;
  942|   240k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 240k, False: 0]
  ------------------
  943|   240k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   240k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   240k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 240k, False: 0]
  ------------------
  947|   240k|                return;
  948|   240k|            }
  949|   240k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   240k|    }
  960|       |
  961|      0|    handler.on_literal_text(begin, end);
  962|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|   240k|{
  866|   240k|    struct id_adapter {
  867|   240k|        constexpr void operator()()
  868|   240k|        {
  869|   240k|            arg_id = handler.on_arg_id();
  870|   240k|        }
  871|   240k|        constexpr void operator()(std::size_t id)
  872|   240k|        {
  873|   240k|            arg_id = handler.on_arg_id(id);
  874|   240k|        }
  875|       |
  876|   240k|        constexpr void on_error(const char* msg)
  877|   240k|        {
  878|   240k|            SCN_UNLIKELY_ATTR
  879|   240k|            handler.on_error(msg);
  880|   240k|        }
  881|       |
  882|   240k|        Handler& handler;
  883|   240k|        std::size_t arg_id;
  884|   240k|    };
  885|       |
  886|   240k|    ++begin;
  887|   240k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   240k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 240k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   240k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 240k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   240k|    else {
  899|   240k|        auto adapter = id_adapter{handler, 0};
  900|   240k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   240k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   240k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 240k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   240k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 240k, False: 0]
  ------------------
  911|   240k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   240k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   240k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 80.2k, False: 160k]
  |  |  |  Branch (153:45): [True: 0, False: 240k]
  |  |  |  Branch (153:45): [True: 80.2k, False: 160k]
  |  |  ------------------
  ------------------
  917|  80.2k|                handler.on_error("Unknown format specifier");
  918|  80.2k|                return begin;
  919|  80.2k|            }
  920|   240k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   240k|    }
  927|   160k|    return begin + 1;
  928|   240k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   240k|{
  400|   240k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   240k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   240k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   240k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 240k, False: 0]
  |  Branch (401:26): [True: 0, False: 240k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   240k|    handler();
  406|   240k|    return begin;
  407|   240k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   240k|        {
  869|   240k|            arg_id = handler.on_arg_id();
  870|   240k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   240k|    {
 1046|   240k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   240k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   240k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   240k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|   240k|{
  795|   240k|    auto do_presentation = [&]() -> const CharT* {
  796|   240k|        if (*begin == CharT{'['}) {
  797|   240k|            auto set = parse_presentation_set(begin, end, handler);
  798|   240k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   240k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   240k|                return begin;
  803|   240k|            }
  804|   240k|            handler.on_character_set_string(set);
  805|   240k|            return begin;
  806|   240k|        }
  807|   240k|        if (*begin == CharT{'/'}) {
  808|   240k|            return parse_presentation_regex(begin, end, handler);
  809|   240k|        }
  810|   240k|        presentation_type type = parse_presentation_type(*begin++);
  811|   240k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   240k|            handler.on_error("Invalid type specifier in format string");
  813|   240k|            return begin;
  814|   240k|        }
  815|   240k|        handler.on_type(type);
  816|   240k|        return begin;
  817|   240k|    };
  818|       |
  819|   240k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 240k, False: 0]
  |  Branch (819:28): [True: 187k, False: 53.4k]
  ------------------
  820|   240k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 160k, False: 26.7k]
  |  Branch (820:36): [True: 133k, False: 26.7k]
  ------------------
  821|   133k|        return do_presentation();
  822|   133k|    }
  823|       |
  824|   106k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   106k|    begin = parse_align(begin, end, handler);
  830|   106k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   106k|    begin = parse_width(begin, end, handler);
  836|   106k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   106k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 26.7k, False: 80.2k]
  ------------------
  842|  26.7k|        handler.on_localized();
  843|  26.7k|        ++begin;
  844|  26.7k|    }
  845|   106k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   106k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 106k, False: 0]
  |  Branch (850:25): [True: 80.2k, False: 26.7k]
  ------------------
  851|  80.2k|        do_presentation();
  852|  80.2k|    }
  853|   106k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   106k|    return begin;
  859|   106k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   213k|    auto do_presentation = [&]() -> const CharT* {
  796|   213k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 213k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   213k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 213k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   213k|        presentation_type type = parse_presentation_type(*begin++);
  811|   213k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 53.4k, False: 160k]
  |  |  ------------------
  ------------------
  812|  53.4k|            handler.on_error("Invalid type specifier in format string");
  813|  53.4k|            return begin;
  814|  53.4k|        }
  815|   160k|        handler.on_type(type);
  816|   160k|        return begin;
  817|   213k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|   106k|{
  489|   106k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   106k|        switch (ch) {
  493|   106k|            case L'<':
  494|   106k|                return align_type::left;
  495|   106k|            case L'>':
  496|   106k|                return align_type::right;
  497|   106k|            case L'^':
  498|   106k|                return align_type::center;
  499|   106k|            default:
  500|   106k|                return align_type::none;
  501|   106k|        }
  502|   106k|    };
  503|       |
  504|   106k|    auto potential_fill_len = code_point_length(begin, end);
  505|   106k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 106k]
  |  |  |  Branch (153:45): [True: 0, False: 106k]
  |  |  |  Branch (153:45): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
  506|   106k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   106k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   106k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   106k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   106k|    const auto begin_before_fill = begin;
  516|   106k|    begin += potential_fill_len;
  517|       |
  518|   106k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 106k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   106k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   106k|    const auto begin_after_fill = begin;
  524|   106k|    ++begin;
  525|       |
  526|   106k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 106k, False: 0]
  ------------------
  527|   106k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   106k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 106k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   106k|    }
  535|       |
  536|   106k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 106k, False: 0]
  ------------------
  537|   106k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 106k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   106k|        return begin_before_fill;
  542|   106k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   106k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   213k|    auto check_align = [](wchar_t ch) {
  492|   213k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 213k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 213k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 213k]
  ------------------
  498|      0|                return align_type::center;
  499|   213k|            default:
  ------------------
  |  Branch (499:13): [True: 213k, False: 0]
  ------------------
  500|   213k|                return align_type::none;
  501|   213k|        }
  502|   213k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|   106k|{
  554|   106k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   106k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 53.4k, False: 53.4k]
  |  Branch (556:33): [True: 0, False: 53.4k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   106k|    return begin;
  567|   106k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  26.7k|    {
 1051|  26.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  26.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 13.3k, False: 13.3k]
  ------------------
 1053|  26.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 13.3k]
  ------------------
 1054|  26.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  26.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  26.7k|        Handler::on_localized();
 1063|  26.7k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  2.77M|{
  968|  2.77M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  2.77M|    handler.check_args_exhausted();
  970|  2.77M|    return handler.get_error();
  971|  2.77M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  2.77M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  2.77M|    auto begin = format.data();
  937|  2.77M|    auto it = begin;
  938|  2.77M|    const auto end = format.data() + format.size();
  939|       |
  940|  5.12M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 2.77M, False: 2.34M]
  ------------------
  941|  2.77M|        const auto ch = *it++;
  942|  2.77M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 2.77M, False: 0]
  ------------------
  943|  2.77M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  2.77M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  2.77M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 428k, False: 2.34M]
  ------------------
  947|   428k|                return;
  948|   428k|            }
  949|  2.77M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  2.77M|    }
  960|       |
  961|  2.34M|    handler.on_literal_text(begin, end);
  962|  2.34M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  2.77M|{
  866|  2.77M|    struct id_adapter {
  867|  2.77M|        constexpr void operator()()
  868|  2.77M|        {
  869|  2.77M|            arg_id = handler.on_arg_id();
  870|  2.77M|        }
  871|  2.77M|        constexpr void operator()(std::size_t id)
  872|  2.77M|        {
  873|  2.77M|            arg_id = handler.on_arg_id(id);
  874|  2.77M|        }
  875|       |
  876|  2.77M|        constexpr void on_error(const char* msg)
  877|  2.77M|        {
  878|  2.77M|            SCN_UNLIKELY_ATTR
  879|  2.77M|            handler.on_error(msg);
  880|  2.77M|        }
  881|       |
  882|  2.77M|        Handler& handler;
  883|  2.77M|        std::size_t arg_id;
  884|  2.77M|    };
  885|       |
  886|  2.77M|    ++begin;
  887|  2.77M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.77M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  2.77M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 2.77M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  2.77M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 2.77M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  2.77M|    else {
  899|  2.77M|        auto adapter = id_adapter{handler, 0};
  900|  2.77M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  2.77M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.77M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  2.77M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 2.77M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  2.77M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 2.77M, False: 0]
  ------------------
  911|  2.77M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  2.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.77M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  2.77M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  2.77M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  5.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 2.63M]
  |  |  |  Branch (153:45): [True: 0, False: 2.77M]
  |  |  |  Branch (153:45): [True: 142k, False: 2.63M]
  |  |  ------------------
  ------------------
  917|   142k|                handler.on_error("Unknown format specifier");
  918|   142k|                return begin;
  919|   142k|            }
  920|  2.77M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  2.77M|    }
  927|  2.63M|    return begin + 1;
  928|  2.77M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  2.77M|{
  400|  2.77M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  2.77M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 2.77M, False: 0]
  |  Branch (401:26): [True: 0, False: 2.77M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  2.77M|    handler();
  406|  2.77M|    return begin;
  407|  2.77M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  2.77M|        {
  869|  2.77M|            arg_id = handler.on_arg_id();
  870|  2.77M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  2.77M|    {
 1046|  2.77M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  2.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  2.77M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  2.77M|{
  795|  2.77M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.77M|        if (*begin == CharT{'['}) {
  797|  2.77M|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.77M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  2.77M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  2.77M|                return begin;
  803|  2.77M|            }
  804|  2.77M|            handler.on_character_set_string(set);
  805|  2.77M|            return begin;
  806|  2.77M|        }
  807|  2.77M|        if (*begin == CharT{'/'}) {
  808|  2.77M|            return parse_presentation_regex(begin, end, handler);
  809|  2.77M|        }
  810|  2.77M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.77M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  2.77M|            handler.on_error("Invalid type specifier in format string");
  813|  2.77M|            return begin;
  814|  2.77M|        }
  815|  2.77M|        handler.on_type(type);
  816|  2.77M|        return begin;
  817|  2.77M|    };
  818|       |
  819|  2.77M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 2.77M, False: 0]
  |  Branch (819:28): [True: 2.67M, False: 95.1k]
  ------------------
  820|  2.77M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.63M, False: 47.5k]
  |  Branch (820:36): [True: 1.93M, False: 696k]
  ------------------
  821|  1.93M|        return do_presentation();
  822|  1.93M|    }
  823|       |
  824|   839k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 839k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   839k|    begin = parse_align(begin, end, handler);
  830|   839k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 839k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   839k|    begin = parse_width(begin, end, handler);
  836|   839k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 839k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   839k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 696k, False: 142k]
  ------------------
  842|   696k|        handler.on_localized();
  843|   696k|        ++begin;
  844|   696k|    }
  845|   839k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 839k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   839k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 839k, False: 0]
  |  Branch (850:25): [True: 142k, False: 696k]
  ------------------
  851|   142k|        do_presentation();
  852|   142k|    }
  853|   839k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 839k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   839k|    return begin;
  859|   839k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  3.01M|{
  464|  3.01M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.17M, False: 839k]
  |  Branch (464:33): [True: 2.17M, False: 0]
  ------------------
  465|  3.01M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 743k, False: 95.1k]
  |  Branch (465:33): [True: 743k, False: 0]
  ------------------
  466|  3.01M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  2.07M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.07M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 2.07M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  2.07M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 2.07M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  2.07M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.07M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 95.1k, False: 1.98M]
  |  |  ------------------
  ------------------
  812|  95.1k|            handler.on_error("Invalid type specifier in format string");
  813|  95.1k|            return begin;
  814|  95.1k|        }
  815|  1.98M|        handler.on_type(type);
  816|  1.98M|        return begin;
  817|  2.07M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  2.45M|{
  412|  2.45M|    switch (type) {
  413|   159k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 159k, False: 2.29M]
  ------------------
  414|   255k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 95.1k, False: 2.36M]
  ------------------
  415|   255k|            return presentation_type::int_binary;
  416|   480k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 480k, False: 1.97M]
  ------------------
  417|   480k|            return presentation_type::int_decimal;
  418|   736k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 736k, False: 1.72M]
  ------------------
  419|   736k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.45M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   253k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 253k, False: 2.20M]
  ------------------
  423|   253k|            return presentation_type::int_octal;
  424|   541k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 541k, False: 1.91M]
  ------------------
  425|   541k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.45M]
  ------------------
  426|   541k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.45M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.45M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.45M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.45M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.45M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.45M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.45M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.45M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.45M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.45M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.45M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.45M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.45M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.45M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.45M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.45M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   190k|        default:
  ------------------
  |  Branch (456:9): [True: 190k, False: 2.26M]
  ------------------
  457|   190k|            return presentation_type::none;
  458|  2.45M|    }
  459|  2.45M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   839k|{
  489|   839k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   839k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   839k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   839k|        switch (ch) {
  493|   839k|            case L'<':
  494|   839k|                return align_type::left;
  495|   839k|            case L'>':
  496|   839k|                return align_type::right;
  497|   839k|            case L'^':
  498|   839k|                return align_type::center;
  499|   839k|            default:
  500|   839k|                return align_type::none;
  501|   839k|        }
  502|   839k|    };
  503|       |
  504|   839k|    auto potential_fill_len = code_point_length(begin, end);
  505|   839k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 839k]
  |  |  |  Branch (153:45): [True: 0, False: 839k]
  |  |  |  Branch (153:45): [True: 0, False: 839k]
  |  |  ------------------
  ------------------
  506|   839k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   839k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   839k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   839k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   839k|    const auto begin_before_fill = begin;
  516|   839k|    begin += potential_fill_len;
  517|       |
  518|   839k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 839k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   839k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   839k|    const auto begin_after_fill = begin;
  524|   839k|    ++begin;
  525|       |
  526|   839k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 839k, False: 0]
  ------------------
  527|   839k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 839k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   839k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 839k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   839k|    }
  535|       |
  536|   839k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 839k, False: 0]
  ------------------
  537|   839k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 839k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   839k|        return begin_before_fill;
  542|   839k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   839k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  1.02M|{
  471|  1.02M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.02M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.02M|        return 1;
  474|  1.02M|    }
  475|  1.02M|    else {
  476|  1.02M|        const auto lengths =
  477|  1.02M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.02M|            "\3\4";
  479|  1.02M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.02M|        return len;
  481|  1.02M|    }
  482|  1.02M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.67M|    auto check_align = [](wchar_t ch) {
  492|  1.67M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.67M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.67M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.67M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.67M|            default:
  ------------------
  |  Branch (499:13): [True: 1.67M, False: 0]
  ------------------
  500|  1.67M|                return align_type::none;
  501|  1.67M|        }
  502|  1.67M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   839k|{
  554|   839k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   839k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   839k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   839k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 743k, False: 95.1k]
  |  Branch (556:33): [True: 0, False: 743k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   839k|    return begin;
  567|   839k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   696k|    {
 1051|   696k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   696k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 325k, False: 371k]
  ------------------
 1053|   696k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 325k]
  ------------------
 1054|   696k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   696k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   696k|        Handler::on_localized();
 1063|   696k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   428k|{
  968|   428k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   428k|    handler.check_args_exhausted();
  970|   428k|    return handler.get_error();
  971|   428k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   428k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   428k|    auto begin = format.data();
  937|   428k|    auto it = begin;
  938|   428k|    const auto end = format.data() + format.size();
  939|       |
  940|   428k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 428k, False: 0]
  ------------------
  941|   428k|        const auto ch = *it++;
  942|   428k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 428k, False: 0]
  ------------------
  943|   428k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   428k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   428k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 428k, False: 0]
  ------------------
  947|   428k|                return;
  948|   428k|            }
  949|   428k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   428k|    }
  960|       |
  961|      0|    handler.on_literal_text(begin, end);
  962|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   428k|{
  866|   428k|    struct id_adapter {
  867|   428k|        constexpr void operator()()
  868|   428k|        {
  869|   428k|            arg_id = handler.on_arg_id();
  870|   428k|        }
  871|   428k|        constexpr void operator()(std::size_t id)
  872|   428k|        {
  873|   428k|            arg_id = handler.on_arg_id(id);
  874|   428k|        }
  875|       |
  876|   428k|        constexpr void on_error(const char* msg)
  877|   428k|        {
  878|   428k|            SCN_UNLIKELY_ATTR
  879|   428k|            handler.on_error(msg);
  880|   428k|        }
  881|       |
  882|   428k|        Handler& handler;
  883|   428k|        std::size_t arg_id;
  884|   428k|    };
  885|       |
  886|   428k|    ++begin;
  887|   428k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 428k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   428k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 428k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   428k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 428k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   428k|    else {
  899|   428k|        auto adapter = id_adapter{handler, 0};
  900|   428k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   428k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 428k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   428k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 428k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   428k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 428k, False: 0]
  ------------------
  911|   428k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 428k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   428k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   428k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   856k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 285k]
  |  |  |  Branch (153:45): [True: 0, False: 428k]
  |  |  |  Branch (153:45): [True: 142k, False: 285k]
  |  |  ------------------
  ------------------
  917|   142k|                handler.on_error("Unknown format specifier");
  918|   142k|                return begin;
  919|   142k|            }
  920|   428k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   428k|    }
  927|   285k|    return begin + 1;
  928|   428k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   428k|{
  400|   428k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   428k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   428k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   428k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 428k, False: 0]
  |  Branch (401:26): [True: 0, False: 428k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   428k|    handler();
  406|   428k|    return begin;
  407|   428k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   428k|        {
  869|   428k|            arg_id = handler.on_arg_id();
  870|   428k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   428k|    {
 1046|   428k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   428k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   428k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   428k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   428k|{
  795|   428k|    auto do_presentation = [&]() -> const CharT* {
  796|   428k|        if (*begin == CharT{'['}) {
  797|   428k|            auto set = parse_presentation_set(begin, end, handler);
  798|   428k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   428k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   428k|                return begin;
  803|   428k|            }
  804|   428k|            handler.on_character_set_string(set);
  805|   428k|            return begin;
  806|   428k|        }
  807|   428k|        if (*begin == CharT{'/'}) {
  808|   428k|            return parse_presentation_regex(begin, end, handler);
  809|   428k|        }
  810|   428k|        presentation_type type = parse_presentation_type(*begin++);
  811|   428k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   428k|            handler.on_error("Invalid type specifier in format string");
  813|   428k|            return begin;
  814|   428k|        }
  815|   428k|        handler.on_type(type);
  816|   428k|        return begin;
  817|   428k|    };
  818|       |
  819|   428k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 428k, False: 0]
  |  Branch (819:28): [True: 333k, False: 95.1k]
  ------------------
  820|   428k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 285k, False: 47.5k]
  |  Branch (820:36): [True: 237k, False: 47.5k]
  ------------------
  821|   237k|        return do_presentation();
  822|   237k|    }
  823|       |
  824|   190k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   190k|    begin = parse_align(begin, end, handler);
  830|   190k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   190k|    begin = parse_width(begin, end, handler);
  836|   190k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   190k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 47.5k, False: 142k]
  ------------------
  842|  47.5k|        handler.on_localized();
  843|  47.5k|        ++begin;
  844|  47.5k|    }
  845|   190k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   190k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 190k, False: 0]
  |  Branch (850:25): [True: 142k, False: 47.5k]
  ------------------
  851|   142k|        do_presentation();
  852|   142k|    }
  853|   190k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   190k|    return begin;
  859|   190k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   380k|    auto do_presentation = [&]() -> const CharT* {
  796|   380k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 380k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   380k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 380k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   380k|        presentation_type type = parse_presentation_type(*begin++);
  811|   380k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   380k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 95.1k, False: 285k]
  |  |  ------------------
  ------------------
  812|  95.1k|            handler.on_error("Invalid type specifier in format string");
  813|  95.1k|            return begin;
  814|  95.1k|        }
  815|   285k|        handler.on_type(type);
  816|   285k|        return begin;
  817|   380k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   190k|{
  489|   190k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   190k|        switch (ch) {
  493|   190k|            case L'<':
  494|   190k|                return align_type::left;
  495|   190k|            case L'>':
  496|   190k|                return align_type::right;
  497|   190k|            case L'^':
  498|   190k|                return align_type::center;
  499|   190k|            default:
  500|   190k|                return align_type::none;
  501|   190k|        }
  502|   190k|    };
  503|       |
  504|   190k|    auto potential_fill_len = code_point_length(begin, end);
  505|   190k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   380k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 190k]
  |  |  |  Branch (153:45): [True: 0, False: 190k]
  |  |  |  Branch (153:45): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
  506|   190k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   190k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   190k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   190k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   190k|    const auto begin_before_fill = begin;
  516|   190k|    begin += potential_fill_len;
  517|       |
  518|   190k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 190k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   190k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   190k|    const auto begin_after_fill = begin;
  524|   190k|    ++begin;
  525|       |
  526|   190k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 190k, False: 0]
  ------------------
  527|   190k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   190k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 190k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   190k|    }
  535|       |
  536|   190k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 190k, False: 0]
  ------------------
  537|   190k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 190k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   190k|        return begin_before_fill;
  542|   190k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   190k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   380k|    auto check_align = [](wchar_t ch) {
  492|   380k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 380k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 380k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 380k]
  ------------------
  498|      0|                return align_type::center;
  499|   380k|            default:
  ------------------
  |  Branch (499:13): [True: 380k, False: 0]
  ------------------
  500|   380k|                return align_type::none;
  501|   380k|        }
  502|   380k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   190k|{
  554|   190k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   190k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 95.1k, False: 95.1k]
  |  Branch (556:33): [True: 0, False: 95.1k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   190k|    return begin;
  567|   190k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  47.5k|    {
 1051|  47.5k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  47.5k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 23.7k, False: 23.7k]
  ------------------
 1053|  47.5k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 23.7k]
  ------------------
 1054|  47.5k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  47.5k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  47.5k|        Handler::on_localized();
 1063|  47.5k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  4.11M|{
  226|  4.11M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  4.11M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  4.11M|                  "\n"
  230|  4.11M|                  "Unsupported range type given as input to a scanning "
  231|  4.11M|                  "function.\n"
  232|  4.11M|                  "A range needs to have a character type (value type) "
  233|  4.11M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  4.11M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  4.11M|                  "to be included.\n"
  236|  4.11M|                  "See the scnlib documentation for more details.");
  237|  4.11M|    static_assert(
  238|  4.11M|        !std::is_same_v<T, custom_char_traits>,
  239|  4.11M|        "\n"
  240|  4.11M|        "Unsupported range type given as input to a scanning "
  241|  4.11M|        "function.\n"
  242|  4.11M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  4.11M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  4.11M|        "not supported.");
  245|  4.11M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  4.11M|                  "\n"
  247|  4.11M|                  "Unsupported range type given as input to a scanning "
  248|  4.11M|                  "function.\n"
  249|  4.11M|                  "file_marker_found cannot be used as an "
  250|  4.11M|                  "source range type to scn::scan.\n"
  251|  4.11M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  4.11M|                  "and do not provide an explicit source range, "
  253|  4.11M|                  "or use scn::scan with a FILE* directly.");
  254|  4.11M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  4.11M|                  "\n"
  256|  4.11M|                  "Unsupported range type given as input to a scanning "
  257|  4.11M|                  "function.\n"
  258|  4.11M|                  "In order to be scannable, a range needs to satisfy "
  259|  4.11M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  4.11M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  4.11M|                  "\n"
  262|  4.11M|                  "Unsupported range type given as input to a scanning "
  263|  4.11M|                  "function.\n"
  264|  4.11M|                  "A range needs to model forward_range and have a valid "
  265|  4.11M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  4.11M|                  "Examples of scannable ranges are std::string, "
  267|  4.11M|                  "std::string_view, "
  268|  4.11M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  4.11M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  4.11M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  4.11M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  4.11M|{
  153|  4.11M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  4.11M|        return std::basic_string_view{ranges::data(r),
  155|  4.11M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  4.11M|    }
  162|  4.11M|    else {
  163|  4.11M|        return invalid_char_type{};
  164|  4.11M|    }
  165|  4.11M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   280k|{
  226|   280k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   280k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   280k|                  "\n"
  230|   280k|                  "Unsupported range type given as input to a scanning "
  231|   280k|                  "function.\n"
  232|   280k|                  "A range needs to have a character type (value type) "
  233|   280k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   280k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   280k|                  "to be included.\n"
  236|   280k|                  "See the scnlib documentation for more details.");
  237|   280k|    static_assert(
  238|   280k|        !std::is_same_v<T, custom_char_traits>,
  239|   280k|        "\n"
  240|   280k|        "Unsupported range type given as input to a scanning "
  241|   280k|        "function.\n"
  242|   280k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   280k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   280k|        "not supported.");
  245|   280k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   280k|                  "\n"
  247|   280k|                  "Unsupported range type given as input to a scanning "
  248|   280k|                  "function.\n"
  249|   280k|                  "file_marker_found cannot be used as an "
  250|   280k|                  "source range type to scn::scan.\n"
  251|   280k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   280k|                  "and do not provide an explicit source range, "
  253|   280k|                  "or use scn::scan with a FILE* directly.");
  254|   280k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   280k|                  "\n"
  256|   280k|                  "Unsupported range type given as input to a scanning "
  257|   280k|                  "function.\n"
  258|   280k|                  "In order to be scannable, a range needs to satisfy "
  259|   280k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   280k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   280k|                  "\n"
  262|   280k|                  "Unsupported range type given as input to a scanning "
  263|   280k|                  "function.\n"
  264|   280k|                  "A range needs to model forward_range and have a valid "
  265|   280k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   280k|                  "Examples of scannable ranges are std::string, "
  267|   280k|                  "std::string_view, "
  268|   280k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   280k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   280k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   280k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   280k|{
  196|   280k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   280k|        return file_marker_found{};
  198|   280k|    }
  199|   280k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   280k|        if constexpr (ranges::input_range<Range>) {
  201|   280k|            return insufficient_range{};
  202|   280k|        }
  203|   280k|        else {
  204|   280k|            return invalid_input_range{};
  205|   280k|        }
  206|   280k|    }
  207|   280k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   280k|        return invalid_char_type{};
  209|   280k|    }
  210|   280k|    else {
  211|   280k|        return make_forward_scan_buffer(r);
  212|   280k|    }
  213|   280k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  3.80M|{
  226|  3.80M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  3.80M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  3.80M|                  "\n"
  230|  3.80M|                  "Unsupported range type given as input to a scanning "
  231|  3.80M|                  "function.\n"
  232|  3.80M|                  "A range needs to have a character type (value type) "
  233|  3.80M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  3.80M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  3.80M|                  "to be included.\n"
  236|  3.80M|                  "See the scnlib documentation for more details.");
  237|  3.80M|    static_assert(
  238|  3.80M|        !std::is_same_v<T, custom_char_traits>,
  239|  3.80M|        "\n"
  240|  3.80M|        "Unsupported range type given as input to a scanning "
  241|  3.80M|        "function.\n"
  242|  3.80M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  3.80M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  3.80M|        "not supported.");
  245|  3.80M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  3.80M|                  "\n"
  247|  3.80M|                  "Unsupported range type given as input to a scanning "
  248|  3.80M|                  "function.\n"
  249|  3.80M|                  "file_marker_found cannot be used as an "
  250|  3.80M|                  "source range type to scn::scan.\n"
  251|  3.80M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  3.80M|                  "and do not provide an explicit source range, "
  253|  3.80M|                  "or use scn::scan with a FILE* directly.");
  254|  3.80M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  3.80M|                  "\n"
  256|  3.80M|                  "Unsupported range type given as input to a scanning "
  257|  3.80M|                  "function.\n"
  258|  3.80M|                  "In order to be scannable, a range needs to satisfy "
  259|  3.80M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  3.80M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  3.80M|                  "\n"
  262|  3.80M|                  "Unsupported range type given as input to a scanning "
  263|  3.80M|                  "function.\n"
  264|  3.80M|                  "A range needs to model forward_range and have a valid "
  265|  3.80M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  3.80M|                  "Examples of scannable ranges are std::string, "
  267|  3.80M|                  "std::string_view, "
  268|  3.80M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  3.80M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  3.80M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  3.80M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  3.80M|{
  153|  3.80M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  3.80M|        return std::basic_string_view{ranges::data(r),
  155|  3.80M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  3.80M|    }
  162|  3.80M|    else {
  163|  3.80M|        return invalid_char_type{};
  164|  3.80M|    }
  165|  3.80M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   499k|{
  226|   499k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   499k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   499k|                  "\n"
  230|   499k|                  "Unsupported range type given as input to a scanning "
  231|   499k|                  "function.\n"
  232|   499k|                  "A range needs to have a character type (value type) "
  233|   499k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   499k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   499k|                  "to be included.\n"
  236|   499k|                  "See the scnlib documentation for more details.");
  237|   499k|    static_assert(
  238|   499k|        !std::is_same_v<T, custom_char_traits>,
  239|   499k|        "\n"
  240|   499k|        "Unsupported range type given as input to a scanning "
  241|   499k|        "function.\n"
  242|   499k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   499k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   499k|        "not supported.");
  245|   499k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   499k|                  "\n"
  247|   499k|                  "Unsupported range type given as input to a scanning "
  248|   499k|                  "function.\n"
  249|   499k|                  "file_marker_found cannot be used as an "
  250|   499k|                  "source range type to scn::scan.\n"
  251|   499k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   499k|                  "and do not provide an explicit source range, "
  253|   499k|                  "or use scn::scan with a FILE* directly.");
  254|   499k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   499k|                  "\n"
  256|   499k|                  "Unsupported range type given as input to a scanning "
  257|   499k|                  "function.\n"
  258|   499k|                  "In order to be scannable, a range needs to satisfy "
  259|   499k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   499k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   499k|                  "\n"
  262|   499k|                  "Unsupported range type given as input to a scanning "
  263|   499k|                  "function.\n"
  264|   499k|                  "A range needs to model forward_range and have a valid "
  265|   499k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   499k|                  "Examples of scannable ranges are std::string, "
  267|   499k|                  "std::string_view, "
  268|   499k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   499k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   499k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   499k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   499k|{
  196|   499k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   499k|        return file_marker_found{};
  198|   499k|    }
  199|   499k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   499k|        if constexpr (ranges::input_range<Range>) {
  201|   499k|            return insufficient_range{};
  202|   499k|        }
  203|   499k|        else {
  204|   499k|            return invalid_input_range{};
  205|   499k|        }
  206|   499k|    }
  207|   499k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   499k|        return invalid_char_type{};
  209|   499k|    }
  210|   499k|    else {
  211|   499k|        return make_forward_scan_buffer(r);
  212|   499k|    }
  213|   499k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  6.27M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  3.20M|    {
   45|  3.20M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  3.20M|    {
   66|  3.20M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  3.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.20M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  3.20M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  3.20M|        do_check_arg_id(id);
   74|  3.20M|        return id;
   75|  3.20M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  3.20M|{
  210|  3.20M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  3.20M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  3.20M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  3.04M|    {
   61|  3.04M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  3.04M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  6.24M|    {
   50|  6.24M|        return m_format.data();
   51|  6.24M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  3.20M|    {
   45|  3.20M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  3.20M|    {
   66|  3.20M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  3.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.20M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  3.20M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  3.20M|        do_check_arg_id(id);
   74|  3.20M|        return id;
   75|  3.20M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  3.20M|{
  210|  3.20M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  3.20M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  3.20M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  2.91M|    {
   61|  2.91M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  2.91M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  6.11M|    {
   50|  6.11M|        return m_format.data();
   51|  6.11M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  12.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|   642k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  8.13M|    {
  482|  8.13M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  8.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  8.13M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  8.13M|    {
  473|  8.13M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  8.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  8.13M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.80M|    {
  482|  3.80M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.80M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  3.80M|    {
  473|  3.80M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.80M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  1.06M|    {
  594|  1.06M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  1.06M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  1.06M|    {
  564|  1.06M|        return ranges::prev(it);
  565|  1.06M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.42M|    {
  482|  2.42M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.42M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.42M|    {
  473|  2.42M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.42M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.77M|    {
  513|  2.77M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.77M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.77M|    {
  505|  2.77M|        return ranges::next(it, n);
  506|  2.77M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  2.87M|    {
  549|  2.87M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  2.87M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  2.87M|    {
  541|  2.87M|        return ranges::distance(lhs, rhs);
  542|  2.87M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   387k|    {
  513|   387k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   387k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   387k|    {
  498|   387k|        it.batch_advance(n);
  499|   387k|        return it;
  500|   387k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.24M|    {
  482|  2.24M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.24M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.24M|    {
  473|  2.24M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.24M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   925k|    {
  594|   925k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   925k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   925k|    {
  564|   925k|        return ranges::prev(it);
  565|   925k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.38M|    {
  513|  2.38M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.38M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.38M|    {
  505|  2.38M|        return ranges::next(it, n);
  506|  2.38M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  2.47M|    {
  549|  2.47M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  2.47M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  2.47M|    {
  541|  2.47M|        return ranges::distance(lhs, rhs);
  542|  2.47M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   689k|    {
  513|   689k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   689k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   689k|    {
  498|   689k|        it.batch_advance(n);
  499|   689k|        return it;
  500|   689k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  3.83M|{
  343|  3.83M|    return {ranges::next(ranges::begin(source), n),
  344|  3.83M|            make_vscan_result_range_end(source)};
  345|  3.83M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  3.83M|{
  330|  3.83M|    return ranges::end(source);
  331|  3.83M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   522k|    {
  253|   522k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  3.83M|    {
  104|  3.83M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|   973k|    {
   39|   973k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  3.83M|    {
  121|  3.83M|        return ranges::begin(m_range);
  122|  3.83M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   523k|    {
  253|   523k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|   976k|    {
   39|   976k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   761k|    {
  253|   761k|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  1.41M|    {
   39|  1.41M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   624k|    {
  253|   624k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|  1.16M|    {
   39|  1.16M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   777k|    {
  253|   777k|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  1.44M|    {
   39|  1.44M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   629k|    {
  253|   629k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|  1.17M|    {
   39|  1.17M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  3.30M|{
  343|  3.30M|    return {ranges::next(ranges::begin(source), n),
  344|  3.30M|            make_vscan_result_range_end(source)};
  345|  3.30M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  3.30M|{
  330|  3.30M|    return ranges::end(source);
  331|  3.30M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   451k|    {
  253|   451k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  3.30M|    {
  104|  3.30M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  3.30M|    {
  121|  3.30M|        return ranges::begin(m_range);
  122|  3.30M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   452k|    {
  253|   452k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   652k|    {
  253|   652k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   541k|    {
  253|   541k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   664k|    {
  253|   664k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   545k|    {
  253|   545k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   256k|{
  117|   256k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   256k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   256k|{
   77|   256k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   256k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   256k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   256k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   256k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   513k|{
   55|   513k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 469k]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|   469k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   469k|    static_cast<    \
  |  |  247|   469k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   469k|    static_cast<    \
  |  |  247|   469k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   513k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   256k|{
  201|   256k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   256k|                                                      format, {});
  203|   256k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   256k|{
  163|   256k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   256k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   256k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   256k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   256k|    static_cast<    \
  |  |  247|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   256k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  55.2k|{
  248|  55.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  55.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  55.2k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  55.2k|{
  229|  55.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  55.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  55.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  55.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  55.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  55.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 52.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  55.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  52.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  52.9k|    static_cast<    \
  |  |  247|  52.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  52.9k|    static_cast<    \
  |  |  247|  52.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  55.2k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   257k|{
  117|   257k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   257k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   257k|{
   77|   257k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   257k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   257k|    static_cast<    \
  |  |  247|   257k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   257k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   257k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   257k|    static_cast<    \
  |  |  247|   257k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   257k|    static_cast<    \
  |  |  247|   257k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   257k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   515k|{
   55|   515k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 470k]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|   470k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   470k|    static_cast<    \
  |  |  247|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   470k|    static_cast<    \
  |  |  247|   470k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   515k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   257k|{
  201|   257k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   257k|                                                      format, {});
  203|   257k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   257k|{
  163|   257k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   257k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   257k|    static_cast<    \
  |  |  247|   257k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   257k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   257k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   257k|    static_cast<    \
  |  |  247|   257k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   257k|    static_cast<    \
  |  |  247|   257k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   257k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  54.6k|{
  248|  54.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  54.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  54.6k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  54.6k|{
  229|  54.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  54.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 52.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  52.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  52.4k|    static_cast<    \
  |  |  247|  52.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  52.4k|    static_cast<    \
  |  |  247|  52.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  54.6k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   366k|{
  117|   366k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   366k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   366k|{
   77|   366k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   366k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   366k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   366k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   366k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   733k|{
   55|   733k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 689k]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|   689k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   689k|    static_cast<    \
  |  |  247|   689k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   689k|    static_cast<    \
  |  |  247|   689k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   733k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   366k|{
  201|   366k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   366k|                                                      format, {});
  203|   366k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   366k|{
  163|   366k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   366k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   366k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   366k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   366k|    static_cast<    \
  |  |  247|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   366k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  74.7k|{
  248|  74.7k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  74.7k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  74.7k|{
  229|  74.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  74.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  74.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 72.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  74.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  72.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  72.4k|    static_cast<    \
  |  |  247|  72.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  72.4k|    static_cast<    \
  |  |  247|  72.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  74.7k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   304k|{
  117|   304k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   304k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   304k|{
   77|   304k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   304k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   304k|    static_cast<    \
  |  |  247|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   304k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   304k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   304k|    static_cast<    \
  |  |  247|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   304k|    static_cast<    \
  |  |  247|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   304k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   609k|{
   55|   609k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   609k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 564k]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|   564k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   564k|    static_cast<    \
  |  |  247|   564k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   564k|    static_cast<    \
  |  |  247|   564k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   609k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   304k|{
  201|   304k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   304k|                                                      format, {});
  203|   304k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   304k|{
  163|   304k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   304k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   304k|    static_cast<    \
  |  |  247|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   304k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   304k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   304k|    static_cast<    \
  |  |  247|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   304k|    static_cast<    \
  |  |  247|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   304k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  61.9k|{
  248|  61.9k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  61.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  61.9k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  61.9k|{
  229|  61.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  61.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  61.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  61.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  59.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  59.7k|    static_cast<    \
  |  |  247|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  59.7k|    static_cast<    \
  |  |  247|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  61.9k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   374k|{
  117|   374k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   374k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   374k|{
   77|   374k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   374k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   374k|    static_cast<    \
  |  |  247|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   374k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   374k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   374k|    static_cast<    \
  |  |  247|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   374k|    static_cast<    \
  |  |  247|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   374k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   748k|{
   55|   748k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 703k]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|   703k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   703k|    static_cast<    \
  |  |  247|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   703k|    static_cast<    \
  |  |  247|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   748k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   374k|{
  201|   374k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   374k|                                                      format, {});
  203|   374k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   374k|{
  163|   374k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   374k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   374k|    static_cast<    \
  |  |  247|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   374k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   374k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   374k|    static_cast<    \
  |  |  247|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   374k|    static_cast<    \
  |  |  247|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   374k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  76.1k|{
  248|  76.1k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  76.1k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  76.1k|{
  229|  76.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  76.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  76.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 73.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  76.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  73.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  73.8k|    static_cast<    \
  |  |  247|  73.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  73.8k|    static_cast<    \
  |  |  247|  73.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  76.1k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   306k|{
  117|   306k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   306k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   306k|{
   77|   306k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   306k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   306k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   306k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   306k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   613k|{
   55|   613k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   613k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 569k]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|   569k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   569k|    static_cast<    \
  |  |  247|   569k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   569k|    static_cast<    \
  |  |  247|   569k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   613k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   306k|{
  201|   306k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   306k|                                                      format, {});
  203|   306k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   306k|{
  163|   306k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   306k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   306k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   306k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   306k|    static_cast<    \
  |  |  247|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   306k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  62.3k|{
  248|  62.3k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  62.3k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  62.3k|{
  229|  62.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  62.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  62.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 60.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  60.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  60.1k|    static_cast<    \
  |  |  247|  60.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  60.1k|    static_cast<    \
  |  |  247|  60.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  62.3k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  22.2k|{
  117|  22.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  22.2k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  22.2k|{
   77|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  22.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  22.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  44.5k|{
   55|  44.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  44.5k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  22.2k|{
  201|  22.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  22.2k|                                                      format, {});
  203|  22.2k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  22.2k|{
  163|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  22.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  22.2k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.22k|{
  248|  2.22k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.22k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.22k|{
  229|  2.22k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.22k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.22k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  22.2k|{
  117|  22.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  22.2k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  22.2k|{
   77|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  22.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  22.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  44.5k|{
   55|  44.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  44.5k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  22.2k|{
  201|  22.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  22.2k|                                                      format, {});
  203|  22.2k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  22.2k|{
  163|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  22.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  22.2k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.22k|{
  248|  2.22k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.22k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.22k|{
  229|  2.22k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.22k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.22k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  22.2k|{
  117|  22.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  22.2k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  22.2k|{
   77|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  22.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  22.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  44.5k|{
   55|  44.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  44.5k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  22.2k|{
  201|  22.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  22.2k|                                                      format, {});
  203|  22.2k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  22.2k|{
  163|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  22.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  22.2k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.22k|{
  248|  2.22k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.22k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.22k|{
  229|  2.22k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.22k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.22k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  22.2k|{
  117|  22.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  22.2k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  22.2k|{
   77|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  22.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  22.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  44.5k|{
   55|  44.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  44.5k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  22.2k|{
  201|  22.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  22.2k|                                                      format, {});
  203|  22.2k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  22.2k|{
  163|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  22.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  22.2k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.22k|{
  248|  2.22k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.22k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.22k|{
  229|  2.22k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.22k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.22k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  22.2k|{
  117|  22.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  22.2k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  22.2k|{
   77|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  22.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  22.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  44.5k|{
   55|  44.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  44.5k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  22.2k|{
  201|  22.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  22.2k|                                                      format, {});
  203|  22.2k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  22.2k|{
  163|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  22.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  22.2k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.22k|{
  248|  2.22k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.22k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.22k|{
  229|  2.22k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.22k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.22k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  22.2k|{
  117|  22.2k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  22.2k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  22.2k|{
   77|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  22.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  22.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  44.5k|{
   55|  44.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.5k, False: 0]
  |  |  ------------------
  ------------------
   56|  44.5k|        return unexpected(result.error());
   57|  44.5k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  44.5k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  22.2k|{
  201|  22.2k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  22.2k|                                                      format, {});
  203|  22.2k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  22.2k|{
  163|  22.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  22.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  22.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  22.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  22.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  22.2k|    static_cast<    \
  |  |  247|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  22.2k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.22k|{
  248|  2.22k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.22k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.22k|{
  229|  2.22k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.22k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.22k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.22k|    }                                                  \
  |  |  |  |   70|  2.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.22k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   242k|{
   77|   242k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   242k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   242k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   242k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   242k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   484k|{
   55|   484k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 405k]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|   405k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   405k|    static_cast<    \
  |  |  247|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   405k|    static_cast<    \
  |  |  247|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   484k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   242k|{
  163|   242k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   242k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   242k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   242k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   242k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  49.7k|{
  229|  49.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  49.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  45.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.7k|    static_cast<    \
  |  |  247|  45.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.7k|    static_cast<    \
  |  |  247|  45.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  49.7k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   243k|{
   77|   243k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   243k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   243k|    static_cast<    \
  |  |  247|   243k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   243k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   243k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   243k|    static_cast<    \
  |  |  247|   243k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   243k|    static_cast<    \
  |  |  247|   243k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   243k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   486k|{
   55|   486k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 407k]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|   407k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   407k|    static_cast<    \
  |  |  247|   407k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   407k|    static_cast<    \
  |  |  247|   407k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   486k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   243k|{
  163|   243k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   243k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   243k|    static_cast<    \
  |  |  247|   243k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   243k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   243k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   243k|    static_cast<    \
  |  |  247|   243k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   243k|    static_cast<    \
  |  |  247|   243k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   243k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  48.9k|{
  229|  48.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  48.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  48.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 45.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  48.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  45.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.0k|    static_cast<    \
  |  |  247|  45.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  45.0k|    static_cast<    \
  |  |  247|  45.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  48.9k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   334k|{
   77|   334k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   334k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   334k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   334k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   334k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   669k|{
   55|   669k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 590k]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|   590k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   590k|    static_cast<    \
  |  |  247|   590k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   590k|    static_cast<    \
  |  |  247|   590k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   669k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   334k|{
  163|   334k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   334k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   334k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   334k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   334k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  66.3k|{
  229|  66.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  66.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  66.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 62.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  66.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  62.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  62.4k|    static_cast<    \
  |  |  247|  62.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  62.4k|    static_cast<    \
  |  |  247|  62.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  66.3k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   284k|{
   77|   284k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   284k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   284k|    static_cast<    \
  |  |  247|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   284k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   284k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   284k|    static_cast<    \
  |  |  247|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   284k|    static_cast<    \
  |  |  247|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   284k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   569k|{
   55|   569k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 489k]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|   489k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   489k|    static_cast<    \
  |  |  247|   489k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   489k|    static_cast<    \
  |  |  247|   489k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   569k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   284k|{
  163|   284k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   284k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   284k|    static_cast<    \
  |  |  247|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   284k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   284k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   284k|    static_cast<    \
  |  |  247|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   284k|    static_cast<    \
  |  |  247|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   284k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  55.8k|{
  229|  55.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  55.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  55.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  55.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  55.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  55.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 51.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  55.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  51.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  51.8k|    static_cast<    \
  |  |  247|  51.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  51.8k|    static_cast<    \
  |  |  247|  51.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  55.8k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   340k|{
   77|   340k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   340k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   340k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   340k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   340k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   680k|{
   55|   680k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   680k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 601k]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|   601k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   680k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   340k|{
  163|   340k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   340k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   340k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   340k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   340k|    static_cast<    \
  |  |  247|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   340k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  67.5k|{
  229|  67.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  67.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  67.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  67.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 63.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  67.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  63.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  63.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.5k|    static_cast<    \
  |  |  247|  63.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.5k|    static_cast<    \
  |  |  247|  63.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  67.5k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   286k|{
   77|   286k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   286k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   286k|    static_cast<    \
  |  |  247|   286k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   286k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   286k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   286k|    static_cast<    \
  |  |  247|   286k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   286k|    static_cast<    \
  |  |  247|   286k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   286k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   572k|{
   55|   572k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   572k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 493k]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|   493k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   493k|    static_cast<    \
  |  |  247|   493k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   493k|    static_cast<    \
  |  |  247|   493k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   572k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   286k|{
  163|   286k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   286k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   286k|    static_cast<    \
  |  |  247|   286k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   286k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   286k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   286k|    static_cast<    \
  |  |  247|   286k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   286k|    static_cast<    \
  |  |  247|   286k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   286k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  56.1k|{
  229|  56.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  56.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  56.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 52.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  56.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  52.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  52.1k|    static_cast<    \
  |  |  247|  52.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  52.1k|    static_cast<    \
  |  |  247|  52.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  56.1k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  39.6k|{
   77|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  39.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  39.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  79.3k|{
   55|  79.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 0]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  79.3k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  39.6k|{
  163|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  39.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  39.6k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.96k|{
  229|  3.96k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.96k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  3.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.96k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  39.6k|{
   77|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  39.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  39.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  79.3k|{
   55|  79.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 0]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  79.3k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  39.6k|{
  163|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  39.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  39.6k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.96k|{
  229|  3.96k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.96k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  3.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.96k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  39.6k|{
   77|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  39.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  39.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  79.3k|{
   55|  79.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 0]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  79.3k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  39.6k|{
  163|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  39.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  39.6k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.96k|{
  229|  3.96k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.96k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  3.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.96k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  39.6k|{
   77|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  39.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  39.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  79.3k|{
   55|  79.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 0]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  79.3k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  39.6k|{
  163|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  39.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  39.6k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.96k|{
  229|  3.96k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.96k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  3.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.96k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  39.6k|{
   77|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  39.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  39.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  79.3k|{
   55|  79.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 0]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  79.3k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  39.6k|{
  163|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  39.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  39.6k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.96k|{
  229|  3.96k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.96k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  3.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.96k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  39.6k|{
   77|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  39.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  39.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  79.3k|{
   55|  79.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.3k, False: 0]
  |  |  ------------------
  ------------------
   56|  79.3k|        return unexpected(result.error());
   57|  79.3k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  79.3k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  39.6k|{
  163|  39.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  39.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  39.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  39.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  39.6k|    static_cast<    \
  |  |  247|  39.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  39.6k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  3.96k|{
  229|  3.96k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  3.96k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  3.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.96k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.96k|    }                                                  \
  |  |  |  |   70|  3.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  3.96k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   280k|{
  486|   280k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   280k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   280k|    {
  378|   280k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   280k|    {
  360|   280k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   280k|    {
  129|   280k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   280k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   749k|    {
  382|   749k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 942, False: 748k]
  ------------------
  383|    942|            return false;
  384|    942|        }
  385|   748k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 547k, False: 200k]
  ------------------
  386|   547k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   547k|                                          this->m_current_view.begin(),
  388|   547k|                                          this->m_current_view.end());
  389|   547k|        }
  390|   748k|        m_latest = *m_cursor;
  391|   748k|        ++m_cursor;
  392|   748k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   748k|        return true;
  394|   749k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   280k|    {
   49|   280k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   280k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   280k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   499k|{
  486|   499k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   499k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   499k|    {
  378|   499k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   499k|    {
  360|   499k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   499k|    {
  129|   499k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   499k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.33M|    {
  382|  1.33M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 942, False: 1.33M]
  ------------------
  383|    942|            return false;
  384|    942|        }
  385|  1.33M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 974k, False: 356k]
  ------------------
  386|   974k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   974k|                                          this->m_current_view.begin(),
  388|   974k|                                          this->m_current_view.end());
  389|   974k|        }
  390|  1.33M|        m_latest = *m_cursor;
  391|  1.33M|        ++m_cursor;
  392|  1.33M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.33M|        return true;
  394|  1.33M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   499k|    {
   49|   499k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   499k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   499k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  13.2M|    {
  173|  13.2M|        return m_end == nullptr;
  174|  13.2M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   401k|    {
  189|   401k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 401k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   401k|        return parent()->get_segment_starting_at(position());
  195|   401k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  7.40M|    {
  183|  7.40M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  7.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  7.40M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   401k|    {
   79|   401k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 401k]
  |  |  ------------------
  ------------------
   80|   401k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|      0|        }
   83|   401k|        const auto start = pos - m_putback_buffer.size();
   84|   401k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   401k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   360k|    {
  178|   360k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   360k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|   761k|    {
  168|   761k|        return m_position;
  169|   761k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   842k|    {
  101|   842k|        return m_is_contiguous;
  102|   842k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  23.6M|    {
  173|  23.6M|        return m_end == nullptr;
  174|  23.6M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|   713k|    {
  189|   713k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 713k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   713k|        return parent()->get_segment_starting_at(position());
  195|   713k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  13.1M|    {
  183|  13.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  13.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  13.1M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|   713k|    {
   79|   713k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   713k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 713k]
  |  |  ------------------
  ------------------
   80|   713k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|      0|        }
   83|   713k|        const auto start = pos - m_putback_buffer.size();
   84|   713k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   713k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   713k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   713k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|   642k|    {
  178|   642k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   642k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   642k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   642k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  1.35M|    {
  168|  1.35M|        return m_position;
  169|  1.35M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  1.49M|    {
  101|  1.49M|        return m_is_contiguous;
  102|  1.49M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   280k|{
  322|   280k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 280k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   280k|    return ranges::subrange{forward_iterator{this, 0},
  327|   280k|                            ranges_std::default_sentinel};
  328|   280k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   280k|    {
  155|   280k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   280k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   280k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.27M|    {
  258|  1.27M|        return x.is_at_end();
  259|  1.27M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.47M|    {
  302|  1.47M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.47M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.47M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.47M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.47M|        return !read_at_position();
  309|  1.47M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  3.44M|    {
  282|  3.44M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  3.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  3.44M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 3.44M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  3.44M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  3.44M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.69M, False: 749k]
  |  |  ------------------
  ------------------
  289|  2.69M|            return true;
  290|  2.69M|        }
  291|       |
  292|  1.49M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 749k, False: 748k]
  ------------------
  293|   749k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 942, False: 748k]
  ------------------
  294|    942|                return false;
  295|    942|            }
  296|   749k|        }
  297|   748k|        return true;
  298|   749k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  5.30M|    {
   59|  5.30M|        return m_putback_buffer.size() + m_current_view.size();
   60|  5.30M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   200k|    {
  269|   200k|        return !x.is_at_end();
  270|   200k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  1.30M|    {
  217|  1.30M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  1.30M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 1.30M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  1.30M|        auto res = read_at_position();
  226|  1.30M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  1.30M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  1.30M|    {
   90|  1.30M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.25M, False: 53.8k]
  |  |  ------------------
  ------------------
   91|  1.30M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.25M|            return m_putback_buffer[pos];
   93|  1.25M|        }
   94|  53.8k|        const auto start = pos - m_putback_buffer.size();
   95|  53.8k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  53.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  53.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  1.30M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   668k|    {
  203|   668k|        ++m_position;
  204|   668k|        std::ignore = read_at_position();
  205|   668k|        return *this;
  206|   668k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   360k|    {
  252|   360k|        return !(lhs == rhs);
  253|   360k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   534k|    {
  247|   534k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 534k, False: 0]
  |  Branch (247:46): [True: 173k, False: 360k]
  ------------------
  248|   534k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   387k|    {
  232|   387k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   387k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   387k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   387k|        return *this;
  235|   387k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   280k|    {
   54|   280k|        sync(0);
   55|   280k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   499k|{
  322|   499k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 499k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   499k|    return ranges::subrange{forward_iterator{this, 0},
  327|   499k|                            ranges_std::default_sentinel};
  328|   499k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   499k|    {
  155|   499k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   499k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   499k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   499k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   499k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   499k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   499k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.26M|    {
  258|  2.26M|        return x.is_at_end();
  259|  2.26M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  2.61M|    {
  302|  2.61M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 2.61M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  2.61M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 2.61M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  2.61M|        return !read_at_position();
  309|  2.61M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  6.13M|    {
  282|  6.13M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  6.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  6.13M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 6.13M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  6.13M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  6.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.80M, False: 1.33M]
  |  |  ------------------
  ------------------
  289|  4.80M|            return true;
  290|  4.80M|        }
  291|       |
  292|  2.66M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.33M, False: 1.33M]
  ------------------
  293|  1.33M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 942, False: 1.33M]
  ------------------
  294|    942|                return false;
  295|    942|            }
  296|  1.33M|        }
  297|  1.33M|        return true;
  298|  1.33M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  9.44M|    {
   59|  9.44M|        return m_putback_buffer.size() + m_current_view.size();
   60|  9.44M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   356k|    {
  269|   356k|        return !x.is_at_end();
  270|   356k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  2.33M|    {
  217|  2.33M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  2.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.33M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.33M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.33M|        auto res = read_at_position();
  226|  2.33M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  2.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  2.33M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  2.33M|    {
   90|  2.33M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.23M, False: 95.5k]
  |  |  ------------------
  ------------------
   91|  2.33M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  2.23M|            return m_putback_buffer[pos];
   93|  2.23M|        }
   94|  95.5k|        const auto start = pos - m_putback_buffer.size();
   95|  95.5k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  95.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  95.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  2.33M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  1.18M|    {
  203|  1.18M|        ++m_position;
  204|  1.18M|        std::ignore = read_at_position();
  205|  1.18M|        return *this;
  206|  1.18M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|   642k|    {
  252|   642k|        return !(lhs == rhs);
  253|   642k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|   951k|    {
  247|   951k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 951k, False: 0]
  |  Branch (247:46): [True: 309k, False: 642k]
  ------------------
  248|   951k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|   689k|    {
  232|   689k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   689k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   689k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   689k|        return *this;
  235|   689k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   499k|    {
   54|   499k|        sync(0);
   55|   499k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   163k|{
   72|   163k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   163k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   163k|    }
   75|   163k|    else if constexpr (sizeof(U) == 2) {
   76|   163k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   163k|    }
   78|   163k|    else {
   79|       |        // utf-32
   80|   163k|        static_assert(sizeof(U) == 4);
   81|   163k|        SCN_UNUSED(ch);
   82|   163k|        return 1;
   83|   163k|    }
   84|   163k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   163k|{
   36|   163k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   163k|    SCN_GCC_COMPAT_PUSH
   39|   163k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   163k|    constexpr char lengths[] =
   41|   163k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   163k|        "\1\1\1\1\1\1\1\1"
   43|   163k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   163k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   163k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   163k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   163k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   163k|    SCN_GCC_COMPAT_POP
   50|   163k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  55.4M|{
   72|  55.4M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  55.4M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  55.4M|    }
   75|  55.4M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  55.4M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  55.4M|    }
   78|  55.4M|    else {
   79|       |        // utf-32
   80|  55.4M|        static_assert(sizeof(U) == 4);
   81|  55.4M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  55.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  55.4M|        return 1;
   83|  55.4M|    }
   84|  55.4M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.15M|{
   36|  1.15M|#define SCN_VISIT(Type)                                         \
   37|  1.15M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.15M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.15M|    }                                                           \
   40|  1.15M|    else {                                                      \
   41|  1.15M|        return vis(monostate_val);                              \
   42|  1.15M|    }
   43|       |
   44|  1.15M|    monostate monostate_val{};
   45|       |
   46|  1.15M|    switch (arg.m_type) {
   47|   165k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 165k, False: 989k]
  ------------------
   48|   165k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   165k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   165k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   165k|    }                                                           \
  |  |   40|   165k|    else {                                                      \
  |  |   41|   165k|        return vis(monostate_val);                              \
  |  |   42|   165k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.15M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   224k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 224k, False: 930k]
  ------------------
   52|   224k|            SCN_VISIT(int);
  ------------------
  |  |   37|   224k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   224k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   224k|    }                                                           \
  |  |   40|   224k|    else {                                                      \
  |  |   41|   224k|        return vis(monostate_val);                              \
  |  |   42|   224k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.15M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   228k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 228k, False: 926k]
  ------------------
   56|   228k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   228k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   228k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   228k|    }                                                           \
  |  |   40|   228k|    else {                                                      \
  |  |   41|   228k|        return vis(monostate_val);                              \
  |  |   42|   228k|    }
  ------------------
   57|   163k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 163k, False: 991k]
  ------------------
   58|   163k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   163k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   163k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   163k|    }                                                           \
  |  |   40|   163k|    else {                                                      \
  |  |   41|   163k|        return vis(monostate_val);                              \
  |  |   42|   163k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.15M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   185k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 185k, False: 969k]
  ------------------
   62|   185k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   185k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   185k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   185k|    }                                                           \
  |  |   40|   185k|    else {                                                      \
  |  |   41|   185k|        return vis(monostate_val);                              \
  |  |   42|   185k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.15M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   187k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 187k, False: 967k]
  ------------------
   66|   187k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   187k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   187k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   187k|    }                                                           \
  |  |   40|   187k|    else {                                                      \
  |  |   41|   187k|        return vis(monostate_val);                              \
  |  |   42|   187k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.15M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.15M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.15M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.15M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.15M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.15M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.15M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.15M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.15M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.15M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.15M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.15M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.15M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.15M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.15M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.15M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.15M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.15M|            SCN_CLANG_POP
  114|  1.15M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.15M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  40.1k|{
   36|  40.1k|#define SCN_VISIT(Type)                                         \
   37|  40.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  40.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  40.1k|    }                                                           \
   40|  40.1k|    else {                                                      \
   41|  40.1k|        return vis(monostate_val);                              \
   42|  40.1k|    }
   43|       |
   44|  40.1k|    monostate monostate_val{};
   45|       |
   46|  40.1k|    switch (arg.m_type) {
   47|  6.68k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 6.68k, False: 33.4k]
  ------------------
   48|  6.68k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  6.68k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.68k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.68k|    }                                                           \
  |  |   40|  6.68k|    else {                                                      \
  |  |   41|  6.68k|        return vis(monostate_val);                              \
  |  |   42|  6.68k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 40.1k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  6.68k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 6.68k, False: 33.4k]
  ------------------
   52|  6.68k|            SCN_VISIT(int);
  ------------------
  |  |   37|  6.68k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.68k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.68k|    }                                                           \
  |  |   40|  6.68k|    else {                                                      \
  |  |   41|  6.68k|        return vis(monostate_val);                              \
  |  |   42|  6.68k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 40.1k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  6.68k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 6.68k, False: 33.4k]
  ------------------
   56|  6.68k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  6.68k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.68k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.68k|    }                                                           \
  |  |   40|  6.68k|    else {                                                      \
  |  |   41|  6.68k|        return vis(monostate_val);                              \
  |  |   42|  6.68k|    }
  ------------------
   57|  6.68k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 6.68k, False: 33.4k]
  ------------------
   58|  6.68k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  6.68k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.68k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.68k|    }                                                           \
  |  |   40|  6.68k|    else {                                                      \
  |  |   41|  6.68k|        return vis(monostate_val);                              \
  |  |   42|  6.68k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 40.1k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  6.68k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 6.68k, False: 33.4k]
  ------------------
   62|  6.68k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  6.68k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.68k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.68k|    }                                                           \
  |  |   40|  6.68k|    else {                                                      \
  |  |   41|  6.68k|        return vis(monostate_val);                              \
  |  |   42|  6.68k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 40.1k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  6.68k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 6.68k, False: 33.4k]
  ------------------
   66|  6.68k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  6.68k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.68k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.68k|    }                                                           \
  |  |   40|  6.68k|    else {                                                      \
  |  |   41|  6.68k|        return vis(monostate_val);                              \
  |  |   42|  6.68k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 40.1k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 40.1k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 40.1k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 40.1k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 40.1k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 40.1k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 40.1k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 40.1k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 40.1k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 40.1k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 40.1k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 40.1k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 40.1k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 40.1k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 40.1k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 40.1k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 40.1k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  40.1k|            SCN_CLANG_POP
  114|  40.1k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  40.1k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.88M|{
   36|  2.88M|#define SCN_VISIT(Type)                                         \
   37|  2.88M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.88M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.88M|    }                                                           \
   40|  2.88M|    else {                                                      \
   41|  2.88M|        return vis(monostate_val);                              \
   42|  2.88M|    }
   43|       |
   44|  2.88M|    monostate monostate_val{};
   45|       |
   46|  2.88M|    switch (arg.m_type) {
   47|   389k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 389k, False: 2.49M]
  ------------------
   48|   389k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   389k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   389k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   389k|    }                                                           \
  |  |   40|   389k|    else {                                                      \
  |  |   41|   389k|        return vis(monostate_val);                              \
  |  |   42|   389k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.88M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   570k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 570k, False: 2.31M]
  ------------------
   52|   570k|            SCN_VISIT(int);
  ------------------
  |  |   37|   570k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   570k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   570k|    }                                                           \
  |  |   40|   570k|    else {                                                      \
  |  |   41|   570k|        return vis(monostate_val);                              \
  |  |   42|   570k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.88M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   582k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 582k, False: 2.30M]
  ------------------
   56|   582k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   582k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   582k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   582k|    }                                                           \
  |  |   40|   582k|    else {                                                      \
  |  |   41|   582k|        return vis(monostate_val);                              \
  |  |   42|   582k|    }
  ------------------
   57|   392k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 392k, False: 2.49M]
  ------------------
   58|   392k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   392k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   392k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   392k|    }                                                           \
  |  |   40|   392k|    else {                                                      \
  |  |   41|   392k|        return vis(monostate_val);                              \
  |  |   42|   392k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.88M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   472k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 472k, False: 2.41M]
  ------------------
   62|   472k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   472k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   472k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   472k|    }                                                           \
  |  |   40|   472k|    else {                                                      \
  |  |   41|   472k|        return vis(monostate_val);                              \
  |  |   42|   472k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.88M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   475k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 475k, False: 2.40M]
  ------------------
   66|   475k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   475k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   475k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   475k|    }                                                           \
  |  |   40|   475k|    else {                                                      \
  |  |   41|   475k|        return vis(monostate_val);                              \
  |  |   42|   475k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.88M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.88M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.88M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.88M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.88M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.88M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.88M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.88M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.88M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.88M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.88M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.88M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.88M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.88M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.88M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.88M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.88M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.88M|            SCN_CLANG_POP
  114|  2.88M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.88M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   160k|{
   36|   160k|#define SCN_VISIT(Type)                                         \
   37|   160k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   160k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   160k|    }                                                           \
   40|   160k|    else {                                                      \
   41|   160k|        return vis(monostate_val);                              \
   42|   160k|    }
   43|       |
   44|   160k|    monostate monostate_val{};
   45|       |
   46|   160k|    switch (arg.m_type) {
   47|  26.7k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 26.7k, False: 133k]
  ------------------
   48|  26.7k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  26.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.7k|    }                                                           \
  |  |   40|  26.7k|    else {                                                      \
  |  |   41|  26.7k|        return vis(monostate_val);                              \
  |  |   42|  26.7k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 160k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  26.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 26.7k, False: 133k]
  ------------------
   52|  26.7k|            SCN_VISIT(int);
  ------------------
  |  |   37|  26.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.7k|    }                                                           \
  |  |   40|  26.7k|    else {                                                      \
  |  |   41|  26.7k|        return vis(monostate_val);                              \
  |  |   42|  26.7k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 160k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  26.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 26.7k, False: 133k]
  ------------------
   56|  26.7k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  26.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.7k|    }                                                           \
  |  |   40|  26.7k|    else {                                                      \
  |  |   41|  26.7k|        return vis(monostate_val);                              \
  |  |   42|  26.7k|    }
  ------------------
   57|  26.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 26.7k, False: 133k]
  ------------------
   58|  26.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  26.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.7k|    }                                                           \
  |  |   40|  26.7k|    else {                                                      \
  |  |   41|  26.7k|        return vis(monostate_val);                              \
  |  |   42|  26.7k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 160k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  26.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 26.7k, False: 133k]
  ------------------
   62|  26.7k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  26.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.7k|    }                                                           \
  |  |   40|  26.7k|    else {                                                      \
  |  |   41|  26.7k|        return vis(monostate_val);                              \
  |  |   42|  26.7k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 160k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  26.7k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 26.7k, False: 133k]
  ------------------
   66|  26.7k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  26.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.7k|    }                                                           \
  |  |   40|  26.7k|    else {                                                      \
  |  |   41|  26.7k|        return vis(monostate_val);                              \
  |  |   42|  26.7k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 160k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 160k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 160k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 160k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 160k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 160k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 160k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 160k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 160k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 160k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 160k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 160k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 160k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 160k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 160k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 160k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 160k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   160k|            SCN_CLANG_POP
  114|   160k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   160k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.03M|{
   36|  1.03M|#define SCN_VISIT(Type)                                         \
   37|  1.03M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.03M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.03M|    }                                                           \
   40|  1.03M|    else {                                                      \
   41|  1.03M|        return vis(monostate_val);                              \
   42|  1.03M|    }
   43|       |
   44|  1.03M|    monostate monostate_val{};
   45|       |
   46|  1.03M|    switch (arg.m_type) {
   47|   149k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 149k, False: 884k]
  ------------------
   48|   149k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   149k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   149k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   149k|    }                                                           \
  |  |   40|   149k|    else {                                                      \
  |  |   41|   149k|        return vis(monostate_val);                              \
  |  |   42|   149k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.03M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   199k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 199k, False: 834k]
  ------------------
   52|   199k|            SCN_VISIT(int);
  ------------------
  |  |   37|   199k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   199k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   199k|    }                                                           \
  |  |   40|   199k|    else {                                                      \
  |  |   41|   199k|        return vis(monostate_val);                              \
  |  |   42|   199k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.03M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   202k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 202k, False: 831k]
  ------------------
   56|   202k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   202k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   202k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   202k|    }                                                           \
  |  |   40|   202k|    else {                                                      \
  |  |   41|   202k|        return vis(monostate_val);                              \
  |  |   42|   202k|    }
  ------------------
   57|   146k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 146k, False: 886k]
  ------------------
   58|   146k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   146k|    }                                                           \
  |  |   40|   146k|    else {                                                      \
  |  |   41|   146k|        return vis(monostate_val);                              \
  |  |   42|   146k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.03M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   167k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 167k, False: 866k]
  ------------------
   62|   167k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   167k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   167k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   167k|    }                                                           \
  |  |   40|   167k|    else {                                                      \
  |  |   41|   167k|        return vis(monostate_val);                              \
  |  |   42|   167k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.03M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   168k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 168k, False: 865k]
  ------------------
   66|   168k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   168k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   168k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   168k|    }                                                           \
  |  |   40|   168k|    else {                                                      \
  |  |   41|   168k|        return vis(monostate_val);                              \
  |  |   42|   168k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.03M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.03M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.03M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.03M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.03M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.03M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.03M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.03M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.03M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.03M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.03M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.03M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.03M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.03M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.03M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.03M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.03M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.03M|            SCN_CLANG_POP
  114|  1.03M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.03M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.63M|{
   36|  2.63M|#define SCN_VISIT(Type)                                         \
   37|  2.63M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.63M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.63M|    }                                                           \
   40|  2.63M|    else {                                                      \
   41|  2.63M|        return vis(monostate_val);                              \
   42|  2.63M|    }
   43|       |
   44|  2.63M|    monostate monostate_val{};
   45|       |
   46|  2.63M|    switch (arg.m_type) {
   47|   361k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 361k, False: 2.27M]
  ------------------
   48|   361k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   361k|    }                                                           \
  |  |   40|   361k|    else {                                                      \
  |  |   41|   361k|        return vis(monostate_val);                              \
  |  |   42|   361k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.63M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   513k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 513k, False: 2.11M]
  ------------------
   52|   513k|            SCN_VISIT(int);
  ------------------
  |  |   37|   513k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   513k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   513k|    }                                                           \
  |  |   40|   513k|    else {                                                      \
  |  |   41|   513k|        return vis(monostate_val);                              \
  |  |   42|   513k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.63M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   521k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 521k, False: 2.10M]
  ------------------
   56|   521k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   521k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   521k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   521k|    }                                                           \
  |  |   40|   521k|    else {                                                      \
  |  |   41|   521k|        return vis(monostate_val);                              \
  |  |   42|   521k|    }
  ------------------
   57|   365k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 365k, False: 2.26M]
  ------------------
   58|   365k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   365k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   365k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   365k|    }                                                           \
  |  |   40|   365k|    else {                                                      \
  |  |   41|   365k|        return vis(monostate_val);                              \
  |  |   42|   365k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.63M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   433k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 433k, False: 2.19M]
  ------------------
   62|   433k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   433k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   433k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   433k|    }                                                           \
  |  |   40|   433k|    else {                                                      \
  |  |   41|   433k|        return vis(monostate_val);                              \
  |  |   42|   433k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.63M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   436k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 436k, False: 2.19M]
  ------------------
   66|   436k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   436k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   436k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   436k|    }                                                           \
  |  |   40|   436k|    else {                                                      \
  |  |   41|   436k|        return vis(monostate_val);                              \
  |  |   42|   436k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.63M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.63M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.63M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.63M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.63M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.63M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.63M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.63M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.63M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.63M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.63M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.63M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.63M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.63M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.63M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.63M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.63M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.63M|            SCN_CLANG_POP
  114|  2.63M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.63M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  71.3k|{
   36|  71.3k|#define SCN_VISIT(Type)                                         \
   37|  71.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  71.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  71.3k|    }                                                           \
   40|  71.3k|    else {                                                      \
   41|  71.3k|        return vis(monostate_val);                              \
   42|  71.3k|    }
   43|       |
   44|  71.3k|    monostate monostate_val{};
   45|       |
   46|  71.3k|    switch (arg.m_type) {
   47|  11.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 11.8k, False: 59.4k]
  ------------------
   48|  11.8k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.8k|    }                                                           \
  |  |   40|  11.8k|    else {                                                      \
  |  |   41|  11.8k|        return vis(monostate_val);                              \
  |  |   42|  11.8k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 71.3k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  11.8k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 11.8k, False: 59.4k]
  ------------------
   52|  11.8k|            SCN_VISIT(int);
  ------------------
  |  |   37|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.8k|    }                                                           \
  |  |   40|  11.8k|    else {                                                      \
  |  |   41|  11.8k|        return vis(monostate_val);                              \
  |  |   42|  11.8k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 71.3k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  11.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 11.8k, False: 59.4k]
  ------------------
   56|  11.8k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.8k|    }                                                           \
  |  |   40|  11.8k|    else {                                                      \
  |  |   41|  11.8k|        return vis(monostate_val);                              \
  |  |   42|  11.8k|    }
  ------------------
   57|  11.8k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 11.8k, False: 59.4k]
  ------------------
   58|  11.8k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.8k|    }                                                           \
  |  |   40|  11.8k|    else {                                                      \
  |  |   41|  11.8k|        return vis(monostate_val);                              \
  |  |   42|  11.8k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 71.3k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  11.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 11.8k, False: 59.4k]
  ------------------
   62|  11.8k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.8k|    }                                                           \
  |  |   40|  11.8k|    else {                                                      \
  |  |   41|  11.8k|        return vis(monostate_val);                              \
  |  |   42|  11.8k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 71.3k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  11.8k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 11.8k, False: 59.4k]
  ------------------
   66|  11.8k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  11.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  11.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  11.8k|    }                                                           \
  |  |   40|  11.8k|    else {                                                      \
  |  |   41|  11.8k|        return vis(monostate_val);                              \
  |  |   42|  11.8k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 71.3k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 71.3k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 71.3k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 71.3k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 71.3k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 71.3k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 71.3k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 71.3k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 71.3k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 71.3k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 71.3k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 71.3k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 71.3k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 71.3k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 71.3k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 71.3k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 71.3k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  71.3k|            SCN_CLANG_POP
  114|  71.3k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  71.3k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   285k|{
   36|   285k|#define SCN_VISIT(Type)                                         \
   37|   285k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   285k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   285k|    }                                                           \
   40|   285k|    else {                                                      \
   41|   285k|        return vis(monostate_val);                              \
   42|   285k|    }
   43|       |
   44|   285k|    monostate monostate_val{};
   45|       |
   46|   285k|    switch (arg.m_type) {
   47|  47.5k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 47.5k, False: 237k]
  ------------------
   48|  47.5k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  47.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.5k|    }                                                           \
  |  |   40|  47.5k|    else {                                                      \
  |  |   41|  47.5k|        return vis(monostate_val);                              \
  |  |   42|  47.5k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 285k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  47.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 47.5k, False: 237k]
  ------------------
   52|  47.5k|            SCN_VISIT(int);
  ------------------
  |  |   37|  47.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.5k|    }                                                           \
  |  |   40|  47.5k|    else {                                                      \
  |  |   41|  47.5k|        return vis(monostate_val);                              \
  |  |   42|  47.5k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 285k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  47.5k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 47.5k, False: 237k]
  ------------------
   56|  47.5k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  47.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.5k|    }                                                           \
  |  |   40|  47.5k|    else {                                                      \
  |  |   41|  47.5k|        return vis(monostate_val);                              \
  |  |   42|  47.5k|    }
  ------------------
   57|  47.5k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 47.5k, False: 237k]
  ------------------
   58|  47.5k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  47.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.5k|    }                                                           \
  |  |   40|  47.5k|    else {                                                      \
  |  |   41|  47.5k|        return vis(monostate_val);                              \
  |  |   42|  47.5k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 285k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  47.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 47.5k, False: 237k]
  ------------------
   62|  47.5k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  47.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.5k|    }                                                           \
  |  |   40|  47.5k|    else {                                                      \
  |  |   41|  47.5k|        return vis(monostate_val);                              \
  |  |   42|  47.5k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 285k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  47.5k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 47.5k, False: 237k]
  ------------------
   66|  47.5k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  47.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.5k|    }                                                           \
  |  |   40|  47.5k|    else {                                                      \
  |  |   41|  47.5k|        return vis(monostate_val);                              \
  |  |   42|  47.5k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 285k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 285k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 285k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 285k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 285k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 285k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 285k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 285k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 285k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 285k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 285k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 285k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 285k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 285k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 285k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 285k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 285k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   285k|            SCN_CLANG_POP
  114|   285k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   285k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.86M|{
  174|  1.86M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.86M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.86M|{
  111|  1.86M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.86M|    auto result = vscan_impl(buffer, format, args);
  114|  1.86M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 133k, False: 1.73M]
  |  |  ------------------
  ------------------
  115|   133k|        return unexpected(result.error());
  116|   133k|    }
  117|  1.73M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.86M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.86M|{
  192|  1.86M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.86M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.86M|{
  127|  1.86M|#if !SCN_DISABLE_LOCALE
  128|  1.86M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.86M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.86M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.86M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.86M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 133k, False: 1.73M]
  |  |  ------------------
  ------------------
  135|   133k|        return unexpected(result.error());
  136|   133k|    }
  137|  1.73M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.86M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   385k|{
  205|   385k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   385k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   385k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   385k|{
  151|   385k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   385k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   385k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.3k, False: 371k]
  |  |  ------------------
  ------------------
  155|  13.3k|        return unexpected(result.error());
  156|  13.3k|    }
  157|   371k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   385k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   133k|{
  174|   133k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   133k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   133k|{
  111|   133k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   133k|    auto result = vscan_impl(buffer, format, args);
  114|   133k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
  115|   133k|        return unexpected(result.error());
  116|   133k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   133k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   133k|{
  192|   133k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   133k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   133k|{
  127|   133k|#if !SCN_DISABLE_LOCALE
  128|   133k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   133k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   133k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   133k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   133k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
  135|   133k|        return unexpected(result.error());
  136|   133k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   133k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  13.3k|{
  205|  13.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  13.3k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  13.3k|{
  151|  13.3k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  13.3k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  13.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.3k, False: 0]
  |  |  ------------------
  ------------------
  155|  13.3k|        return unexpected(result.error());
  156|  13.3k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  13.3k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.73M|{
  111|  1.73M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.73M|    auto result = vscan_impl(buffer, format, args);
  114|  1.73M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 237k, False: 1.49M]
  |  |  ------------------
  ------------------
  115|   237k|        return unexpected(result.error());
  116|   237k|    }
  117|  1.49M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.73M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.73M|{
  127|  1.73M|#if !SCN_DISABLE_LOCALE
  128|  1.73M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.73M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.73M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.73M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.73M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 237k, False: 1.49M]
  |  |  ------------------
  ------------------
  135|   237k|        return unexpected(result.error());
  136|   237k|    }
  137|  1.49M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.73M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   344k|{
  151|   344k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   344k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   344k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.7k, False: 320k]
  |  |  ------------------
  ------------------
  155|  23.7k|        return unexpected(result.error());
  156|  23.7k|    }
  157|   320k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   344k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   237k|{
  111|   237k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   237k|    auto result = vscan_impl(buffer, format, args);
  114|   237k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 237k, False: 0]
  |  |  ------------------
  ------------------
  115|   237k|        return unexpected(result.error());
  116|   237k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   237k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   237k|{
  127|   237k|#if !SCN_DISABLE_LOCALE
  128|   237k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   237k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   237k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   237k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   237k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 237k, False: 0]
  |  |  ------------------
  ------------------
  135|   237k|        return unexpected(result.error());
  136|   237k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   237k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  23.7k|{
  151|  23.7k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  23.7k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  23.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.7k, False: 0]
  |  |  ------------------
  ------------------
  155|  23.7k|        return unexpected(result.error());
  156|  23.7k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  23.7k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   242k|{
   90|   242k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   242k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  1.73M|{
   45|  1.73M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.73M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   242k|{
  125|   242k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   242k|                                                         format, {});
  127|   242k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  1.73M|{
   61|  1.73M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  1.73M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  49.7k|{
  159|  49.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  49.7k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   344k|{
   73|   344k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   344k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   243k|{
   90|   243k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   243k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   243k|{
  125|   243k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   243k|                                                         format, {});
  127|   243k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  48.9k|{
  159|  48.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  48.9k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   334k|{
   90|   334k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   334k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   334k|{
  125|   334k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   334k|                                                         format, {});
  127|   334k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  66.3k|{
  159|  66.3k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  66.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  66.3k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   284k|{
   90|   284k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   284k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   284k|{
  125|   284k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   284k|                                                         format, {});
  127|   284k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  55.8k|{
  159|  55.8k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  55.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  55.8k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   340k|{
   90|   340k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   340k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   340k|{
  125|   340k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   340k|                                                         format, {});
  127|   340k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  67.5k|{
  159|  67.5k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  67.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  67.5k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   286k|{
   90|   286k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   286k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   286k|{
  125|   286k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   286k|                                                         format, {});
  127|   286k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  56.1k|{
  159|  56.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  56.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  56.1k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  39.6k|{
   90|  39.6k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.6k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   237k|{
   45|   237k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   237k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  39.6k|{
  125|  39.6k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  39.6k|                                                         format, {});
  127|  39.6k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   237k|{
   61|   237k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   237k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.96k|{
  159|  3.96k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.96k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  23.7k|{
   73|  23.7k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  23.7k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  39.6k|{
   90|  39.6k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.6k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  39.6k|{
  125|  39.6k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  39.6k|                                                         format, {});
  127|  39.6k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.96k|{
  159|  3.96k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.96k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  39.6k|{
   90|  39.6k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.6k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  39.6k|{
  125|  39.6k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  39.6k|                                                         format, {});
  127|  39.6k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.96k|{
  159|  3.96k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.96k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  39.6k|{
   90|  39.6k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.6k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  39.6k|{
  125|  39.6k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  39.6k|                                                         format, {});
  127|  39.6k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.96k|{
  159|  3.96k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.96k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  39.6k|{
   90|  39.6k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.6k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  39.6k|{
  125|  39.6k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  39.6k|                                                         format, {});
  127|  39.6k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.96k|{
  159|  3.96k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.96k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  39.6k|{
   90|  39.6k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  39.6k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  39.6k|{
  125|  39.6k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  39.6k|                                                         format, {});
  127|  39.6k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  3.96k|{
  159|  3.96k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  3.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  3.96k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  4.50M|            {
 2693|  4.50M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.50M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  4.50M|            {
 2672|  4.50M|                return decay_copy(t.begin());
 2673|  4.50M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   131M|    {
 2606|   131M|        return std::forward<T>(t);
 2607|   131M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  8.13M|            {
 3178|  8.13M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  8.13M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  8.13M|            {
 3158|  8.13M|                return t.data();
 3159|  8.13M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  8.13M|    {
 6095|  8.13M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 21.8k, False: 8.11M]
  ------------------
 6096|  8.13M|                   ? nullptr
 6097|  8.13M|                   : std::addressof(*ranges::begin(derived()));
 6098|  8.13M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  8.13M|            {
 3127|  8.13M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  8.13M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  8.13M|            {
 3098|  8.13M|                return bool((std::forward<T>(t).empty()));
 3099|  8.13M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  19.3M|        {
 6454|  19.3M|            return data_.begin_ == data_.end_;
 6455|  19.3M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  16.2M|    {
 6049|  16.2M|        return static_cast<const D&>(*this);
 6050|  16.2M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  33.2M|            {
 2693|  33.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  33.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  33.2M|            {
 2672|  33.2M|                return decay_copy(t.begin());
 2673|  33.2M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  76.9M|        {
 6444|  76.9M|            return data_.begin_;
 6445|  76.9M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  8.13M|            {
 3038|  8.13M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.13M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  8.13M|            {
 3000|  8.13M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.13M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  33.3M|    {
 2606|  33.3M|        return std::forward<T>(t);
 2607|  33.3M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  19.3M|        {
 6462|  19.3M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  19.3M|                return data_.size_;
 6464|  19.3M|            }
 6465|  19.3M|            else {
 6466|  19.3M|                return data_.end_ - data_.begin_;
 6467|  19.3M|            }
 6468|  19.3M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  13.5M|            {
 3788|  13.5M|                ranges::advance(x, n);
 3789|  13.5M|                return x;
 3790|  13.5M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  13.5M|            {
 3678|  13.5M|                fn::impl(i, n);
 3679|  13.5M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  13.5M|            {
 3562|  13.5M|                r += n;
 3563|  13.5M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  40.6M|            {
 2693|  40.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  40.6M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  40.6M|            {
 2672|  40.6M|                return decay_copy(t.begin());
 2673|  40.6M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  19.8M|            {
 2759|  19.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  19.8M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  19.8M|            {
 2739|  19.8M|                return decay_copy(std::forward<T>(t).end());
 2740|  19.8M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  50.7M|        {
 6449|  50.7M|            return data_.end_;
 6450|  50.7M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  8.34M|            {
 2759|  8.34M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  8.34M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  8.34M|            {
 2739|  8.34M|                return decay_copy(std::forward<T>(t).end());
 2740|  8.34M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  32.3M|        {
 6375|  32.3M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  32.3M|        {
 6294|  32.3M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   280k|            {
 2693|   280k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   280k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   280k|            {
 2672|   280k|                return decay_copy(t.begin());
 2673|   280k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  1.59M|    {
 2606|  1.59M|        return std::forward<T>(t);
 2607|  1.59M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   280k|            {
 2693|   280k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   280k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   280k|            {
 2672|   280k|                return decay_copy(t.begin());
 2673|   280k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   280k|        {
 6444|   280k|            return data_.begin_;
 6445|   280k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   749k|            {
 2759|   749k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   749k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   749k|            {
 2739|   749k|                return decay_copy(std::forward<T>(t).end());
 2740|   749k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   749k|        {
 6449|   749k|            return data_.end_;
 6450|   749k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   280k|            {
 2759|   280k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   280k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   280k|            {
 2739|   280k|                return decay_copy(std::forward<T>(t).end());
 2740|   280k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   280k|        {
 6375|   280k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   280k|        {
 6294|   280k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|   860k|            {
 2693|   860k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   860k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|   860k|            {
 2672|   860k|                return decay_copy(t.begin());
 2673|   860k|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   180M|    {
 2606|   180M|        return std::forward<T>(t);
 2607|   180M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  3.80M|            {
 3178|  3.80M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.80M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.80M|            {
 3158|  3.80M|                return t.data();
 3159|  3.80M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  3.80M|    {
 6095|  3.80M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 22.7k, False: 3.78M]
  ------------------
 6096|  3.80M|                   ? nullptr
 6097|  3.80M|                   : std::addressof(*ranges::begin(derived()));
 6098|  3.80M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  3.80M|            {
 3127|  3.80M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  3.80M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  3.80M|            {
 3098|  3.80M|                return bool((std::forward<T>(t).empty()));
 3099|  3.80M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  6.05M|        {
 6454|  6.05M|            return data_.begin_ == data_.end_;
 6455|  6.05M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  7.59M|    {
 6049|  7.59M|        return static_cast<const D&>(*this);
 6050|  7.59M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  30.1M|            {
 2693|  30.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  30.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  30.1M|            {
 2672|  30.1M|                return decay_copy(t.begin());
 2673|  30.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  77.2M|        {
 6444|  77.2M|            return data_.begin_;
 6445|  77.2M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  3.80M|            {
 3038|  3.80M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  3.80M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  3.80M|            {
 3000|  3.80M|                return decay_copy(std::forward<T>(t).size());
 3001|  3.80M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  13.9M|        {
 6462|  13.9M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  13.9M|                return data_.size_;
 6464|  13.9M|            }
 6465|  13.9M|            else {
 6466|  13.9M|                return data_.end_ - data_.begin_;
 6467|  13.9M|            }
 6468|  13.9M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  15.8M|            {
 3788|  15.8M|                ranges::advance(x, n);
 3789|  15.8M|                return x;
 3790|  15.8M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  15.8M|            {
 3678|  15.8M|                fn::impl(i, n);
 3679|  15.8M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  15.8M|            {
 3562|  15.8M|                r += n;
 3563|  15.8M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  44.3M|            {
 2693|  44.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  44.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  44.3M|            {
 2672|  44.3M|                return decay_copy(t.begin());
 2673|  44.3M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  17.7M|            {
 2759|  17.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  17.7M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  17.7M|            {
 2739|  17.7M|                return decay_copy(std::forward<T>(t).end());
 2740|  17.7M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   104M|        {
 6449|   104M|            return data_.end_;
 6450|   104M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  4.88M|            {
 2759|  4.88M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.88M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  4.88M|            {
 2739|  4.88M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.88M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  29.4M|        {
 6375|  29.4M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  29.4M|        {
 6294|  29.4M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   499k|            {
 2693|   499k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   499k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   499k|            {
 2672|   499k|                return decay_copy(t.begin());
 2673|   499k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  2.83M|    {
 2606|  2.83M|        return std::forward<T>(t);
 2607|  2.83M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   499k|            {
 2693|   499k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   499k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   499k|            {
 2672|   499k|                return decay_copy(t.begin());
 2673|   499k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   499k|        {
 6444|   499k|            return data_.begin_;
 6445|   499k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.33M|            {
 2759|  1.33M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.33M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.33M|            {
 2739|  1.33M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.33M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.33M|        {
 6449|  1.33M|            return data_.end_;
 6450|  1.33M|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   499k|            {
 2759|   499k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   499k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   499k|            {
 2739|   499k|                return decay_copy(std::forward<T>(t).end());
 2740|   499k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   499k|        {
 6375|   499k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   499k|        {
 6294|   499k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  4.78M|        {
 6444|  4.78M|            return data_.begin_;
 6445|  4.78M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  8.87M|        {
 6444|  8.87M|            return data_.begin_;
 6445|  8.87M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  22.3M|    {
 6044|  22.3M|        return static_cast<D&>(*this);
 6045|  22.3M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  11.1M|            {
 3098|  11.1M|                return bool((std::forward<T>(t).empty()));
 3099|  11.1M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  11.1M|            {
 3127|  11.1M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  11.1M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  11.1M|    {
 6085|  11.1M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 11.1M]
  ------------------
 6086|  11.1M|                   ? nullptr
 6087|  11.1M|                   : std::addressof(*ranges::begin(derived()));
 6088|  11.1M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  25.3M|            {
 2739|  25.3M|                return decay_copy(std::forward<T>(t).end());
 2740|  25.3M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  25.3M|            {
 2759|  25.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  25.3M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  4.48M|    {
 6044|  4.48M|        return static_cast<D&>(*this);
 6045|  4.48M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  2.24M|            {
 3098|  2.24M|                return bool((std::forward<T>(t).empty()));
 3099|  2.24M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  2.24M|            {
 3127|  2.24M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.24M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  2.24M|    {
 6085|  2.24M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 2.24M]
  ------------------
 6086|  2.24M|                   ? nullptr
 6087|  2.24M|                   : std::addressof(*ranges::begin(derived()));
 6088|  2.24M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  82.1M|            {
 2739|  82.1M|                return decay_copy(std::forward<T>(t).end());
 2740|  82.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  82.1M|            {
 2759|  82.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  82.1M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  6.82M|            {
 3780|  6.82M|                ++x;
 3781|  6.82M|                return x;
 3782|  6.82M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  11.2M|            {
 3038|  11.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  11.2M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  11.2M|            {
 3000|  11.2M|                return decay_copy(std::forward<T>(t).size());
 3001|  11.2M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  11.1M|            {
 3178|  11.1M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  11.1M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  11.1M|            {
 3158|  11.1M|                return t.data();
 3159|  11.1M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  1.06M|            {
 3828|  1.06M|                --x;
 3829|  1.06M|                return x;
 3830|  1.06M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|   878k|            {
 3077|   878k|                return fn::impl(std::forward<T>(t));
 3078|   878k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|   878k|            {
 3067|   878k|                return static_cast<ssize_return_t<T>>(
 3068|   878k|                    ranges::size(std::forward<T>(t)));
 3069|   878k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|   878k|            {
 3038|   878k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   878k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|   878k|            {
 3000|   878k|                return decay_copy(std::forward<T>(t).size());
 3001|   878k|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  9.80M|    {
 2606|  9.80M|        return std::forward<T>(t);
 2607|  9.80M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  8.92M|            {
 3077|  8.92M|                return fn::impl(std::forward<T>(t));
 3078|  8.92M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  8.92M|            {
 3067|  8.92M|                return static_cast<ssize_return_t<T>>(
 3068|  8.92M|                    ranges::size(std::forward<T>(t)));
 3069|  8.92M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  8.92M|            {
 3038|  8.92M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.92M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  8.92M|            {
 3000|  8.92M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.92M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  8.71M|            {
 1300|  8.71M|                return fn::impl(std::forward<F>(f),
 1301|  8.71M|                                std::forward<Args>(args)...);
 1302|  8.71M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  8.71M|            {
 1289|  8.71M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  8.71M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  8.71M|    {
 1142|  8.71M|        return std::forward<T>(t);
 1143|  8.71M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  13.7M|            {
 3756|  13.7M|                return fn::impl(std::move(first), std::move(last));
 3757|  13.7M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  13.7M|            {
 3716|  13.7M|                return s - i;
 3717|  13.7M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.24M|        {
 6375|  1.24M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.24M|        {
 6294|  1.24M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.40M|            {
 2693|  2.40M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.40M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.40M|            {
 2672|  2.40M|                return decay_copy(t.begin());
 2673|  2.40M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  4.54M|    {
 2606|  4.54M|        return std::forward<T>(t);
 2607|  4.54M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.14M|            {
 2759|  1.14M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.14M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.14M|            {
 2739|  1.14M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.14M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  6.31M|    {
 2606|  6.31M|        return std::forward<T>(t);
 2607|  6.31M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  2.27M|        {
 6449|  2.27M|            return data_.end_;
 6450|  2.27M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   320k|            {
 3780|   320k|                ++x;
 3781|   320k|                return x;
 3782|   320k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   173k|        {
 6793|   173k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   173k|                                    proj);
 6795|   173k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   173k|        {
 6761|   173k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 173k, False: 78]
  ------------------
 6762|   173k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 173k, False: 0]
  ------------------
 6763|   173k|                    return first;
 6764|   173k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|     78|            return first;
 6768|   173k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   173k|            {
 1300|   173k|                return fn::impl(std::forward<F>(f),
 1301|   173k|                                std::forward<Args>(args)...);
 1302|   173k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   173k|            {
 1289|   173k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   173k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   173k|            {
 1300|   173k|                return fn::impl(std::forward<F>(f),
 1301|   173k|                                std::forward<Args>(args)...);
 1302|   173k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   173k|            {
 1289|   173k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   173k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   173k|    {
 1142|   173k|        return std::forward<T>(t);
 1143|   173k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.12M|            {
 2759|  1.12M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.12M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.12M|            {
 2739|  1.12M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.12M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  2.13M|            {
 2693|  2.13M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.13M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  2.13M|            {
 2672|  2.13M|                return decay_copy(t.begin());
 2673|  2.13M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  2.24M|            {
 3178|  2.24M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.24M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.24M|            {
 3158|  2.24M|                return t.data();
 3159|  2.24M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  10.1M|            {
 3038|  10.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  10.1M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  10.1M|            {
 3000|  10.1M|                return decay_copy(std::forward<T>(t).size());
 3001|  10.1M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  6.16M|            {
 3780|  6.16M|                ++x;
 3781|  6.16M|                return x;
 3782|  6.16M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  7.92M|            {
 3077|  7.92M|                return fn::impl(std::forward<T>(t));
 3078|  7.92M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  7.92M|            {
 3067|  7.92M|                return static_cast<ssize_return_t<T>>(
 3068|  7.92M|                    ranges::size(std::forward<T>(t)));
 3069|  7.92M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   925k|            {
 3828|   925k|                --x;
 3829|   925k|                return x;
 3830|   925k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  8.56M|            {
 3756|  8.56M|                return fn::impl(std::move(first), std::move(last));
 3757|  8.56M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  8.56M|            {
 3716|  8.56M|                return s - i;
 3717|  8.56M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  2.21M|        {
 6375|  2.21M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  2.21M|        {
 6294|  2.21M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  4.63M|            {
 2693|  4.63M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.63M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  4.63M|            {
 2672|  4.63M|                return decay_copy(t.begin());
 2673|  4.63M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  8.44M|    {
 2606|  8.44M|        return std::forward<T>(t);
 2607|  8.44M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  2.04M|            {
 2759|  2.04M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.04M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.04M|            {
 2739|  2.04M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.04M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  4.04M|        {
 6449|  4.04M|            return data_.end_;
 6450|  4.04M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   570k|            {
 3780|   570k|                ++x;
 3781|   570k|                return x;
 3782|   570k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   309k|        {
 6793|   309k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   309k|                                    proj);
 6795|   309k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   309k|        {
 6761|   309k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 309k, False: 78]
  ------------------
 6762|   309k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 309k, False: 0]
  ------------------
 6763|   309k|                    return first;
 6764|   309k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|     78|            return first;
 6768|   309k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   309k|            {
 1300|   309k|                return fn::impl(std::forward<F>(f),
 1301|   309k|                                std::forward<Args>(args)...);
 1302|   309k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   309k|            {
 1289|   309k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   309k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   309k|            {
 1300|   309k|                return fn::impl(std::forward<F>(f),
 1301|   309k|                                std::forward<Args>(args)...);
 1302|   309k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   309k|            {
 1289|   309k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   309k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   309k|    {
 1142|   309k|        return std::forward<T>(t);
 1143|   309k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.99M|            {
 2759|  1.99M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.99M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.99M|            {
 2739|  1.99M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.99M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  3.80M|            {
 2693|  3.80M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.80M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  3.80M|            {
 2672|  3.80M|                return decay_copy(t.begin());
 2673|  3.80M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  4.22M|        {
 6793|  4.22M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  4.22M|                                    proj);
 6795|  4.22M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  4.22M|        {
 6761|  8.78M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 8.71M, False: 62.8k]
  ------------------
 6762|  8.71M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 4.15M, False: 4.56M]
  ------------------
 6763|  4.15M|                    return first;
 6764|  4.15M|                }
 6765|  4.56M|                ++first;
 6766|  4.56M|            }
 6767|  62.8k|            return first;
 6768|  4.22M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  8.71M|            {
 1300|  8.71M|                return fn::impl(std::forward<F>(f),
 1301|  8.71M|                                std::forward<Args>(args)...);
 1302|  8.71M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  8.71M|            {
 1289|  8.71M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  8.71M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   345k|{
   50|   345k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   345k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   345k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|   121k|{
   50|   121k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   121k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  57.5k|{
   50|  57.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  57.5k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   173k|    {
   44|   173k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   309k|    {
   44|   309k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  48.3k|{
   50|  48.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  48.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  48.3k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  9.48M|    {
 1191|  9.48M|        return has_value();
 1192|  9.48M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  18.1M|    {
  189|  18.1M|        return m_has_value;
  190|  18.1M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  1.56M|    {
 1197|  1.56M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.56M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.56M|    {
  172|  1.56M|        return m_unexpected;
  173|  1.56M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  11.6M|    {
   72|  11.6M|        return m_unexpected;
   73|  11.6M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  5.78M|    {
   58|  5.78M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  5.78M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  5.78M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   280k|    {
 1078|   280k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   280k|    {
  151|   280k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  6.89M|    {
   67|  6.89M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  6.89M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  6.89M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.11M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  7.14M|    {
 1251|  7.14M|        return value();
 1252|  7.14M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  7.14M|    {
 1221|  7.14M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.14M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  7.14M|    {
  155|  7.14M|        return m_value;
  156|  7.14M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  3.83M|    {
 1034|  3.83M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  3.83M|    {
  142|  3.83M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  4.11M|    {
 1191|  4.11M|        return has_value();
 1192|  4.11M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  8.23M|    {
  189|  8.23M|        return m_has_value;
  190|  8.23M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   280k|    {
 1197|   280k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   280k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   280k|    {
  172|   280k|        return m_unexpected;
  173|   280k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   568k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  3.46M|    {
 1251|  3.46M|        return value();
 1252|  3.46M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  3.83M|    {
 1221|  3.83M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.83M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.83M|    {
  155|  3.83M|        return m_value;
  156|  3.83M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   522k|    {
 1034|   522k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   522k|    {
  142|   522k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   568k|    {
 1191|   568k|        return has_value();
 1192|   568k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.09M|    {
  189|  1.09M|        return m_has_value;
  190|  1.09M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   522k|    {
 1274|   522k|        return std::addressof(value());
 1275|   522k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   522k|    {
 1221|   522k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   522k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   522k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   522k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   522k|    {
  155|   522k|        return m_value;
  156|   522k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   371k|    {
 1263|   371k|        return std::move(value());
 1264|   371k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   570k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   523k|    {
 1034|   523k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   523k|    {
  142|   523k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   570k|    {
 1191|   570k|        return has_value();
 1192|   570k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.09M|    {
  189|  1.09M|        return m_has_value;
  190|  1.09M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   523k|    {
 1274|   523k|        return std::addressof(value());
 1275|   523k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   523k|    {
 1221|   523k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   523k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   523k|    {
  155|   523k|        return m_value;
  156|   523k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   808k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   761k|    {
 1034|   761k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   761k|    {
  142|   761k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   808k|    {
 1191|   808k|        return has_value();
 1192|   808k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.56M|    {
  189|  1.56M|        return m_has_value;
  190|  1.56M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   761k|    {
 1274|   761k|        return std::addressof(value());
 1275|   761k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   761k|    {
 1221|   761k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   761k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   761k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   761k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   761k|    {
  155|   761k|        return m_value;
  156|   761k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   671k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   624k|    {
 1034|   624k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   624k|    {
  142|   624k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   671k|    {
 1191|   671k|        return has_value();
 1192|   671k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.29M|    {
  189|  1.29M|        return m_has_value;
  190|  1.29M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   624k|    {
 1274|   624k|        return std::addressof(value());
 1275|   624k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   624k|    {
 1221|   624k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   624k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   624k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   624k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   624k|    {
  155|   624k|        return m_value;
  156|   624k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   824k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   777k|    {
 1034|   777k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   777k|    {
  142|   777k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   824k|    {
 1191|   824k|        return has_value();
 1192|   824k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.60M|    {
  189|  1.60M|        return m_has_value;
  190|  1.60M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   777k|    {
 1274|   777k|        return std::addressof(value());
 1275|   777k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   777k|    {
 1221|   777k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   777k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   777k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   777k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   777k|    {
  155|   777k|        return m_value;
  156|   777k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   676k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   629k|    {
 1034|   629k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   629k|    {
  142|   629k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   676k|    {
 1191|   676k|        return has_value();
 1192|   676k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.30M|    {
  189|  1.30M|        return m_has_value;
  190|  1.30M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   629k|    {
 1274|   629k|        return std::addressof(value());
 1275|   629k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   629k|    {
 1221|   629k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   629k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   629k|    {
  155|   629k|        return m_value;
  156|   629k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   280k|    {
 1078|   280k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   280k|    {
  151|   280k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   280k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   280k|    {
 1191|   280k|        return has_value();
 1192|   280k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   561k|    {
  189|   561k|        return m_has_value;
  190|   561k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   280k|    {
 1197|   280k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   280k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   280k|    {
  172|   280k|        return m_unexpected;
  173|   280k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  46.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  46.7k|    {
 1191|  46.7k|        return has_value();
 1192|  46.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  46.7k|    {
  189|  46.7k|        return m_has_value;
  190|  46.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  46.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  46.7k|    {
 1191|  46.7k|        return has_value();
 1192|  46.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  46.7k|    {
  189|  46.7k|        return m_has_value;
  190|  46.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  46.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  46.7k|    {
 1191|  46.7k|        return has_value();
 1192|  46.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  46.7k|    {
  189|  46.7k|        return m_has_value;
  190|  46.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  46.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  46.7k|    {
 1191|  46.7k|        return has_value();
 1192|  46.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  46.7k|    {
  189|  46.7k|        return m_has_value;
  190|  46.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  46.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  46.7k|    {
 1191|  46.7k|        return has_value();
 1192|  46.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  46.7k|    {
  189|  46.7k|        return m_has_value;
  190|  46.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  46.7k|    {
 1078|  46.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  46.7k|    {
  151|  46.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  46.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  46.7k|    {
 1191|  46.7k|        return has_value();
 1192|  46.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  46.7k|    {
  189|  46.7k|        return m_has_value;
  190|  46.7k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   499k|    {
 1078|   499k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   499k|    {
  151|   499k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.80M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  3.30M|    {
 1034|  3.30M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  3.30M|    {
  142|  3.30M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  3.80M|    {
 1191|  3.80M|        return has_value();
 1192|  3.80M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  7.61M|    {
  189|  7.61M|        return m_has_value;
  190|  7.61M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   499k|    {
 1197|   499k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   499k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   499k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   499k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   499k|    {
  172|   499k|        return m_unexpected;
  173|   499k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   534k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.98M|    {
 1251|  2.98M|        return value();
 1252|  2.98M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  3.30M|    {
 1221|  3.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.30M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.30M|    {
  155|  3.30M|        return m_value;
  156|  3.30M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   451k|    {
 1034|   451k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   451k|    {
  142|   451k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   534k|    {
 1191|   534k|        return has_value();
 1192|   534k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   985k|    {
  189|   985k|        return m_has_value;
  190|   985k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   451k|    {
 1274|   451k|        return std::addressof(value());
 1275|   451k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   451k|    {
 1221|   451k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   451k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   451k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   451k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   451k|    {
  155|   451k|        return m_value;
  156|   451k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   320k|    {
 1263|   320k|        return std::move(value());
 1264|   320k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   535k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   452k|    {
 1034|   452k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   452k|    {
  142|   452k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   535k|    {
 1191|   535k|        return has_value();
 1192|   535k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   988k|    {
  189|   988k|        return m_has_value;
  190|   988k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   452k|    {
 1274|   452k|        return std::addressof(value());
 1275|   452k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   452k|    {
 1221|   452k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   452k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   452k|    {
  155|   452k|        return m_value;
  156|   452k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   736k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   652k|    {
 1034|   652k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   652k|    {
  142|   652k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   736k|    {
 1191|   736k|        return has_value();
 1192|   736k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.38M|    {
  189|  1.38M|        return m_has_value;
  190|  1.38M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   652k|    {
 1274|   652k|        return std::addressof(value());
 1275|   652k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   652k|    {
 1221|   652k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   652k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   652k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   652k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   652k|    {
  155|   652k|        return m_value;
  156|   652k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   625k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   541k|    {
 1034|   541k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   541k|    {
  142|   541k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   625k|    {
 1191|   625k|        return has_value();
 1192|   625k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.16M|    {
  189|  1.16M|        return m_has_value;
  190|  1.16M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   541k|    {
 1274|   541k|        return std::addressof(value());
 1275|   541k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   541k|    {
 1221|   541k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   541k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   541k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   541k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   541k|    {
  155|   541k|        return m_value;
  156|   541k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   747k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   664k|    {
 1034|   664k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   664k|    {
  142|   664k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   747k|    {
 1191|   747k|        return has_value();
 1192|   747k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.41M|    {
  189|  1.41M|        return m_has_value;
  190|  1.41M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   664k|    {
 1274|   664k|        return std::addressof(value());
 1275|   664k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   664k|    {
 1221|   664k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   664k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   664k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   664k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   664k|    {
  155|   664k|        return m_value;
  156|   664k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   628k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   545k|    {
 1034|   545k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   545k|    {
  142|   545k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   628k|    {
 1191|   628k|        return has_value();
 1192|   628k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.17M|    {
  189|  1.17M|        return m_has_value;
  190|  1.17M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   545k|    {
 1274|   545k|        return std::addressof(value());
 1275|   545k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   545k|    {
 1221|   545k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   545k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   545k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   545k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   545k|    {
  155|   545k|        return m_value;
  156|   545k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   499k|    {
 1078|   499k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   499k|    {
  151|   499k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   499k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   499k|    {
 1191|   499k|        return has_value();
 1192|   499k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   999k|    {
  189|   999k|        return m_has_value;
  190|   999k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   499k|    {
 1197|   499k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   499k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   499k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   499k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   499k|    {
  172|   499k|        return m_unexpected;
  173|   499k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  83.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  83.2k|    {
 1191|  83.2k|        return has_value();
 1192|  83.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  83.2k|    {
  189|  83.2k|        return m_has_value;
  190|  83.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  83.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  83.2k|    {
 1191|  83.2k|        return has_value();
 1192|  83.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  83.2k|    {
  189|  83.2k|        return m_has_value;
  190|  83.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  83.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  83.2k|    {
 1191|  83.2k|        return has_value();
 1192|  83.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  83.2k|    {
  189|  83.2k|        return m_has_value;
  190|  83.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  83.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  83.2k|    {
 1191|  83.2k|        return has_value();
 1192|  83.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  83.2k|    {
  189|  83.2k|        return m_has_value;
  190|  83.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  83.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  83.2k|    {
 1191|  83.2k|        return has_value();
 1192|  83.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  83.2k|    {
  189|  83.2k|        return m_has_value;
  190|  83.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  83.2k|    {
 1078|  83.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  83.2k|    {
  151|  83.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  83.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  83.2k|    {
 1191|  83.2k|        return has_value();
 1192|  83.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  83.2k|    {
  189|  83.2k|        return m_has_value;
  190|  83.2k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  4.03M|    {
 1405|  4.03M|        return detail::transform_error_impl(std::move(*this),
 1406|  4.03M|                                            std::forward<F>(f));
 1407|  4.03M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  4.03M|{
  927|  4.03M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.03M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.03M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.03M|            return result(*std::forward<Exp>(exp));
  931|  4.03M|        }
  932|       |
  933|  4.03M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.03M|        return result(unexpect, monostate{});
  935|  4.03M|    }
  936|  4.03M|    else {
  937|  4.03M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.03M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.01M, False: 25.7k]
  |  |  ------------------
  ------------------
  939|  4.03M|                   ? result(*std::forward<Exp>(exp))
  940|  4.03M|                   : result(unexpect,
  941|  25.7k|                            std::invoke(std::forward<F>(f),
  942|  25.7k|                                        std::forward<Exp>(exp).error()));
  943|  4.03M|    }
  944|  4.03M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  16.8M|    {
  189|  16.8M|        return m_has_value;
  190|  16.8M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  4.01M|    {
 1263|  4.01M|        return std::move(value());
 1264|  4.01M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  5.94M|    {
 1221|  5.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.94M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  5.94M|    {
  155|  5.94M|        return m_value;
  156|  5.94M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  14.8M|    {
 1034|  14.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  14.8M|    {
  142|  14.8M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  25.7k|    {
 1207|  25.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  25.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  25.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  25.7k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  27.2k|    {
  172|  27.2k|        return m_unexpected;
  173|  27.2k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   321k|    {
   72|   321k|        return m_unexpected;
   73|   321k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  25.7k|    {
 1088|  25.7k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   381k|    {
  151|   381k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  15.2M|    {
 1191|  15.2M|        return has_value();
 1192|  15.2M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  30.5M|    {
  189|  30.5M|        return m_has_value;
  190|  30.5M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   381k|    {
 1197|   381k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   381k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   381k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   381k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   381k|    {
  172|   381k|        return m_unexpected;
  173|   381k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   355k|    {
 1078|   355k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  12.1M|    {
 1263|  12.1M|        return std::move(value());
 1264|  12.1M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  14.8M|    {
 1221|  14.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  14.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  14.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  14.8M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  14.8M|    {
  155|  14.8M|        return m_value;
  156|  14.8M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   573k|    {
   58|   573k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   573k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   573k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  1.56M|    {
 1078|  1.56M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  1.56M|    {
  151|  1.56M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.70M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  57.4k|    {
   58|  57.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  57.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  57.4k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  27.2k|    {
 1078|  27.2k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  27.2k|    {
  151|  27.2k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   160k|    {
   67|   160k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   160k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   160k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  10.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  10.8M|    {
 1034|  10.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  10.8M|    {
  142|  10.8M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  6.82M|    {
 1191|  6.82M|        return has_value();
 1192|  6.82M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.41k|    {
 1197|  1.41k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.41k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  54.1k|    {
   58|  54.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  54.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  54.1k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  52.2k|    {
 1078|  52.2k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  8.02M|    {
   72|  8.02M|        return m_unexpected;
   73|  8.02M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  52.2k|    {
  151|  52.2k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   260k|    {
   67|   260k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   260k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   260k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  18.5M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.93M|    {
 1251|  1.93M|        return value();
 1252|  1.93M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  3.70M|    {
 1034|  3.70M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  3.70M|    {
  142|  3.70M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  30.0M|    {
   58|  30.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  30.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  30.0M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  14.6M|    {
 1078|  14.6M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  30.0M|    {
   72|  30.0M|        return m_unexpected;
   73|  30.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  14.6M|    {
  151|  14.6M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  30.0M|    {
   67|  30.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  30.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  30.0M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  18.5M|    {
 1191|  18.5M|        return has_value();
 1192|  18.5M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  26.1M|    {
  189|  26.1M|        return m_has_value;
  190|  26.1M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  3.80M|    {
 1197|  3.80M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  3.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  3.80M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  3.80M|    {
  172|  3.80M|        return m_unexpected;
  173|  3.80M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  4.01M|    {
 1034|  4.01M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  4.01M|    {
  142|  4.01M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.01M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   103k|    {
   58|   103k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   103k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   103k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.80M|    {
 1251|  3.80M|        return value();
 1252|  3.80M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  3.80M|    {
 1221|  3.80M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.80M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  3.80M|    {
  155|  3.80M|        return m_value;
  156|  3.80M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  4.01M|    {
 1191|  4.01M|        return has_value();
 1192|  4.01M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  8.02M|    {
  189|  8.02M|        return m_has_value;
  190|  8.02M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.01M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  4.01M|    {
 1263|  4.01M|        return std::move(value());
 1264|  4.01M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  4.01M|    {
 1221|  4.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.01M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  4.01M|    {
  155|  4.01M|        return m_value;
  156|  4.01M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|   102k|    {
 1034|   102k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|   102k|    {
  142|   102k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  4.01M|    {
 1034|  4.01M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.01M|    {
  142|  4.01M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  4.01M|    {
 1405|  4.01M|        return detail::transform_error_impl(std::move(*this),
 1406|  4.01M|                                            std::forward<F>(f));
 1407|  4.01M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  4.01M|{
  927|  4.01M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.01M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.01M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.01M|            return result(*std::forward<Exp>(exp));
  931|  4.01M|        }
  932|       |
  933|  4.01M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.01M|        return result(unexpect, monostate{});
  935|  4.01M|    }
  936|  4.01M|    else {
  937|  4.01M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.01M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.01M, False: 0]
  |  |  ------------------
  ------------------
  939|  4.01M|                   ? result(*std::forward<Exp>(exp))
  940|  4.01M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  4.01M|    }
  944|  4.01M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  8.02M|    {
  189|  8.02M|        return m_has_value;
  190|  8.02M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.01M|    {
 1263|  4.01M|        return std::move(value());
 1264|  4.01M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.01M|    {
 1221|  4.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.01M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  4.01M|    {
  155|  4.01M|        return m_value;
  156|  4.01M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  4.01M|    {
 1034|  4.01M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.01M|    {
  142|  4.01M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.01M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  4.01M|    {
 1191|  4.01M|        return has_value();
 1192|  4.01M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  8.02M|    {
  189|  8.02M|        return m_has_value;
  190|  8.02M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.01M|    {
 1263|  4.01M|        return std::move(value());
 1264|  4.01M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.01M|    {
 1221|  4.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.01M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.01M|    {
  155|  4.01M|        return m_value;
  156|  4.01M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  10.8k|    {
 1078|  10.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  10.8k|    {
  312|  10.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  10.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  10.8k|    {
  373|  10.8k|        scn::detail::construct_at(unexpected_ptr(),
  374|  10.8k|                                  std::forward<Args>(args)...);
  375|  10.8k|        m_has_value = false;
  376|  10.8k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|   118k|{
  102|   118k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   118k|        T(std::forward<Args>(args)...);
  104|   118k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  32.5k|    {
  403|  32.5k|        return reinterpret_cast<unexpected<E>*>(
  404|  32.5k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  32.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  32.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   491k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   491k|    {
  317|   491k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 480k, False: 10.8k]
  ------------------
  318|   480k|            destroy_value();
  319|   480k|        }
  320|  10.8k|        else {
  321|  10.8k|            destroy_unexpected();
  322|  10.8k|        }
  323|   491k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.47M|    {
  361|  1.47M|        return m_has_value;
  362|  1.47M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   480k|    {
  380|   480k|        scn::detail::destroy_at(value_ptr());
  381|   480k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   480k|{
  108|   480k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   480k|        for (auto& elem : *p) {
  110|   480k|            scn::detail::destroy_at(std::addressof(elem));
  111|   480k|        }
  112|   480k|    }
  113|   480k|    else {
  114|   480k|        p->~T();
  115|   480k|    }
  116|   480k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.44M|    {
  390|  1.44M|        return reinterpret_cast<T*>(
  391|  1.44M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.44M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.44M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  10.8k|    {
  384|  10.8k|        scn::detail::destroy_at(unexpected_ptr());
  385|  10.8k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|   118k|{
  108|   118k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   118k|        for (auto& elem : *p) {
  110|   118k|            scn::detail::destroy_at(std::addressof(elem));
  111|   118k|        }
  112|   118k|    }
  113|   118k|    else {
  114|   118k|        p->~T();
  115|   118k|    }
  116|   118k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   480k|    {
 1034|   480k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   480k|    {
  303|   480k|        construct(std::forward<Args>(args)...);
  304|   480k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   480k|    {
  367|   480k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   480k|        m_has_value = true;
  369|   480k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   480k|{
  102|   480k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   480k|        T(std::forward<Args>(args)...);
  104|   480k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   491k|    {
 1191|   491k|        return has_value();
 1192|   491k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  10.8k|    {
 1197|  10.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  10.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  10.8k|    {
  344|  10.8k|        return *unexpected_ptr();
  345|  10.8k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   480k|    {
 1263|   480k|        return std::move(value());
 1264|   480k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   480k|    {
 1221|   480k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   480k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   480k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   480k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   480k|    {
  327|   480k|        return *value_ptr();
  328|   480k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.72M|    {
 1251|  2.72M|        return value();
 1252|  2.72M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   103k|    {
   58|   103k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   103k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   103k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  7.14M|    {
 1034|  7.14M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  7.14M|    {
  142|  7.14M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    378|    {
 1078|    378|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    378|    {
  151|    378|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   882k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   881k|    {
 1034|   881k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   881k|    {
  142|   881k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   200k|    {
 1405|   200k|        return detail::transform_error_impl(std::move(*this),
 1406|   200k|                                            std::forward<F>(f));
 1407|   200k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   200k|{
  927|   200k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   200k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   200k|        if (SCN_LIKELY(exp.has_value())) {
  930|   200k|            return result(*std::forward<Exp>(exp));
  931|   200k|        }
  932|       |
  933|   200k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   200k|        return result(unexpect, monostate{});
  935|   200k|    }
  936|   200k|    else {
  937|   200k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   200k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   200k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 200k, False: 0]
  |  |  ------------------
  ------------------
  939|   200k|                   ? result(*std::forward<Exp>(exp))
  940|   200k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   200k|    }
  944|   200k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  1.64M|    {
  189|  1.64M|        return m_has_value;
  190|  1.64M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   561k|    {
 1263|   561k|        return std::move(value());
 1264|   561k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   761k|    {
 1221|   761k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   761k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   761k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   761k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   761k|    {
  155|   761k|        return m_value;
  156|   761k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   200k|    {
 1034|   200k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   200k|    {
  142|   200k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   574k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    324|    {
 1207|    324|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    324|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    324|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    324|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    378|    {
  172|    378|        return m_unexpected;
  173|    378|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   173k|    {
 1088|   173k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   374k|    {
  151|   374k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   320k|    {
 1191|   320k|        return has_value();
 1192|   320k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1196|     54|    {
 1197|     54|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     54|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     54|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     54|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    378|    {
 1078|    378|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    702|    {
  151|    702|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.33M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|   200k|    {
 1251|   200k|        return value();
 1252|   200k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|   200k|    {
 1034|   200k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|   200k|    {
  142|   200k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|   774k|    {
 1078|   774k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|   774k|    {
  151|   774k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.16M|    {
 1191|  1.16M|        return has_value();
 1192|  1.16M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  2.07M|    {
  189|  2.07M|        return m_has_value;
  190|  2.07M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|    324|    {
 1197|    324|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    324|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    324|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|    324|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   174k|    {
  172|   174k|        return m_unexpected;
  173|   174k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   200k|    {
 1034|   200k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   200k|    {
  142|   200k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   200k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   200k|    {
 1251|   200k|        return value();
 1252|   200k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   561k|    {
 1221|   561k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   561k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   561k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   561k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   561k|    {
  155|   561k|        return m_value;
  156|   561k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   200k|    {
 1191|   200k|        return has_value();
 1192|   200k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   401k|    {
  189|   401k|        return m_has_value;
  190|   401k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   200k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   200k|    {
 1263|   200k|        return std::move(value());
 1264|   200k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   200k|    {
 1221|   200k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   200k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   200k|    {
  155|   200k|        return m_value;
  156|   200k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   360k|    {
 1405|   360k|        return detail::transform_error_impl(std::move(*this),
 1406|   360k|                                            std::forward<F>(f));
 1407|   360k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   360k|{
  927|   360k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   360k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   360k|        if (SCN_LIKELY(exp.has_value())) {
  930|   360k|            return result(*std::forward<Exp>(exp));
  931|   360k|        }
  932|       |
  933|   360k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   360k|        return result(unexpect, monostate{});
  935|   360k|    }
  936|   360k|    else {
  937|   360k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   360k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   360k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 360k, False: 324]
  |  |  ------------------
  ------------------
  939|   360k|                   ? result(*std::forward<Exp>(exp))
  940|   360k|                   : result(unexpect,
  941|    324|                            std::invoke(std::forward<F>(f),
  942|    324|                                        std::forward<Exp>(exp).error()));
  943|   360k|    }
  944|   360k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   360k|    {
 1034|   360k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   360k|    {
  142|   360k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    324|    {
 1088|    324|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   360k|    {
 1263|   360k|        return std::move(value());
 1264|   360k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   200k|    {
 1034|   200k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   200k|    {
  142|   200k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   200k|    {
 1405|   200k|        return detail::transform_error_impl(std::move(*this),
 1406|   200k|                                            std::forward<F>(f));
 1407|   200k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   200k|{
  927|   200k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   200k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   200k|        if (SCN_LIKELY(exp.has_value())) {
  930|   200k|            return result(*std::forward<Exp>(exp));
  931|   200k|        }
  932|       |
  933|   200k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   200k|        return result(unexpect, monostate{});
  935|   200k|    }
  936|   200k|    else {
  937|   200k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   200k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   200k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 200k, False: 0]
  |  |  ------------------
  ------------------
  939|   200k|                   ? result(*std::forward<Exp>(exp))
  940|   200k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   200k|    }
  944|   200k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   401k|    {
  189|   401k|        return m_has_value;
  190|   401k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   200k|    {
 1263|   200k|        return std::move(value());
 1264|   200k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   200k|    {
 1221|   200k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   200k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   200k|    {
  155|   200k|        return m_value;
  156|   200k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   200k|    {
 1034|   200k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   200k|    {
  142|   200k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   200k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   200k|    {
 1191|   200k|        return has_value();
 1192|   200k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   401k|    {
  189|   401k|        return m_has_value;
  190|   401k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   200k|    {
 1263|   200k|        return std::move(value());
 1264|   200k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   200k|    {
 1221|   200k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   200k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   200k|    {
  155|   200k|        return m_value;
  156|   200k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   173k|    {
 1405|   173k|        return detail::transform_error_impl(std::move(*this),
 1406|   173k|                                            std::forward<F>(f));
 1407|   173k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   173k|{
  927|   173k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   173k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   173k|        if (SCN_LIKELY(exp.has_value())) {
  930|   173k|            return result(*std::forward<Exp>(exp));
  931|   173k|        }
  932|       |
  933|   173k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   173k|        return result(unexpect, monostate{});
  935|   173k|    }
  936|   173k|    else {
  937|   173k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   173k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   173k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
  939|   173k|                   ? result(*std::forward<Exp>(exp))
  940|   173k|                   : result(unexpect,
  941|   173k|                            std::invoke(std::forward<F>(f),
  942|   173k|                                        std::forward<Exp>(exp).error()));
  943|   173k|    }
  944|   173k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   173k|    {
 1207|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   173k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   200k|    {
 1078|   200k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  26.7k|    {
 1078|  26.7k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  26.7k|    {
  312|  26.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  26.7k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  26.7k|    {
  373|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  374|  26.7k|                                  std::forward<Args>(args)...);
  375|  26.7k|        m_has_value = false;
  376|  26.7k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  80.2k|    {
  403|  80.2k|        return reinterpret_cast<unexpected<E>*>(
  404|  80.2k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  80.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  80.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  26.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  26.7k|    {
  317|  26.7k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 26.7k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  26.7k|        else {
  321|  26.7k|            destroy_unexpected();
  322|  26.7k|        }
  323|  26.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  80.2k|    {
  361|  80.2k|        return m_has_value;
  362|  80.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  26.7k|    {
  384|  26.7k|        scn::detail::destroy_at(unexpected_ptr());
  385|  26.7k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  26.7k|    {
 1191|  26.7k|        return has_value();
 1192|  26.7k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  26.7k|    {
 1197|  26.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  26.7k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  26.7k|    {
  344|  26.7k|        return *unexpected_ptr();
  345|  26.7k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   200k|    {
 1221|   200k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   200k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.14M|    {
  189|  1.14M|        return m_has_value;
  190|  1.14M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   200k|    {
  155|   200k|        return m_value;
  156|   200k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   574k|    {
 1191|   574k|        return has_value();
 1192|   574k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   374k|    {
 1197|   374k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   374k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   374k|    {
  172|   374k|        return m_unexpected;
  173|   374k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   200k|    {
 1263|   200k|        return std::move(value());
 1264|   200k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   132k|    {
 1078|   132k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   132k|    {
  151|   132k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  17.7M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  17.6M|    {
 1034|  17.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  17.6M|    {
  142|  17.6M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  3.66M|    {
 1405|  3.66M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.66M|                                            std::forward<F>(f));
 1407|  3.66M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  3.66M|{
  927|  3.66M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.66M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.66M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.66M|            return result(*std::forward<Exp>(exp));
  931|  3.66M|        }
  932|       |
  933|  3.66M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.66M|        return result(unexpect, monostate{});
  935|  3.66M|    }
  936|  3.66M|    else {
  937|  3.66M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.66M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.66M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.63M, False: 28.3k]
  |  |  ------------------
  ------------------
  939|  3.66M|                   ? result(*std::forward<Exp>(exp))
  940|  3.66M|                   : result(unexpect,
  941|  28.3k|                            std::invoke(std::forward<F>(f),
  942|  28.3k|                                        std::forward<Exp>(exp).error()));
  943|  3.66M|    }
  944|  3.66M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  31.0M|    {
  189|  31.0M|        return m_has_value;
  190|  31.0M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  11.4M|    {
 1263|  11.4M|        return std::move(value());
 1264|  11.4M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  13.1M|    {
 1221|  13.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.1M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  13.1M|    {
  155|  13.1M|        return m_value;
  156|  13.1M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  13.1M|    {
 1034|  13.1M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  13.1M|    {
  142|  13.1M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   130k|    {
 1207|   130k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   130k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   132k|    {
  172|   132k|        return m_unexpected;
  173|   132k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  28.3k|    {
 1088|  28.3k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   675k|    {
  151|   675k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   646k|    {
 1078|   646k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  6.16M|    {
 1191|  6.16M|        return has_value();
 1192|  6.16M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  1.73k|    {
 1197|  1.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.73k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   104k|    {
 1078|   104k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   206k|    {
  151|   206k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  24.5M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.65M|    {
 1251|  1.65M|        return value();
 1252|  1.65M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  3.17M|    {
 1034|  3.17M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  3.17M|    {
  142|  3.17M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  13.2M|    {
 1078|  13.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  13.2M|    {
  151|  13.2M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  24.5M|    {
 1191|  24.5M|        return has_value();
 1192|  24.5M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  39.2M|    {
  189|  39.2M|        return m_has_value;
  190|  39.2M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  3.57M|    {
 1197|  3.57M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  3.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  3.57M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  3.57M|    {
  172|  3.57M|        return m_unexpected;
  173|  3.57M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  3.63M|    {
 1034|  3.63M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  3.63M|    {
  142|  3.63M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.63M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.26M|    {
 1251|  3.26M|        return value();
 1252|  3.26M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  11.0M|    {
 1221|  11.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  11.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  11.0M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  11.0M|    {
  155|  11.0M|        return m_value;
  156|  11.0M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  3.63M|    {
 1191|  3.63M|        return has_value();
 1192|  3.63M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  7.27M|    {
  189|  7.27M|        return m_has_value;
  190|  7.27M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.63M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  3.63M|    {
 1263|  3.63M|        return std::move(value());
 1264|  3.63M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  3.63M|    {
 1221|  3.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.63M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  3.63M|    {
  155|  3.63M|        return m_value;
  156|  3.63M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  7.92M|    {
 1405|  7.92M|        return detail::transform_error_impl(std::move(*this),
 1406|  7.92M|                                            std::forward<F>(f));
 1407|  7.92M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  7.92M|{
  927|  7.92M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  7.92M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  7.92M|        if (SCN_LIKELY(exp.has_value())) {
  930|  7.92M|            return result(*std::forward<Exp>(exp));
  931|  7.92M|        }
  932|       |
  933|  7.92M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  7.92M|        return result(unexpect, monostate{});
  935|  7.92M|    }
  936|  7.92M|    else {
  937|  7.92M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  7.92M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  7.92M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.82M, False: 102k]
  |  |  ------------------
  ------------------
  939|  7.92M|                   ? result(*std::forward<Exp>(exp))
  940|  7.92M|                   : result(unexpect,
  941|   102k|                            std::invoke(std::forward<F>(f),
  942|   102k|                                        std::forward<Exp>(exp).error()));
  943|  7.92M|    }
  944|  7.92M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  7.90M|    {
 1034|  7.90M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  7.90M|    {
  142|  7.90M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   102k|    {
 1088|   102k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  7.82M|    {
 1263|  7.82M|        return std::move(value());
 1264|  7.82M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  3.63M|    {
 1034|  3.63M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.63M|    {
  142|  3.63M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  3.63M|    {
 1405|  3.63M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.63M|                                            std::forward<F>(f));
 1407|  3.63M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  3.63M|{
  927|  3.63M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.63M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.63M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.63M|            return result(*std::forward<Exp>(exp));
  931|  3.63M|        }
  932|       |
  933|  3.63M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.63M|        return result(unexpect, monostate{});
  935|  3.63M|    }
  936|  3.63M|    else {
  937|  3.63M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.63M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.63M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.63M, False: 0]
  |  |  ------------------
  ------------------
  939|  3.63M|                   ? result(*std::forward<Exp>(exp))
  940|  3.63M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  3.63M|    }
  944|  3.63M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  7.27M|    {
  189|  7.27M|        return m_has_value;
  190|  7.27M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.63M|    {
 1263|  3.63M|        return std::move(value());
 1264|  3.63M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.63M|    {
 1221|  3.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.63M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.63M|    {
  155|  3.63M|        return m_value;
  156|  3.63M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  3.63M|    {
 1034|  3.63M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.63M|    {
  142|  3.63M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.63M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  3.63M|    {
 1191|  3.63M|        return has_value();
 1192|  3.63M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  7.27M|    {
  189|  7.27M|        return m_has_value;
  190|  7.27M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.63M|    {
 1263|  3.63M|        return std::move(value());
 1264|  3.63M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.63M|    {
 1221|  3.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.63M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.63M|    {
  155|  3.63M|        return m_value;
  156|  3.63M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  33.5k|    {
 1078|  33.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  33.5k|    {
  312|  33.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  33.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  33.5k|    {
  373|  33.5k|        scn::detail::construct_at(unexpected_ptr(),
  374|  33.5k|                                  std::forward<Args>(args)...);
  375|  33.5k|        m_has_value = false;
  376|  33.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   100k|    {
  403|   100k|        return reinterpret_cast<unexpected<E>*>(
  404|   100k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   100k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   100k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   442k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   442k|    {
  317|   442k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 409k, False: 33.5k]
  ------------------
  318|   409k|            destroy_value();
  319|   409k|        }
  320|  33.5k|        else {
  321|  33.5k|            destroy_unexpected();
  322|  33.5k|        }
  323|   442k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.32M|    {
  361|  1.32M|        return m_has_value;
  362|  1.32M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   409k|    {
  380|   409k|        scn::detail::destroy_at(value_ptr());
  381|   409k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   409k|{
  108|   409k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   409k|        for (auto& elem : *p) {
  110|   409k|            scn::detail::destroy_at(std::addressof(elem));
  111|   409k|        }
  112|   409k|    }
  113|   409k|    else {
  114|   409k|        p->~T();
  115|   409k|    }
  116|   409k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.22M|    {
  390|  1.22M|        return reinterpret_cast<T*>(
  391|  1.22M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.22M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.22M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  33.5k|    {
  384|  33.5k|        scn::detail::destroy_at(unexpected_ptr());
  385|  33.5k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   409k|    {
 1034|   409k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   409k|    {
  303|   409k|        construct(std::forward<Args>(args)...);
  304|   409k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   409k|    {
  367|   409k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   409k|        m_has_value = true;
  369|   409k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   409k|{
  102|   409k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   409k|        T(std::forward<Args>(args)...);
  104|   409k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   442k|    {
 1191|   442k|        return has_value();
 1192|   442k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  33.5k|    {
 1197|  33.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  33.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  33.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  33.5k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  33.5k|    {
  344|  33.5k|        return *unexpected_ptr();
  345|  33.5k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   409k|    {
 1263|   409k|        return std::move(value());
 1264|   409k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   409k|    {
 1221|   409k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   409k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   409k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   409k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   409k|    {
  327|   409k|        return *value_ptr();
  328|   409k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.34M|    {
 1251|  2.34M|        return value();
 1252|  2.34M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  13.1M|    {
 1221|  13.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.1M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  27.6M|    {
  189|  27.6M|        return m_has_value;
  190|  27.6M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  13.1M|    {
  155|  13.1M|        return m_value;
  156|  13.1M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  13.8M|    {
 1191|  13.8M|        return has_value();
 1192|  13.8M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   675k|    {
 1197|   675k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   675k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   675k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   675k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   675k|    {
  172|   675k|        return m_unexpected;
  173|   675k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  10.7M|    {
 1263|  10.7M|        return std::move(value());
 1264|  10.7M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   356k|    {
 1078|   356k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   666k|    {
  151|   666k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.02M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   356k|    {
 1034|   356k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   356k|    {
  142|   356k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.02M|    {
 1191|  1.02M|        return has_value();
 1192|  1.02M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.04M|    {
  189|  2.04M|        return m_has_value;
  190|  2.04M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   666k|    {
 1197|   666k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   666k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   666k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   666k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   666k|    {
  172|   666k|        return m_unexpected;
  173|   666k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   356k|    {
 1221|   356k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   356k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   356k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   356k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   356k|    {
  155|   356k|        return m_value;
  156|   356k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    378|    {
 1078|    378|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    378|    {
  151|    378|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.57M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.56M|    {
 1034|  1.56M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.56M|    {
  142|  1.56M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   356k|    {
 1405|   356k|        return detail::transform_error_impl(std::move(*this),
 1406|   356k|                                            std::forward<F>(f));
 1407|   356k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   356k|{
  927|   356k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   356k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   356k|        if (SCN_LIKELY(exp.has_value())) {
  930|   356k|            return result(*std::forward<Exp>(exp));
  931|   356k|        }
  932|       |
  933|   356k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   356k|        return result(unexpect, monostate{});
  935|   356k|    }
  936|   356k|    else {
  937|   356k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   356k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   356k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 356k, False: 0]
  |  |  ------------------
  ------------------
  939|   356k|                   ? result(*std::forward<Exp>(exp))
  940|   356k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   356k|    }
  944|   356k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.92M|    {
  189|  2.92M|        return m_has_value;
  190|  2.92M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   998k|    {
 1263|   998k|        return std::move(value());
 1264|   998k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.35M|    {
 1221|  1.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.35M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.35M|    {
  155|  1.35M|        return m_value;
  156|  1.35M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    324|    {
 1207|    324|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    324|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    324|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    324|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    378|    {
  172|    378|        return m_unexpected;
  173|    378|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   309k|    {
 1088|   309k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   570k|    {
 1191|   570k|        return has_value();
 1192|   570k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1196|     54|    {
 1197|     54|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     54|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     54|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     54|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    378|    {
 1078|    378|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    702|    {
  151|    702|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.37M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1250|   356k|    {
 1251|   356k|        return value();
 1252|   356k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1033|   356k|    {
 1034|   356k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  141|   356k|    {
  142|   356k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.37M|    {
 1078|  1.37M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.37M|    {
  151|  1.37M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  2.06M|    {
 1191|  2.06M|        return has_value();
 1192|  2.06M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.68M|    {
  189|  3.68M|        return m_has_value;
  190|  3.68M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|    324|    {
 1197|    324|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    324|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    324|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|    324|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   309k|    {
  172|   309k|        return m_unexpected;
  173|   309k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   356k|    {
 1034|   356k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   356k|    {
  142|   356k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   356k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   356k|    {
 1251|   356k|        return value();
 1252|   356k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   998k|    {
 1221|   998k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   998k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   998k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   998k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   998k|    {
  155|   998k|        return m_value;
  156|   998k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   356k|    {
 1191|   356k|        return has_value();
 1192|   356k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   713k|    {
  189|   713k|        return m_has_value;
  190|   713k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   356k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   356k|    {
 1263|   356k|        return std::move(value());
 1264|   356k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   356k|    {
 1221|   356k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   356k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   356k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   356k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   356k|    {
  155|   356k|        return m_value;
  156|   356k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   642k|    {
 1405|   642k|        return detail::transform_error_impl(std::move(*this),
 1406|   642k|                                            std::forward<F>(f));
 1407|   642k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   642k|{
  927|   642k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   642k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   642k|        if (SCN_LIKELY(exp.has_value())) {
  930|   642k|            return result(*std::forward<Exp>(exp));
  931|   642k|        }
  932|       |
  933|   642k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   642k|        return result(unexpect, monostate{});
  935|   642k|    }
  936|   642k|    else {
  937|   642k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   642k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   642k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 642k, False: 324]
  |  |  ------------------
  ------------------
  939|   642k|                   ? result(*std::forward<Exp>(exp))
  940|   642k|                   : result(unexpect,
  941|    324|                            std::invoke(std::forward<F>(f),
  942|    324|                                        std::forward<Exp>(exp).error()));
  943|   642k|    }
  944|   642k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   642k|    {
 1034|   642k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   642k|    {
  142|   642k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    324|    {
 1088|    324|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   642k|    {
 1263|   642k|        return std::move(value());
 1264|   642k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   356k|    {
 1034|   356k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   356k|    {
  142|   356k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   356k|    {
 1405|   356k|        return detail::transform_error_impl(std::move(*this),
 1406|   356k|                                            std::forward<F>(f));
 1407|   356k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   356k|{
  927|   356k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   356k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   356k|        if (SCN_LIKELY(exp.has_value())) {
  930|   356k|            return result(*std::forward<Exp>(exp));
  931|   356k|        }
  932|       |
  933|   356k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   356k|        return result(unexpect, monostate{});
  935|   356k|    }
  936|   356k|    else {
  937|   356k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   356k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   356k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 356k, False: 0]
  |  |  ------------------
  ------------------
  939|   356k|                   ? result(*std::forward<Exp>(exp))
  940|   356k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   356k|    }
  944|   356k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   713k|    {
  189|   713k|        return m_has_value;
  190|   713k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   356k|    {
 1263|   356k|        return std::move(value());
 1264|   356k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   356k|    {
 1221|   356k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   356k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   356k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   356k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   356k|    {
  155|   356k|        return m_value;
  156|   356k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   356k|    {
 1034|   356k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   356k|    {
  142|   356k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   356k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   356k|    {
 1191|   356k|        return has_value();
 1192|   356k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   713k|    {
  189|   713k|        return m_has_value;
  190|   713k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   356k|    {
 1263|   356k|        return std::move(value());
 1264|   356k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   356k|    {
 1221|   356k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   356k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   356k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   356k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   356k|    {
  155|   356k|        return m_value;
  156|   356k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   309k|    {
 1405|   309k|        return detail::transform_error_impl(std::move(*this),
 1406|   309k|                                            std::forward<F>(f));
 1407|   309k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   309k|{
  927|   309k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   309k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   309k|        if (SCN_LIKELY(exp.has_value())) {
  930|   309k|            return result(*std::forward<Exp>(exp));
  931|   309k|        }
  932|       |
  933|   309k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   309k|        return result(unexpect, monostate{});
  935|   309k|    }
  936|   309k|    else {
  937|   309k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   309k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   309k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 309k]
  |  |  ------------------
  ------------------
  939|   309k|                   ? result(*std::forward<Exp>(exp))
  940|   309k|                   : result(unexpect,
  941|   309k|                            std::invoke(std::forward<F>(f),
  942|   309k|                                        std::forward<Exp>(exp).error()));
  943|   309k|    }
  944|   309k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   309k|    {
 1207|   309k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   309k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   309k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   309k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  47.5k|    {
 1078|  47.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  47.5k|    {
  312|  47.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  47.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  47.5k|    {
  373|  47.5k|        scn::detail::construct_at(unexpected_ptr(),
  374|  47.5k|                                  std::forward<Args>(args)...);
  375|  47.5k|        m_has_value = false;
  376|  47.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   142k|    {
  403|   142k|        return reinterpret_cast<unexpected<E>*>(
  404|   142k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   142k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   142k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  47.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  47.5k|    {
  317|  47.5k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 47.5k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  47.5k|        else {
  321|  47.5k|            destroy_unexpected();
  322|  47.5k|        }
  323|  47.5k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   142k|    {
  361|   142k|        return m_has_value;
  362|   142k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  47.5k|    {
  384|  47.5k|        scn::detail::destroy_at(unexpected_ptr());
  385|  47.5k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  47.5k|    {
 1191|  47.5k|        return has_value();
 1192|  47.5k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  47.5k|    {
 1197|  47.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  47.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  47.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  47.5k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  47.5k|    {
  344|  47.5k|        return *unexpected_ptr();
  345|  47.5k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   356k|    {
 1263|   356k|        return std::move(value());
 1264|   356k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.45k|{
  200|  4.45k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.45k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.45k|{
  180|  4.45k|    return p;
  181|  4.45k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.45k|{
  200|  4.45k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.45k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.45k|{
  180|  4.45k|    return p;
  181|  4.45k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.45k|{
  200|  4.45k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.45k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.45k|{
  180|  4.45k|    return p;
  181|  4.45k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  13.1M|{
  200|  13.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  13.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  13.1M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  13.1M|{
  180|  13.1M|    return p;
  181|  13.1M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  8.02M|{
  200|  8.02M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  8.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  8.02M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  8.02M|{
  180|  8.02M|    return p;
  181|  8.02M|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  8.02M|{
  200|  8.02M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  8.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  8.02M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  8.02M|{
  180|  8.02M|    return p;
  181|  8.02M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  15.4k|    {
  242|  15.4k|        return static_cast<size_type>(m_end - m_ptr);
  243|  15.4k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  2.22k|    {
  181|  2.22k|        return m_ptr;
  182|  2.22k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  2.22k|    {
  185|  2.22k|        return m_end;
  186|  2.22k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.22k|    {
  238|  2.22k|        return m_ptr;
  239|  2.22k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.22k|    {
  120|  2.22k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  53.4k|    {
  181|  53.4k|        return m_ptr;
  182|  53.4k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  53.4k|    {
  185|  53.4k|        return m_end;
  186|  53.4k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.22k|    {
  120|  2.22k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  95.1k|    {
  181|  95.1k|        return m_ptr;
  182|  95.1k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  95.1k|    {
  185|  95.1k|        return m_end;
  186|  95.1k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.22k|    {
  120|  2.22k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  4.01M|    {
  120|  4.01M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  4.01M|    {
  238|  4.01M|        return m_ptr;
  239|  4.01M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  4.01M|    {
  242|  4.01M|        return static_cast<size_type>(m_end - m_ptr);
  243|  4.01M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  1.85M|{
   60|  1.85M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  1.85M|                                          const CharT*, const CharT*>) {
   62|  1.85M|        return {first, last};
   63|  1.85M|    }
   64|  1.85M|    else {
   65|  1.85M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  1.85M|    }
   67|  1.85M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  5.59M|{
   60|  5.59M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  5.59M|                                          const CharT*, const CharT*>) {
   62|  5.59M|        return {first, last};
   63|  5.59M|    }
   64|  5.59M|    else {
   65|  5.59M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  5.59M|    }
   67|  5.59M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  4.36M|{
   44|  4.36M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  4.36M|                                          decltype(first), decltype(last)> &&
   46|  4.36M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  4.36M|        return {first, last};
   48|  4.36M|    }
   49|  4.36M|    else {
   50|  4.36M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  4.36M|                                       to_address(first), to_address(last)))};
   52|  4.36M|    }
   53|  4.36M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  8.40M|{
   75|  8.40M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  8.40M|                      typename std::basic_string_view<CharT>::iterator,
   77|  8.40M|                      decltype(it)> &&
   78|  8.40M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  8.40M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  8.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  8.40M|        return it;
   81|  8.40M|    }
   82|  8.40M|    else {
   83|  8.40M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  8.40M|    }
   85|  8.40M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   200k|{
   54|   200k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   200k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   200k|        return true;
   57|   200k|    }
   58|   200k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   200k|                           ranges::iterator_t<Range>,
   60|   200k|                           typename detail::basic_scan_buffer<
   61|   200k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   200k|        auto beg = ranges::begin(r);
   63|   200k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 200k, False: 0]
  ------------------
   64|   200k|            return false;
   65|   200k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   200k|    else {
   79|   200k|        return false;
   80|   200k|    }
   81|   200k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   200k|{
  112|   200k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   200k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   200k|        return r;
  115|   200k|    }
  116|   200k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   200k|                           ranges::iterator_t<Range>,
  118|   200k|                           typename detail::basic_scan_buffer<
  119|   200k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   200k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   200k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   200k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   200k|                ranges::begin(r), ranges::end(r)));
  124|   200k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   200k|        }
  126|   200k|        else {
  127|   200k|            return ranges::begin(r).contiguous_segment();
  128|   200k|        }
  129|   200k|    }
  130|   200k|    else {
  131|   200k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   200k|    }
  133|   200k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   360k|{
  166|   360k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   360k|        return ranges_polyfill::usize(r);
  168|   360k|    }
  169|   360k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   360k|                           ranges::iterator_t<Range>,
  171|   360k|                           typename detail::basic_scan_buffer<
  172|   360k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   360k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   360k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   360k|                                       ranges::begin(r).position());
  176|   360k|        }
  177|   360k|        else {
  178|   360k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 360k, False: 0]
  ------------------
  179|   360k|                return static_cast<size_t>(
  180|   360k|                    ranges::begin(r).parent()->chars_available() -
  181|   360k|                    ranges::begin(r).position());
  182|   360k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   360k|        }
  185|   360k|    }
  186|   360k|    else {
  187|   360k|        return 0;
  188|   360k|    }
  189|   360k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   356k|{
   54|   356k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   356k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   356k|        return true;
   57|   356k|    }
   58|   356k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   356k|                           ranges::iterator_t<Range>,
   60|   356k|                           typename detail::basic_scan_buffer<
   61|   356k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   356k|        auto beg = ranges::begin(r);
   63|   356k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 356k, False: 0]
  ------------------
   64|   356k|            return false;
   65|   356k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   356k|    else {
   79|   356k|        return false;
   80|   356k|    }
   81|   356k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   356k|{
  112|   356k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   356k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   356k|        return r;
  115|   356k|    }
  116|   356k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   356k|                           ranges::iterator_t<Range>,
  118|   356k|                           typename detail::basic_scan_buffer<
  119|   356k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   356k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   356k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   356k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   356k|                ranges::begin(r), ranges::end(r)));
  124|   356k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   356k|        }
  126|   356k|        else {
  127|   356k|            return ranges::begin(r).contiguous_segment();
  128|   356k|        }
  129|   356k|    }
  130|   356k|    else {
  131|   356k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   356k|    }
  133|   356k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   642k|{
  166|   642k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   642k|        return ranges_polyfill::usize(r);
  168|   642k|    }
  169|   642k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   642k|                           ranges::iterator_t<Range>,
  171|   642k|                           typename detail::basic_scan_buffer<
  172|   642k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   642k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   642k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   642k|                                       ranges::begin(r).position());
  176|   642k|        }
  177|   642k|        else {
  178|   642k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 642k, False: 0]
  ------------------
  179|   642k|                return static_cast<size_t>(
  180|   642k|                    ranges::begin(r).parent()->chars_available() -
  181|   642k|                    ranges::begin(r).position());
  182|   642k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   642k|        }
  185|   642k|    }
  186|   642k|    else {
  187|   642k|        return 0;
  188|   642k|    }
  189|   642k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  4.01M|{
  235|  4.01M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  4.01M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  4.01M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  4.01M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  4.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  4.01M|    }
  240|  4.01M|    else {
  241|  4.01M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  4.01M|    }
  243|  4.01M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  4.01M|    {
   50|  4.01M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  12.7M|    {
   63|  12.7M|        return sv;
   64|  12.7M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.42M|{
  235|  2.42M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.42M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.42M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.42M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.42M|    }
  240|  2.42M|    else {
  241|  2.42M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.42M|    }
  243|  2.42M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.42M|    {
   50|  2.42M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.24M|{
  235|  2.24M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.24M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.24M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.24M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.24M|    }
  240|  2.24M|    else {
  241|  2.24M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.24M|    }
  243|  2.24M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.24M|    {
   50|  2.24M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  4.22M|    {
   63|  4.22M|        return sv;
   64|  4.22M|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  17.3M|{
   97|  17.3M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  17.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.5k, False: 17.2M]
  |  |  ------------------
  ------------------
   98|  28.5k|        return eof_error::eof;
   99|  28.5k|    }
  100|  17.2M|    return eof_error::good;
  101|  17.3M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  17.3M|{
   91|  17.3M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  17.3M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  17.3M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  17.3M|    {
   84|  17.3M|        return begin == end;
   85|  17.3M|    }
   86|  17.3M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   721k|{
   97|   721k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   721k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 721k]
  |  |  ------------------
  ------------------
   98|     54|        return eof_error::eof;
   99|     54|    }
  100|   721k|    return eof_error::good;
  101|   721k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   721k|{
   91|   721k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   721k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   721k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   721k|    {
   84|   721k|        return begin == end;
   85|   721k|    }
   86|   721k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  15.7M|{
   97|  15.7M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  15.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.7k, False: 15.6M]
  |  |  ------------------
  ------------------
   98|  31.7k|        return eof_error::eof;
   99|  31.7k|    }
  100|  15.6M|    return eof_error::good;
  101|  15.7M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  15.7M|{
   91|  15.7M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  15.7M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  15.7M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  15.7M|    {
   84|  15.7M|        return begin == end;
   85|  15.7M|    }
   86|  15.7M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.28M|{
   97|  1.28M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 1.28M]
  |  |  ------------------
  ------------------
   98|     54|        return eof_error::eof;
   99|     54|    }
  100|  1.28M|    return eof_error::good;
  101|  1.28M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.28M|{
   91|  1.28M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.28M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.28M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.28M|    {
   84|  1.28M|        return begin == end;
   85|  1.28M|    }
   86|  1.28M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  4.21M|{
  128|  4.21M|    return find_classic_impl(
  129|  4.21M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  4.21M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  4.21M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  4.27M|{
   31|  4.27M|    static_assert(sizeof(*source.data()) == 1);
   32|  4.27M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  4.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  4.27M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  4.27M|    return has_byte_greater(word, 127) != 0;
   37|  4.27M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  4.21M|{
   44|  4.21M|    auto it = source.begin();
   45|       |
   46|  4.28M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 4.27M, False: 3.97k]
  ------------------
   47|  4.27M|        auto sv =
   48|  4.27M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  4.27M|                .substr(0, 8);
   50|       |
   51|  4.27M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 4.22M, False: 57.5k]
  ------------------
   52|  4.22M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  4.22M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  4.22M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 4.15M, False: 62.8k]
  ------------------
   55|  4.15M|                break;
   56|  4.15M|            }
   57|  62.8k|            continue;
   58|  4.22M|        }
   59|       |
   60|  84.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 83.1k, False: 1.60k]
  ------------------
   61|  83.1k|            auto tmp =
   62|  83.1k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  83.1k|            auto res = get_next_code_point(tmp);
   64|  83.1k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 55.8k, False: 27.2k]
  ------------------
   65|  55.8k|                return it;
   66|  55.8k|            }
   67|  27.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  27.2k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  27.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  27.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  27.2k|        }
   71|  57.5k|    }
   72|       |
   73|  4.16M|    return detail::make_string_view_iterator(source, it);
   74|  4.21M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  8.71M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|  83.1k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  4.01M|{
  300|  4.01M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  4.01M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  4.01M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  4.01M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  4.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  4.01M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  4.01M|        return ranges::next(ranges::begin(range),
  306|  4.01M|                            ranges::distance(buf.view().begin(), it));
  307|  4.01M|    }
  308|  4.01M|    else {
  309|  4.01M|        auto it = ranges::begin(range);
  310|       |
  311|  4.01M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  4.01M|            auto seg = get_contiguous_beginning(range);
  313|  4.01M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  4.01M|                seg_it != seg.end()) {
  315|  4.01M|                return ranges_polyfill::batch_next(
  316|  4.01M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  4.01M|            }
  318|  4.01M|            ranges_polyfill::batch_next(it, seg.size());
  319|  4.01M|        }
  320|       |
  321|  4.01M|        return read_while_code_point(
  322|  4.01M|            SCN_FWD(range),
  323|  4.01M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  4.01M|    }
  325|  4.01M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  4.01M|{
  459|  4.01M|    auto it = read_code_unit(range);
  460|  4.01M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.01M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  7.99M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 7.99M, False: 3.80M]
  ------------------
  465|  7.99M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 207k, False: 7.78M]
  ------------------
  466|   207k|            return *it;
  467|   207k|        }
  468|  7.99M|    }
  469|       |
  470|  3.80M|    return unexpected(parse_error::error);
  471|  4.01M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   846k|{
  482|   846k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 697k, False: 148k]
  ------------------
  483|   697k|        return ranges::begin(range);
  484|   697k|    }
  485|   148k|    return *result;
  486|   846k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  8.82M|{
  418|  8.82M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  8.82M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  8.82M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  8.82M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 50.8k, False: 8.77M]
  ------------------
  423|  50.8k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  50.8k|        }
  425|  8.77M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 8.67M, False: 102k]
  ------------------
  426|  8.67M|            return unexpected(parse_error::error);
  427|  8.67M|        }
  428|   102k|        return ranges::next(ranges::begin(range), str.size());
  429|  8.77M|    }
  430|  8.82M|    else {
  431|  8.82M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  8.82M|            if (ch < 'A' || ch > 'Z') {
  433|  8.82M|                return ch;
  434|  8.82M|            }
  435|  8.82M|            return static_cast<char_type>(ch +
  436|  8.82M|                                          static_cast<char_type>('a' - 'A'));
  437|  8.82M|        };
  438|       |
  439|  8.82M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  8.82M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  8.82M|        if (SCN_UNLIKELY(!std::equal(
  443|  8.82M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  8.82M|                    return ascii_tolower(a) ==
  445|  8.82M|                           static_cast<detail::char_t<Range>>(b);
  446|  8.82M|                }))) {
  447|  8.82M|            return unexpected(parse_error::error);
  448|  8.82M|        }
  449|       |
  450|  8.82M|        return it;
  451|  8.82M|    }
  452|  8.82M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  8.77M|{
  407|  8.77M|    unsigned char running_diff{0};
  408|  26.3M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 17.5M, False: 8.77M]
  ------------------
  409|  17.5M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  17.5M|    }
  411|  8.77M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 90.3k, False: 8.68M]
  |  Branch (411:33): [True: 12.3k, False: 8.67M]
  ------------------
  412|  8.77M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  2.81M|{
  332|  2.81M|    auto it = read_code_unit(range);
  333|  2.81M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.41k, False: 2.81M]
  |  |  ------------------
  ------------------
  334|  1.41k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.41k|    }
  336|       |
  337|  2.81M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  2.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.08M, False: 1.72M]
  |  |  ------------------
  ------------------
  338|  2.81M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.08M|        return unexpected(parse_error::error);
  340|  1.08M|    }
  341|       |
  342|  1.72M|    return *it;
  343|  2.81M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   200k|{
  300|   200k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   200k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   200k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   200k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   200k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   200k|        return ranges::next(ranges::begin(range),
  306|   200k|                            ranges::distance(buf.view().begin(), it));
  307|   200k|    }
  308|   200k|    else {
  309|   200k|        auto it = ranges::begin(range);
  310|       |
  311|   200k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   200k|            auto seg = get_contiguous_beginning(range);
  313|   200k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   200k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 200k, False: 0]
  ------------------
  315|   200k|                return ranges_polyfill::batch_next(
  316|   200k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   200k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   200k|    }
  325|   200k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   200k|{
  459|   200k|    auto it = read_code_unit(range);
  460|   200k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   200k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 200k, False: 0]
  ------------------
  465|   200k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 200k, False: 0]
  ------------------
  466|   200k|            return *it;
  467|   200k|        }
  468|   200k|    }
  469|       |
  470|      0|    return unexpected(parse_error::error);
  471|   200k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|  80.2k|{
  482|  80.2k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 80.2k, False: 0]
  ------------------
  483|  80.2k|        return ranges::begin(range);
  484|  80.2k|    }
  485|      0|    return *result;
  486|  80.2k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   360k|{
  418|   360k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   360k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   360k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   360k|        if (ranges::size(range) < str.size()) {
  423|   360k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   360k|        }
  425|   360k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   360k|            return unexpected(parse_error::error);
  427|   360k|        }
  428|   360k|        return ranges::next(ranges::begin(range), str.size());
  429|   360k|    }
  430|   360k|    else {
  431|   360k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   360k|            if (ch < 'A' || ch > 'Z') {
  433|   360k|                return ch;
  434|   360k|            }
  435|   360k|            return static_cast<char_type>(ch +
  436|   360k|                                          static_cast<char_type>('a' - 'A'));
  437|   360k|        };
  438|       |
  439|   360k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   360k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   360k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   360k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 324, False: 360k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    324|    }                                                  \
  |  |  |  |   70|   360k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   360k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   360k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 360k, False: 0]
  |  |  ------------------
  ------------------
  443|   360k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   360k|                    return ascii_tolower(a) ==
  445|   360k|                           static_cast<detail::char_t<Range>>(b);
  446|   360k|                }))) {
  447|   360k|            return unexpected(parse_error::error);
  448|   360k|        }
  449|       |
  450|      0|        return it;
  451|   360k|    }
  452|   360k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   360k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   360k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 360k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   360k|                return ch;
  434|   360k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   360k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   120k|{
  332|   120k|    auto it = read_code_unit(range);
  333|   120k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 120k]
  |  |  ------------------
  ------------------
  334|     54|        return unexpected(make_eof_parse_error(it.error()));
  335|     54|    }
  336|       |
  337|   120k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 120k, False: 0]
  |  |  ------------------
  ------------------
  338|   120k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   120k|        return unexpected(parse_error::error);
  340|   120k|    }
  341|       |
  342|      0|    return *it;
  343|   120k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   173k|{
  159|   173k|    auto it = read_while_code_unit(range, pred);
  160|   173k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 173k, False: 0]
  ------------------
  161|   173k|        return unexpected(parse_error::error);
  162|   173k|    }
  163|      0|    return it;
  164|   173k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   173k|{
  139|   173k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   173k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   173k|{
  131|   173k|    return ranges::find_if(range, pred);
  132|   173k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  3.64M|{
  300|  3.64M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  3.64M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  3.64M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  3.64M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  3.64M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  3.64M|        return ranges::next(ranges::begin(range),
  306|  3.64M|                            ranges::distance(buf.view().begin(), it));
  307|  3.64M|    }
  308|  3.64M|    else {
  309|  3.64M|        auto it = ranges::begin(range);
  310|       |
  311|  3.64M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  3.64M|            auto seg = get_contiguous_beginning(range);
  313|  3.64M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  3.64M|                seg_it != seg.end()) {
  315|  3.64M|                return ranges_polyfill::batch_next(
  316|  3.64M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  3.64M|            }
  318|  3.64M|            ranges_polyfill::batch_next(it, seg.size());
  319|  3.64M|        }
  320|       |
  321|  3.64M|        return read_while_code_point(
  322|  3.64M|            SCN_FWD(range),
  ------------------
  |  |  248|  3.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  3.64M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  3.64M|    }
  325|  3.64M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  3.64M|{
  264|  3.64M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  3.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  3.64M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  3.64M|{
  231|  3.64M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  3.64M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  3.64M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  3.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  3.64M|    }
  235|  3.64M|    else {
  236|  3.64M|        auto it = ranges::begin(range);
  237|  3.64M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  3.64M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  3.64M|            seg_it != seg.end()) {
  241|  3.64M|            return ranges_polyfill::batch_next(
  242|  3.64M|                it, ranges::distance(seg.begin(), seg_it));
  243|  3.64M|        }
  244|       |
  245|  3.64M|        while (it != ranges::end(range)) {
  246|  3.64M|            const auto [iter, value] =
  247|  3.64M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  3.64M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  3.64M|            if (pred(cp)) {
  250|  3.64M|                return it;
  251|  3.64M|            }
  252|  3.64M|            it = iter;
  253|  3.64M|        }
  254|       |
  255|  3.64M|        return it;
  256|  3.64M|    }
  257|  3.64M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  3.64M|{
  178|  3.64M|    static_assert(ranges::contiguous_range<Range> &&
  179|  3.64M|                  ranges::sized_range<Range>);
  180|       |
  181|  3.64M|    std::array<char32_t, 16> cp_buf{};
  182|  3.64M|    std::array<uint8_t, 16> idx_buf{};
  183|  3.64M|    auto it = ranges::begin(range);
  184|  3.66M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 3.65M, False: 5.60k]
  ------------------
  185|  3.65M|        auto chunk_begin = it;
  186|  3.65M|        size_t code_point_count = 0;
  187|  3.65M|        uint8_t code_unit_idx = 0;
  188|  58.7M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 55.4M, False: 3.27M]
  |  Branch (188:52): [True: 55.0M, False: 378k]
  ------------------
  189|  55.0M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 55.0M, False: 0]
  ------------------
  190|  55.0M|                idx_buf[code_point_count] = code_unit_idx;
  191|  55.0M|                ++code_point_count;
  192|  55.0M|            }
  193|  55.0M|            ++it;
  194|  55.0M|            ++code_unit_idx;
  195|  55.0M|        }
  196|       |
  197|  3.65M|        auto input = detail::make_string_view_from_pointers(
  198|  3.65M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  3.65M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  3.65M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  3.65M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  3.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.65M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  7.62M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 7.60M, False: 19.0k]
  ------------------
  217|  7.60M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 3.63M, False: 3.97M]
  ------------------
  218|  3.63M|                return chunk_begin + idx_buf[i];
  219|  3.63M|            }
  220|  7.60M|        }
  221|  3.65M|    }
  222|       |
  223|  5.60k|    return it;
  224|  3.64M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  7.60M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  3.63M|{
  459|  3.63M|    auto it = read_code_unit(range);
  460|  3.63M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.63M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  7.24M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 7.24M, False: 3.47M]
  ------------------
  465|  7.24M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 163k, False: 7.07M]
  ------------------
  466|   163k|            return *it;
  467|   163k|        }
  468|  7.24M|    }
  469|       |
  470|  3.47M|    return unexpected(parse_error::error);
  471|  3.63M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   805k|{
  482|   805k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 674k, False: 130k]
  ------------------
  483|   674k|        return ranges::begin(range);
  484|   674k|    }
  485|   130k|    return *result;
  486|   805k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  7.92M|{
  418|  7.92M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  7.92M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  7.92M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  7.92M|        if (ranges::size(range) < str.size()) {
  423|  7.92M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  7.92M|        }
  425|  7.92M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  7.92M|            return unexpected(parse_error::error);
  427|  7.92M|        }
  428|  7.92M|        return ranges::next(ranges::begin(range), str.size());
  429|  7.92M|    }
  430|  7.92M|    else {
  431|  7.92M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  7.92M|            if (ch < 'A' || ch > 'Z') {
  433|  7.92M|                return ch;
  434|  7.92M|            }
  435|  7.92M|            return static_cast<char_type>(ch +
  436|  7.92M|                                          static_cast<char_type>('a' - 'A'));
  437|  7.92M|        };
  438|       |
  439|  7.92M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  7.92M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.92M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.92M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 102k, False: 7.82M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   102k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   102k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   102k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   102k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   102k|    }                                                  \
  |  |  |  |   70|  7.92M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.82M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  7.82M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  7.82M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  7.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.73M, False: 87.1k]
  |  |  ------------------
  ------------------
  443|  7.82M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  7.82M|                    return ascii_tolower(a) ==
  445|  7.82M|                           static_cast<detail::char_t<Range>>(b);
  446|  7.82M|                }))) {
  447|  7.73M|            return unexpected(parse_error::error);
  448|  7.73M|        }
  449|       |
  450|  87.1k|        return it;
  451|  7.82M|    }
  452|  7.92M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  12.5M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  12.5M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 12.0M, False: 501k]
  |  Branch (432:29): [True: 442k, False: 58.9k]
  ------------------
  433|  12.5M|                return ch;
  434|  12.5M|            }
  435|  58.9k|            return static_cast<char_type>(ch +
  436|  58.9k|                                          static_cast<char_type>('a' - 'A'));
  437|  12.5M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  2.53M|{
  332|  2.53M|    auto it = read_code_unit(range);
  333|  2.53M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.73k, False: 2.52M]
  |  |  ------------------
  ------------------
  334|  1.73k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.73k|    }
  336|       |
  337|  2.52M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  2.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.03M, False: 1.49M]
  |  |  ------------------
  ------------------
  338|  2.52M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.03M|        return unexpected(parse_error::error);
  340|  1.03M|    }
  341|       |
  342|  1.49M|    return *it;
  343|  2.52M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   356k|{
  178|   356k|    static_assert(ranges::contiguous_range<Range> &&
  179|   356k|                  ranges::sized_range<Range>);
  180|       |
  181|   356k|    std::array<char32_t, 16> cp_buf{};
  182|   356k|    std::array<uint8_t, 16> idx_buf{};
  183|   356k|    auto it = ranges::begin(range);
  184|   356k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 356k, False: 0]
  ------------------
  185|   356k|        auto chunk_begin = it;
  186|   356k|        size_t code_point_count = 0;
  187|   356k|        uint8_t code_unit_idx = 0;
  188|   713k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 713k, False: 0]
  |  Branch (188:52): [True: 356k, False: 356k]
  ------------------
  189|   356k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 356k, False: 0]
  ------------------
  190|   356k|                idx_buf[code_point_count] = code_unit_idx;
  191|   356k|                ++code_point_count;
  192|   356k|            }
  193|   356k|            ++it;
  194|   356k|            ++code_unit_idx;
  195|   356k|        }
  196|       |
  197|   356k|        auto input = detail::make_string_view_from_pointers(
  198|   356k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   356k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   356k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   356k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 356k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   356k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 356k, False: 0]
  ------------------
  217|   356k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 356k, False: 0]
  ------------------
  218|   356k|                return chunk_begin + idx_buf[i];
  219|   356k|            }
  220|   356k|        }
  221|   356k|    }
  222|       |
  223|      0|    return it;
  224|   356k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   356k|{
  300|   356k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   356k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   356k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   356k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   356k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   356k|        return ranges::next(ranges::begin(range),
  306|   356k|                            ranges::distance(buf.view().begin(), it));
  307|   356k|    }
  308|   356k|    else {
  309|   356k|        auto it = ranges::begin(range);
  310|       |
  311|   356k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   356k|            auto seg = get_contiguous_beginning(range);
  313|   356k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   356k|                seg_it != seg.end()) {
  315|   356k|                return ranges_polyfill::batch_next(
  316|   356k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   356k|            }
  318|   356k|            ranges_polyfill::batch_next(it, seg.size());
  319|   356k|        }
  320|       |
  321|   356k|        return read_while_code_point(
  322|   356k|            SCN_FWD(range),
  ------------------
  |  |  248|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   356k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   356k|    }
  325|   356k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   356k|{
  264|   356k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   356k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   356k|{
  231|   356k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   356k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   356k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   356k|    }
  235|   356k|    else {
  236|   356k|        auto it = ranges::begin(range);
  237|   356k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   356k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   356k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 356k, False: 0]
  ------------------
  241|   356k|            return ranges_polyfill::batch_next(
  242|   356k|                it, ranges::distance(seg.begin(), seg_it));
  243|   356k|        }
  244|       |
  245|      0|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      0|            const auto [iter, value] =
  247|      0|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|      0|            const auto cp = decode_code_point_exhaustive(value.view());
  249|      0|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 0, False: 0]
  ------------------
  250|      0|                return it;
  251|      0|            }
  252|      0|            it = iter;
  253|      0|        }
  254|       |
  255|      0|        return it;
  256|      0|    }
  257|   356k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   356k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   356k|{
  459|   356k|    auto it = read_code_unit(range);
  460|   356k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 356k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   356k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 356k, False: 0]
  ------------------
  465|   356k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 356k, False: 0]
  ------------------
  466|   356k|            return *it;
  467|   356k|        }
  468|   356k|    }
  469|       |
  470|      0|    return unexpected(parse_error::error);
  471|   356k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   142k|{
  482|   142k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 142k, False: 0]
  ------------------
  483|   142k|        return ranges::begin(range);
  484|   142k|    }
  485|      0|    return *result;
  486|   142k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   642k|{
  418|   642k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   642k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   642k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   642k|        if (ranges::size(range) < str.size()) {
  423|   642k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   642k|        }
  425|   642k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   642k|            return unexpected(parse_error::error);
  427|   642k|        }
  428|   642k|        return ranges::next(ranges::begin(range), str.size());
  429|   642k|    }
  430|   642k|    else {
  431|   642k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   642k|            if (ch < 'A' || ch > 'Z') {
  433|   642k|                return ch;
  434|   642k|            }
  435|   642k|            return static_cast<char_type>(ch +
  436|   642k|                                          static_cast<char_type>('a' - 'A'));
  437|   642k|        };
  438|       |
  439|   642k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   642k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   642k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   642k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   642k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 324, False: 642k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    324|    }                                                  \
  |  |  |  |   70|   642k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   642k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   642k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   642k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   642k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 642k, False: 0]
  |  |  ------------------
  ------------------
  443|   642k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   642k|                    return ascii_tolower(a) ==
  445|   642k|                           static_cast<detail::char_t<Range>>(b);
  446|   642k|                }))) {
  447|   642k|            return unexpected(parse_error::error);
  448|   642k|        }
  449|       |
  450|      0|        return it;
  451|   642k|    }
  452|   642k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|   642k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   642k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 642k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   642k|                return ch;
  434|   642k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   642k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   214k|{
  332|   214k|    auto it = read_code_unit(range);
  333|   214k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 214k]
  |  |  ------------------
  ------------------
  334|     54|        return unexpected(make_eof_parse_error(it.error()));
  335|     54|    }
  336|       |
  337|   214k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 214k, False: 0]
  |  |  ------------------
  ------------------
  338|   214k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   214k|        return unexpected(parse_error::error);
  340|   214k|    }
  341|       |
  342|      0|    return *it;
  343|   214k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   309k|{
  159|   309k|    auto it = read_while_code_unit(range, pred);
  160|   309k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 309k, False: 0]
  ------------------
  161|   309k|        return unexpected(parse_error::error);
  162|   309k|    }
  163|      0|    return it;
  164|   309k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   309k|{
  139|   309k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   309k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   309k|{
  131|   309k|    return ranges::find_if(range, pred);
  132|   309k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  6.82M|{
   36|  6.82M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.41k, False: 6.82M]
  |  |  ------------------
  ------------------
   37|  1.41k|        return unexpected(e);
   38|  1.41k|    }
   39|       |
   40|  6.82M|    return ranges::next(ranges::begin(range));
   41|  6.82M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   320k|{
   36|   320k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 320k]
  |  |  ------------------
  ------------------
   37|     54|        return unexpected(e);
   38|     54|    }
   39|       |
   40|   320k|    return ranges::next(ranges::begin(range));
   41|   320k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   360k|{
   48|   360k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   360k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   360k|        const auto sz = ranges::ssize(range);
   52|   360k|        if (sz < count) {
   53|   360k|            return unexpected(eof_error::eof);
   54|   360k|        }
   55|       |
   56|   360k|        return ranges::next(ranges::begin(range), count);
   57|   360k|    }
   58|   360k|    else {
   59|   360k|        auto it = ranges::begin(range);
   60|   360k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 186k, False: 173k]
  ------------------
   61|   186k|            return ranges_polyfill::batch_next(it, count);
   62|   186k|        }
   63|       |
   64|   521k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 347k, False: 173k]
  ------------------
   65|   347k|             ++i, (void)++it) {
   66|   347k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 324, False: 347k]
  ------------------
   67|    324|                return unexpected(eof_error::eof);
   68|    324|            }
   69|   347k|        }
   70|       |
   71|   173k|        return it;
   72|   173k|    }
   73|   360k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  6.16M|{
   36|  6.16M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.73k, False: 6.16M]
  |  |  ------------------
  ------------------
   37|  1.73k|        return unexpected(e);
   38|  1.73k|    }
   39|       |
   40|  6.16M|    return ranges::next(ranges::begin(range));
   41|  6.16M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  7.92M|{
   48|  7.92M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  7.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  7.92M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  7.92M|        const auto sz = ranges::ssize(range);
   52|  7.92M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 102k, False: 7.82M]
  ------------------
   53|   102k|            return unexpected(eof_error::eof);
   54|   102k|        }
   55|       |
   56|  7.82M|        return ranges::next(ranges::begin(range), count);
   57|  7.92M|    }
   58|  7.92M|    else {
   59|  7.92M|        auto it = ranges::begin(range);
   60|  7.92M|        if (guaranteed_minimum_size(range) >= count) {
   61|  7.92M|            return ranges_polyfill::batch_next(it, count);
   62|  7.92M|        }
   63|       |
   64|  7.92M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  7.92M|             ++i, (void)++it) {
   66|  7.92M|            if (it == ranges::end(range)) {
   67|  7.92M|                return unexpected(eof_error::eof);
   68|  7.92M|            }
   69|  7.92M|        }
   70|       |
   71|  7.92M|        return it;
   72|  7.92M|    }
   73|  7.92M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   570k|{
   36|   570k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   570k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 570k]
  |  |  ------------------
  ------------------
   37|     54|        return unexpected(e);
   38|     54|    }
   39|       |
   40|   570k|    return ranges::next(ranges::begin(range));
   41|   570k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   642k|{
   48|   642k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   642k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   642k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   642k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   642k|        const auto sz = ranges::ssize(range);
   52|   642k|        if (sz < count) {
   53|   642k|            return unexpected(eof_error::eof);
   54|   642k|        }
   55|       |
   56|   642k|        return ranges::next(ranges::begin(range), count);
   57|   642k|    }
   58|   642k|    else {
   59|   642k|        auto it = ranges::begin(range);
   60|   642k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 332k, False: 309k]
  ------------------
   61|   332k|            return ranges_polyfill::batch_next(it, count);
   62|   332k|        }
   63|       |
   64|   927k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 618k, False: 309k]
  ------------------
   65|   618k|             ++i, (void)++it) {
   66|   618k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 324, False: 618k]
  ------------------
   67|    324|                return unexpected(eof_error::eof);
   68|    324|            }
   69|   618k|        }
   70|       |
   71|   309k|        return it;
   72|   309k|    }
   73|   642k|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  3.97M|{
   33|  3.97M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  3.97M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|  1.00M|{
   39|  1.00M|    static_assert(std::is_same_v<Locale, std::locale>);
   40|  1.00M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 504k, False: 504k]
  ------------------
   41|  1.00M|                    : std::locale{};
   42|  1.00M|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   518k|    {
  112|   518k|        auto stdloc = loc.get<std::locale>();
  113|   518k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   518k|        grouping = numpunct.grouping();
  115|   518k|        thousands_sep =
  116|   518k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 518k]
  ------------------
  117|   518k|        decimal_point = numpunct.decimal_point();
  118|   518k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   518k|{
   49|   518k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 518k, False: 0]
  ------------------
   50|   518k|        return std::use_facet<Facet>(stdloc);
   51|   518k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   518k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   490k|    {
  112|   490k|        auto stdloc = loc.get<std::locale>();
  113|   490k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   490k|        grouping = numpunct.grouping();
  115|   490k|        thousands_sep =
  116|   490k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 490k]
  ------------------
  117|   490k|        decimal_point = numpunct.decimal_point();
  118|   490k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   490k|{
   49|   490k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 490k, False: 0]
  ------------------
   50|   490k|        return std::use_facet<Facet>(stdloc);
   51|   490k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   490k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  4.01M|{
   46|  4.01M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 4.01M, False: 0]
  ------------------
   47|  4.01M|        auto it = read_while_classic_space(range);
   48|  4.01M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  4.01M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.97k, False: 4.01M]
  |  |  ------------------
  ------------------
   50|  3.97k|            return unexpected(e);
   51|  3.97k|        }
   52|       |
   53|  4.01M|        return it;
   54|  4.01M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  4.01M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  4.23M|    {
  126|  4.23M|        return true;
  127|  4.23M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   200k|{
   46|   200k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 200k, False: 0]
  ------------------
   47|   200k|        auto it = read_while_classic_space(range);
   48|   200k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   200k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   200k|        return it;
   54|   200k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   200k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  3.04M|    {
  131|  3.04M|        reader_error_handler eh{};
  132|  3.04M|        get_derived().check_specs_impl(specs, eh);
  133|  3.04M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  3.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.04M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  3.04M|        return {};
  137|  3.04M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  3.04M|    {
  142|  3.04M|        return static_cast<Derived&>(*this);
  143|  3.04M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  5.96M|    {
   35|  5.96M|        return m_msg == nullptr;
   36|  5.96M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  3.64M|{
   46|  3.64M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 3.64M, False: 0]
  ------------------
   47|  3.64M|        auto it = read_while_classic_space(range);
   48|  3.64M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  3.64M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.60k, False: 3.63M]
  |  |  ------------------
  ------------------
   50|  5.60k|            return unexpected(e);
   51|  5.60k|        }
   52|       |
   53|  3.63M|        return it;
   54|  3.64M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  3.64M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  4.02M|    {
  126|  4.02M|        return true;
  127|  4.02M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  2.91M|    {
  131|  2.91M|        reader_error_handler eh{};
  132|  2.91M|        get_derived().check_specs_impl(specs, eh);
  133|  2.91M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  2.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.91M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  2.91M|        return {};
  137|  2.91M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  2.91M|    {
  142|  2.91M|        return static_cast<Derived&>(*this);
  143|  2.91M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   356k|{
   46|   356k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 356k, False: 0]
  ------------------
   47|   356k|        auto it = read_while_classic_space(range);
   48|   356k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   356k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 356k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   356k|        return it;
   54|   356k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   356k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   398k|{
  218|   398k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   398k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   398k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   398k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   398k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 15.9k, False: 382k]
  ------------------
  224|  15.9k|        SCN_UNLIKELY_ATTR
  225|  15.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  15.9k|                                     "Invalid integer value");
  227|  15.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   382k|    auto start = source.data();
  231|   382k|    const auto end = source.data() + source.size();
  232|   382k|    {
  233|  1.16M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.15M, False: 16.1k]
  ------------------
  234|  1.15M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 365k, False: 784k]
  ------------------
  235|   365k|                break;
  236|   365k|            }
  237|  1.15M|        }
  238|   382k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 124k, False: 257k]
  |  |  |  Branch (153:45): [True: 16.1k, False: 365k]
  |  |  |  Branch (153:45): [True: 108k, False: 257k]
  |  |  ------------------
  ------------------
  239|   124k|            value = 0;
  240|   124k|            return ranges::next(source.begin(),
  241|   124k|                                ranges::distance(source.data(), start));
  242|   124k|        }
  243|   382k|    }
  244|       |
  245|   257k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   257k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 182k, False: 74.4k]
  ------------------
  247|   182k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   182k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   182k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   182k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.52k, False: 176k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.52k|    }                                                  \
  |  |  |  |   70|   182k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   176k|                             detail::make_string_view_from_pointers(start, end),
  249|   176k|                             value, sign == sign_type::minus_sign));
  250|   176k|            return ranges::next(source.begin(),
  251|   176k|                                ranges::distance(source.data(), ptr));
  252|   182k|        }
  253|   257k|    }
  254|       |
  255|  74.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  74.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  74.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.76k, False: 68.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.76k|    }                                                  \
  |  |  |  |   70|  74.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  68.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  68.7k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  68.7k|                     base, sign == sign_type::minus_sign));
  258|  68.7k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  74.4k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   367k|{
  218|   367k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   367k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   367k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   367k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   367k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 40.1k, False: 327k]
  ------------------
  224|  40.1k|        SCN_UNLIKELY_ATTR
  225|  40.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  40.1k|                                     "Invalid integer value");
  227|  40.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   327k|    auto start = source.data();
  231|   327k|    const auto end = source.data() + source.size();
  232|   327k|    {
  233|   958k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 944k, False: 13.9k]
  ------------------
  234|   944k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 313k, False: 630k]
  ------------------
  235|   313k|                break;
  236|   313k|            }
  237|   944k|        }
  238|   327k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   641k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 109k, False: 218k]
  |  |  |  Branch (153:45): [True: 13.9k, False: 313k]
  |  |  |  Branch (153:45): [True: 95.4k, False: 218k]
  |  |  ------------------
  ------------------
  239|   109k|            value = 0;
  240|   109k|            return ranges::next(source.begin(),
  241|   109k|                                ranges::distance(source.data(), start));
  242|   109k|        }
  243|   327k|    }
  244|       |
  245|   218k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   218k|        if (base == 10) {
  247|   218k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   218k|                             detail::make_string_view_from_pointers(start, end),
  249|   218k|                             value, sign == sign_type::minus_sign));
  250|   218k|            return ranges::next(source.begin(),
  251|   218k|                                ranges::distance(source.data(), ptr));
  252|   218k|        }
  253|   218k|    }
  254|       |
  255|   218k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.81k, False: 208k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.81k|    }                                                  \
  |  |  |  |   70|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   208k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   208k|                     base, sign == sign_type::minus_sign));
  258|   208k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   218k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   583k|{
  218|   583k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   583k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   583k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   583k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   583k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   583k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   583k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   583k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   583k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   583k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   583k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   583k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   583k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 20.5k, False: 562k]
  ------------------
  224|  20.5k|        SCN_UNLIKELY_ATTR
  225|  20.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  20.5k|                                     "Invalid integer value");
  227|  20.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   562k|    auto start = source.data();
  231|   562k|    const auto end = source.data() + source.size();
  232|   562k|    {
  233|  1.50M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.48M, False: 24.1k]
  ------------------
  234|  1.48M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 538k, False: 942k]
  ------------------
  235|   538k|                break;
  236|   538k|            }
  237|  1.48M|        }
  238|   562k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 185k, False: 377k]
  |  |  |  Branch (153:45): [True: 24.1k, False: 538k]
  |  |  |  Branch (153:45): [True: 160k, False: 377k]
  |  |  ------------------
  ------------------
  239|   185k|            value = 0;
  240|   185k|            return ranges::next(source.begin(),
  241|   185k|                                ranges::distance(source.data(), start));
  242|   185k|        }
  243|   562k|    }
  244|       |
  245|   377k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   377k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 246k, False: 131k]
  ------------------
  247|   246k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   246k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.08k, False: 244k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.08k|    }                                                  \
  |  |  |  |   70|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   244k|                             detail::make_string_view_from_pointers(start, end),
  249|   244k|                             value, sign == sign_type::minus_sign));
  250|   244k|            return ranges::next(source.begin(),
  251|   244k|                                ranges::distance(source.data(), ptr));
  252|   246k|        }
  253|   377k|    }
  254|       |
  255|   131k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.74k, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.74k|    }                                                  \
  |  |  |  |   70|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   129k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   129k|                     base, sign == sign_type::minus_sign));
  258|   129k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   131k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   523k|{
  218|   523k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   523k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   523k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   523k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   523k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 43.4k, False: 480k]
  ------------------
  224|  43.4k|        SCN_UNLIKELY_ATTR
  225|  43.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  43.4k|                                     "Invalid integer value");
  227|  43.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   480k|    auto start = source.data();
  231|   480k|    const auto end = source.data() + source.size();
  232|   480k|    {
  233|  1.23M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.21M, False: 20.8k]
  ------------------
  234|  1.21M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 459k, False: 759k]
  ------------------
  235|   459k|                break;
  236|   459k|            }
  237|  1.21M|        }
  238|   480k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   939k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 160k, False: 319k]
  |  |  |  Branch (153:45): [True: 20.8k, False: 459k]
  |  |  |  Branch (153:45): [True: 139k, False: 319k]
  |  |  ------------------
  ------------------
  239|   160k|            value = 0;
  240|   160k|            return ranges::next(source.begin(),
  241|   160k|                                ranges::distance(source.data(), start));
  242|   160k|        }
  243|   480k|    }
  244|       |
  245|   319k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   319k|        if (base == 10) {
  247|   319k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   319k|                             detail::make_string_view_from_pointers(start, end),
  249|   319k|                             value, sign == sign_type::minus_sign));
  250|   319k|            return ranges::next(source.begin(),
  251|   319k|                                ranges::distance(source.data(), ptr));
  252|   319k|        }
  253|   319k|    }
  254|       |
  255|   319k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.92k, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.92k|    }                                                  \
  |  |  |  |   70|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   316k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   316k|                     base, sign == sign_type::minus_sign));
  258|   316k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   319k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   595k|{
  218|   595k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   595k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   595k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   595k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   595k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 21.8k, False: 573k]
  ------------------
  224|  21.8k|        SCN_UNLIKELY_ATTR
  225|  21.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  21.8k|                                     "Invalid integer value");
  227|  21.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   573k|    auto start = source.data();
  231|   573k|    const auto end = source.data() + source.size();
  232|   573k|    {
  233|  1.52M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.50M, False: 24.6k]
  ------------------
  234|  1.50M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 549k, False: 951k]
  ------------------
  235|   549k|                break;
  236|   549k|            }
  237|  1.50M|        }
  238|   573k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 187k, False: 386k]
  |  |  |  Branch (153:45): [True: 24.6k, False: 549k]
  |  |  |  Branch (153:45): [True: 162k, False: 386k]
  |  |  ------------------
  ------------------
  239|   187k|            value = 0;
  240|   187k|            return ranges::next(source.begin(),
  241|   187k|                                ranges::distance(source.data(), start));
  242|   187k|        }
  243|   573k|    }
  244|       |
  245|   386k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   386k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 250k, False: 136k]
  ------------------
  247|   250k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.14k, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.14k|    }                                                  \
  |  |  |  |   70|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   249k|                             detail::make_string_view_from_pointers(start, end),
  249|   249k|                             value, sign == sign_type::minus_sign));
  250|   249k|            return ranges::next(source.begin(),
  251|   249k|                                ranges::distance(source.data(), ptr));
  252|   250k|        }
  253|   386k|    }
  254|       |
  255|   136k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 675, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    675|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    675|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    675|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    675|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    675|    }                                                  \
  |  |  |  |   70|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   135k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   135k|                     base, sign == sign_type::minus_sign));
  258|   135k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   136k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   532k|{
  218|   532k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   532k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   532k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   532k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   532k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 44.0k, False: 488k]
  ------------------
  224|  44.0k|        SCN_UNLIKELY_ATTR
  225|  44.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  44.0k|                                     "Invalid integer value");
  227|  44.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   488k|    auto start = source.data();
  231|   488k|    const auto end = source.data() + source.size();
  232|   488k|    {
  233|  1.25M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.23M, False: 21.2k]
  ------------------
  234|  1.23M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 467k, False: 763k]
  ------------------
  235|   467k|                break;
  236|   467k|            }
  237|  1.23M|        }
  238|   488k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   955k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 162k, False: 325k]
  |  |  |  Branch (153:45): [True: 21.2k, False: 467k]
  |  |  |  Branch (153:45): [True: 141k, False: 325k]
  |  |  ------------------
  ------------------
  239|   162k|            value = 0;
  240|   162k|            return ranges::next(source.begin(),
  241|   162k|                                ranges::distance(source.data(), start));
  242|   162k|        }
  243|   488k|    }
  244|       |
  245|   325k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   325k|        if (base == 10) {
  247|   325k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   325k|                             detail::make_string_view_from_pointers(start, end),
  249|   325k|                             value, sign == sign_type::minus_sign));
  250|   325k|            return ranges::next(source.begin(),
  251|   325k|                                ranges::distance(source.data(), ptr));
  252|   325k|        }
  253|   325k|    }
  254|       |
  255|   325k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   325k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.64k, False: 324k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.64k|    }                                                  \
  |  |  |  |   70|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   324k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   324k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   324k|                     base, sign == sign_type::minus_sign));
  258|   324k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   325k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   385k|{
  218|   385k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   385k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   385k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   385k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   385k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   385k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   385k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 13.1k, False: 372k]
  ------------------
  224|  13.1k|        SCN_UNLIKELY_ATTR
  225|  13.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  13.1k|                                     "Invalid integer value");
  227|  13.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   372k|    auto start = source.data();
  231|   372k|    const auto end = source.data() + source.size();
  232|   372k|    {
  233|  1.14M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.13M, False: 17.6k]
  ------------------
  234|  1.13M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 355k, False: 776k]
  ------------------
  235|   355k|                break;
  236|   355k|            }
  237|  1.13M|        }
  238|   372k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132k, False: 240k]
  |  |  |  Branch (153:45): [True: 17.6k, False: 355k]
  |  |  |  Branch (153:45): [True: 114k, False: 240k]
  |  |  ------------------
  ------------------
  239|   132k|            value = 0;
  240|   132k|            return ranges::next(source.begin(),
  241|   132k|                                ranges::distance(source.data(), start));
  242|   132k|        }
  243|   372k|    }
  244|       |
  245|   240k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   240k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 160k, False: 80.0k]
  ------------------
  247|   160k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.20k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.20k|    }                                                  \
  |  |  |  |   70|   160k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   156k|                             detail::make_string_view_from_pointers(start, end),
  249|   156k|                             value, sign == sign_type::minus_sign));
  250|   156k|            return ranges::next(source.begin(),
  251|   156k|                                ranges::distance(source.data(), ptr));
  252|   160k|        }
  253|   240k|    }
  254|       |
  255|  80.0k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  80.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.62k, False: 77.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.62k|    }                                                  \
  |  |  |  |   70|  80.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  77.3k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  77.3k|                     base, sign == sign_type::minus_sign));
  258|  77.3k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  80.0k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   360k|{
  218|   360k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   360k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   360k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   360k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   360k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 38.1k, False: 322k]
  ------------------
  224|  38.1k|        SCN_UNLIKELY_ATTR
  225|  38.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  38.1k|                                     "Invalid integer value");
  227|  38.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   322k|    auto start = source.data();
  231|   322k|    const auto end = source.data() + source.size();
  232|   322k|    {
  233|   956k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 941k, False: 14.8k]
  ------------------
  234|   941k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 307k, False: 633k]
  ------------------
  235|   307k|                break;
  236|   307k|            }
  237|   941k|        }
  238|   322k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 115k, False: 207k]
  |  |  |  Branch (153:45): [True: 14.8k, False: 307k]
  |  |  |  Branch (153:45): [True: 100k, False: 207k]
  |  |  ------------------
  ------------------
  239|   115k|            value = 0;
  240|   115k|            return ranges::next(source.begin(),
  241|   115k|                                ranges::distance(source.data(), start));
  242|   115k|        }
  243|   322k|    }
  244|       |
  245|   207k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   207k|        if (base == 10) {
  247|   207k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   207k|                             detail::make_string_view_from_pointers(start, end),
  249|   207k|                             value, sign == sign_type::minus_sign));
  250|   207k|            return ranges::next(source.begin(),
  251|   207k|                                ranges::distance(source.data(), ptr));
  252|   207k|        }
  253|   207k|    }
  254|       |
  255|   207k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   207k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.97k, False: 202k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.97k|    }                                                  \
  |  |  |  |   70|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   202k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   202k|                     base, sign == sign_type::minus_sign));
  258|   202k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   207k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   467k|{
  218|   467k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   467k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   467k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   467k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   467k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   467k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   467k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   467k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   467k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   467k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   467k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   467k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   467k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 14.6k, False: 453k]
  ------------------
  224|  14.6k|        SCN_UNLIKELY_ATTR
  225|  14.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  14.6k|                                     "Invalid integer value");
  227|  14.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   453k|    auto start = source.data();
  231|   453k|    const auto end = source.data() + source.size();
  232|   453k|    {
  233|  1.29M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.27M, False: 19.7k]
  ------------------
  234|  1.27M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 433k, False: 843k]
  ------------------
  235|   433k|                break;
  236|   433k|            }
  237|  1.27M|        }
  238|   453k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   886k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 156k, False: 296k]
  |  |  |  Branch (153:45): [True: 19.7k, False: 433k]
  |  |  |  Branch (153:45): [True: 136k, False: 296k]
  |  |  ------------------
  ------------------
  239|   156k|            value = 0;
  240|   156k|            return ranges::next(source.begin(),
  241|   156k|                                ranges::distance(source.data(), start));
  242|   156k|        }
  243|   453k|    }
  244|       |
  245|   296k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   296k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 193k, False: 103k]
  ------------------
  247|   193k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   193k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   193k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   193k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.11k, False: 192k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.11k|    }                                                  \
  |  |  |  |   70|   193k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   192k|                             detail::make_string_view_from_pointers(start, end),
  249|   192k|                             value, sign == sign_type::minus_sign));
  250|   192k|            return ranges::next(source.begin(),
  251|   192k|                                ranges::distance(source.data(), ptr));
  252|   193k|        }
  253|   296k|    }
  254|       |
  255|   103k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 739, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    739|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    739|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    739|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    739|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    739|    }                                                  \
  |  |  |  |   70|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   102k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   102k|                     base, sign == sign_type::minus_sign));
  258|   102k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   103k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   432k|{
  218|   432k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   432k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   432k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   432k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   432k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 39.2k, False: 392k]
  ------------------
  224|  39.2k|        SCN_UNLIKELY_ATTR
  225|  39.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  39.2k|                                     "Invalid integer value");
  227|  39.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   392k|    auto start = source.data();
  231|   392k|    const auto end = source.data() + source.size();
  232|   392k|    {
  233|  1.08M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.06M, False: 16.9k]
  ------------------
  234|  1.06M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 375k, False: 688k]
  ------------------
  235|   375k|                break;
  236|   375k|            }
  237|  1.06M|        }
  238|   392k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 135k, False: 256k]
  |  |  |  Branch (153:45): [True: 16.9k, False: 375k]
  |  |  |  Branch (153:45): [True: 119k, False: 256k]
  |  |  ------------------
  ------------------
  239|   135k|            value = 0;
  240|   135k|            return ranges::next(source.begin(),
  241|   135k|                                ranges::distance(source.data(), start));
  242|   135k|        }
  243|   392k|    }
  244|       |
  245|   256k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   256k|        if (base == 10) {
  247|   256k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   256k|                             detail::make_string_view_from_pointers(start, end),
  249|   256k|                             value, sign == sign_type::minus_sign));
  250|   256k|            return ranges::next(source.begin(),
  251|   256k|                                ranges::distance(source.data(), ptr));
  252|   256k|        }
  253|   256k|    }
  254|       |
  255|   256k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   256k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   256k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   256k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.67k, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.67k|    }                                                  \
  |  |  |  |   70|   256k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   255k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   255k|                     base, sign == sign_type::minus_sign));
  258|   255k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   256k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   471k|{
  218|   471k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   471k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   471k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   471k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   471k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   471k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   471k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   471k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   471k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   471k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   471k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   471k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   471k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 14.9k, False: 456k]
  ------------------
  224|  14.9k|        SCN_UNLIKELY_ATTR
  225|  14.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  14.9k|                                     "Invalid integer value");
  227|  14.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   456k|    auto start = source.data();
  231|   456k|    const auto end = source.data() + source.size();
  232|   456k|    {
  233|  1.30M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.28M, False: 19.8k]
  ------------------
  234|  1.28M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 436k, False: 844k]
  ------------------
  235|   436k|                break;
  236|   436k|            }
  237|  1.28M|        }
  238|   456k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   892k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 157k, False: 299k]
  |  |  |  Branch (153:45): [True: 19.8k, False: 436k]
  |  |  |  Branch (153:45): [True: 137k, False: 299k]
  |  |  ------------------
  ------------------
  239|   157k|            value = 0;
  240|   157k|            return ranges::next(source.begin(),
  241|   157k|                                ranges::distance(source.data(), start));
  242|   157k|        }
  243|   456k|    }
  244|       |
  245|   299k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   299k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 194k, False: 104k]
  ------------------
  247|   194k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   194k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   194k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   194k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 537, False: 194k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    537|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    537|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    537|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    537|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    537|    }                                                  \
  |  |  |  |   70|   194k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   194k|                             detail::make_string_view_from_pointers(start, end),
  249|   194k|                             value, sign == sign_type::minus_sign));
  250|   194k|            return ranges::next(source.begin(),
  251|   194k|                                ranges::distance(source.data(), ptr));
  252|   194k|        }
  253|   299k|    }
  254|       |
  255|   104k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 357, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    357|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    357|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    357|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    357|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    357|    }                                                  \
  |  |  |  |   70|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   103k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   103k|                     base, sign == sign_type::minus_sign));
  258|   103k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   104k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   434k|{
  218|   434k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   434k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   434k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   434k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   434k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 39.5k, False: 394k]
  ------------------
  224|  39.5k|        SCN_UNLIKELY_ATTR
  225|  39.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  39.5k|                                     "Invalid integer value");
  227|  39.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   394k|    auto start = source.data();
  231|   394k|    const auto end = source.data() + source.size();
  232|   394k|    {
  233|  1.08M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.06M, False: 17.0k]
  ------------------
  234|  1.06M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 377k, False: 689k]
  ------------------
  235|   377k|                break;
  236|   377k|            }
  237|  1.06M|        }
  238|   394k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   772k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 136k, False: 258k]
  |  |  |  Branch (153:45): [True: 17.0k, False: 377k]
  |  |  |  Branch (153:45): [True: 119k, False: 258k]
  |  |  ------------------
  ------------------
  239|   136k|            value = 0;
  240|   136k|            return ranges::next(source.begin(),
  241|   136k|                                ranges::distance(source.data(), start));
  242|   136k|        }
  243|   394k|    }
  244|       |
  245|   258k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   258k|        if (base == 10) {
  247|   258k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   258k|                             detail::make_string_view_from_pointers(start, end),
  249|   258k|                             value, sign == sign_type::minus_sign));
  250|   258k|            return ranges::next(source.begin(),
  251|   258k|                                ranges::distance(source.data(), ptr));
  252|   258k|        }
  253|   258k|    }
  254|       |
  255|   258k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   258k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 833, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    833|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    833|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    833|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    833|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    833|    }                                                  \
  |  |  |  |   70|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   257k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   257k|                     base, sign == sign_type::minus_sign));
  258|   257k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   258k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   475k|{
  126|   475k|    auto max_digits = maxdigits_u64(base);
  127|   475k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.86k, False: 473k]
  ------------------
  128|  1.86k|        return true;
  129|  1.86k|    }
  130|   473k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 713, False: 472k]
  |  Branch (130:39): [True: 146, False: 567]
  ------------------
  131|    146|        return true;
  132|    146|    }
  133|   473k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   473k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 20.0k, False: 453k]
  ------------------
  135|   473k|                      static_cast<uint64_t>(is_negative)) {
  136|  20.0k|            SCN_UNLIKELY_ATTR
  137|  20.0k|            return true;
  138|  20.0k|        }
  139|   473k|    }
  140|       |
  141|   453k|    return false;
  142|   473k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  3.44M|{
   96|  3.44M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  3.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  3.44M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  5.02k|{
  116|  5.02k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  5.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  5.02k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   453k|{
  147|   453k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 50.6k, False: 402k]
  ------------------
  148|  50.6k|        SCN_MSVC_PUSH
  149|  50.6k|        SCN_MSVC_IGNORE(4146)
  150|  50.6k|        return static_cast<T>(
  151|  50.6k|            -std::numeric_limits<T>::max() -
  152|  50.6k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  50.6k|        SCN_MSVC_POP
  154|  50.6k|    }
  155|       |
  156|   402k|    return static_cast<T>(u64val);
  157|   453k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|   697k|{
  126|   697k|    auto max_digits = maxdigits_u64(base);
  127|   697k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.32k, False: 694k]
  ------------------
  128|  2.32k|        return true;
  129|  2.32k|    }
  130|   694k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 991, False: 693k]
  |  Branch (130:39): [True: 356, False: 635]
  ------------------
  131|    356|        return true;
  132|    356|    }
  133|   694k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   694k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 4.06k, False: 690k]
  ------------------
  135|   694k|                      static_cast<uint64_t>(is_negative)) {
  136|  4.06k|            SCN_UNLIKELY_ATTR
  137|  4.06k|            return true;
  138|  4.06k|        }
  139|   694k|    }
  140|       |
  141|   690k|    return false;
  142|   694k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|   690k|{
  147|   690k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 80.4k, False: 609k]
  ------------------
  148|  80.4k|        SCN_MSVC_PUSH
  149|  80.4k|        SCN_MSVC_IGNORE(4146)
  150|  80.4k|        return static_cast<T>(
  151|  80.4k|            -std::numeric_limits<T>::max() -
  152|  80.4k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  80.4k|        SCN_MSVC_POP
  154|  80.4k|    }
  155|       |
  156|   609k|    return static_cast<T>(u64val);
  157|   690k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|   712k|{
  126|   712k|    auto max_digits = maxdigits_u64(base);
  127|   712k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.57k, False: 710k]
  ------------------
  128|  2.57k|        return true;
  129|  2.57k|    }
  130|   710k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.19k, False: 708k]
  |  Branch (130:39): [True: 490, False: 707]
  ------------------
  131|    490|        return true;
  132|    490|    }
  133|   709k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   709k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 398, False: 709k]
  ------------------
  135|   709k|                      static_cast<uint64_t>(is_negative)) {
  136|    398|            SCN_UNLIKELY_ATTR
  137|    398|            return true;
  138|    398|        }
  139|   709k|    }
  140|       |
  141|   709k|    return false;
  142|   709k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|   709k|{
  147|   709k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 83.4k, False: 625k]
  ------------------
  148|  83.4k|        SCN_MSVC_PUSH
  149|  83.4k|        SCN_MSVC_IGNORE(4146)
  150|  83.4k|        return static_cast<T>(
  151|  83.4k|            -std::numeric_limits<T>::max() -
  152|  83.4k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  83.4k|        SCN_MSVC_POP
  154|  83.4k|    }
  155|       |
  156|   625k|    return static_cast<T>(u64val);
  157|   709k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   447k|{
  126|   447k|    auto max_digits = maxdigits_u64(base);
  127|   447k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.23k, False: 446k]
  ------------------
  128|  1.23k|        return true;
  129|  1.23k|    }
  130|   446k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 512, False: 445k]
  |  Branch (130:39): [True: 146, False: 366]
  ------------------
  131|    146|        return true;
  132|    146|    }
  133|   446k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   446k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 9.42k, False: 436k]
  ------------------
  135|   446k|                      static_cast<uint64_t>(is_negative)) {
  136|  9.42k|            SCN_UNLIKELY_ATTR
  137|  9.42k|            return true;
  138|  9.42k|        }
  139|   446k|    }
  140|       |
  141|   436k|    return false;
  142|   446k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   436k|{
  147|   436k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 436k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   436k|    return static_cast<T>(u64val);
  157|   436k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   553k|{
  126|   553k|    auto max_digits = maxdigits_u64(base);
  127|   553k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.35k, False: 552k]
  ------------------
  128|  1.35k|        return true;
  129|  1.35k|    }
  130|   552k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 734, False: 551k]
  |  Branch (130:39): [True: 356, False: 378]
  ------------------
  131|    356|        return true;
  132|    356|    }
  133|   551k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   551k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 1.81k, False: 550k]
  ------------------
  135|   551k|                      static_cast<uint64_t>(is_negative)) {
  136|  1.81k|            SCN_UNLIKELY_ATTR
  137|  1.81k|            return true;
  138|  1.81k|        }
  139|   551k|    }
  140|       |
  141|   550k|    return false;
  142|   551k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   550k|{
  147|   550k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 550k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   550k|    return static_cast<T>(u64val);
  157|   550k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   557k|{
  126|   557k|    auto max_digits = maxdigits_u64(base);
  127|   557k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.37k, False: 556k]
  ------------------
  128|  1.37k|        return true;
  129|  1.37k|    }
  130|   556k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 878, False: 555k]
  |  Branch (130:39): [True: 356, False: 522]
  ------------------
  131|    356|        return true;
  132|    356|    }
  133|   555k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   555k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 555k]
  ------------------
  135|   555k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   555k|    }
  140|       |
  141|   555k|    return false;
  142|   555k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   555k|{
  147|   555k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 555k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   555k|    return static_cast<T>(u64val);
  157|   555k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  1.01M|{
   34|  1.01M|    uint64_t val{};
   35|  1.01M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  1.01M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  542|  1.01M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (542:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  1.01M|    return val;
   40|  1.01M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  48.1k|{
   44|  48.1k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  48.1k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  48.1k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  48.1k|    word -= 0x3030303030303030;
   48|  48.1k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  48.1k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  48.1k|    return static_cast<uint32_t>(word);
   51|  48.1k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|   966k|{
   55|   966k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|   966k|              0x8080808080808080));
   57|   966k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   182k|{
  164|   182k|    uint64_t u64val{};
  165|   182k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   182k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   182k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   182k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.52k, False: 176k]
  |  |  ------------------
  ------------------
  170|   182k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  6.52k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  6.52k|                                     "Integer overflow");
  173|  6.52k|    }
  174|       |
  175|   176k|    val = store_result<T>(u64val, is_negative);
  176|   176k|    return ptr;
  177|   182k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  1.22M|{
   76|  1.22M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  3.07M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 2.78M, False: 283k]
  ------------------
   79|  2.78M|        const auto digit = char_to_int(*begin);
   80|  2.78M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 944k, False: 1.84M]
  ------------------
   81|   944k|            break;
   82|   944k|        }
   83|  1.84M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  1.84M|        ++begin;
   85|  1.84M|    }
   86|       |
   87|  1.22M|    return begin;
   88|  1.22M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  1.22M|{
   63|  1.22M|    while (
   64|  1.27M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 966k, False: 310k]
  ------------------
   65|  1.27M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 48.1k, False: 918k]
  ------------------
   66|  48.1k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  48.1k|                                      get_eight_digits_word(p));
   68|  48.1k|        p += 8;
   69|  48.1k|    }
   70|  1.22M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  74.4k|{
  185|  74.4k|    uint64_t u64val{};
  186|  74.4k|    const CharT* begin = input.data();
  187|  74.4k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   228k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 215k, False: 13.4k]
  ------------------
  190|   215k|        const auto digit = char_to_int(*begin);
  191|   215k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 61.0k, False: 154k]
  ------------------
  192|  61.0k|            break;
  193|  61.0k|        }
  194|   154k|        u64val =
  195|   154k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   154k|        ++begin;
  197|   154k|    }
  198|       |
  199|  74.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  74.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  74.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.76k, False: 68.7k]
  |  |  ------------------
  ------------------
  201|  74.4k|                                               is_negative))) {
  202|  5.76k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  5.76k|                                     "Integer overflow");
  204|  5.76k|    }
  205|       |
  206|  68.7k|    val = store_result<T>(u64val, is_negative);
  207|  68.7k|    return begin;
  208|  74.4k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   218k|{
  185|   218k|    uint64_t u64val{};
  186|   218k|    const CharT* begin = input.data();
  187|   218k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   634k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 586k, False: 48.2k]
  ------------------
  190|   586k|        const auto digit = char_to_int(*begin);
  191|   586k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 170k, False: 416k]
  ------------------
  192|   170k|            break;
  193|   170k|        }
  194|   416k|        u64val =
  195|   416k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   416k|        ++begin;
  197|   416k|    }
  198|       |
  199|   218k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   218k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.81k, False: 208k]
  |  |  ------------------
  ------------------
  201|   218k|                                               is_negative))) {
  202|  9.81k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  9.81k|                                     "Integer overflow");
  204|  9.81k|    }
  205|       |
  206|   208k|    val = store_result<T>(u64val, is_negative);
  207|   208k|    return begin;
  208|   218k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   246k|{
  164|   246k|    uint64_t u64val{};
  165|   246k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   246k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   246k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   246k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.08k, False: 244k]
  |  |  ------------------
  ------------------
  170|   246k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.08k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.08k|                                     "Integer overflow");
  173|  2.08k|    }
  174|       |
  175|   244k|    val = store_result<T>(u64val, is_negative);
  176|   244k|    return ptr;
  177|   246k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   131k|{
  185|   131k|    uint64_t u64val{};
  186|   131k|    const CharT* begin = input.data();
  187|   131k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   380k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 362k, False: 17.6k]
  ------------------
  190|   362k|        const auto digit = char_to_int(*begin);
  191|   362k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 113k, False: 249k]
  ------------------
  192|   113k|            break;
  193|   113k|        }
  194|   249k|        u64val =
  195|   249k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   249k|        ++begin;
  197|   249k|    }
  198|       |
  199|   131k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   131k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.74k, False: 129k]
  |  |  ------------------
  ------------------
  201|   131k|                                               is_negative))) {
  202|  1.74k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.74k|                                     "Integer overflow");
  204|  1.74k|    }
  205|       |
  206|   129k|    val = store_result<T>(u64val, is_negative);
  207|   129k|    return begin;
  208|   131k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   319k|{
  185|   319k|    uint64_t u64val{};
  186|   319k|    const CharT* begin = input.data();
  187|   319k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   926k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 863k, False: 63.0k]
  ------------------
  190|   863k|        const auto digit = char_to_int(*begin);
  191|   863k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 256k, False: 606k]
  ------------------
  192|   256k|            break;
  193|   256k|        }
  194|   606k|        u64val =
  195|   606k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   606k|        ++begin;
  197|   606k|    }
  198|       |
  199|   319k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   319k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.92k, False: 316k]
  |  |  ------------------
  ------------------
  201|   319k|                                               is_negative))) {
  202|  2.92k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.92k|                                     "Integer overflow");
  204|  2.92k|    }
  205|       |
  206|   316k|    val = store_result<T>(u64val, is_negative);
  207|   316k|    return begin;
  208|   319k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   250k|{
  164|   250k|    uint64_t u64val{};
  165|   250k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   250k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   250k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   250k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.14k, False: 249k]
  |  |  ------------------
  ------------------
  170|   250k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.14k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.14k|                                     "Integer overflow");
  173|  1.14k|    }
  174|       |
  175|   249k|    val = store_result<T>(u64val, is_negative);
  176|   249k|    return ptr;
  177|   250k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   136k|{
  185|   136k|    uint64_t u64val{};
  186|   136k|    const CharT* begin = input.data();
  187|   136k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   400k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 381k, False: 18.8k]
  ------------------
  190|   381k|        const auto digit = char_to_int(*begin);
  191|   381k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 117k, False: 264k]
  ------------------
  192|   117k|            break;
  193|   117k|        }
  194|   264k|        u64val =
  195|   264k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   264k|        ++begin;
  197|   264k|    }
  198|       |
  199|   136k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   136k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 675, False: 135k]
  |  |  ------------------
  ------------------
  201|   136k|                                               is_negative))) {
  202|    675|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    675|                                     "Integer overflow");
  204|    675|    }
  205|       |
  206|   135k|    val = store_result<T>(u64val, is_negative);
  207|   135k|    return begin;
  208|   136k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   325k|{
  185|   325k|    uint64_t u64val{};
  186|   325k|    const CharT* begin = input.data();
  187|   325k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   955k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 891k, False: 64.5k]
  ------------------
  190|   891k|        const auto digit = char_to_int(*begin);
  191|   891k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 261k, False: 629k]
  ------------------
  192|   261k|            break;
  193|   261k|        }
  194|   629k|        u64val =
  195|   629k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   629k|        ++begin;
  197|   629k|    }
  198|       |
  199|   325k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   325k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.64k, False: 324k]
  |  |  ------------------
  ------------------
  201|   325k|                                               is_negative))) {
  202|  1.64k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.64k|                                     "Integer overflow");
  204|  1.64k|    }
  205|       |
  206|   324k|    val = store_result<T>(u64val, is_negative);
  207|   324k|    return begin;
  208|   325k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   160k|{
  164|   160k|    uint64_t u64val{};
  165|   160k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   160k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   160k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   160k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.20k, False: 156k]
  |  |  ------------------
  ------------------
  170|   160k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  3.20k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  3.20k|                                     "Integer overflow");
  173|  3.20k|    }
  174|       |
  175|   156k|    val = store_result<T>(u64val, is_negative);
  176|   156k|    return ptr;
  177|   160k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  80.0k|{
  185|  80.0k|    uint64_t u64val{};
  186|  80.0k|    const CharT* begin = input.data();
  187|  80.0k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   221k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 209k, False: 12.3k]
  ------------------
  190|   209k|        const auto digit = char_to_int(*begin);
  191|   209k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 67.6k, False: 141k]
  ------------------
  192|  67.6k|            break;
  193|  67.6k|        }
  194|   141k|        u64val =
  195|   141k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   141k|        ++begin;
  197|   141k|    }
  198|       |
  199|  80.0k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  80.0k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  80.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.62k, False: 77.3k]
  |  |  ------------------
  ------------------
  201|  80.0k|                                               is_negative))) {
  202|  2.62k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.62k|                                     "Integer overflow");
  204|  2.62k|    }
  205|       |
  206|  77.3k|    val = store_result<T>(u64val, is_negative);
  207|  77.3k|    return begin;
  208|  80.0k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   207k|{
  185|   207k|    uint64_t u64val{};
  186|   207k|    const CharT* begin = input.data();
  187|   207k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   561k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 517k, False: 43.6k]
  ------------------
  190|   517k|        const auto digit = char_to_int(*begin);
  191|   517k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 163k, False: 353k]
  ------------------
  192|   163k|            break;
  193|   163k|        }
  194|   353k|        u64val =
  195|   353k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   353k|        ++begin;
  197|   353k|    }
  198|       |
  199|   207k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   207k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.97k, False: 202k]
  |  |  ------------------
  ------------------
  201|   207k|                                               is_negative))) {
  202|  4.97k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  4.97k|                                     "Integer overflow");
  204|  4.97k|    }
  205|       |
  206|   202k|    val = store_result<T>(u64val, is_negative);
  207|   202k|    return begin;
  208|   207k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   193k|{
  164|   193k|    uint64_t u64val{};
  165|   193k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   193k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   193k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   193k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.11k, False: 192k]
  |  |  ------------------
  ------------------
  170|   193k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.11k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.11k|                                     "Integer overflow");
  173|  1.11k|    }
  174|       |
  175|   192k|    val = store_result<T>(u64val, is_negative);
  176|   192k|    return ptr;
  177|   193k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   103k|{
  185|   103k|    uint64_t u64val{};
  186|   103k|    const CharT* begin = input.data();
  187|   103k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   284k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 270k, False: 14.6k]
  ------------------
  190|   270k|        const auto digit = char_to_int(*begin);
  191|   270k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 88.5k, False: 181k]
  ------------------
  192|  88.5k|            break;
  193|  88.5k|        }
  194|   181k|        u64val =
  195|   181k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   181k|        ++begin;
  197|   181k|    }
  198|       |
  199|   103k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   103k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 739, False: 102k]
  |  |  ------------------
  ------------------
  201|   103k|                                               is_negative))) {
  202|    739|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    739|                                     "Integer overflow");
  204|    739|    }
  205|       |
  206|   102k|    val = store_result<T>(u64val, is_negative);
  207|   102k|    return begin;
  208|   103k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   256k|{
  185|   256k|    uint64_t u64val{};
  186|   256k|    const CharT* begin = input.data();
  187|   256k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   705k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 654k, False: 51.1k]
  ------------------
  190|   654k|        const auto digit = char_to_int(*begin);
  191|   654k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 205k, False: 448k]
  ------------------
  192|   205k|            break;
  193|   205k|        }
  194|   448k|        u64val =
  195|   448k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   448k|        ++begin;
  197|   448k|    }
  198|       |
  199|   256k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   256k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.67k, False: 255k]
  |  |  ------------------
  ------------------
  201|   256k|                                               is_negative))) {
  202|  1.67k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.67k|                                     "Integer overflow");
  204|  1.67k|    }
  205|       |
  206|   255k|    val = store_result<T>(u64val, is_negative);
  207|   255k|    return begin;
  208|   256k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   194k|{
  164|   194k|    uint64_t u64val{};
  165|   194k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   194k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   194k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   194k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 537, False: 194k]
  |  |  ------------------
  ------------------
  170|   194k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    537|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    537|                                     "Integer overflow");
  173|    537|    }
  174|       |
  175|   194k|    val = store_result<T>(u64val, is_negative);
  176|   194k|    return ptr;
  177|   194k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   104k|{
  185|   104k|    uint64_t u64val{};
  186|   104k|    const CharT* begin = input.data();
  187|   104k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   288k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 273k, False: 15.0k]
  ------------------
  190|   273k|        const auto digit = char_to_int(*begin);
  191|   273k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 89.1k, False: 184k]
  ------------------
  192|  89.1k|            break;
  193|  89.1k|        }
  194|   184k|        u64val =
  195|   184k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   184k|        ++begin;
  197|   184k|    }
  198|       |
  199|   104k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   104k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 357, False: 103k]
  |  |  ------------------
  ------------------
  201|   104k|                                               is_negative))) {
  202|    357|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    357|                                     "Integer overflow");
  204|    357|    }
  205|       |
  206|   103k|    val = store_result<T>(u64val, is_negative);
  207|   103k|    return begin;
  208|   104k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   258k|{
  185|   258k|    uint64_t u64val{};
  186|   258k|    const CharT* begin = input.data();
  187|   258k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   711k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 660k, False: 51.5k]
  ------------------
  190|   660k|        const auto digit = char_to_int(*begin);
  191|   660k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 206k, False: 453k]
  ------------------
  192|   206k|            break;
  193|   206k|        }
  194|   453k|        u64val =
  195|   453k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   453k|        ++begin;
  197|   453k|    }
  198|       |
  199|   258k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   258k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 833, False: 257k]
  |  |  ------------------
  ------------------
  201|   258k|                                               is_negative))) {
  202|    833|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    833|                                     "Integer overflow");
  204|    833|    }
  205|       |
  206|   257k|    val = store_result<T>(u64val, is_negative);
  207|   257k|    return begin;
  208|   258k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   164k|    {
  324|   164k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   164k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   164k|        return read_default_with_base(range, value, 0);
  326|   164k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   164k|    {
  287|   164k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   164k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   164k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   164k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   164k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   164k|                return unexpected_scan_error(
  293|   164k|                    scan_error::invalid_scanned_value,
  294|   164k|                    "Unexpected '-' sign when parsing an "
  295|   164k|                    "unsigned value");
  296|   164k|            }
  297|   164k|        }
  298|       |
  299|   164k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 59.4k, False: 105k]
  ------------------
  300|  59.4k|            value = T{0};
  301|  59.4k|            return std::next(prefix_result.iterator);
  302|  59.4k|        }
  303|       |
  304|   210k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 75, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     75|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     75|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     75|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     75|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     75|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   210k|                                     ranges::subrange{prefix_result.iterator,
  306|   210k|                                                      ranges::end(range)},
  307|   210k|                                     prefix_result.parsed_base));
  308|       |
  309|   210k|        auto buf = make_contiguous_buffer(
  310|   210k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   210k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.79k, False: 99.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.79k|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  99.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  99.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  99.5k|                                    prefix_result.parsed_base));
  314|       |
  315|  99.5k|        return ranges_polyfill::batch_next(
  316|  99.5k|            prefix_result.iterator,
  317|  99.5k|            ranges::distance(buf.view().begin(), result_it));
  318|   210k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  4.01M|{
  121|  4.01M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  4.01M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.01M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  4.01M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  4.01M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  4.01M|        parse_integer_base_prefix(
  126|  4.01M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  4.01M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 1.72M, False: 2.28M]
  ------------------
  129|  1.72M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.26k, False: 1.72M]
  ------------------
  130|  1.72M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 1.06M, False: 663k]
  ------------------
  131|  1.06M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  1.06M|                digits_begin_it, ranges::begin(range));
  133|  1.06M|        }
  134|   663k|        else {
  135|   663k|            parsed_zero = false;
  136|   663k|        }
  137|  1.72M|    }
  138|  2.28M|    else {
  139|  2.28M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 6.45k, False: 2.27M]
  ------------------
  140|  2.28M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 119k, False: 2.15M]
  ------------------
  141|   125k|            digits_begin_it = base_prefix_begin_it;
  142|   125k|        }
  143|  2.28M|    }
  144|       |
  145|  4.01M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 3.80M, False: 207k]
  ------------------
  146|  3.80M|        sign = sign_type::plus_sign;
  147|  3.80M|    }
  148|  4.01M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  4.01M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  4.01M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  4.01M|{
   88|  4.01M|    switch (base) {
   89|  96.8k|        case 2:
  ------------------
  |  Branch (89:9): [True: 96.8k, False: 3.91M]
  ------------------
   90|       |            // allow 0b/0B
   91|  96.8k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  96.8k|                    false};
   93|       |
   94|   210k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 210k, False: 3.80M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   210k|            bool zero_parsed = false;
   97|   210k|            auto it = apply_opt(
   98|   210k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   210k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   539k|        case 16:
  ------------------
  |  Branch (102:9): [True: 539k, False: 3.47M]
  ------------------
  103|       |            // allow 0x/0X
  104|   539k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   539k|                    false};
  106|       |
  107|  2.69M|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.69M, False: 1.31M]
  ------------------
  108|       |            // detect base
  109|  2.69M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   472k|        default:
  ------------------
  |  Branch (111:9): [True: 472k, False: 3.54M]
  ------------------
  112|       |            // no base prefix allowed
  113|   472k|            return {ranges::begin(range), base, false};
  114|  4.01M|    }
  115|  4.01M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.73M|{
   38|  2.73M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.73M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.85M|{
   53|  2.85M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 37.1k, False: 2.81M]
  ------------------
   54|  37.1k|        return *r;
   55|  37.1k|    }
   56|       |
   57|  2.81M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 1.72M, False: 1.08M]
  ------------------
   58|  1.72M|        zero_parsed = true;
   59|  1.72M|        return *r;
   60|  1.72M|    }
   61|       |
   62|  1.08M|    return unexpected(parse_error::error);
   63|  2.81M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  3.23M|{
   45|  3.23M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  3.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  3.23M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.69M|{
   69|  2.69M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 50.6k, False: 2.64M]
  ------------------
   70|  50.6k|        return {*r, 16, false};
   71|  50.6k|    }
   72|  2.64M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.29k, False: 2.64M]
  ------------------
   73|  2.29k|        return {*r, 2, false};
   74|  2.29k|    }
   75|  2.64M|    {
   76|  2.64M|        bool zero_parsed{false};
   77|  2.64M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.62M, False: 1.01M]
  ------------------
   78|  1.62M|            return {*r, 8, zero_parsed};
   79|  1.62M|        }
   80|  2.64M|    }
   81|  1.01M|    return {ranges::begin(range), 10, false};
   82|  2.64M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.42M|{
  156|  2.42M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.42M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.42M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.34k, False: 2.42M]
  |  |  ------------------
  ------------------
  160|  1.34k|            return unexpected_scan_error(
  161|  1.34k|                scan_error::invalid_scanned_value,
  162|  1.34k|                "Failed to parse integer: No digits found");
  163|  1.34k|        }
  164|  2.42M|        return ranges::end(range);
  165|  2.42M|    }
  166|  2.42M|    else {
  167|  2.42M|        return read_while1_code_unit(
  168|  2.42M|                   range, [&](char_type ch)
  169|  2.42M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.42M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.42M|                scan_error::invalid_scanned_value,
  172|  2.42M|                "Failed to parse integer: No digits found"));
  173|  2.42M|    }
  174|  2.42M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   222k|    {
  324|   222k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   222k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   222k|        return read_default_with_base(range, value, 0);
  326|   222k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   222k|    {
  287|   222k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   222k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   222k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   222k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   222k|                return unexpected_scan_error(
  293|   222k|                    scan_error::invalid_scanned_value,
  294|   222k|                    "Unexpected '-' sign when parsing an "
  295|   222k|                    "unsigned value");
  296|   222k|            }
  297|   222k|        }
  298|       |
  299|   222k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 80.1k, False: 142k]
  ------------------
  300|  80.1k|            value = T{0};
  301|  80.1k|            return std::next(prefix_result.iterator);
  302|  80.1k|        }
  303|       |
  304|   284k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 108, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    108|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   284k|                                     ranges::subrange{prefix_result.iterator,
  306|   284k|                                                      ranges::end(range)},
  307|   284k|                                     prefix_result.parsed_base));
  308|       |
  309|   284k|        auto buf = make_contiguous_buffer(
  310|   284k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   284k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.09k, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.09k|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   137k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   137k|                                    prefix_result.parsed_base));
  314|       |
  315|   137k|        return ranges_polyfill::batch_next(
  316|   137k|            prefix_result.iterator,
  317|   137k|            ranges::distance(buf.view().begin(), result_it));
  318|   284k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   226k|    {
  324|   226k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   226k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   226k|        return read_default_with_base(range, value, 0);
  326|   226k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   226k|    {
  287|   226k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   226k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   226k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   226k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   226k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   226k|                return unexpected_scan_error(
  293|   226k|                    scan_error::invalid_scanned_value,
  294|   226k|                    "Unexpected '-' sign when parsing an "
  295|   226k|                    "unsigned value");
  296|   226k|            }
  297|   226k|        }
  298|       |
  299|   226k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 81.2k, False: 145k]
  ------------------
  300|  81.2k|            value = T{0};
  301|  81.2k|            return std::next(prefix_result.iterator);
  302|  81.2k|        }
  303|       |
  304|   290k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 117, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    117|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    117|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    117|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    117|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    117|    }                                                  \
  |  |  |  |   70|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   290k|                                     ranges::subrange{prefix_result.iterator,
  306|   290k|                                                      ranges::end(range)},
  307|   290k|                                     prefix_result.parsed_base));
  308|       |
  309|   290k|        auto buf = make_contiguous_buffer(
  310|   290k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   290k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.98k, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.98k|    }                                                  \
  |  |  |  |   70|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   140k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   140k|                                    prefix_result.parsed_base));
  314|       |
  315|   140k|        return ranges_polyfill::batch_next(
  316|   140k|            prefix_result.iterator,
  317|   140k|            ranges::distance(buf.view().begin(), result_it));
  318|   290k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   163k|    {
  324|   163k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   163k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   163k|        return read_default_with_base(range, value, 0);
  326|   163k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   163k|    {
  287|   163k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   163k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   163k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   163k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.28k, False: 160k]
  ------------------
  292|  2.28k|                return unexpected_scan_error(
  293|  2.28k|                    scan_error::invalid_scanned_value,
  294|  2.28k|                    "Unexpected '-' sign when parsing an "
  295|  2.28k|                    "unsigned value");
  296|  2.28k|            }
  297|   163k|        }
  298|       |
  299|   160k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 61.5k, False: 99.4k]
  ------------------
  300|  61.5k|            value = T{0};
  301|  61.5k|            return std::next(prefix_result.iterator);
  302|  61.5k|        }
  303|       |
  304|   198k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  99.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  99.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36, False: 99.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|  99.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  99.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   198k|                                     ranges::subrange{prefix_result.iterator,
  306|   198k|                                                      ranges::end(range)},
  307|   198k|                                     prefix_result.parsed_base));
  308|       |
  309|   198k|        auto buf = make_contiguous_buffer(
  310|   198k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   198k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  99.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  99.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.68k, False: 95.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.68k|    }                                                  \
  |  |  |  |   70|  99.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  95.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  95.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  95.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  95.6k|        return ranges_polyfill::batch_next(
  316|  95.6k|            prefix_result.iterator,
  317|  95.6k|            ranges::distance(buf.view().begin(), result_it));
  318|   198k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   184k|    {
  324|   184k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   184k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   184k|        return read_default_with_base(range, value, 0);
  326|   184k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   184k|    {
  287|   184k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   184k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   184k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   184k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 184k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   184k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   184k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   184k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   184k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.44k, False: 182k]
  ------------------
  292|  2.44k|                return unexpected_scan_error(
  293|  2.44k|                    scan_error::invalid_scanned_value,
  294|  2.44k|                    "Unexpected '-' sign when parsing an "
  295|  2.44k|                    "unsigned value");
  296|  2.44k|            }
  297|   184k|        }
  298|       |
  299|   182k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 68.5k, False: 113k]
  ------------------
  300|  68.5k|            value = T{0};
  301|  68.5k|            return std::next(prefix_result.iterator);
  302|  68.5k|        }
  303|       |
  304|   227k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     39|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     39|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     39|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     39|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     39|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   227k|                                     ranges::subrange{prefix_result.iterator,
  306|   227k|                                                      ranges::end(range)},
  307|   227k|                                     prefix_result.parsed_base));
  308|       |
  309|   227k|        auto buf = make_contiguous_buffer(
  310|   227k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   227k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.18k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.18k|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   110k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   110k|                                    prefix_result.parsed_base));
  314|       |
  315|   110k|        return ranges_polyfill::batch_next(
  316|   110k|            prefix_result.iterator,
  317|   110k|            ranges::distance(buf.view().begin(), result_it));
  318|   227k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   186k|    {
  324|   186k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   186k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   186k|        return read_default_with_base(range, value, 0);
  326|   186k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   186k|    {
  287|   186k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   186k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   186k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   186k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   186k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   186k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   186k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   186k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.58k, False: 183k]
  ------------------
  292|  2.58k|                return unexpected_scan_error(
  293|  2.58k|                    scan_error::invalid_scanned_value,
  294|  2.58k|                    "Unexpected '-' sign when parsing an "
  295|  2.58k|                    "unsigned value");
  296|  2.58k|            }
  297|   186k|        }
  298|       |
  299|   183k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 68.8k, False: 114k]
  ------------------
  300|  68.8k|            value = T{0};
  301|  68.8k|            return std::next(prefix_result.iterator);
  302|  68.8k|        }
  303|       |
  304|   229k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     39|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     39|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     39|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     39|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     39|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   229k|                                     ranges::subrange{prefix_result.iterator,
  306|   229k|                                                      ranges::end(range)},
  307|   229k|                                     prefix_result.parsed_base));
  308|       |
  309|   229k|        auto buf = make_contiguous_buffer(
  310|   229k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   229k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.98k, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.98k|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   111k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   111k|                                    prefix_result.parsed_base));
  314|       |
  315|   111k|        return ranges_polyfill::batch_next(
  316|   111k|            prefix_result.iterator,
  317|   111k|            ranges::distance(buf.view().begin(), result_it));
  318|   229k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   491k|{
  185|   491k|    std::basic_string<CharT> output;
  186|   491k|    std::string thsep_indices;
  187|   491k|    auto it = ranges::begin(range);
  188|   491k|    bool digit_matched = false;
  189|  2.63M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.63M, False: 5.01k]
  ------------------
  190|  2.63M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 156k, False: 2.47M]
  ------------------
  191|   156k|            thsep_indices.push_back(static_cast<char>(
  192|   156k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|   156k|        }
  194|  2.47M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 486k, False: 1.98M]
  ------------------
  195|   486k|            break;
  196|   486k|        }
  197|  1.98M|        else {
  198|  1.98M|            output.push_back(*it);
  199|  1.98M|            digit_matched = true;
  200|  1.98M|        }
  201|  2.63M|    }
  202|   491k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.8k, False: 480k]
  |  |  ------------------
  ------------------
  203|  10.8k|        return unexpected_scan_error(
  204|  10.8k|            scan_error::invalid_scanned_value,
  205|  10.8k|            "Failed to parse integer: No digits found");
  206|  10.8k|    }
  207|   480k|    return std::tuple{it, output, thsep_indices};
  208|   491k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.68k|    {
  324|  6.68k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.68k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.68k|        return read_default_with_base(range, value, 0);
  326|  6.68k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.68k|    {
  287|  6.68k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.68k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.68k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.68k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.68k|                return unexpected_scan_error(
  293|  6.68k|                    scan_error::invalid_scanned_value,
  294|  6.68k|                    "Unexpected '-' sign when parsing an "
  295|  6.68k|                    "unsigned value");
  296|  6.68k|            }
  297|  6.68k|        }
  298|       |
  299|  6.68k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.68k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.68k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.68k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.68k|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.68k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.68k|                                                      ranges::end(range)},
  307|  6.68k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.68k|        auto buf = make_contiguous_buffer(
  310|  6.68k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.68k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.68k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   200k|{
  121|   200k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   200k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   200k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   200k|        parse_integer_base_prefix(
  126|   200k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   200k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 200k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   200k|    else {
  139|   200k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 90, False: 200k]
  ------------------
  140|   200k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 200k, False: 0]
  ------------------
  141|   200k|            digits_begin_it = base_prefix_begin_it;
  142|   200k|        }
  143|   200k|    }
  144|       |
  145|   200k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 0, False: 200k]
  ------------------
  146|      0|        sign = sign_type::plus_sign;
  147|      0|    }
  148|   200k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   200k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   200k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   200k|{
   88|   200k|    switch (base) {
   89|  26.7k|        case 2:
  ------------------
  |  Branch (89:9): [True: 26.7k, False: 173k]
  ------------------
   90|       |            // allow 0b/0B
   91|  26.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  26.7k|                    false};
   93|       |
   94|  26.7k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 26.7k, False: 173k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  26.7k|            bool zero_parsed = false;
   97|  26.7k|            auto it = apply_opt(
   98|  26.7k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  26.7k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  26.7k|        case 16:
  ------------------
  |  Branch (102:9): [True: 26.7k, False: 173k]
  ------------------
  103|       |            // allow 0x/0X
  104|  26.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  26.7k|                    false};
  106|       |
  107|  93.5k|        case 0:
  ------------------
  |  Branch (107:9): [True: 93.5k, False: 106k]
  ------------------
  108|       |            // detect base
  109|  93.5k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  26.7k|        default:
  ------------------
  |  Branch (111:9): [True: 26.7k, False: 173k]
  ------------------
  112|       |            // no base prefix allowed
  113|  26.7k|            return {ranges::begin(range), base, false};
  114|   200k|    }
  115|   200k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   120k|{
   38|   120k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   120k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   120k|{
   53|   120k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 120k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   120k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 120k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   120k|    return unexpected(parse_error::error);
   63|   120k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   120k|{
   45|   120k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   120k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|  93.5k|{
   69|  93.5k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 93.5k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  93.5k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 93.5k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  93.5k|    {
   76|  93.5k|        bool zero_parsed{false};
   77|  93.5k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 93.5k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  93.5k|    }
   81|  93.5k|    return {ranges::begin(range), 10, false};
   82|  93.5k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   173k|{
  156|   173k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   173k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   173k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   173k|            return unexpected_scan_error(
  161|   173k|                scan_error::invalid_scanned_value,
  162|   173k|                "Failed to parse integer: No digits found");
  163|   173k|        }
  164|   173k|        return ranges::end(range);
  165|   173k|    }
  166|   173k|    else {
  167|   173k|        return read_while1_code_unit(
  168|   173k|                   range, [&](char_type ch)
  169|   173k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   173k|            .transform_error(map_parse_error_to_scan_error(
  171|   173k|                scan_error::invalid_scanned_value,
  172|   173k|                "Failed to parse integer: No digits found"));
  173|   173k|    }
  174|   173k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   173k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.68k|    {
  324|  6.68k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.68k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.68k|        return read_default_with_base(range, value, 0);
  326|  6.68k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.68k|    {
  287|  6.68k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.68k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.68k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.68k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.68k|                return unexpected_scan_error(
  293|  6.68k|                    scan_error::invalid_scanned_value,
  294|  6.68k|                    "Unexpected '-' sign when parsing an "
  295|  6.68k|                    "unsigned value");
  296|  6.68k|            }
  297|  6.68k|        }
  298|       |
  299|  6.68k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.68k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.68k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.68k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.68k|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.68k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.68k|                                                      ranges::end(range)},
  307|  6.68k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.68k|        auto buf = make_contiguous_buffer(
  310|  6.68k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.68k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.68k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.68k|    {
  324|  6.68k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.68k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.68k|        return read_default_with_base(range, value, 0);
  326|  6.68k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.68k|    {
  287|  6.68k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.68k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.68k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.68k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.68k|                return unexpected_scan_error(
  293|  6.68k|                    scan_error::invalid_scanned_value,
  294|  6.68k|                    "Unexpected '-' sign when parsing an "
  295|  6.68k|                    "unsigned value");
  296|  6.68k|            }
  297|  6.68k|        }
  298|       |
  299|  6.68k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.68k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.68k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.68k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.68k|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.68k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.68k|                                                      ranges::end(range)},
  307|  6.68k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.68k|        auto buf = make_contiguous_buffer(
  310|  6.68k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.68k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.68k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.68k|    {
  324|  6.68k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.68k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.68k|        return read_default_with_base(range, value, 0);
  326|  6.68k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.68k|    {
  287|  6.68k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.68k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.68k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.68k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.68k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.68k|        }
  298|       |
  299|  6.68k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.68k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.68k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.68k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.68k|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.68k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.68k|                                                      ranges::end(range)},
  307|  6.68k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.68k|        auto buf = make_contiguous_buffer(
  310|  6.68k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.68k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.68k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.68k|    {
  324|  6.68k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.68k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.68k|        return read_default_with_base(range, value, 0);
  326|  6.68k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.68k|    {
  287|  6.68k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.68k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.68k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.68k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.68k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.68k|        }
  298|       |
  299|  6.68k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.68k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.68k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.68k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.68k|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.68k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.68k|                                                      ranges::end(range)},
  307|  6.68k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.68k|        auto buf = make_contiguous_buffer(
  310|  6.68k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.68k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.68k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.68k|    {
  324|  6.68k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.68k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.68k|        return read_default_with_base(range, value, 0);
  326|  6.68k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.68k|    {
  287|  6.68k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.68k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.68k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.68k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.68k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.68k|        }
  298|       |
  299|  6.68k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.68k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.68k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.68k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.68k|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.68k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.68k|                                                      ranges::end(range)},
  307|  6.68k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.68k|        auto buf = make_contiguous_buffer(
  310|  6.68k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.68k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  6.68k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  26.7k|{
  185|  26.7k|    std::basic_string<CharT> output;
  186|  26.7k|    std::string thsep_indices;
  187|  26.7k|    auto it = ranges::begin(range);
  188|  26.7k|    bool digit_matched = false;
  189|  26.7k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 26.7k, False: 12]
  ------------------
  190|  26.7k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 26.7k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  26.7k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 26.7k, False: 0]
  ------------------
  195|  26.7k|            break;
  196|  26.7k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  26.7k|    }
  202|  26.7k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.7k, False: 0]
  |  |  ------------------
  ------------------
  203|  26.7k|        return unexpected_scan_error(
  204|  26.7k|            scan_error::invalid_scanned_value,
  205|  26.7k|            "Failed to parse integer: No digits found");
  206|  26.7k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  26.7k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  3.04M|    {
  280|  3.04M|        detail::check_int_type_specs(specs, eh);
  281|  3.04M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   387k|    {
  335|   387k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   387k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   387k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   387k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 387k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   387k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   387k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   387k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 26.9k, False: 360k]
  ------------------
  339|  26.9k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  26.9k|                return unexpected_scan_error(
  341|  26.9k|                    scan_error::invalid_scanned_value,
  342|  26.9k|                    "Unexpected '-' sign when parsing an "
  343|  26.9k|                    "unsigned value");
  344|  26.9k|            }
  345|  26.9k|            else {
  346|  26.9k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 26.9k]
  ------------------
  347|  26.9k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  26.9k|            }
  353|  26.9k|        }
  354|       |
  355|   387k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 92.9k, False: 294k]
  ------------------
  356|  92.9k|            value = T{0};
  357|  92.9k|            return std::next(prefix_result.iterator);
  358|  92.9k|        }
  359|       |
  360|   294k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   294k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 222k, False: 72.0k]
  |  |  ------------------
  ------------------
  361|   222k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 158, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    158|    }                                                  \
  |  |  |  |   70|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   222k|                    parse_integer_digits_without_thsep(
  363|   222k|                        ranges::subrange{prefix_result.iterator,
  364|   222k|                                         ranges::end(range)},
  365|   222k|                        prefix_result.parsed_base));
  366|       |
  367|   222k|            auto buf = make_contiguous_buffer(
  368|   222k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   222k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.4k, False: 202k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.4k|    }                                                  \
  |  |  |  |   70|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   202k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   202k|                                        prefix_result.parsed_base));
  372|       |
  373|   202k|            return ranges_polyfill::batch_next(
  374|   202k|                prefix_result.iterator,
  375|   202k|                ranges::distance(buf.view().begin(), result_it));
  376|   222k|        }
  377|       |
  378|  72.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  72.0k|            localized_number_formatting_options<CharT>{loc};
  383|  72.0k|#endif
  384|       |
  385|  72.0k|        SCN_TRY(
  ------------------
  |  |   71|  72.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  72.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  72.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.63k, False: 70.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.63k|    }                                                  \
  |  |  |  |   70|  72.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  70.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  70.4k|            parse_digits_result,
  387|  70.4k|            parse_integer_digits_with_thsep(
  388|  70.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  70.4k|                prefix_result.parsed_base, locale_options));
  390|  70.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  70.4k|            parse_digits_result;
  392|       |
  393|  70.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.32k, False: 69.1k]
  ------------------
  394|  1.32k|            if (auto e = check_thsep_grouping(
  395|  1.32k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.32k|                    thsep_indices, locale_options.grouping);
  397|  1.32k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 310, False: 1.01k]
  |  |  ------------------
  ------------------
  398|    310|                return unexpected(e);
  399|    310|            }
  400|  1.32k|        }
  401|       |
  402|  70.1k|        auto nothsep_source_view =
  403|  70.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  70.1k|        SCN_TRY(
  ------------------
  |  |   71|  70.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.97k, False: 68.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.97k|    }                                                  \
  |  |  |  |   70|  70.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  68.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  68.1k|            nothsep_source_it,
  406|  68.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  68.1k|                                prefix_result.parsed_base));
  408|       |
  409|  68.1k|        return ranges_polyfill::batch_next(
  410|  68.1k|            prefix_result.iterator,
  411|  68.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  68.1k|                ranges::ssize(thsep_indices));
  413|  70.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   566k|    {
  335|   566k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   566k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   566k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   566k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   566k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 566k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   566k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   566k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   566k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   566k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 38.8k, False: 527k]
  ------------------
  339|  38.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  38.8k|                return unexpected_scan_error(
  341|  38.8k|                    scan_error::invalid_scanned_value,
  342|  38.8k|                    "Unexpected '-' sign when parsing an "
  343|  38.8k|                    "unsigned value");
  344|  38.8k|            }
  345|  38.8k|            else {
  346|  38.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 38.8k]
  ------------------
  347|  38.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  38.8k|            }
  353|  38.8k|        }
  354|       |
  355|   566k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 122k, False: 444k]
  ------------------
  356|   122k|            value = T{0};
  357|   122k|            return std::next(prefix_result.iterator);
  358|   122k|        }
  359|       |
  360|   444k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   444k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 347k, False: 96.8k]
  |  |  ------------------
  ------------------
  361|   347k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 250, False: 347k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    250|    }                                                  \
  |  |  |  |   70|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   347k|                    parse_integer_digits_without_thsep(
  363|   347k|                        ranges::subrange{prefix_result.iterator,
  364|   347k|                                         ranges::end(range)},
  365|   347k|                        prefix_result.parsed_base));
  366|       |
  367|   347k|            auto buf = make_contiguous_buffer(
  368|   347k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   347k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.6k, False: 328k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.6k|    }                                                  \
  |  |  |  |   70|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   328k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   328k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   328k|                                        prefix_result.parsed_base));
  372|       |
  373|   328k|            return ranges_polyfill::batch_next(
  374|   328k|                prefix_result.iterator,
  375|   328k|                ranges::distance(buf.view().begin(), result_it));
  376|   347k|        }
  377|       |
  378|  96.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  96.8k|            localized_number_formatting_options<CharT>{loc};
  383|  96.8k|#endif
  384|       |
  385|  96.8k|        SCN_TRY(
  ------------------
  |  |   71|  96.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 94.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|  96.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  94.5k|            parse_digits_result,
  387|  94.5k|            parse_integer_digits_with_thsep(
  388|  94.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  94.5k|                prefix_result.parsed_base, locale_options));
  390|  94.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  94.5k|            parse_digits_result;
  392|       |
  393|  94.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.48k, False: 93.0k]
  ------------------
  394|  1.48k|            if (auto e = check_thsep_grouping(
  395|  1.48k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.48k|                    thsep_indices, locale_options.grouping);
  397|  1.48k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 462, False: 1.02k]
  |  |  ------------------
  ------------------
  398|    462|                return unexpected(e);
  399|    462|            }
  400|  1.48k|        }
  401|       |
  402|  94.0k|        auto nothsep_source_view =
  403|  94.0k|            std::basic_string_view<CharT>{nothsep_source};
  404|  94.0k|        SCN_TRY(
  ------------------
  |  |   71|  94.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  94.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 624, False: 93.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    624|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    624|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    624|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    624|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    624|    }                                                  \
  |  |  |  |   70|  94.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  93.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  93.4k|            nothsep_source_it,
  406|  93.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  93.4k|                                prefix_result.parsed_base));
  408|       |
  409|  93.4k|        return ranges_polyfill::batch_next(
  410|  93.4k|            prefix_result.iterator,
  411|  93.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  93.4k|                ranges::ssize(thsep_indices));
  413|  94.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   577k|    {
  335|   577k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   577k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   577k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   577k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 577k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   577k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   577k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   577k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   577k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 39.7k, False: 538k]
  ------------------
  339|  39.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  39.7k|                return unexpected_scan_error(
  341|  39.7k|                    scan_error::invalid_scanned_value,
  342|  39.7k|                    "Unexpected '-' sign when parsing an "
  343|  39.7k|                    "unsigned value");
  344|  39.7k|            }
  345|  39.7k|            else {
  346|  39.7k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 39.7k]
  ------------------
  347|  39.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  39.7k|            }
  353|  39.7k|        }
  354|       |
  355|   577k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 124k, False: 453k]
  ------------------
  356|   124k|            value = T{0};
  357|   124k|            return std::next(prefix_result.iterator);
  358|   124k|        }
  359|       |
  360|   453k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   453k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 353k, False: 100k]
  |  |  ------------------
  ------------------
  361|   353k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   353k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   353k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   353k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 276, False: 353k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    276|    }                                                  \
  |  |  |  |   70|   353k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   353k|                    parse_integer_digits_without_thsep(
  363|   353k|                        ranges::subrange{prefix_result.iterator,
  364|   353k|                                         ranges::end(range)},
  365|   353k|                        prefix_result.parsed_base));
  366|       |
  367|   353k|            auto buf = make_contiguous_buffer(
  368|   353k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   353k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   353k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   353k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   353k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.4k, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.4k|    }                                                  \
  |  |  |  |   70|   353k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   334k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   334k|                                        prefix_result.parsed_base));
  372|       |
  373|   334k|            return ranges_polyfill::batch_next(
  374|   334k|                prefix_result.iterator,
  375|   334k|                ranges::distance(buf.view().begin(), result_it));
  376|   353k|        }
  377|       |
  378|   100k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   100k|            localized_number_formatting_options<CharT>{loc};
  383|   100k|#endif
  384|       |
  385|   100k|        SCN_TRY(
  ------------------
  |  |   71|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.53k, False: 97.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.53k|    }                                                  \
  |  |  |  |   70|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  97.7k|            parse_digits_result,
  387|  97.7k|            parse_integer_digits_with_thsep(
  388|  97.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  97.7k|                prefix_result.parsed_base, locale_options));
  390|  97.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  97.7k|            parse_digits_result;
  392|       |
  393|  97.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.62k, False: 96.1k]
  ------------------
  394|  1.62k|            if (auto e = check_thsep_grouping(
  395|  1.62k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.62k|                    thsep_indices, locale_options.grouping);
  397|  1.62k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 588, False: 1.03k]
  |  |  ------------------
  ------------------
  398|    588|                return unexpected(e);
  399|    588|            }
  400|  1.62k|        }
  401|       |
  402|  97.1k|        auto nothsep_source_view =
  403|  97.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  97.1k|        SCN_TRY(
  ------------------
  |  |   71|  97.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  97.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  97.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  97.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 262, False: 96.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    262|    }                                                  \
  |  |  |  |   70|  97.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  96.8k|            nothsep_source_it,
  406|  96.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  96.8k|                                prefix_result.parsed_base));
  408|       |
  409|  96.8k|        return ranges_polyfill::batch_next(
  410|  96.8k|            prefix_result.iterator,
  411|  96.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  96.8k|                ranges::ssize(thsep_indices));
  413|  97.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   391k|    {
  335|   391k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   391k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   391k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   391k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 391k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   391k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   391k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   391k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.04k, False: 382k]
  ------------------
  339|  8.04k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.04k|                return unexpected_scan_error(
  341|  8.04k|                    scan_error::invalid_scanned_value,
  342|  8.04k|                    "Unexpected '-' sign when parsing an "
  343|  8.04k|                    "unsigned value");
  344|  8.04k|            }
  345|  8.04k|            else {
  346|  8.04k|                if (specs.type ==
  347|  8.04k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.04k|                    return unexpected_scan_error(
  349|  8.04k|                        scan_error::invalid_scanned_value,
  350|  8.04k|                        "'u'-option disallows negative values");
  351|  8.04k|                }
  352|  8.04k|            }
  353|  8.04k|        }
  354|       |
  355|   382k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 94.9k, False: 287k]
  ------------------
  356|  94.9k|            value = T{0};
  357|  94.9k|            return std::next(prefix_result.iterator);
  358|  94.9k|        }
  359|       |
  360|   287k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   287k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 220k, False: 67.3k]
  |  |  ------------------
  ------------------
  361|   220k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   220k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   220k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   220k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 72, False: 220k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     72|    }                                                  \
  |  |  |  |   70|   220k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   220k|                    parse_integer_digits_without_thsep(
  363|   220k|                        ranges::subrange{prefix_result.iterator,
  364|   220k|                                         ranges::end(range)},
  365|   220k|                        prefix_result.parsed_base));
  366|       |
  367|   220k|            auto buf = make_contiguous_buffer(
  368|   220k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   220k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   220k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   220k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   220k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14.3k, False: 206k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.3k|    }                                                  \
  |  |  |  |   70|   220k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   206k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   206k|                                        prefix_result.parsed_base));
  372|       |
  373|   206k|            return ranges_polyfill::batch_next(
  374|   206k|                prefix_result.iterator,
  375|   206k|                ranges::distance(buf.view().begin(), result_it));
  376|   220k|        }
  377|       |
  378|  67.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  67.3k|            localized_number_formatting_options<CharT>{loc};
  383|  67.3k|#endif
  384|       |
  385|  67.3k|        SCN_TRY(
  ------------------
  |  |   71|  67.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  67.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.31k, False: 66.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.31k|    }                                                  \
  |  |  |  |   70|  67.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  66.0k|            parse_digits_result,
  387|  66.0k|            parse_integer_digits_with_thsep(
  388|  66.0k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  66.0k|                prefix_result.parsed_base, locale_options));
  390|  66.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  66.0k|            parse_digits_result;
  392|       |
  393|  66.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.05k, False: 65.0k]
  ------------------
  394|  1.05k|            if (auto e = check_thsep_grouping(
  395|  1.05k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.05k|                    thsep_indices, locale_options.grouping);
  397|  1.05k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 214, False: 840]
  |  |  ------------------
  ------------------
  398|    214|                return unexpected(e);
  399|    214|            }
  400|  1.05k|        }
  401|       |
  402|  65.8k|        auto nothsep_source_view =
  403|  65.8k|            std::basic_string_view<CharT>{nothsep_source};
  404|  65.8k|        SCN_TRY(
  ------------------
  |  |   71|  65.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 862, False: 64.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    862|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    862|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    862|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    862|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    862|    }                                                  \
  |  |  |  |   70|  65.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  64.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  64.9k|            nothsep_source_it,
  406|  64.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  64.9k|                                prefix_result.parsed_base));
  408|       |
  409|  64.9k|        return ranges_polyfill::batch_next(
  410|  64.9k|            prefix_result.iterator,
  411|  64.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  64.9k|                ranges::ssize(thsep_indices));
  413|  65.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   469k|    {
  335|   469k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   469k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   469k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   469k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 469k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   469k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   469k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   469k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.57k, False: 460k]
  ------------------
  339|  8.57k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.57k|                return unexpected_scan_error(
  341|  8.57k|                    scan_error::invalid_scanned_value,
  342|  8.57k|                    "Unexpected '-' sign when parsing an "
  343|  8.57k|                    "unsigned value");
  344|  8.57k|            }
  345|  8.57k|            else {
  346|  8.57k|                if (specs.type ==
  347|  8.57k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.57k|                    return unexpected_scan_error(
  349|  8.57k|                        scan_error::invalid_scanned_value,
  350|  8.57k|                        "'u'-option disallows negative values");
  351|  8.57k|                }
  352|  8.57k|            }
  353|  8.57k|        }
  354|       |
  355|   460k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 104k, False: 355k]
  ------------------
  356|   104k|            value = T{0};
  357|   104k|            return std::next(prefix_result.iterator);
  358|   104k|        }
  359|       |
  360|   355k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   355k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 278k, False: 77.0k]
  |  |  ------------------
  ------------------
  361|   278k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 88, False: 278k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     88|    }                                                  \
  |  |  |  |   70|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   278k|                    parse_integer_digits_without_thsep(
  363|   278k|                        ranges::subrange{prefix_result.iterator,
  364|   278k|                                         ranges::end(range)},
  365|   278k|                        prefix_result.parsed_base));
  366|       |
  367|   278k|            auto buf = make_contiguous_buffer(
  368|   278k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   278k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.0k, False: 265k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.0k|    }                                                  \
  |  |  |  |   70|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   265k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   265k|                                        prefix_result.parsed_base));
  372|       |
  373|   265k|            return ranges_polyfill::batch_next(
  374|   265k|                prefix_result.iterator,
  375|   265k|                ranges::distance(buf.view().begin(), result_it));
  376|   278k|        }
  377|       |
  378|  77.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  77.0k|            localized_number_formatting_options<CharT>{loc};
  383|  77.0k|#endif
  384|       |
  385|  77.0k|        SCN_TRY(
  ------------------
  |  |   71|  77.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.47k, False: 75.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.47k|    }                                                  \
  |  |  |  |   70|  77.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  75.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  75.5k|            parse_digits_result,
  387|  75.5k|            parse_integer_digits_with_thsep(
  388|  75.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  75.5k|                prefix_result.parsed_base, locale_options));
  390|  75.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  75.5k|            parse_digits_result;
  392|       |
  393|  75.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.13k, False: 74.4k]
  ------------------
  394|  1.13k|            if (auto e = check_thsep_grouping(
  395|  1.13k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.13k|                    thsep_indices, locale_options.grouping);
  397|  1.13k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 292, False: 840]
  |  |  ------------------
  ------------------
  398|    292|                return unexpected(e);
  399|    292|            }
  400|  1.13k|        }
  401|       |
  402|  75.2k|        auto nothsep_source_view =
  403|  75.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  75.2k|        SCN_TRY(
  ------------------
  |  |   71|  75.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  75.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  75.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  75.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 294, False: 74.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    294|    }                                                  \
  |  |  |  |   70|  75.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  74.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  74.9k|            nothsep_source_it,
  406|  74.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  74.9k|                                prefix_result.parsed_base));
  408|       |
  409|  74.9k|        return ranges_polyfill::batch_next(
  410|  74.9k|            prefix_result.iterator,
  411|  74.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  74.9k|                ranges::ssize(thsep_indices));
  413|  75.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   472k|    {
  335|   472k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   472k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   472k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   472k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   472k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 472k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   472k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   472k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   472k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   472k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.89k, False: 463k]
  ------------------
  339|  8.89k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.89k|                return unexpected_scan_error(
  341|  8.89k|                    scan_error::invalid_scanned_value,
  342|  8.89k|                    "Unexpected '-' sign when parsing an "
  343|  8.89k|                    "unsigned value");
  344|  8.89k|            }
  345|  8.89k|            else {
  346|  8.89k|                if (specs.type ==
  347|  8.89k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.89k|                    return unexpected_scan_error(
  349|  8.89k|                        scan_error::invalid_scanned_value,
  350|  8.89k|                        "'u'-option disallows negative values");
  351|  8.89k|                }
  352|  8.89k|            }
  353|  8.89k|        }
  354|       |
  355|   463k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 105k, False: 358k]
  ------------------
  356|   105k|            value = T{0};
  357|   105k|            return std::next(prefix_result.iterator);
  358|   105k|        }
  359|       |
  360|   358k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   358k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 280k, False: 78.0k]
  |  |  ------------------
  ------------------
  361|   280k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 88, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     88|    }                                                  \
  |  |  |  |   70|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   280k|                    parse_integer_digits_without_thsep(
  363|   280k|                        ranges::subrange{prefix_result.iterator,
  364|   280k|                                         ranges::end(range)},
  365|   280k|                        prefix_result.parsed_base));
  366|       |
  367|   280k|            auto buf = make_contiguous_buffer(
  368|   280k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   280k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.7k, False: 267k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.7k|    }                                                  \
  |  |  |  |   70|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   267k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   267k|                                        prefix_result.parsed_base));
  372|       |
  373|   267k|            return ranges_polyfill::batch_next(
  374|   267k|                prefix_result.iterator,
  375|   267k|                ranges::distance(buf.view().begin(), result_it));
  376|   280k|        }
  377|       |
  378|  78.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  78.0k|            localized_number_formatting_options<CharT>{loc};
  383|  78.0k|#endif
  384|       |
  385|  78.0k|        SCN_TRY(
  ------------------
  |  |   71|  78.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.51k, False: 76.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.51k|    }                                                  \
  |  |  |  |   70|  78.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  76.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  76.5k|            parse_digits_result,
  387|  76.5k|            parse_integer_digits_with_thsep(
  388|  76.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  76.5k|                prefix_result.parsed_base, locale_options));
  390|  76.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  76.5k|            parse_digits_result;
  392|       |
  393|  76.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.13k, False: 75.3k]
  ------------------
  394|  1.13k|            if (auto e = check_thsep_grouping(
  395|  1.13k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.13k|                    thsep_indices, locale_options.grouping);
  397|  1.13k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 292, False: 840]
  |  |  ------------------
  ------------------
  398|    292|                return unexpected(e);
  399|    292|            }
  400|  1.13k|        }
  401|       |
  402|  76.2k|        auto nothsep_source_view =
  403|  76.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  76.2k|        SCN_TRY(
  ------------------
  |  |   71|  76.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  76.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 92, False: 76.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     92|    }                                                  \
  |  |  |  |   70|  76.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  76.1k|            nothsep_source_it,
  406|  76.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  76.1k|                                prefix_result.parsed_base));
  408|       |
  409|  76.1k|        return ranges_polyfill::batch_next(
  410|  76.1k|            prefix_result.iterator,
  411|  76.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  76.1k|                ranges::ssize(thsep_indices));
  413|  76.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  26.7k|    {
  335|  26.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  26.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  26.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  26.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.7k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 22.2k, False: 4.45k]
  |  |  ------------------
  ------------------
  361|  22.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  22.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.2k|    }                                                  \
  |  |  |  |   70|  22.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.45k|            localized_number_formatting_options<CharT>{loc};
  383|  4.45k|#endif
  384|       |
  385|  4.45k|        SCN_TRY(
  ------------------
  |  |   71|  4.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.45k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.45k|    }                                                  \
  |  |  |  |   70|  4.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  26.7k|    {
  335|  26.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  26.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  26.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  26.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.7k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 22.2k, False: 4.45k]
  |  |  ------------------
  ------------------
  361|  22.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  22.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.2k|    }                                                  \
  |  |  |  |   70|  22.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.45k|            localized_number_formatting_options<CharT>{loc};
  383|  4.45k|#endif
  384|       |
  385|  4.45k|        SCN_TRY(
  ------------------
  |  |   71|  4.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.45k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.45k|    }                                                  \
  |  |  |  |   70|  4.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  26.7k|    {
  335|  26.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  26.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  26.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  26.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.7k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 22.2k, False: 4.45k]
  |  |  ------------------
  ------------------
  361|  22.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  22.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.2k|    }                                                  \
  |  |  |  |   70|  22.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.45k|            localized_number_formatting_options<CharT>{loc};
  383|  4.45k|#endif
  384|       |
  385|  4.45k|        SCN_TRY(
  ------------------
  |  |   71|  4.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.45k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.45k|    }                                                  \
  |  |  |  |   70|  4.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  26.7k|    {
  335|  26.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  26.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  26.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  26.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.7k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 22.2k, False: 4.45k]
  |  |  ------------------
  ------------------
  361|  22.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  22.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.2k|    }                                                  \
  |  |  |  |   70|  22.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.45k|            localized_number_formatting_options<CharT>{loc};
  383|  4.45k|#endif
  384|       |
  385|  4.45k|        SCN_TRY(
  ------------------
  |  |   71|  4.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.45k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.45k|    }                                                  \
  |  |  |  |   70|  4.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  26.7k|    {
  335|  26.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  26.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  26.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  26.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.7k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 22.2k, False: 4.45k]
  |  |  ------------------
  ------------------
  361|  22.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  22.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.2k|    }                                                  \
  |  |  |  |   70|  22.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.45k|            localized_number_formatting_options<CharT>{loc};
  383|  4.45k|#endif
  384|       |
  385|  4.45k|        SCN_TRY(
  ------------------
  |  |   71|  4.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.45k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.45k|    }                                                  \
  |  |  |  |   70|  4.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  26.7k|    {
  335|  26.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  26.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  26.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  26.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.7k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 22.2k, False: 4.45k]
  |  |  ------------------
  ------------------
  361|  22.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  22.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.2k|    }                                                  \
  |  |  |  |   70|  22.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  4.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.45k|            localized_number_formatting_options<CharT>{loc};
  383|  4.45k|#endif
  384|       |
  385|  4.45k|        SCN_TRY(
  ------------------
  |  |   71|  4.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.45k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.45k|    }                                                  \
  |  |  |  |   70|  4.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   148k|    {
  324|   148k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   148k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   148k|        return read_default_with_base(range, value, 0);
  326|   148k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   148k|    {
  287|   148k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 148k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   148k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   148k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   148k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   148k|                return unexpected_scan_error(
  293|   148k|                    scan_error::invalid_scanned_value,
  294|   148k|                    "Unexpected '-' sign when parsing an "
  295|   148k|                    "unsigned value");
  296|   148k|            }
  297|   148k|        }
  298|       |
  299|   148k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 51.9k, False: 96.3k]
  ------------------
  300|  51.9k|            value = T{0};
  301|  51.9k|            return std::next(prefix_result.iterator);
  302|  51.9k|        }
  303|       |
  304|   192k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  96.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 93, False: 96.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     93|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     93|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     93|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     93|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     93|    }                                                  \
  |  |  |  |   70|  96.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   192k|                                     ranges::subrange{prefix_result.iterator,
  306|   192k|                                                      ranges::end(range)},
  307|   192k|                                     prefix_result.parsed_base));
  308|       |
  309|   192k|        auto buf = make_contiguous_buffer(
  310|   192k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   192k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  96.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  96.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  85.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  85.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  85.3k|        return ranges_polyfill::batch_next(
  316|  85.3k|            prefix_result.iterator,
  317|  85.3k|            ranges::distance(buf.view().begin(), result_it));
  318|   192k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  3.63M|{
  121|  3.63M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  3.63M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.63M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.63M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.63M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.63M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  3.63M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  3.63M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  3.63M|        parse_integer_base_prefix(
  126|  3.63M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  3.63M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 1.49M, False: 2.14M]
  ------------------
  129|  1.49M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.53k, False: 1.48M]
  ------------------
  130|  1.49M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 922k, False: 566k]
  ------------------
  131|   925k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   925k|                digits_begin_it, ranges::begin(range));
  133|   925k|        }
  134|   566k|        else {
  135|   566k|            parsed_zero = false;
  136|   566k|        }
  137|  1.49M|    }
  138|  2.14M|    else {
  139|  2.14M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 6.90k, False: 2.13M]
  ------------------
  140|  2.14M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 284k, False: 1.85M]
  ------------------
  141|   291k|            digits_begin_it = base_prefix_begin_it;
  142|   291k|        }
  143|  2.14M|    }
  144|       |
  145|  3.63M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 3.47M, False: 163k]
  ------------------
  146|  3.47M|        sign = sign_type::plus_sign;
  147|  3.47M|    }
  148|  3.63M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  3.63M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  3.63M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  3.63M|{
   88|  3.63M|    switch (base) {
   89|   111k|        case 2:
  ------------------
  |  Branch (89:9): [True: 111k, False: 3.52M]
  ------------------
   90|       |            // allow 0b/0B
   91|   111k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   111k|                    false};
   93|       |
   94|   204k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 204k, False: 3.43M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   204k|            bool zero_parsed = false;
   97|   204k|            auto it = apply_opt(
   98|   204k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   204k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   489k|        case 16:
  ------------------
  |  Branch (102:9): [True: 489k, False: 3.14M]
  ------------------
  103|       |            // allow 0x/0X
  104|   489k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   489k|                    false};
  106|       |
  107|  2.40M|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.40M, False: 1.23M]
  ------------------
  108|       |            // detect base
  109|  2.40M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   429k|        default:
  ------------------
  |  Branch (111:9): [True: 429k, False: 3.20M]
  ------------------
  112|       |            // no base prefix allowed
  113|   429k|            return {ranges::begin(range), base, false};
  114|  3.63M|    }
  115|  3.63M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.46M|{
   38|  2.46M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.46M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.56M|{
   53|  2.56M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 29.4k, False: 2.53M]
  ------------------
   54|  29.4k|        return *r;
   55|  29.4k|    }
   56|       |
   57|  2.53M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 1.49M, False: 1.03M]
  ------------------
   58|  1.49M|        zero_parsed = true;
   59|  1.49M|        return *r;
   60|  1.49M|    }
   61|       |
   62|  1.03M|    return unexpected(parse_error::error);
   63|  2.53M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  2.89M|{
   45|  2.89M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  2.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.89M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.40M|{
   69|  2.40M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 44.2k, False: 2.35M]
  ------------------
   70|  44.2k|        return {*r, 16, false};
   71|  44.2k|    }
   72|  2.35M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.25k, False: 2.35M]
  ------------------
   73|  2.25k|        return {*r, 2, false};
   74|  2.25k|    }
   75|  2.35M|    {
   76|  2.35M|        bool zero_parsed{false};
   77|  2.35M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.40M, False: 954k]
  ------------------
   78|  1.40M|            return {*r, 8, zero_parsed};
   79|  1.40M|        }
   80|  2.35M|    }
   81|   954k|    return {ranges::begin(range), 10, false};
   82|  2.35M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.24M|{
  156|  2.24M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.24M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.24M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.65k, False: 2.24M]
  |  |  ------------------
  ------------------
  160|  1.65k|            return unexpected_scan_error(
  161|  1.65k|                scan_error::invalid_scanned_value,
  162|  1.65k|                "Failed to parse integer: No digits found");
  163|  1.65k|        }
  164|  2.24M|        return ranges::end(range);
  165|  2.24M|    }
  166|  2.24M|    else {
  167|  2.24M|        return read_while1_code_unit(
  168|  2.24M|                   range, [&](char_type ch)
  169|  2.24M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.24M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.24M|                scan_error::invalid_scanned_value,
  172|  2.24M|                "Failed to parse integer: No digits found"));
  173|  2.24M|    }
  174|  2.24M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   197k|    {
  324|   197k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   197k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   197k|        return read_default_with_base(range, value, 0);
  326|   197k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   197k|    {
  287|   197k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   197k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   197k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   197k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 197k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   197k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   197k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   197k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   197k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   197k|                return unexpected_scan_error(
  293|   197k|                    scan_error::invalid_scanned_value,
  294|   197k|                    "Unexpected '-' sign when parsing an "
  295|   197k|                    "unsigned value");
  296|   197k|            }
  297|   197k|        }
  298|       |
  299|   197k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 69.6k, False: 127k]
  ------------------
  300|  69.6k|            value = T{0};
  301|  69.6k|            return std::next(prefix_result.iterator);
  302|  69.6k|        }
  303|       |
  304|   255k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 126, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    126|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   255k|                                     ranges::subrange{prefix_result.iterator,
  306|   255k|                                                      ranges::end(range)},
  307|   255k|                                     prefix_result.parsed_base));
  308|       |
  309|   255k|        auto buf = make_contiguous_buffer(
  310|   255k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   255k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.2k, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.2k|    }                                                  \
  |  |  |  |   70|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   117k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   117k|                                    prefix_result.parsed_base));
  314|       |
  315|   117k|        return ranges_polyfill::batch_next(
  316|   117k|            prefix_result.iterator,
  317|   117k|            ranges::distance(buf.view().begin(), result_it));
  318|   255k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   200k|    {
  324|   200k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   200k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   200k|        return read_default_with_base(range, value, 0);
  326|   200k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   200k|    {
  287|   200k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   200k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   200k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   200k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   200k|                return unexpected_scan_error(
  293|   200k|                    scan_error::invalid_scanned_value,
  294|   200k|                    "Unexpected '-' sign when parsing an "
  295|   200k|                    "unsigned value");
  296|   200k|            }
  297|   200k|        }
  298|       |
  299|   200k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 70.5k, False: 130k]
  ------------------
  300|  70.5k|            value = T{0};
  301|  70.5k|            return std::next(prefix_result.iterator);
  302|  70.5k|        }
  303|       |
  304|   260k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 135, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    135|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    135|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    135|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    135|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    135|    }                                                  \
  |  |  |  |   70|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   260k|                                     ranges::subrange{prefix_result.iterator,
  306|   260k|                                                      ranges::end(range)},
  307|   260k|                                     prefix_result.parsed_base));
  308|       |
  309|   260k|        auto buf = make_contiguous_buffer(
  310|   260k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   260k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.0k, False: 120k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.0k|    }                                                  \
  |  |  |  |   70|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   120k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   120k|                                    prefix_result.parsed_base));
  314|       |
  315|   120k|        return ranges_polyfill::batch_next(
  316|   120k|            prefix_result.iterator,
  317|   120k|            ranges::distance(buf.view().begin(), result_it));
  318|   260k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   146k|    {
  324|   146k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   146k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   146k|        return read_default_with_base(range, value, 0);
  326|   146k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   146k|    {
  287|   146k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   146k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   146k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   146k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.73k, False: 144k]
  ------------------
  292|  1.73k|                return unexpected_scan_error(
  293|  1.73k|                    scan_error::invalid_scanned_value,
  294|  1.73k|                    "Unexpected '-' sign when parsing an "
  295|  1.73k|                    "unsigned value");
  296|  1.73k|            }
  297|   146k|        }
  298|       |
  299|   144k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 53.0k, False: 91.3k]
  ------------------
  300|  53.0k|            value = T{0};
  301|  53.0k|            return std::next(prefix_result.iterator);
  302|  53.0k|        }
  303|       |
  304|   182k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  91.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42, False: 91.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     42|    }                                                  \
  |  |  |  |   70|  91.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  91.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   182k|                                     ranges::subrange{prefix_result.iterator,
  306|   182k|                                                      ranges::end(range)},
  307|   182k|                                     prefix_result.parsed_base));
  308|       |
  309|   182k|        auto buf = make_contiguous_buffer(
  310|   182k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   182k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  91.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.36k, False: 81.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.36k|    }                                                  \
  |  |  |  |   70|  91.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  81.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  81.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  81.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  81.9k|        return ranges_polyfill::batch_next(
  316|  81.9k|            prefix_result.iterator,
  317|  81.9k|            ranges::distance(buf.view().begin(), result_it));
  318|   182k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   166k|    {
  324|   166k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   166k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   166k|        return read_default_with_base(range, value, 0);
  326|   166k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   166k|    {
  287|   166k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 166k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   166k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   166k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   166k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.85k, False: 164k]
  ------------------
  292|  1.85k|                return unexpected_scan_error(
  293|  1.85k|                    scan_error::invalid_scanned_value,
  294|  1.85k|                    "Unexpected '-' sign when parsing an "
  295|  1.85k|                    "unsigned value");
  296|  1.85k|            }
  297|   166k|        }
  298|       |
  299|   164k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 59.6k, False: 104k]
  ------------------
  300|  59.6k|            value = T{0};
  301|  59.6k|            return std::next(prefix_result.iterator);
  302|  59.6k|        }
  303|       |
  304|   209k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 45, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     45|    }                                                  \
  |  |  |  |   70|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   209k|                                     ranges::subrange{prefix_result.iterator,
  306|   209k|                                                      ranges::end(range)},
  307|   209k|                                     prefix_result.parsed_base));
  308|       |
  309|   209k|        auto buf = make_contiguous_buffer(
  310|   209k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   209k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.90k, False: 95.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.90k|    }                                                  \
  |  |  |  |   70|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  95.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  95.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  95.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  95.9k|        return ranges_polyfill::batch_next(
  316|  95.9k|            prefix_result.iterator,
  317|  95.9k|            ranges::distance(buf.view().begin(), result_it));
  318|   209k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   167k|    {
  324|   167k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   167k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   167k|        return read_default_with_base(range, value, 0);
  326|   167k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   167k|    {
  287|   167k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   167k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   167k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   167k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.96k, False: 165k]
  ------------------
  292|  1.96k|                return unexpected_scan_error(
  293|  1.96k|                    scan_error::invalid_scanned_value,
  294|  1.96k|                    "Unexpected '-' sign when parsing an "
  295|  1.96k|                    "unsigned value");
  296|  1.96k|            }
  297|   167k|        }
  298|       |
  299|   165k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 59.9k, False: 105k]
  ------------------
  300|  59.9k|            value = T{0};
  301|  59.9k|            return std::next(prefix_result.iterator);
  302|  59.9k|        }
  303|       |
  304|   210k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 45, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     45|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   210k|                                     ranges::subrange{prefix_result.iterator,
  306|   210k|                                                      ranges::end(range)},
  307|   210k|                                     prefix_result.parsed_base));
  308|       |
  309|   210k|        auto buf = make_contiguous_buffer(
  310|   210k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   210k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.73k, False: 96.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.73k|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  96.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  96.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  96.6k|        return ranges_polyfill::batch_next(
  316|  96.6k|            prefix_result.iterator,
  317|  96.6k|            ranges::distance(buf.view().begin(), result_it));
  318|   210k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   442k|{
  185|   442k|    std::basic_string<CharT> output;
  186|   442k|    std::string thsep_indices;
  187|   442k|    auto it = ranges::begin(range);
  188|   442k|    bool digit_matched = false;
  189|  2.21M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.20M, False: 5.33k]
  ------------------
  190|  2.20M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 124k, False: 2.08M]
  ------------------
  191|   124k|            thsep_indices.push_back(static_cast<char>(
  192|   124k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|   124k|        }
  194|  2.08M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 437k, False: 1.64M]
  ------------------
  195|   437k|            break;
  196|   437k|        }
  197|  1.64M|        else {
  198|  1.64M|            output.push_back(*it);
  199|  1.64M|            digit_matched = true;
  200|  1.64M|        }
  201|  2.20M|    }
  202|   442k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 33.5k, False: 409k]
  |  |  ------------------
  ------------------
  203|  33.5k|        return unexpected_scan_error(
  204|  33.5k|            scan_error::invalid_scanned_value,
  205|  33.5k|            "Failed to parse integer: No digits found");
  206|  33.5k|    }
  207|   409k|    return std::tuple{it, output, thsep_indices};
  208|   442k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  2.91M|    {
  280|  2.91M|        detail::check_int_type_specs(specs, eh);
  281|  2.91M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   358k|    {
  335|   358k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   358k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   358k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   358k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 358k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   358k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   358k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   358k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 20.3k, False: 338k]
  ------------------
  339|  20.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  20.3k|                return unexpected_scan_error(
  341|  20.3k|                    scan_error::invalid_scanned_value,
  342|  20.3k|                    "Unexpected '-' sign when parsing an "
  343|  20.3k|                    "unsigned value");
  344|  20.3k|            }
  345|  20.3k|            else {
  346|  20.3k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 20.3k]
  ------------------
  347|  20.3k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  20.3k|            }
  353|  20.3k|        }
  354|       |
  355|   358k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 81.2k, False: 277k]
  ------------------
  356|  81.2k|            value = T{0};
  357|  81.2k|            return std::next(prefix_result.iterator);
  358|  81.2k|        }
  359|       |
  360|   277k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   277k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 212k, False: 65.2k]
  |  |  ------------------
  ------------------
  361|   212k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   212k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   212k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   212k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 218, False: 211k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    218|    }                                                  \
  |  |  |  |   70|   212k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   211k|                    parse_integer_digits_without_thsep(
  363|   211k|                        ranges::subrange{prefix_result.iterator,
  364|   211k|                                         ranges::end(range)},
  365|   211k|                        prefix_result.parsed_base));
  366|       |
  367|   211k|            auto buf = make_contiguous_buffer(
  368|   211k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   211k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   211k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   211k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   211k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 37.4k, False: 174k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  37.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  37.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  37.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  37.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  37.4k|    }                                                  \
  |  |  |  |   70|   211k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   174k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   174k|                                        prefix_result.parsed_base));
  372|       |
  373|   174k|            return ranges_polyfill::batch_next(
  374|   174k|                prefix_result.iterator,
  375|   174k|                ranges::distance(buf.view().begin(), result_it));
  376|   211k|        }
  377|       |
  378|  65.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  65.2k|            localized_number_formatting_options<CharT>{loc};
  383|  65.2k|#endif
  384|       |
  385|  65.2k|        SCN_TRY(
  ------------------
  |  |   71|  65.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.48k, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.48k|    }                                                  \
  |  |  |  |   70|  65.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  59.7k|            parse_digits_result,
  387|  59.7k|            parse_integer_digits_with_thsep(
  388|  59.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  59.7k|                prefix_result.parsed_base, locale_options));
  390|  59.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  59.7k|            parse_digits_result;
  392|       |
  393|  59.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.10k, False: 58.6k]
  ------------------
  394|  1.10k|            if (auto e = check_thsep_grouping(
  395|  1.10k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.10k|                    thsep_indices, locale_options.grouping);
  397|  1.10k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 300, False: 804]
  |  |  ------------------
  ------------------
  398|    300|                return unexpected(e);
  399|    300|            }
  400|  1.10k|        }
  401|       |
  402|  59.4k|        auto nothsep_source_view =
  403|  59.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  59.4k|        SCN_TRY(
  ------------------
  |  |   71|  59.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.55k, False: 57.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.55k|    }                                                  \
  |  |  |  |   70|  59.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  57.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  57.8k|            nothsep_source_it,
  406|  57.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  57.8k|                                prefix_result.parsed_base));
  408|       |
  409|  57.8k|        return ranges_polyfill::batch_next(
  410|  57.8k|            prefix_result.iterator,
  411|  57.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  57.8k|                ranges::ssize(thsep_indices));
  413|  59.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   508k|    {
  335|   508k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   508k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   508k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   508k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   508k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 508k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   508k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   508k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   508k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   508k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 30.0k, False: 478k]
  ------------------
  339|  30.0k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  30.0k|                return unexpected_scan_error(
  341|  30.0k|                    scan_error::invalid_scanned_value,
  342|  30.0k|                    "Unexpected '-' sign when parsing an "
  343|  30.0k|                    "unsigned value");
  344|  30.0k|            }
  345|  30.0k|            else {
  346|  30.0k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 30.0k]
  ------------------
  347|  30.0k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  30.0k|            }
  353|  30.0k|        }
  354|       |
  355|   508k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 106k, False: 402k]
  ------------------
  356|   106k|            value = T{0};
  357|   106k|            return std::next(prefix_result.iterator);
  358|   106k|        }
  359|       |
  360|   402k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   402k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 316k, False: 86.2k]
  |  |  ------------------
  ------------------
  361|   316k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 310, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    310|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    310|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    310|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    310|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    310|    }                                                  \
  |  |  |  |   70|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   316k|                    parse_integer_digits_without_thsep(
  363|   316k|                        ranges::subrange{prefix_result.iterator,
  364|   316k|                                         ranges::end(range)},
  365|   316k|                        prefix_result.parsed_base));
  366|       |
  367|   316k|            auto buf = make_contiguous_buffer(
  368|   316k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   316k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 35.6k, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  35.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  35.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  35.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  35.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  35.6k|    }                                                  \
  |  |  |  |   70|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   280k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   280k|                                        prefix_result.parsed_base));
  372|       |
  373|   280k|            return ranges_polyfill::batch_next(
  374|   280k|                prefix_result.iterator,
  375|   280k|                ranges::distance(buf.view().begin(), result_it));
  376|   316k|        }
  377|       |
  378|  86.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  86.2k|            localized_number_formatting_options<CharT>{loc};
  383|  86.2k|#endif
  384|       |
  385|  86.2k|        SCN_TRY(
  ------------------
  |  |   71|  86.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  86.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  86.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  86.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.99k, False: 80.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.99k|    }                                                  \
  |  |  |  |   70|  86.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  80.2k|            parse_digits_result,
  387|  80.2k|            parse_integer_digits_with_thsep(
  388|  80.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  80.2k|                prefix_result.parsed_base, locale_options));
  390|  80.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  80.2k|            parse_digits_result;
  392|       |
  393|  80.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.24k, False: 78.9k]
  ------------------
  394|  1.24k|            if (auto e = check_thsep_grouping(
  395|  1.24k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.24k|                    thsep_indices, locale_options.grouping);
  397|  1.24k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 432, False: 814]
  |  |  ------------------
  ------------------
  398|    432|                return unexpected(e);
  399|    432|            }
  400|  1.24k|        }
  401|       |
  402|  79.7k|        auto nothsep_source_view =
  403|  79.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  79.7k|        SCN_TRY(
  ------------------
  |  |   71|  79.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 450, False: 79.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    450|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    450|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    450|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    450|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    450|    }                                                  \
  |  |  |  |   70|  79.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  79.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  79.3k|            nothsep_source_it,
  406|  79.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  79.3k|                                prefix_result.parsed_base));
  408|       |
  409|  79.3k|        return ranges_polyfill::batch_next(
  410|  79.3k|            prefix_result.iterator,
  411|  79.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  79.3k|                ranges::ssize(thsep_indices));
  413|  79.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   516k|    {
  335|   516k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   516k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   516k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   516k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   516k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 516k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   516k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   516k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   516k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   516k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 30.5k, False: 486k]
  ------------------
  339|  30.5k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  30.5k|                return unexpected_scan_error(
  341|  30.5k|                    scan_error::invalid_scanned_value,
  342|  30.5k|                    "Unexpected '-' sign when parsing an "
  343|  30.5k|                    "unsigned value");
  344|  30.5k|            }
  345|  30.5k|            else {
  346|  30.5k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 30.5k]
  ------------------
  347|  30.5k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  30.5k|            }
  353|  30.5k|        }
  354|       |
  355|   516k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 107k, False: 409k]
  ------------------
  356|   107k|            value = T{0};
  357|   107k|            return std::next(prefix_result.iterator);
  358|   107k|        }
  359|       |
  360|   409k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   409k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 321k, False: 88.0k]
  |  |  ------------------
  ------------------
  361|   321k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   321k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   321k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   321k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 336, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    336|    }                                                  \
  |  |  |  |   70|   321k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   320k|                    parse_integer_digits_without_thsep(
  363|   320k|                        ranges::subrange{prefix_result.iterator,
  364|   320k|                                         ranges::end(range)},
  365|   320k|                        prefix_result.parsed_base));
  366|       |
  367|   320k|            auto buf = make_contiguous_buffer(
  368|   320k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   320k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 35.4k, False: 285k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  35.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  35.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  35.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  35.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  35.4k|    }                                                  \
  |  |  |  |   70|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   285k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   285k|                                        prefix_result.parsed_base));
  372|       |
  373|   285k|            return ranges_polyfill::batch_next(
  374|   285k|                prefix_result.iterator,
  375|   285k|                ranges::distance(buf.view().begin(), result_it));
  376|   320k|        }
  377|       |
  378|  88.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  88.0k|            localized_number_formatting_options<CharT>{loc};
  383|  88.0k|#endif
  384|       |
  385|  88.0k|        SCN_TRY(
  ------------------
  |  |   71|  88.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  88.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.09k, False: 81.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.09k|    }                                                  \
  |  |  |  |   70|  88.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  81.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  81.9k|            parse_digits_result,
  387|  81.9k|            parse_integer_digits_with_thsep(
  388|  81.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  81.9k|                prefix_result.parsed_base, locale_options));
  390|  81.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  81.9k|            parse_digits_result;
  392|       |
  393|  81.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.31k, False: 80.6k]
  ------------------
  394|  1.31k|            if (auto e = check_thsep_grouping(
  395|  1.31k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.31k|                    thsep_indices, locale_options.grouping);
  397|  1.31k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 494, False: 816]
  |  |  ------------------
  ------------------
  398|    494|                return unexpected(e);
  399|    494|            }
  400|  1.31k|        }
  401|       |
  402|  81.4k|        auto nothsep_source_view =
  403|  81.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  81.4k|        SCN_TRY(
  ------------------
  |  |   71|  81.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  81.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  81.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  81.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 218, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    218|    }                                                  \
  |  |  |  |   70|  81.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  81.2k|            nothsep_source_it,
  406|  81.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  81.2k|                                prefix_result.parsed_base));
  408|       |
  409|  81.2k|        return ranges_polyfill::batch_next(
  410|  81.2k|            prefix_result.iterator,
  411|  81.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  81.2k|                ranges::ssize(thsep_indices));
  413|  81.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   363k|    {
  335|   363k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   363k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   363k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   363k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 363k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   363k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   363k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   363k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.05k, False: 356k]
  ------------------
  339|  6.05k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.05k|                return unexpected_scan_error(
  341|  6.05k|                    scan_error::invalid_scanned_value,
  342|  6.05k|                    "Unexpected '-' sign when parsing an "
  343|  6.05k|                    "unsigned value");
  344|  6.05k|            }
  345|  6.05k|            else {
  346|  6.05k|                if (specs.type ==
  347|  6.05k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.05k|                    return unexpected_scan_error(
  349|  6.05k|                        scan_error::invalid_scanned_value,
  350|  6.05k|                        "'u'-option disallows negative values");
  351|  6.05k|                }
  352|  6.05k|            }
  353|  6.05k|        }
  354|       |
  355|   356k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 82.0k, False: 274k]
  ------------------
  356|  82.0k|            value = T{0};
  357|  82.0k|            return std::next(prefix_result.iterator);
  358|  82.0k|        }
  359|       |
  360|   274k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   274k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 213k, False: 61.6k]
  |  |  ------------------
  ------------------
  361|   213k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   213k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   213k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   213k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 92, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     92|    }                                                  \
  |  |  |  |   70|   213k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   213k|                    parse_integer_digits_without_thsep(
  363|   213k|                        ranges::subrange{prefix_result.iterator,
  364|   213k|                                         ranges::end(range)},
  365|   213k|                        prefix_result.parsed_base));
  366|       |
  367|   213k|            auto buf = make_contiguous_buffer(
  368|   213k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   213k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   213k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   213k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   213k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 33.0k, False: 180k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  33.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  33.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  33.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  33.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  33.0k|    }                                                  \
  |  |  |  |   70|   213k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   180k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   180k|                                        prefix_result.parsed_base));
  372|       |
  373|   180k|            return ranges_polyfill::batch_next(
  374|   180k|                prefix_result.iterator,
  375|   180k|                ranges::distance(buf.view().begin(), result_it));
  376|   213k|        }
  377|       |
  378|  61.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  61.6k|            localized_number_formatting_options<CharT>{loc};
  383|  61.6k|#endif
  384|       |
  385|  61.6k|        SCN_TRY(
  ------------------
  |  |   71|  61.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.25k, False: 56.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.25k|    }                                                  \
  |  |  |  |   70|  61.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  56.3k|            parse_digits_result,
  387|  56.3k|            parse_integer_digits_with_thsep(
  388|  56.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  56.3k|                prefix_result.parsed_base, locale_options));
  390|  56.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  56.3k|            parse_digits_result;
  392|       |
  393|  56.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 920, False: 55.4k]
  ------------------
  394|    920|            if (auto e = check_thsep_grouping(
  395|    920|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    920|                    thsep_indices, locale_options.grouping);
  397|    920|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    920|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 218, False: 702]
  |  |  ------------------
  ------------------
  398|    218|                return unexpected(e);
  399|    218|            }
  400|    920|        }
  401|       |
  402|  56.1k|        auto nothsep_source_view =
  403|  56.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  56.1k|        SCN_TRY(
  ------------------
  |  |   71|  56.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 730, False: 55.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    730|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    730|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    730|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    730|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    730|    }                                                  \
  |  |  |  |   70|  56.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  55.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  55.4k|            nothsep_source_it,
  406|  55.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  55.4k|                                prefix_result.parsed_base));
  408|       |
  409|  55.4k|        return ranges_polyfill::batch_next(
  410|  55.4k|            prefix_result.iterator,
  411|  55.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  55.4k|                ranges::ssize(thsep_indices));
  413|  56.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   430k|    {
  335|   430k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   430k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   430k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   430k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 430k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   430k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   430k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   430k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.45k, False: 423k]
  ------------------
  339|  6.45k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.45k|                return unexpected_scan_error(
  341|  6.45k|                    scan_error::invalid_scanned_value,
  342|  6.45k|                    "Unexpected '-' sign when parsing an "
  343|  6.45k|                    "unsigned value");
  344|  6.45k|            }
  345|  6.45k|            else {
  346|  6.45k|                if (specs.type ==
  347|  6.45k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.45k|                    return unexpected_scan_error(
  349|  6.45k|                        scan_error::invalid_scanned_value,
  350|  6.45k|                        "'u'-option disallows negative values");
  351|  6.45k|                }
  352|  6.45k|            }
  353|  6.45k|        }
  354|       |
  355|   423k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 91.0k, False: 332k]
  ------------------
  356|  91.0k|            value = T{0};
  357|  91.0k|            return std::next(prefix_result.iterator);
  358|  91.0k|        }
  359|       |
  360|   332k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   332k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 262k, False: 70.5k]
  |  |  ------------------
  ------------------
  361|   262k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 108, False: 262k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    108|    }                                                  \
  |  |  |  |   70|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   262k|                    parse_integer_digits_without_thsep(
  363|   262k|                        ranges::subrange{prefix_result.iterator,
  364|   262k|                                         ranges::end(range)},
  365|   262k|                        prefix_result.parsed_base));
  366|       |
  367|   262k|            auto buf = make_contiguous_buffer(
  368|   262k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   262k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 31.8k, False: 230k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  31.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  31.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  31.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  31.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  31.8k|    }                                                  \
  |  |  |  |   70|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   230k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   230k|                                        prefix_result.parsed_base));
  372|       |
  373|   230k|            return ranges_polyfill::batch_next(
  374|   230k|                prefix_result.iterator,
  375|   230k|                ranges::distance(buf.view().begin(), result_it));
  376|   262k|        }
  377|       |
  378|  70.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  70.5k|            localized_number_formatting_options<CharT>{loc};
  383|  70.5k|#endif
  384|       |
  385|  70.5k|        SCN_TRY(
  ------------------
  |  |   71|  70.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  70.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  70.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  70.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.36k, False: 65.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.36k|    }                                                  \
  |  |  |  |   70|  70.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  65.2k|            parse_digits_result,
  387|  65.2k|            parse_integer_digits_with_thsep(
  388|  65.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  65.2k|                prefix_result.parsed_base, locale_options));
  390|  65.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  65.2k|            parse_digits_result;
  392|       |
  393|  65.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 992, False: 64.2k]
  ------------------
  394|    992|            if (auto e = check_thsep_grouping(
  395|    992|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    992|                    thsep_indices, locale_options.grouping);
  397|    992|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    992|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 290, False: 702]
  |  |  ------------------
  ------------------
  398|    290|                return unexpected(e);
  399|    290|            }
  400|    992|        }
  401|       |
  402|  64.9k|        auto nothsep_source_view =
  403|  64.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  64.9k|        SCN_TRY(
  ------------------
  |  |   71|  64.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  64.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  64.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  64.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 244, False: 64.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    244|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    244|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    244|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    244|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    244|    }                                                  \
  |  |  |  |   70|  64.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  64.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  64.6k|            nothsep_source_it,
  406|  64.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  64.6k|                                prefix_result.parsed_base));
  408|       |
  409|  64.6k|        return ranges_polyfill::batch_next(
  410|  64.6k|            prefix_result.iterator,
  411|  64.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  64.6k|                ranges::ssize(thsep_indices));
  413|  64.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   432k|    {
  335|   432k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   432k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   432k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   432k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 432k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   432k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   432k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   432k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.69k, False: 426k]
  ------------------
  339|  6.69k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.69k|                return unexpected_scan_error(
  341|  6.69k|                    scan_error::invalid_scanned_value,
  342|  6.69k|                    "Unexpected '-' sign when parsing an "
  343|  6.69k|                    "unsigned value");
  344|  6.69k|            }
  345|  6.69k|            else {
  346|  6.69k|                if (specs.type ==
  347|  6.69k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.69k|                    return unexpected_scan_error(
  349|  6.69k|                        scan_error::invalid_scanned_value,
  350|  6.69k|                        "'u'-option disallows negative values");
  351|  6.69k|                }
  352|  6.69k|            }
  353|  6.69k|        }
  354|       |
  355|   426k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 91.5k, False: 334k]
  ------------------
  356|  91.5k|            value = T{0};
  357|  91.5k|            return std::next(prefix_result.iterator);
  358|  91.5k|        }
  359|       |
  360|   334k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   334k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 263k, False: 71.0k]
  |  |  ------------------
  ------------------
  361|   263k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   263k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   263k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   263k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 108, False: 263k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    108|    }                                                  \
  |  |  |  |   70|   263k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   263k|                    parse_integer_digits_without_thsep(
  363|   263k|                        ranges::subrange{prefix_result.iterator,
  364|   263k|                                         ranges::end(range)},
  365|   263k|                        prefix_result.parsed_base));
  366|       |
  367|   263k|            auto buf = make_contiguous_buffer(
  368|   263k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   263k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   263k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   263k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   263k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 31.5k, False: 232k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  31.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  31.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  31.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  31.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  31.5k|    }                                                  \
  |  |  |  |   70|   263k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   232k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   232k|                                        prefix_result.parsed_base));
  372|       |
  373|   232k|            return ranges_polyfill::batch_next(
  374|   232k|                prefix_result.iterator,
  375|   232k|                ranges::distance(buf.view().begin(), result_it));
  376|   263k|        }
  377|       |
  378|  71.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  71.0k|            localized_number_formatting_options<CharT>{loc};
  383|  71.0k|#endif
  384|       |
  385|  71.0k|        SCN_TRY(
  ------------------
  |  |   71|  71.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.40k, False: 65.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.40k|    }                                                  \
  |  |  |  |   70|  71.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  65.6k|            parse_digits_result,
  387|  65.6k|            parse_integer_digits_with_thsep(
  388|  65.6k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  65.6k|                prefix_result.parsed_base, locale_options));
  390|  65.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  65.6k|            parse_digits_result;
  392|       |
  393|  65.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 992, False: 64.6k]
  ------------------
  394|    992|            if (auto e = check_thsep_grouping(
  395|    992|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    992|                    thsep_indices, locale_options.grouping);
  397|    992|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    992|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 290, False: 702]
  |  |  ------------------
  ------------------
  398|    290|                return unexpected(e);
  399|    290|            }
  400|    992|        }
  401|       |
  402|  65.4k|        auto nothsep_source_view =
  403|  65.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  65.4k|        SCN_TRY(
  ------------------
  |  |   71|  65.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  65.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  65.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 86, False: 65.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     86|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     86|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     86|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     86|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     86|    }                                                  \
  |  |  |  |   70|  65.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  65.3k|            nothsep_source_it,
  406|  65.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  65.3k|                                prefix_result.parsed_base));
  408|       |
  409|  65.3k|        return ranges_polyfill::batch_next(
  410|  65.3k|            prefix_result.iterator,
  411|  65.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  65.3k|                ranges::ssize(thsep_indices));
  413|  65.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.8k|    {
  324|  11.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.8k|        return read_default_with_base(range, value, 0);
  326|  11.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.8k|    {
  287|  11.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  11.8k|                return unexpected_scan_error(
  293|  11.8k|                    scan_error::invalid_scanned_value,
  294|  11.8k|                    "Unexpected '-' sign when parsing an "
  295|  11.8k|                    "unsigned value");
  296|  11.8k|            }
  297|  11.8k|        }
  298|       |
  299|  11.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.8k|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.8k|                                                      ranges::end(range)},
  307|  11.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.8k|        auto buf = make_contiguous_buffer(
  310|  11.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.8k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   356k|{
  121|   356k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   356k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   356k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   356k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 356k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   356k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   356k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   356k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   356k|        parse_integer_base_prefix(
  126|   356k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   356k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 356k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   356k|    else {
  139|   356k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 90, False: 356k]
  ------------------
  140|   356k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 356k, False: 0]
  ------------------
  141|   356k|            digits_begin_it = base_prefix_begin_it;
  142|   356k|        }
  143|   356k|    }
  144|       |
  145|   356k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 0, False: 356k]
  ------------------
  146|      0|        sign = sign_type::plus_sign;
  147|      0|    }
  148|   356k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   356k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   356k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   356k|{
   88|   356k|    switch (base) {
   89|  47.5k|        case 2:
  ------------------
  |  Branch (89:9): [True: 47.5k, False: 309k]
  ------------------
   90|       |            // allow 0b/0B
   91|  47.5k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  47.5k|                    false};
   93|       |
   94|  47.5k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 47.5k, False: 309k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  47.5k|            bool zero_parsed = false;
   97|  47.5k|            auto it = apply_opt(
   98|  47.5k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  47.5k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  47.5k|        case 16:
  ------------------
  |  Branch (102:9): [True: 47.5k, False: 309k]
  ------------------
  103|       |            // allow 0x/0X
  104|  47.5k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  47.5k|                    false};
  106|       |
  107|   166k|        case 0:
  ------------------
  |  Branch (107:9): [True: 166k, False: 190k]
  ------------------
  108|       |            // detect base
  109|   166k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  47.5k|        default:
  ------------------
  |  Branch (111:9): [True: 47.5k, False: 309k]
  ------------------
  112|       |            // no base prefix allowed
  113|  47.5k|            return {ranges::begin(range), base, false};
  114|   356k|    }
  115|   356k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   214k|{
   38|   214k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   214k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   214k|{
   53|   214k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 214k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   214k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 214k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   214k|    return unexpected(parse_error::error);
   63|   214k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   214k|{
   45|   214k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   214k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   166k|{
   69|   166k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 166k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   166k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 166k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   166k|    {
   76|   166k|        bool zero_parsed{false};
   77|   166k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 166k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   166k|    }
   81|   166k|    return {ranges::begin(range), 10, false};
   82|   166k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   309k|{
  156|   309k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   309k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   309k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   309k|            return unexpected_scan_error(
  161|   309k|                scan_error::invalid_scanned_value,
  162|   309k|                "Failed to parse integer: No digits found");
  163|   309k|        }
  164|   309k|        return ranges::end(range);
  165|   309k|    }
  166|   309k|    else {
  167|   309k|        return read_while1_code_unit(
  168|   309k|                   range, [&](char_type ch)
  169|   309k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   309k|            .transform_error(map_parse_error_to_scan_error(
  171|   309k|                scan_error::invalid_scanned_value,
  172|   309k|                "Failed to parse integer: No digits found"));
  173|   309k|    }
  174|   309k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|   309k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.8k|    {
  324|  11.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.8k|        return read_default_with_base(range, value, 0);
  326|  11.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.8k|    {
  287|  11.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  11.8k|                return unexpected_scan_error(
  293|  11.8k|                    scan_error::invalid_scanned_value,
  294|  11.8k|                    "Unexpected '-' sign when parsing an "
  295|  11.8k|                    "unsigned value");
  296|  11.8k|            }
  297|  11.8k|        }
  298|       |
  299|  11.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.8k|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.8k|                                                      ranges::end(range)},
  307|  11.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.8k|        auto buf = make_contiguous_buffer(
  310|  11.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.8k|    {
  324|  11.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.8k|        return read_default_with_base(range, value, 0);
  326|  11.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.8k|    {
  287|  11.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  11.8k|                return unexpected_scan_error(
  293|  11.8k|                    scan_error::invalid_scanned_value,
  294|  11.8k|                    "Unexpected '-' sign when parsing an "
  295|  11.8k|                    "unsigned value");
  296|  11.8k|            }
  297|  11.8k|        }
  298|       |
  299|  11.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.8k|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.8k|                                                      ranges::end(range)},
  307|  11.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.8k|        auto buf = make_contiguous_buffer(
  310|  11.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.8k|    {
  324|  11.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.8k|        return read_default_with_base(range, value, 0);
  326|  11.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.8k|    {
  287|  11.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 11.8k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  11.8k|        }
  298|       |
  299|  11.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.8k|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.8k|                                                      ranges::end(range)},
  307|  11.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.8k|        auto buf = make_contiguous_buffer(
  310|  11.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.8k|    {
  324|  11.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.8k|        return read_default_with_base(range, value, 0);
  326|  11.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.8k|    {
  287|  11.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 11.8k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  11.8k|        }
  298|       |
  299|  11.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.8k|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.8k|                                                      ranges::end(range)},
  307|  11.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.8k|        auto buf = make_contiguous_buffer(
  310|  11.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  11.8k|    {
  324|  11.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  11.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  11.8k|        return read_default_with_base(range, value, 0);
  326|  11.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  11.8k|    {
  287|  11.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  11.8k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  11.8k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  11.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 11.8k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  11.8k|        }
  298|       |
  299|  11.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 11.8k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  11.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.8k|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  11.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  11.8k|                                                      ranges::end(range)},
  307|  11.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  11.8k|        auto buf = make_contiguous_buffer(
  310|  11.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  11.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  11.8k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  47.5k|{
  185|  47.5k|    std::basic_string<CharT> output;
  186|  47.5k|    std::string thsep_indices;
  187|  47.5k|    auto it = ranges::begin(range);
  188|  47.5k|    bool digit_matched = false;
  189|  47.5k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 47.5k, False: 12]
  ------------------
  190|  47.5k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 47.5k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  47.5k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 47.5k, False: 0]
  ------------------
  195|  47.5k|            break;
  196|  47.5k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  47.5k|    }
  202|  47.5k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.5k, False: 0]
  |  |  ------------------
  ------------------
  203|  47.5k|        return unexpected_scan_error(
  204|  47.5k|            scan_error::invalid_scanned_value,
  205|  47.5k|            "Failed to parse integer: No digits found");
  206|  47.5k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  47.5k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.5k|    {
  335|  47.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.5k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.5k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.5k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 7.93k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.6k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  7.93k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.93k|            localized_number_formatting_options<CharT>{loc};
  383|  7.93k|#endif
  384|       |
  385|  7.93k|        SCN_TRY(
  ------------------
  |  |   71|  7.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.93k|    }                                                  \
  |  |  |  |   70|  7.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.5k|    {
  335|  47.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.5k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.5k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.5k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 7.93k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.6k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  7.93k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.93k|            localized_number_formatting_options<CharT>{loc};
  383|  7.93k|#endif
  384|       |
  385|  7.93k|        SCN_TRY(
  ------------------
  |  |   71|  7.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.93k|    }                                                  \
  |  |  |  |   70|  7.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.5k|    {
  335|  47.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.5k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.5k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.5k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 7.93k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.6k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  7.93k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.93k|            localized_number_formatting_options<CharT>{loc};
  383|  7.93k|#endif
  384|       |
  385|  7.93k|        SCN_TRY(
  ------------------
  |  |   71|  7.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.93k|    }                                                  \
  |  |  |  |   70|  7.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.5k|    {
  335|  47.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.5k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.5k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.5k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 7.93k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.6k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  7.93k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.93k|            localized_number_formatting_options<CharT>{loc};
  383|  7.93k|#endif
  384|       |
  385|  7.93k|        SCN_TRY(
  ------------------
  |  |   71|  7.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.93k|    }                                                  \
  |  |  |  |   70|  7.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.5k|    {
  335|  47.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.5k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.5k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.5k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 7.93k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.6k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  7.93k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.93k|            localized_number_formatting_options<CharT>{loc};
  383|  7.93k|#endif
  384|       |
  385|  7.93k|        SCN_TRY(
  ------------------
  |  |   71|  7.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.93k|    }                                                  \
  |  |  |  |   70|  7.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.5k|    {
  335|  47.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.5k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.5k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.5k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.6k, False: 7.93k]
  |  |  ------------------
  ------------------
  361|  39.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.6k|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|  7.93k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  7.93k|            localized_number_formatting_options<CharT>{loc};
  383|  7.93k|#endif
  384|       |
  385|  7.93k|        SCN_TRY(
  ------------------
  |  |   71|  7.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.93k|    }                                                  \
  |  |  |  |   70|  7.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  4.01M|{
   69|  4.01M|    auto r = read_one_of_code_unit(range, "+-");
   70|  4.01M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 3.80M, False: 207k]
  ------------------
   71|  3.80M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 3.80M, False: 0]
  ------------------
   72|  3.80M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  3.80M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  3.80M|    }
   76|       |
   77|   207k|    auto& it = *r;
   78|   207k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 171k, False: 35.4k]
  ------------------
   79|   171k|        return std::pair{it, sign_type::minus_sign};
   80|   171k|    }
   81|  35.4k|    return std::pair{it, sign_type::plus_sign};
   82|   207k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  32.1M|{
   51|  32.1M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  32.1M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  7.74k|{
  140|  7.74k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  7.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  7.74k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.15k, False: 5.58k]
  ------------------
  143|  2.15k|        SCN_UNLIKELY_ATTR
  144|  2.15k|        return {scan_error::invalid_scanned_value,
  145|  2.15k|                "Invalid thousands separator grouping"};
  146|  2.15k|    }
  147|       |
  148|  5.58k|    return {};
  149|  7.74k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  7.74k|{
  101|  7.74k|    transform_thsep_indices(
  102|  7.74k|        thsep_indices,
  103|  7.74k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  7.74k|    auto thsep_it = thsep_indices.rbegin();
  106|  7.74k|    for (auto grouping_it = grouping.begin();
  107|  7.74k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 7.74k]
  |  Branch (107:10): [True: 0, False: 7.74k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  7.74k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  7.74k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  7.74k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|   144k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 137k, False: 6.57k]
  ------------------
  119|   137k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.17k, False: 136k]
  ------------------
  120|  1.17k|            return false;
  121|  1.17k|        }
  122|   137k|    }
  123|       |
  124|  6.57k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 6.57k, False: 0]
  ------------------
  125|  6.57k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 984, False: 5.58k]
  ------------------
  126|    984|            return false;
  127|    984|        }
  128|  6.57k|    }
  129|       |
  130|  5.58k|    SCN_CLANG_POP
  131|       |
  132|  5.58k|    return true;
  133|  6.57k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  14.3k|{
   87|   287k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 272k, False: 14.3k]
  ------------------
   88|   272k|         ++thsep_it) {
   89|   272k|        const auto tmp = *thsep_it;
   90|   272k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|   272k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|   272k|    }
   93|  14.3k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  14.3k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   200k|{
   69|   200k|    auto r = read_one_of_code_unit(range, "+-");
   70|   200k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 0, False: 200k]
  ------------------
   71|      0|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 0, False: 0]
  ------------------
   72|      0|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|      0|        }
   74|      0|        return unexpected(eof_error::eof);
   75|      0|    }
   76|       |
   77|   200k|    auto& it = *r;
   78|   200k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 200k]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|   200k|    return std::pair{it, sign_type::plus_sign};
   82|   200k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  3.63M|{
   69|  3.63M|    auto r = read_one_of_code_unit(range, "+-");
   70|  3.63M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 3.47M, False: 163k]
  ------------------
   71|  3.47M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 3.47M, False: 0]
  ------------------
   72|  3.47M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  3.47M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  3.47M|    }
   76|       |
   77|   163k|    auto& it = *r;
   78|   163k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 131k, False: 31.6k]
  ------------------
   79|   131k|        return std::pair{it, sign_type::minus_sign};
   80|   131k|    }
   81|  31.6k|    return std::pair{it, sign_type::plus_sign};
   82|   163k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  15.5M|{
   55|  15.5M|#if WCHAR_MIN < 0
   56|  15.5M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 15.5M, False: 20.8k]
  |  Branch (56:20): [True: 15.1M, False: 369k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  15.1M|        return char_to_int(static_cast<char>(ch));
   61|  15.1M|    }
   62|   390k|    return 255;
   63|  15.5M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  6.56k|{
  140|  6.56k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  6.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  6.56k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.02k, False: 4.54k]
  ------------------
  143|  2.02k|        SCN_UNLIKELY_ATTR
  144|  2.02k|        return {scan_error::invalid_scanned_value,
  145|  2.02k|                "Invalid thousands separator grouping"};
  146|  2.02k|    }
  147|       |
  148|  4.54k|    return {};
  149|  6.56k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  6.56k|{
  101|  6.56k|    transform_thsep_indices(
  102|  6.56k|        thsep_indices,
  103|  6.56k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  6.56k|    auto thsep_it = thsep_indices.rbegin();
  106|  6.56k|    for (auto grouping_it = grouping.begin();
  107|  6.56k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 6.56k]
  |  Branch (107:10): [True: 0, False: 6.56k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  6.56k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  6.56k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  6.56k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|   115k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 110k, False: 5.56k]
  ------------------
  119|   110k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 1.00k, False: 109k]
  ------------------
  120|  1.00k|            return false;
  121|  1.00k|        }
  122|   110k|    }
  123|       |
  124|  5.56k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 5.56k, False: 0]
  ------------------
  125|  5.56k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.02k, False: 4.54k]
  ------------------
  126|  1.02k|            return false;
  127|  1.02k|        }
  128|  5.56k|    }
  129|       |
  130|  4.54k|    SCN_CLANG_POP
  131|       |
  132|  4.54k|    return true;
  133|  5.56k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   356k|{
   69|   356k|    auto r = read_one_of_code_unit(range, "+-");
   70|   356k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 0, False: 356k]
  ------------------
   71|      0|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 0, False: 0]
  ------------------
   72|      0|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|      0|        }
   74|      0|        return unexpected(eof_error::eof);
   75|      0|    }
   76|       |
   77|   356k|    auto& it = *r;
   78|   356k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 356k]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|   356k|    return std::pair{it, sign_type::plus_sign};
   82|   356k|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   165k|    {
  122|   165k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   165k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   165k|                          basic_contiguous_scan_context<char_type>>) {
  126|   165k|            auto rd = make_reader<T, char_type>();
  127|   165k|            return impl(rd, range, value);
  128|   165k|        }
  129|   165k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   165k|            auto rd = make_reader<T, char_type>();
  131|   165k|            if (!is_segment_contiguous(range)) {
  132|   165k|                return impl(rd, range, value);
  133|   165k|            }
  134|   165k|            auto crange = get_as_contiguous(range);
  135|   165k|            SCN_TRY(it, impl(rd, crange, value));
  136|   165k|            return ranges_polyfill::batch_next(
  137|   165k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   165k|        }
  139|   165k|        else {
  140|   165k|            SCN_EXPECT(false);
  141|   165k|            SCN_UNREACHABLE;
  142|   165k|        }
  143|   165k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   165k|    {
  112|   165k|        SCN_TRY(it,
  ------------------
  |  |   71|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 813, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    813|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    813|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    813|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    813|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    813|    }                                                  \
  |  |  |  |   70|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   164k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   164k|                    .transform_error(make_eof_scan_error));
  115|   164k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   164k|                               loc);
  117|   165k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  4.03M|{
   43|  4.03M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.8k, False: 4.01M]
  |  |  ------------------
  ------------------
   44|  21.8k|        return unexpected(e);
   45|  21.8k|    }
   46|       |
   47|  4.01M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 4.01M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  4.01M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  4.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  4.01M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   224k|    {
  122|   224k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   224k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   224k|                          basic_contiguous_scan_context<char_type>>) {
  126|   224k|            auto rd = make_reader<T, char_type>();
  127|   224k|            return impl(rd, range, value);
  128|   224k|        }
  129|   224k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   224k|            auto rd = make_reader<T, char_type>();
  131|   224k|            if (!is_segment_contiguous(range)) {
  132|   224k|                return impl(rd, range, value);
  133|   224k|            }
  134|   224k|            auto crange = get_as_contiguous(range);
  135|   224k|            SCN_TRY(it, impl(rd, crange, value));
  136|   224k|            return ranges_polyfill::batch_next(
  137|   224k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   224k|        }
  139|   224k|        else {
  140|   224k|            SCN_EXPECT(false);
  141|   224k|            SCN_UNREACHABLE;
  142|   224k|        }
  143|   224k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   224k|    {
  112|   224k|        SCN_TRY(it,
  ------------------
  |  |   71|   224k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   224k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   224k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.48k, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.48k|    }                                                  \
  |  |  |  |   70|   224k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   222k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   222k|                    .transform_error(make_eof_scan_error));
  115|   222k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   222k|                               loc);
  117|   224k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   228k|    {
  122|   228k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   228k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   228k|                          basic_contiguous_scan_context<char_type>>) {
  126|   228k|            auto rd = make_reader<T, char_type>();
  127|   228k|            return impl(rd, range, value);
  128|   228k|        }
  129|   228k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   228k|            auto rd = make_reader<T, char_type>();
  131|   228k|            if (!is_segment_contiguous(range)) {
  132|   228k|                return impl(rd, range, value);
  133|   228k|            }
  134|   228k|            auto crange = get_as_contiguous(range);
  135|   228k|            SCN_TRY(it, impl(rd, crange, value));
  136|   228k|            return ranges_polyfill::batch_next(
  137|   228k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   228k|        }
  139|   228k|        else {
  140|   228k|            SCN_EXPECT(false);
  141|   228k|            SCN_UNREACHABLE;
  142|   228k|        }
  143|   228k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   228k|    {
  112|   228k|        SCN_TRY(it,
  ------------------
  |  |   71|   228k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.58k, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.58k|    }                                                  \
  |  |  |  |   70|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   226k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   226k|                    .transform_error(make_eof_scan_error));
  115|   226k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   226k|                               loc);
  117|   228k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   163k|    {
  122|   163k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   163k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   163k|                          basic_contiguous_scan_context<char_type>>) {
  126|   163k|            auto rd = make_reader<T, char_type>();
  127|   163k|            return impl(rd, range, value);
  128|   163k|        }
  129|   163k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   163k|            auto rd = make_reader<T, char_type>();
  131|   163k|            if (!is_segment_contiguous(range)) {
  132|   163k|                return impl(rd, range, value);
  133|   163k|            }
  134|   163k|            auto crange = get_as_contiguous(range);
  135|   163k|            SCN_TRY(it, impl(rd, crange, value));
  136|   163k|            return ranges_polyfill::batch_next(
  137|   163k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   163k|        }
  139|   163k|        else {
  140|   163k|            SCN_EXPECT(false);
  141|   163k|            SCN_UNREACHABLE;
  142|   163k|        }
  143|   163k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   163k|    {
  112|   163k|        SCN_TRY(it,
  ------------------
  |  |   71|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 678, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    678|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    678|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    678|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    678|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    678|    }                                                  \
  |  |  |  |   70|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   163k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   163k|                    .transform_error(make_eof_scan_error));
  115|   163k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   163k|                               loc);
  117|   163k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   185k|    {
  122|   185k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   185k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   185k|                          basic_contiguous_scan_context<char_type>>) {
  126|   185k|            auto rd = make_reader<T, char_type>();
  127|   185k|            return impl(rd, range, value);
  128|   185k|        }
  129|   185k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   185k|            auto rd = make_reader<T, char_type>();
  131|   185k|            if (!is_segment_contiguous(range)) {
  132|   185k|                return impl(rd, range, value);
  133|   185k|            }
  134|   185k|            auto crange = get_as_contiguous(range);
  135|   185k|            SCN_TRY(it, impl(rd, crange, value));
  136|   185k|            return ranges_polyfill::batch_next(
  137|   185k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   185k|        }
  139|   185k|        else {
  140|   185k|            SCN_EXPECT(false);
  141|   185k|            SCN_UNREACHABLE;
  142|   185k|        }
  143|   185k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   185k|    {
  112|   185k|        SCN_TRY(it,
  ------------------
  |  |   71|   185k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   185k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   185k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.01k, False: 184k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.01k|    }                                                  \
  |  |  |  |   70|   185k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   184k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   184k|                    .transform_error(make_eof_scan_error));
  115|   184k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   184k|                               loc);
  117|   185k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   187k|    {
  122|   187k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   187k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   187k|                          basic_contiguous_scan_context<char_type>>) {
  126|   187k|            auto rd = make_reader<T, char_type>();
  127|   187k|            return impl(rd, range, value);
  128|   187k|        }
  129|   187k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   187k|            auto rd = make_reader<T, char_type>();
  131|   187k|            if (!is_segment_contiguous(range)) {
  132|   187k|                return impl(rd, range, value);
  133|   187k|            }
  134|   187k|            auto crange = get_as_contiguous(range);
  135|   187k|            SCN_TRY(it, impl(rd, crange, value));
  136|   187k|            return ranges_polyfill::batch_next(
  137|   187k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   187k|        }
  139|   187k|        else {
  140|   187k|            SCN_EXPECT(false);
  141|   187k|            SCN_UNREACHABLE;
  142|   187k|        }
  143|   187k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   187k|    {
  112|   187k|        SCN_TRY(it,
  ------------------
  |  |   71|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.07k, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.07k|    }                                                  \
  |  |  |  |   70|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   186k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   186k|                    .transform_error(make_eof_scan_error));
  115|   186k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   186k|                               loc);
  117|   187k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.68k|    {
  122|  6.68k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.68k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.68k|            auto rd = make_reader<T, char_type>();
  127|  6.68k|            return impl(rd, range, value);
  128|  6.68k|        }
  129|  6.68k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.68k|            auto rd = make_reader<T, char_type>();
  131|  6.68k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.68k, False: 0]
  ------------------
  132|  6.68k|                return impl(rd, range, value);
  133|  6.68k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.68k|        else {
  140|  6.68k|            SCN_EXPECT(false);
  141|  6.68k|            SCN_UNREACHABLE;
  142|  6.68k|        }
  143|  6.68k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.68k|    {
  112|  6.68k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.68k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.68k|                    .transform_error(make_eof_scan_error));
  115|  6.68k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.68k|                               loc);
  117|  6.68k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   200k|{
   43|   200k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   200k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 200k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   200k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   200k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.68k|    {
  122|  6.68k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.68k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.68k|            auto rd = make_reader<T, char_type>();
  127|  6.68k|            return impl(rd, range, value);
  128|  6.68k|        }
  129|  6.68k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.68k|            auto rd = make_reader<T, char_type>();
  131|  6.68k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.68k, False: 0]
  ------------------
  132|  6.68k|                return impl(rd, range, value);
  133|  6.68k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.68k|        else {
  140|  6.68k|            SCN_EXPECT(false);
  141|  6.68k|            SCN_UNREACHABLE;
  142|  6.68k|        }
  143|  6.68k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.68k|    {
  112|  6.68k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.68k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.68k|                    .transform_error(make_eof_scan_error));
  115|  6.68k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.68k|                               loc);
  117|  6.68k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.68k|    {
  122|  6.68k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.68k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.68k|            auto rd = make_reader<T, char_type>();
  127|  6.68k|            return impl(rd, range, value);
  128|  6.68k|        }
  129|  6.68k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.68k|            auto rd = make_reader<T, char_type>();
  131|  6.68k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.68k, False: 0]
  ------------------
  132|  6.68k|                return impl(rd, range, value);
  133|  6.68k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.68k|        else {
  140|  6.68k|            SCN_EXPECT(false);
  141|  6.68k|            SCN_UNREACHABLE;
  142|  6.68k|        }
  143|  6.68k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.68k|    {
  112|  6.68k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.68k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.68k|                    .transform_error(make_eof_scan_error));
  115|  6.68k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.68k|                               loc);
  117|  6.68k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.68k|    {
  122|  6.68k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.68k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.68k|            auto rd = make_reader<T, char_type>();
  127|  6.68k|            return impl(rd, range, value);
  128|  6.68k|        }
  129|  6.68k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.68k|            auto rd = make_reader<T, char_type>();
  131|  6.68k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.68k, False: 0]
  ------------------
  132|  6.68k|                return impl(rd, range, value);
  133|  6.68k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.68k|        else {
  140|  6.68k|            SCN_EXPECT(false);
  141|  6.68k|            SCN_UNREACHABLE;
  142|  6.68k|        }
  143|  6.68k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.68k|    {
  112|  6.68k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.68k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.68k|                    .transform_error(make_eof_scan_error));
  115|  6.68k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.68k|                               loc);
  117|  6.68k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.68k|    {
  122|  6.68k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.68k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.68k|            auto rd = make_reader<T, char_type>();
  127|  6.68k|            return impl(rd, range, value);
  128|  6.68k|        }
  129|  6.68k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.68k|            auto rd = make_reader<T, char_type>();
  131|  6.68k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.68k, False: 0]
  ------------------
  132|  6.68k|                return impl(rd, range, value);
  133|  6.68k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.68k|        else {
  140|  6.68k|            SCN_EXPECT(false);
  141|  6.68k|            SCN_UNREACHABLE;
  142|  6.68k|        }
  143|  6.68k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.68k|    {
  112|  6.68k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.68k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.68k|                    .transform_error(make_eof_scan_error));
  115|  6.68k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.68k|                               loc);
  117|  6.68k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.68k|    {
  122|  6.68k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.68k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.68k|            auto rd = make_reader<T, char_type>();
  127|  6.68k|            return impl(rd, range, value);
  128|  6.68k|        }
  129|  6.68k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.68k|            auto rd = make_reader<T, char_type>();
  131|  6.68k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.68k, False: 0]
  ------------------
  132|  6.68k|                return impl(rd, range, value);
  133|  6.68k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.68k|        else {
  140|  6.68k|            SCN_EXPECT(false);
  141|  6.68k|            SCN_UNREACHABLE;
  142|  6.68k|        }
  143|  6.68k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.68k|    {
  112|  6.68k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.68k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.68k|                    .transform_error(make_eof_scan_error));
  115|  6.68k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.68k|                               loc);
  117|  6.68k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   389k|    {
  223|   389k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   389k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   389k|                          basic_contiguous_scan_context<char_type>>) {
  227|   389k|            auto rd = make_reader<T, char_type>();
  228|   389k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 389k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   389k|            return impl(rd, range, value);
  233|   389k|        }
  234|   389k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   389k|            auto rd = make_reader<T, char_type>();
  236|   389k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   389k|                return unexpected(e);
  238|   389k|            }
  239|       |
  240|   389k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   389k|                return impl(rd, range, value);
  242|   389k|            }
  243|       |
  244|   389k|            auto crange = get_as_contiguous(range);
  245|   389k|            SCN_TRY(it, impl(rd, crange, value));
  246|   389k|            return ranges_polyfill::batch_next(
  247|   389k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   389k|        }
  249|   389k|        else {
  250|   389k|            SCN_EXPECT(false);
  251|   389k|            SCN_UNREACHABLE;
  252|   389k|        }
  253|   389k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   389k|    {
  205|   389k|        SCN_TRY(it,
  ------------------
  |  |   71|   389k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   389k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   389k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 387k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|   389k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   387k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   387k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   387k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   387k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 387k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   387k|        return rd.read_specs(subr, specs, value, loc);
  218|   387k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   570k|    {
  223|   570k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   570k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   570k|                          basic_contiguous_scan_context<char_type>>) {
  227|   570k|            auto rd = make_reader<T, char_type>();
  228|   570k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   570k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 570k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   570k|            return impl(rd, range, value);
  233|   570k|        }
  234|   570k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   570k|            auto rd = make_reader<T, char_type>();
  236|   570k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   570k|                return unexpected(e);
  238|   570k|            }
  239|       |
  240|   570k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   570k|                return impl(rd, range, value);
  242|   570k|            }
  243|       |
  244|   570k|            auto crange = get_as_contiguous(range);
  245|   570k|            SCN_TRY(it, impl(rd, crange, value));
  246|   570k|            return ranges_polyfill::batch_next(
  247|   570k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   570k|        }
  249|   570k|        else {
  250|   570k|            SCN_EXPECT(false);
  251|   570k|            SCN_UNREACHABLE;
  252|   570k|        }
  253|   570k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   570k|    {
  205|   570k|        SCN_TRY(it,
  ------------------
  |  |   71|   570k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   570k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   570k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   570k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.33k, False: 566k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.33k|    }                                                  \
  |  |  |  |   70|   570k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   566k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   566k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   566k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   566k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   566k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 566k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   566k|        return rd.read_specs(subr, specs, value, loc);
  218|   566k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   582k|    {
  223|   582k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   582k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   582k|                          basic_contiguous_scan_context<char_type>>) {
  227|   582k|            auto rd = make_reader<T, char_type>();
  228|   582k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 582k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   582k|            return impl(rd, range, value);
  233|   582k|        }
  234|   582k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   582k|            auto rd = make_reader<T, char_type>();
  236|   582k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   582k|                return unexpected(e);
  238|   582k|            }
  239|       |
  240|   582k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   582k|                return impl(rd, range, value);
  242|   582k|            }
  243|       |
  244|   582k|            auto crange = get_as_contiguous(range);
  245|   582k|            SCN_TRY(it, impl(rd, crange, value));
  246|   582k|            return ranges_polyfill::batch_next(
  247|   582k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   582k|        }
  249|   582k|        else {
  250|   582k|            SCN_EXPECT(false);
  251|   582k|            SCN_UNREACHABLE;
  252|   582k|        }
  253|   582k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   582k|    {
  205|   582k|        SCN_TRY(it,
  ------------------
  |  |   71|   582k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   582k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   582k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.66k, False: 577k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.66k|    }                                                  \
  |  |  |  |   70|   582k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   577k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   577k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   577k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   577k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   577k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 577k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   577k|        return rd.read_specs(subr, specs, value, loc);
  218|   577k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   392k|    {
  223|   392k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   392k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   392k|                          basic_contiguous_scan_context<char_type>>) {
  227|   392k|            auto rd = make_reader<T, char_type>();
  228|   392k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   392k|            return impl(rd, range, value);
  233|   392k|        }
  234|   392k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   392k|            auto rd = make_reader<T, char_type>();
  236|   392k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   392k|                return unexpected(e);
  238|   392k|            }
  239|       |
  240|   392k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   392k|                return impl(rd, range, value);
  242|   392k|            }
  243|       |
  244|   392k|            auto crange = get_as_contiguous(range);
  245|   392k|            SCN_TRY(it, impl(rd, crange, value));
  246|   392k|            return ranges_polyfill::batch_next(
  247|   392k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   392k|        }
  249|   392k|        else {
  250|   392k|            SCN_EXPECT(false);
  251|   392k|            SCN_UNREACHABLE;
  252|   392k|        }
  253|   392k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   392k|    {
  205|   392k|        SCN_TRY(it,
  ------------------
  |  |   71|   392k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   392k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   392k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.83k, False: 391k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.83k|    }                                                  \
  |  |  |  |   70|   392k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   391k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   391k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   391k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   391k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 391k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   391k|        return rd.read_specs(subr, specs, value, loc);
  218|   391k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   472k|    {
  223|   472k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   472k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   472k|                          basic_contiguous_scan_context<char_type>>) {
  227|   472k|            auto rd = make_reader<T, char_type>();
  228|   472k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   472k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 472k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   472k|            return impl(rd, range, value);
  233|   472k|        }
  234|   472k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   472k|            auto rd = make_reader<T, char_type>();
  236|   472k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   472k|                return unexpected(e);
  238|   472k|            }
  239|       |
  240|   472k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   472k|                return impl(rd, range, value);
  242|   472k|            }
  243|       |
  244|   472k|            auto crange = get_as_contiguous(range);
  245|   472k|            SCN_TRY(it, impl(rd, crange, value));
  246|   472k|            return ranges_polyfill::batch_next(
  247|   472k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   472k|        }
  249|   472k|        else {
  250|   472k|            SCN_EXPECT(false);
  251|   472k|            SCN_UNREACHABLE;
  252|   472k|        }
  253|   472k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   472k|    {
  205|   472k|        SCN_TRY(it,
  ------------------
  |  |   71|   472k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   472k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   472k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   472k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.97k, False: 469k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.97k|    }                                                  \
  |  |  |  |   70|   472k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   469k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   469k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   469k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   469k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 469k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   469k|        return rd.read_specs(subr, specs, value, loc);
  218|   469k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   475k|    {
  223|   475k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   475k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   475k|                          basic_contiguous_scan_context<char_type>>) {
  227|   475k|            auto rd = make_reader<T, char_type>();
  228|   475k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 475k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   475k|            return impl(rd, range, value);
  233|   475k|        }
  234|   475k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   475k|            auto rd = make_reader<T, char_type>();
  236|   475k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   475k|                return unexpected(e);
  238|   475k|            }
  239|       |
  240|   475k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   475k|                return impl(rd, range, value);
  242|   475k|            }
  243|       |
  244|   475k|            auto crange = get_as_contiguous(range);
  245|   475k|            SCN_TRY(it, impl(rd, crange, value));
  246|   475k|            return ranges_polyfill::batch_next(
  247|   475k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   475k|        }
  249|   475k|        else {
  250|   475k|            SCN_EXPECT(false);
  251|   475k|            SCN_UNREACHABLE;
  252|   475k|        }
  253|   475k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   475k|    {
  205|   475k|        SCN_TRY(it,
  ------------------
  |  |   71|   475k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   475k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   475k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.12k, False: 472k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.12k|    }                                                  \
  |  |  |  |   70|   475k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   472k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   472k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   472k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   472k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   472k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 472k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   472k|        return rd.read_specs(subr, specs, value, loc);
  218|   472k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.7k|    {
  223|  26.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.7k|            auto rd = make_reader<T, char_type>();
  228|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.7k|                return unexpected(e);
  230|  26.7k|            }
  231|       |
  232|  26.7k|            return impl(rd, range, value);
  233|  26.7k|        }
  234|  26.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.7k|            auto rd = make_reader<T, char_type>();
  236|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.7k|                return impl(rd, range, value);
  242|  26.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.7k|        else {
  250|  26.7k|            SCN_EXPECT(false);
  251|  26.7k|            SCN_UNREACHABLE;
  252|  26.7k|        }
  253|  26.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.7k|    {
  205|  26.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.7k|    {
  223|  26.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.7k|            auto rd = make_reader<T, char_type>();
  228|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.7k|                return unexpected(e);
  230|  26.7k|            }
  231|       |
  232|  26.7k|            return impl(rd, range, value);
  233|  26.7k|        }
  234|  26.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.7k|            auto rd = make_reader<T, char_type>();
  236|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.7k|                return impl(rd, range, value);
  242|  26.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.7k|        else {
  250|  26.7k|            SCN_EXPECT(false);
  251|  26.7k|            SCN_UNREACHABLE;
  252|  26.7k|        }
  253|  26.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.7k|    {
  205|  26.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.7k|    {
  223|  26.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.7k|            auto rd = make_reader<T, char_type>();
  228|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.7k|                return unexpected(e);
  230|  26.7k|            }
  231|       |
  232|  26.7k|            return impl(rd, range, value);
  233|  26.7k|        }
  234|  26.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.7k|            auto rd = make_reader<T, char_type>();
  236|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.7k|                return impl(rd, range, value);
  242|  26.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.7k|        else {
  250|  26.7k|            SCN_EXPECT(false);
  251|  26.7k|            SCN_UNREACHABLE;
  252|  26.7k|        }
  253|  26.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.7k|    {
  205|  26.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.7k|    {
  223|  26.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.7k|            auto rd = make_reader<T, char_type>();
  228|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.7k|                return unexpected(e);
  230|  26.7k|            }
  231|       |
  232|  26.7k|            return impl(rd, range, value);
  233|  26.7k|        }
  234|  26.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.7k|            auto rd = make_reader<T, char_type>();
  236|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.7k|                return impl(rd, range, value);
  242|  26.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.7k|        else {
  250|  26.7k|            SCN_EXPECT(false);
  251|  26.7k|            SCN_UNREACHABLE;
  252|  26.7k|        }
  253|  26.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.7k|    {
  205|  26.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.7k|    {
  223|  26.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.7k|            auto rd = make_reader<T, char_type>();
  228|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.7k|                return unexpected(e);
  230|  26.7k|            }
  231|       |
  232|  26.7k|            return impl(rd, range, value);
  233|  26.7k|        }
  234|  26.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.7k|            auto rd = make_reader<T, char_type>();
  236|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.7k|                return impl(rd, range, value);
  242|  26.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.7k|        else {
  250|  26.7k|            SCN_EXPECT(false);
  251|  26.7k|            SCN_UNREACHABLE;
  252|  26.7k|        }
  253|  26.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.7k|    {
  205|  26.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.7k|    {
  223|  26.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.7k|            auto rd = make_reader<T, char_type>();
  228|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.7k|                return unexpected(e);
  230|  26.7k|            }
  231|       |
  232|  26.7k|            return impl(rd, range, value);
  233|  26.7k|        }
  234|  26.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.7k|            auto rd = make_reader<T, char_type>();
  236|  26.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.7k|                return impl(rd, range, value);
  242|  26.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.7k|        else {
  250|  26.7k|            SCN_EXPECT(false);
  251|  26.7k|            SCN_UNREACHABLE;
  252|  26.7k|        }
  253|  26.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.7k|    {
  205|  26.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   149k|    {
  122|   149k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   149k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   149k|                          basic_contiguous_scan_context<char_type>>) {
  126|   149k|            auto rd = make_reader<T, char_type>();
  127|   149k|            return impl(rd, range, value);
  128|   149k|        }
  129|   149k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   149k|            auto rd = make_reader<T, char_type>();
  131|   149k|            if (!is_segment_contiguous(range)) {
  132|   149k|                return impl(rd, range, value);
  133|   149k|            }
  134|   149k|            auto crange = get_as_contiguous(range);
  135|   149k|            SCN_TRY(it, impl(rd, crange, value));
  136|   149k|            return ranges_polyfill::batch_next(
  137|   149k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   149k|        }
  139|   149k|        else {
  140|   149k|            SCN_EXPECT(false);
  141|   149k|            SCN_UNREACHABLE;
  142|   149k|        }
  143|   149k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   149k|    {
  112|   149k|        SCN_TRY(it,
  ------------------
  |  |   71|   149k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   149k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   149k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 894, False: 148k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    894|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    894|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    894|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    894|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    894|    }                                                  \
  |  |  |  |   70|   149k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   148k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   148k|                    .transform_error(make_eof_scan_error));
  115|   148k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   148k|                               loc);
  117|   149k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  3.66M|{
   43|  3.66M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 22.7k, False: 3.64M]
  |  |  ------------------
  ------------------
   44|  22.7k|        return unexpected(e);
   45|  22.7k|    }
   46|       |
   47|  3.64M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 3.64M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  3.64M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  3.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  3.64M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   199k|    {
  122|   199k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   199k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   199k|                          basic_contiguous_scan_context<char_type>>) {
  126|   199k|            auto rd = make_reader<T, char_type>();
  127|   199k|            return impl(rd, range, value);
  128|   199k|        }
  129|   199k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   199k|            auto rd = make_reader<T, char_type>();
  131|   199k|            if (!is_segment_contiguous(range)) {
  132|   199k|                return impl(rd, range, value);
  133|   199k|            }
  134|   199k|            auto crange = get_as_contiguous(range);
  135|   199k|            SCN_TRY(it, impl(rd, crange, value));
  136|   199k|            return ranges_polyfill::batch_next(
  137|   199k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   199k|        }
  139|   199k|        else {
  140|   199k|            SCN_EXPECT(false);
  141|   199k|            SCN_UNREACHABLE;
  142|   199k|        }
  143|   199k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   199k|    {
  112|   199k|        SCN_TRY(it,
  ------------------
  |  |   71|   199k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   199k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   199k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.56k, False: 197k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.56k|    }                                                  \
  |  |  |  |   70|   199k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   197k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   197k|                    .transform_error(make_eof_scan_error));
  115|   197k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   197k|                               loc);
  117|   199k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   202k|    {
  122|   202k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   202k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   202k|                          basic_contiguous_scan_context<char_type>>) {
  126|   202k|            auto rd = make_reader<T, char_type>();
  127|   202k|            return impl(rd, range, value);
  128|   202k|        }
  129|   202k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   202k|            auto rd = make_reader<T, char_type>();
  131|   202k|            if (!is_segment_contiguous(range)) {
  132|   202k|                return impl(rd, range, value);
  133|   202k|            }
  134|   202k|            auto crange = get_as_contiguous(range);
  135|   202k|            SCN_TRY(it, impl(rd, crange, value));
  136|   202k|            return ranges_polyfill::batch_next(
  137|   202k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   202k|        }
  139|   202k|        else {
  140|   202k|            SCN_EXPECT(false);
  141|   202k|            SCN_UNREACHABLE;
  142|   202k|        }
  143|   202k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   202k|    {
  112|   202k|        SCN_TRY(it,
  ------------------
  |  |   71|   202k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   202k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   202k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.66k, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.66k|    }                                                  \
  |  |  |  |   70|   202k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   200k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   200k|                    .transform_error(make_eof_scan_error));
  115|   200k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   200k|                               loc);
  117|   202k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   146k|    {
  122|   146k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   146k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   146k|                          basic_contiguous_scan_context<char_type>>) {
  126|   146k|            auto rd = make_reader<T, char_type>();
  127|   146k|            return impl(rd, range, value);
  128|   146k|        }
  129|   146k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   146k|            auto rd = make_reader<T, char_type>();
  131|   146k|            if (!is_segment_contiguous(range)) {
  132|   146k|                return impl(rd, range, value);
  133|   146k|            }
  134|   146k|            auto crange = get_as_contiguous(range);
  135|   146k|            SCN_TRY(it, impl(rd, crange, value));
  136|   146k|            return ranges_polyfill::batch_next(
  137|   146k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   146k|        }
  139|   146k|        else {
  140|   146k|            SCN_EXPECT(false);
  141|   146k|            SCN_UNREACHABLE;
  142|   146k|        }
  143|   146k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   146k|    {
  112|   146k|        SCN_TRY(it,
  ------------------
  |  |   71|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 756, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    756|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    756|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    756|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    756|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    756|    }                                                  \
  |  |  |  |   70|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   146k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   146k|                    .transform_error(make_eof_scan_error));
  115|   146k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   146k|                               loc);
  117|   146k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   167k|    {
  122|   167k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   167k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   167k|                          basic_contiguous_scan_context<char_type>>) {
  126|   167k|            auto rd = make_reader<T, char_type>();
  127|   167k|            return impl(rd, range, value);
  128|   167k|        }
  129|   167k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   167k|            auto rd = make_reader<T, char_type>();
  131|   167k|            if (!is_segment_contiguous(range)) {
  132|   167k|                return impl(rd, range, value);
  133|   167k|            }
  134|   167k|            auto crange = get_as_contiguous(range);
  135|   167k|            SCN_TRY(it, impl(rd, crange, value));
  136|   167k|            return ranges_polyfill::batch_next(
  137|   167k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   167k|        }
  139|   167k|        else {
  140|   167k|            SCN_EXPECT(false);
  141|   167k|            SCN_UNREACHABLE;
  142|   167k|        }
  143|   167k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   167k|    {
  112|   167k|        SCN_TRY(it,
  ------------------
  |  |   71|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 166k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   166k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   166k|                    .transform_error(make_eof_scan_error));
  115|   166k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   166k|                               loc);
  117|   167k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   168k|    {
  122|   168k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   168k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   168k|                          basic_contiguous_scan_context<char_type>>) {
  126|   168k|            auto rd = make_reader<T, char_type>();
  127|   168k|            return impl(rd, range, value);
  128|   168k|        }
  129|   168k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   168k|            auto rd = make_reader<T, char_type>();
  131|   168k|            if (!is_segment_contiguous(range)) {
  132|   168k|                return impl(rd, range, value);
  133|   168k|            }
  134|   168k|            auto crange = get_as_contiguous(range);
  135|   168k|            SCN_TRY(it, impl(rd, crange, value));
  136|   168k|            return ranges_polyfill::batch_next(
  137|   168k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   168k|        }
  139|   168k|        else {
  140|   168k|            SCN_EXPECT(false);
  141|   168k|            SCN_UNREACHABLE;
  142|   168k|        }
  143|   168k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   168k|    {
  112|   168k|        SCN_TRY(it,
  ------------------
  |  |   71|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.14k, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.14k|    }                                                  \
  |  |  |  |   70|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   167k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   167k|                    .transform_error(make_eof_scan_error));
  115|   167k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   167k|                               loc);
  117|   168k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   361k|    {
  223|   361k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   361k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   361k|                          basic_contiguous_scan_context<char_type>>) {
  227|   361k|            auto rd = make_reader<T, char_type>();
  228|   361k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   361k|            return impl(rd, range, value);
  233|   361k|        }
  234|   361k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   361k|            auto rd = make_reader<T, char_type>();
  236|   361k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   361k|                return unexpected(e);
  238|   361k|            }
  239|       |
  240|   361k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   361k|                return impl(rd, range, value);
  242|   361k|            }
  243|       |
  244|   361k|            auto crange = get_as_contiguous(range);
  245|   361k|            SCN_TRY(it, impl(rd, crange, value));
  246|   361k|            return ranges_polyfill::batch_next(
  247|   361k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   361k|        }
  249|   361k|        else {
  250|   361k|            SCN_EXPECT(false);
  251|   361k|            SCN_UNREACHABLE;
  252|   361k|        }
  253|   361k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   361k|    {
  205|   361k|        SCN_TRY(it,
  ------------------
  |  |   71|   361k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   361k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   361k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.55k, False: 358k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|   361k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   358k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   358k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   358k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   358k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 358k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   358k|        return rd.read_specs(subr, specs, value, loc);
  218|   358k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   513k|    {
  223|   513k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   513k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   513k|                          basic_contiguous_scan_context<char_type>>) {
  227|   513k|            auto rd = make_reader<T, char_type>();
  228|   513k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 513k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   513k|            return impl(rd, range, value);
  233|   513k|        }
  234|   513k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   513k|            auto rd = make_reader<T, char_type>();
  236|   513k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   513k|                return unexpected(e);
  238|   513k|            }
  239|       |
  240|   513k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   513k|                return impl(rd, range, value);
  242|   513k|            }
  243|       |
  244|   513k|            auto crange = get_as_contiguous(range);
  245|   513k|            SCN_TRY(it, impl(rd, crange, value));
  246|   513k|            return ranges_polyfill::batch_next(
  247|   513k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   513k|        }
  249|   513k|        else {
  250|   513k|            SCN_EXPECT(false);
  251|   513k|            SCN_UNREACHABLE;
  252|   513k|        }
  253|   513k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   513k|    {
  205|   513k|        SCN_TRY(it,
  ------------------
  |  |   71|   513k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   513k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   513k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.69k, False: 508k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.69k|    }                                                  \
  |  |  |  |   70|   513k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   508k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   508k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   508k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   508k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   508k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 508k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   508k|        return rd.read_specs(subr, specs, value, loc);
  218|   508k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   521k|    {
  223|   521k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   521k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   521k|                          basic_contiguous_scan_context<char_type>>) {
  227|   521k|            auto rd = make_reader<T, char_type>();
  228|   521k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 521k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   521k|            return impl(rd, range, value);
  233|   521k|        }
  234|   521k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   521k|            auto rd = make_reader<T, char_type>();
  236|   521k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   521k|                return unexpected(e);
  238|   521k|            }
  239|       |
  240|   521k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   521k|                return impl(rd, range, value);
  242|   521k|            }
  243|       |
  244|   521k|            auto crange = get_as_contiguous(range);
  245|   521k|            SCN_TRY(it, impl(rd, crange, value));
  246|   521k|            return ranges_polyfill::batch_next(
  247|   521k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   521k|        }
  249|   521k|        else {
  250|   521k|            SCN_EXPECT(false);
  251|   521k|            SCN_UNREACHABLE;
  252|   521k|        }
  253|   521k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   521k|    {
  205|   521k|        SCN_TRY(it,
  ------------------
  |  |   71|   521k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   521k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   521k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.03k, False: 516k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.03k|    }                                                  \
  |  |  |  |   70|   521k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   516k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   516k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   516k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   516k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   516k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 516k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   516k|        return rd.read_specs(subr, specs, value, loc);
  218|   516k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   365k|    {
  223|   365k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   365k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   365k|                          basic_contiguous_scan_context<char_type>>) {
  227|   365k|            auto rd = make_reader<T, char_type>();
  228|   365k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   365k|            return impl(rd, range, value);
  233|   365k|        }
  234|   365k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   365k|            auto rd = make_reader<T, char_type>();
  236|   365k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   365k|                return unexpected(e);
  238|   365k|            }
  239|       |
  240|   365k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   365k|                return impl(rd, range, value);
  242|   365k|            }
  243|       |
  244|   365k|            auto crange = get_as_contiguous(range);
  245|   365k|            SCN_TRY(it, impl(rd, crange, value));
  246|   365k|            return ranges_polyfill::batch_next(
  247|   365k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   365k|        }
  249|   365k|        else {
  250|   365k|            SCN_EXPECT(false);
  251|   365k|            SCN_UNREACHABLE;
  252|   365k|        }
  253|   365k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   365k|    {
  205|   365k|        SCN_TRY(it,
  ------------------
  |  |   71|   365k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   365k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   365k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.16k, False: 363k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.16k|    }                                                  \
  |  |  |  |   70|   365k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   363k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   363k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   363k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   363k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 363k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   363k|        return rd.read_specs(subr, specs, value, loc);
  218|   363k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   433k|    {
  223|   433k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   433k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   433k|                          basic_contiguous_scan_context<char_type>>) {
  227|   433k|            auto rd = make_reader<T, char_type>();
  228|   433k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 433k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   433k|            return impl(rd, range, value);
  233|   433k|        }
  234|   433k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   433k|            auto rd = make_reader<T, char_type>();
  236|   433k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   433k|                return unexpected(e);
  238|   433k|            }
  239|       |
  240|   433k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   433k|                return impl(rd, range, value);
  242|   433k|            }
  243|       |
  244|   433k|            auto crange = get_as_contiguous(range);
  245|   433k|            SCN_TRY(it, impl(rd, crange, value));
  246|   433k|            return ranges_polyfill::batch_next(
  247|   433k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   433k|        }
  249|   433k|        else {
  250|   433k|            SCN_EXPECT(false);
  251|   433k|            SCN_UNREACHABLE;
  252|   433k|        }
  253|   433k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   433k|    {
  205|   433k|        SCN_TRY(it,
  ------------------
  |  |   71|   433k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   433k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   433k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.31k, False: 430k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.31k|    }                                                  \
  |  |  |  |   70|   433k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   430k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   430k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   430k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   430k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 430k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   430k|        return rd.read_specs(subr, specs, value, loc);
  218|   430k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   436k|    {
  223|   436k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   436k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   436k|                          basic_contiguous_scan_context<char_type>>) {
  227|   436k|            auto rd = make_reader<T, char_type>();
  228|   436k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 436k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   436k|            return impl(rd, range, value);
  233|   436k|        }
  234|   436k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   436k|            auto rd = make_reader<T, char_type>();
  236|   436k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   436k|                return unexpected(e);
  238|   436k|            }
  239|       |
  240|   436k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   436k|                return impl(rd, range, value);
  242|   436k|            }
  243|       |
  244|   436k|            auto crange = get_as_contiguous(range);
  245|   436k|            SCN_TRY(it, impl(rd, crange, value));
  246|   436k|            return ranges_polyfill::batch_next(
  247|   436k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   436k|        }
  249|   436k|        else {
  250|   436k|            SCN_EXPECT(false);
  251|   436k|            SCN_UNREACHABLE;
  252|   436k|        }
  253|   436k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   436k|    {
  205|   436k|        SCN_TRY(it,
  ------------------
  |  |   71|   436k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   436k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   436k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.46k, False: 432k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.46k|    }                                                  \
  |  |  |  |   70|   436k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   432k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   432k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   432k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   432k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 432k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   432k|        return rd.read_specs(subr, specs, value, loc);
  218|   432k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.8k|    {
  122|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.8k|            auto rd = make_reader<T, char_type>();
  127|  11.8k|            return impl(rd, range, value);
  128|  11.8k|        }
  129|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.8k|            auto rd = make_reader<T, char_type>();
  131|  11.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.8k, False: 0]
  ------------------
  132|  11.8k|                return impl(rd, range, value);
  133|  11.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.8k|        else {
  140|  11.8k|            SCN_EXPECT(false);
  141|  11.8k|            SCN_UNREACHABLE;
  142|  11.8k|        }
  143|  11.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.8k|    {
  112|  11.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.8k|                    .transform_error(make_eof_scan_error));
  115|  11.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.8k|                               loc);
  117|  11.8k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   356k|{
   43|   356k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 356k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   356k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 356k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   356k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   356k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.8k|    {
  122|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.8k|            auto rd = make_reader<T, char_type>();
  127|  11.8k|            return impl(rd, range, value);
  128|  11.8k|        }
  129|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.8k|            auto rd = make_reader<T, char_type>();
  131|  11.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.8k, False: 0]
  ------------------
  132|  11.8k|                return impl(rd, range, value);
  133|  11.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.8k|        else {
  140|  11.8k|            SCN_EXPECT(false);
  141|  11.8k|            SCN_UNREACHABLE;
  142|  11.8k|        }
  143|  11.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.8k|    {
  112|  11.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.8k|                    .transform_error(make_eof_scan_error));
  115|  11.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.8k|                               loc);
  117|  11.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.8k|    {
  122|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.8k|            auto rd = make_reader<T, char_type>();
  127|  11.8k|            return impl(rd, range, value);
  128|  11.8k|        }
  129|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.8k|            auto rd = make_reader<T, char_type>();
  131|  11.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.8k, False: 0]
  ------------------
  132|  11.8k|                return impl(rd, range, value);
  133|  11.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.8k|        else {
  140|  11.8k|            SCN_EXPECT(false);
  141|  11.8k|            SCN_UNREACHABLE;
  142|  11.8k|        }
  143|  11.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.8k|    {
  112|  11.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.8k|                    .transform_error(make_eof_scan_error));
  115|  11.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.8k|                               loc);
  117|  11.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.8k|    {
  122|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.8k|            auto rd = make_reader<T, char_type>();
  127|  11.8k|            return impl(rd, range, value);
  128|  11.8k|        }
  129|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.8k|            auto rd = make_reader<T, char_type>();
  131|  11.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.8k, False: 0]
  ------------------
  132|  11.8k|                return impl(rd, range, value);
  133|  11.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.8k|        else {
  140|  11.8k|            SCN_EXPECT(false);
  141|  11.8k|            SCN_UNREACHABLE;
  142|  11.8k|        }
  143|  11.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.8k|    {
  112|  11.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.8k|                    .transform_error(make_eof_scan_error));
  115|  11.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.8k|                               loc);
  117|  11.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.8k|    {
  122|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.8k|            auto rd = make_reader<T, char_type>();
  127|  11.8k|            return impl(rd, range, value);
  128|  11.8k|        }
  129|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.8k|            auto rd = make_reader<T, char_type>();
  131|  11.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.8k, False: 0]
  ------------------
  132|  11.8k|                return impl(rd, range, value);
  133|  11.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.8k|        else {
  140|  11.8k|            SCN_EXPECT(false);
  141|  11.8k|            SCN_UNREACHABLE;
  142|  11.8k|        }
  143|  11.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.8k|    {
  112|  11.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.8k|                    .transform_error(make_eof_scan_error));
  115|  11.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.8k|                               loc);
  117|  11.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  11.8k|    {
  122|  11.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  11.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  11.8k|            auto rd = make_reader<T, char_type>();
  127|  11.8k|            return impl(rd, range, value);
  128|  11.8k|        }
  129|  11.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.8k|            auto rd = make_reader<T, char_type>();
  131|  11.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 11.8k, False: 0]
  ------------------
  132|  11.8k|                return impl(rd, range, value);
  133|  11.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  11.8k|        else {
  140|  11.8k|            SCN_EXPECT(false);
  141|  11.8k|            SCN_UNREACHABLE;
  142|  11.8k|        }
  143|  11.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  11.8k|    {
  112|  11.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  11.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  11.8k|                    .transform_error(make_eof_scan_error));
  115|  11.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  11.8k|                               loc);
  117|  11.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  47.5k|    {
  223|  47.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.5k|            auto rd = make_reader<T, char_type>();
  228|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.5k|                return unexpected(e);
  230|  47.5k|            }
  231|       |
  232|  47.5k|            return impl(rd, range, value);
  233|  47.5k|        }
  234|  47.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.5k|            auto rd = make_reader<T, char_type>();
  236|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.5k|                return impl(rd, range, value);
  242|  47.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.5k|        else {
  250|  47.5k|            SCN_EXPECT(false);
  251|  47.5k|            SCN_UNREACHABLE;
  252|  47.5k|        }
  253|  47.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.5k|    {
  205|  47.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  47.5k|    {
  223|  47.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.5k|            auto rd = make_reader<T, char_type>();
  228|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.5k|                return unexpected(e);
  230|  47.5k|            }
  231|       |
  232|  47.5k|            return impl(rd, range, value);
  233|  47.5k|        }
  234|  47.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.5k|            auto rd = make_reader<T, char_type>();
  236|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.5k|                return impl(rd, range, value);
  242|  47.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.5k|        else {
  250|  47.5k|            SCN_EXPECT(false);
  251|  47.5k|            SCN_UNREACHABLE;
  252|  47.5k|        }
  253|  47.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.5k|    {
  205|  47.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  47.5k|    {
  223|  47.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.5k|            auto rd = make_reader<T, char_type>();
  228|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.5k|                return unexpected(e);
  230|  47.5k|            }
  231|       |
  232|  47.5k|            return impl(rd, range, value);
  233|  47.5k|        }
  234|  47.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.5k|            auto rd = make_reader<T, char_type>();
  236|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.5k|                return impl(rd, range, value);
  242|  47.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.5k|        else {
  250|  47.5k|            SCN_EXPECT(false);
  251|  47.5k|            SCN_UNREACHABLE;
  252|  47.5k|        }
  253|  47.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.5k|    {
  205|  47.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  47.5k|    {
  223|  47.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.5k|            auto rd = make_reader<T, char_type>();
  228|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.5k|                return unexpected(e);
  230|  47.5k|            }
  231|       |
  232|  47.5k|            return impl(rd, range, value);
  233|  47.5k|        }
  234|  47.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.5k|            auto rd = make_reader<T, char_type>();
  236|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.5k|                return impl(rd, range, value);
  242|  47.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.5k|        else {
  250|  47.5k|            SCN_EXPECT(false);
  251|  47.5k|            SCN_UNREACHABLE;
  252|  47.5k|        }
  253|  47.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.5k|    {
  205|  47.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  47.5k|    {
  223|  47.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.5k|            auto rd = make_reader<T, char_type>();
  228|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.5k|                return unexpected(e);
  230|  47.5k|            }
  231|       |
  232|  47.5k|            return impl(rd, range, value);
  233|  47.5k|        }
  234|  47.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.5k|            auto rd = make_reader<T, char_type>();
  236|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.5k|                return impl(rd, range, value);
  242|  47.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.5k|        else {
  250|  47.5k|            SCN_EXPECT(false);
  251|  47.5k|            SCN_UNREACHABLE;
  252|  47.5k|        }
  253|  47.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.5k|    {
  205|  47.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  47.5k|    {
  223|  47.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.5k|            auto rd = make_reader<T, char_type>();
  228|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.5k|                return unexpected(e);
  230|  47.5k|            }
  231|       |
  232|  47.5k|            return impl(rd, range, value);
  233|  47.5k|        }
  234|  47.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.5k|            auto rd = make_reader<T, char_type>();
  236|  47.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.5k|                return impl(rd, range, value);
  242|  47.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.5k|        else {
  250|  47.5k|            SCN_EXPECT(false);
  251|  47.5k|            SCN_UNREACHABLE;
  252|  47.5k|        }
  253|  47.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.5k|    {
  205|  47.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.5k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   163k|{
  110|   163k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   163k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|  83.1k|{
  263|  83.1k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  83.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  83.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|  83.1k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.84k, False: 77.2k]
  |  |  ------------------
  ------------------
  267|  5.84k|        return {get_start_of_next_code_point(input),
  268|  5.84k|                detail::invalid_code_point};
  269|  5.84k|    }
  270|  77.2k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  77.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 893, False: 76.4k]
  |  |  ------------------
  ------------------
  271|    893|        return {input.end(), detail::invalid_code_point};
  272|    893|    }
  273|       |
  274|  76.4k|    constexpr auto enc = get_encoding<CharT>();
  275|  76.4k|    std::size_t result{1};
  276|  76.4k|    char32_t output{};
  277|  76.4k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  76.4k|        result = simdutf::convert_utf8_to_utf32(
  279|  76.4k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  76.4k|    }
  281|  76.4k|    else if constexpr (enc == encoding::utf16) {
  282|  76.4k|        result = simdutf::convert_utf16_to_utf32(
  283|  76.4k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  76.4k|    }
  285|  76.4k|    else if constexpr (enc == encoding::utf32) {
  286|  76.4k|        SCN_EXPECT(len == 1);
  287|  76.4k|        output = static_cast<char32_t>(input[0]);
  288|  76.4k|    }
  289|       |
  290|  76.4k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.67k, False: 72.7k]
  |  |  ------------------
  ------------------
  291|  3.67k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  3.67k|                detail::invalid_code_point};
  293|  3.67k|    }
  294|       |
  295|  72.7k|    return {input.begin() + len, output};
  296|  76.4k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  9.51k|{
  248|  9.51k|    auto it = input.begin();
  249|  82.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 80.5k, False: 2.33k]
  ------------------
  250|  80.5k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 7.18k, False: 73.3k]
  ------------------
  251|  7.18k|            break;
  252|  7.18k|        }
  253|  80.5k|    }
  254|       |
  255|  9.51k|    return it;
  256|  9.51k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  55.4M|{
  110|  55.4M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  55.4M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  4.01M|{
  449|  4.01M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 4.01M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  4.01M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  4.01M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  4.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  4.01M|                    input.size() * sizeof(SourceCharT));
  457|  4.01M|        return input.size();
  458|  4.01M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  8.04M|{
   29|       |    // Pattern_White_Space property
   30|  8.04M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 8.02M, False: 18.0k]
  |  Branch (30:27): [True: 3.94M, False: 4.08M]
  ------------------
   31|  8.04M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 49.0k, False: 4.05M]
  ------------------
   32|  8.04M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 4.21k, False: 4.05M]
  ------------------
   33|  8.04M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 564, False: 4.05M]
  ------------------
   34|  8.04M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 698, False: 4.05M]
  ------------------
   35|  8.04M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 870, False: 4.04M]
  ------------------
   36|  8.04M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 4.04M]
  ------------------
   37|  8.04M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  8.71M|{
   58|  8.71M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  8.71M|        static_cast<unsigned char>(ch))];
   60|  8.71M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  4.27M|{
   92|  4.27M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  4.27M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  2.96M|    {
   57|  2.96M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  8.57M|    {
   61|  8.57M|        return m_current;
   62|  8.57M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  5.60M|    {
   66|  5.60M|        return m_range.end();
   67|  5.60M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  2.72M|    {
   81|  2.72M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  2.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  2.72M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  2.72M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 2.72M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  2.72M|        }
   87|  2.72M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  2.72M|    static_cast<    \
  |  |  247|  2.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  2.72M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  2.88M|    {
   71|  2.88M|        return ranges::subrange{begin(), end()};
   72|  2.88M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  2.77M|    {
   57|  2.77M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  7.75M|    {
   61|  7.75M|        return m_current;
   62|  7.75M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  4.97M|    {
   66|  4.97M|        return m_range.end();
   67|  4.97M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  2.34M|    {
   81|  2.34M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  2.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  2.34M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  2.34M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 2.34M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  2.34M|        }
   87|  2.34M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  2.34M|    static_cast<    \
  |  |  247|  2.34M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  2.34M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  2.63M|    {
   71|  2.63M|        return ranges::subrange{begin(), end()};
   72|  2.63M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   347k|    {
  205|   347k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   347k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   173k|    {
  196|   173k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   173k|              cvref<T> obj = *get<T>(fn);
  187|   173k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   173k|                  obj(static_cast<decltype(args)>(args)...);
  189|   173k|              }
  190|   173k|              else {
  191|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   173k|              }
  193|   173k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   173k|    {
  126|   173k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   173k|            return static_cast<T*>(s.m_cp);
  128|   173k|        }
  129|   173k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   173k|            return static_cast<T*>(s.m_p);
  131|   173k|        }
  132|   173k|        else {
  133|   173k|            return reinterpret_cast<T*>(s.m_fp);
  134|   173k|        }
  135|   173k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   173k|        {
  104|   173k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  15.9M|    {
  205|  15.9M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  15.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  15.9M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  3.99M|    {
  196|  3.99M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  7.96M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.96M|              cvref<T> obj = *get<T>(fn);
  187|  7.96M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.96M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.96M|              }
  190|  7.96M|              else {
  191|  7.96M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.96M|              }
  193|  7.96M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  7.96M|    {
  126|  7.96M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.96M|            return static_cast<T*>(s.m_cp);
  128|  7.96M|        }
  129|  7.96M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.96M|            return static_cast<T*>(s.m_p);
  131|  7.96M|        }
  132|  7.96M|        else {
  133|  7.96M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.96M|        }
  135|  7.96M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  3.99M|        {
  104|  3.99M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   173k|    {
  196|   173k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   173k|              cvref<T> obj = *get<T>(fn);
  187|   173k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   173k|                  obj(static_cast<decltype(args)>(args)...);
  189|   173k|              }
  190|   173k|              else {
  191|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   173k|              }
  193|   173k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   173k|    {
  126|   173k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   173k|            return static_cast<T*>(s.m_cp);
  128|   173k|        }
  129|   173k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   173k|            return static_cast<T*>(s.m_p);
  131|   173k|        }
  132|   173k|        else {
  133|   173k|            return reinterpret_cast<T*>(s.m_fp);
  134|   173k|        }
  135|   173k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   173k|        {
  104|   173k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  3.64M|    {
  196|  3.64M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  7.60M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.60M|              cvref<T> obj = *get<T>(fn);
  187|  7.60M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.60M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.60M|              }
  190|  7.60M|              else {
  191|  7.60M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.60M|              }
  193|  7.60M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  7.60M|    {
  126|  7.60M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.60M|            return static_cast<T*>(s.m_cp);
  128|  7.60M|        }
  129|  7.60M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.60M|            return static_cast<T*>(s.m_p);
  131|  7.60M|        }
  132|  7.60M|        else {
  133|  7.60M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.60M|        }
  135|  7.60M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  3.64M|        {
  104|  3.64M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|   618k|    {
  205|   618k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   618k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   618k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   309k|    {
  196|   309k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   309k|              cvref<T> obj = *get<T>(fn);
  187|   309k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   309k|                  obj(static_cast<decltype(args)>(args)...);
  189|   309k|              }
  190|   309k|              else {
  191|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   309k|              }
  193|   309k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|   309k|    {
  126|   309k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   309k|            return static_cast<T*>(s.m_cp);
  128|   309k|        }
  129|   309k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   309k|            return static_cast<T*>(s.m_p);
  131|   309k|        }
  132|   309k|        else {
  133|   309k|            return reinterpret_cast<T*>(s.m_fp);
  134|   309k|        }
  135|   309k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   309k|        {
  104|   309k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   356k|    {
  196|   356k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   356k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   356k|              cvref<T> obj = *get<T>(fn);
  187|   356k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   356k|                  obj(static_cast<decltype(args)>(args)...);
  189|   356k|              }
  190|   356k|              else {
  191|   356k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   356k|              }
  193|   356k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   356k|    {
  126|   356k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   356k|            return static_cast<T*>(s.m_cp);
  128|   356k|        }
  129|   356k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   356k|            return static_cast<T*>(s.m_p);
  131|   356k|        }
  132|   356k|        else {
  133|   356k|            return reinterpret_cast<T*>(s.m_fp);
  134|   356k|        }
  135|   356k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   356k|        {
  104|   356k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   309k|    {
  196|   309k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   309k|              cvref<T> obj = *get<T>(fn);
  187|   309k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   309k|                  obj(static_cast<decltype(args)>(args)...);
  189|   309k|              }
  190|   309k|              else {
  191|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   309k|              }
  193|   309k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|   309k|    {
  126|   309k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   309k|            return static_cast<T*>(s.m_cp);
  128|   309k|        }
  129|   309k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   309k|            return static_cast<T*>(s.m_p);
  131|   309k|        }
  132|   309k|        else {
  133|   309k|            return reinterpret_cast<T*>(s.m_fp);
  134|   309k|        }
  135|   309k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   309k|        {
  104|   309k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  54.1k|{
   44|  54.1k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  54.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  54.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  54.1k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  35.0M|{
   30|  35.0M|    return e != eof_error::good;
   31|  35.0M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   157k|{
   91|   157k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   157k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  8.24M|    {
   69|  8.24M|        return a.m_code == b.m_code;
   70|  8.24M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  38.4M|    {
   55|  38.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  38.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  38.4M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   483k|    return [code, msg](parse_error err) {
  115|   483k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   483k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   483k|{
  100|   483k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 483k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   483k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 483k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   483k|    return scan_error{code, msg};
  109|   483k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   483k|{
  114|   483k|    return [code, msg](parse_error err) {
  115|   483k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   483k|    };
  117|   483k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.86M|{
  587|  1.86M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.86M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   133k|{
  595|   133k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   133k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
  597|      0|        source.sync(*n);
  598|      0|    }
  599|   133k|    else {
  600|   133k|        source.sync_all();
  601|   133k|    }
  602|   133k|    return n;
  603|   133k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  1.73M|{
  611|  1.73M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  1.73M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   237k|{
  619|   237k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   237k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   237k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
  621|      0|        source.sync(*n);
  622|      0|    }
  623|   237k|    else {
  624|   237k|        source.sync_all();
  625|   237k|    }
  626|   237k|    return n;
  627|   237k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.86M|{
  544|  1.86M|    return vscan_internal(source, format, args);
  545|  1.86M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   133k|{
  550|   133k|    auto n = vscan_internal(source, format, args);
  551|   133k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
  552|      0|        source.sync(*n);
  553|      0|    }
  554|   133k|    else {
  555|   133k|        source.sync_all();
  556|   133k|    }
  557|   133k|    return n;
  558|   133k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  1.73M|{
  564|  1.73M|    return vscan_internal(source, format, args);
  565|  1.73M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   237k|{
  570|   237k|    auto n = vscan_internal(source, format, args);
  571|   237k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   237k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
  572|      0|        source.sync(*n);
  573|      0|    }
  574|   237k|    else {
  575|   237k|        source.sync_all();
  576|   237k|    }
  577|   237k|    return n;
  578|   237k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   385k|{
  654|   385k|    return vscan_value_internal(source, arg);
  655|   385k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  13.3k|{
  659|  13.3k|    auto n = vscan_value_internal(source, arg);
  660|  13.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  13.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 13.3k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  13.3k|    else {
  664|  13.3k|        source.sync_all();
  665|  13.3k|    }
  666|  13.3k|    return n;
  667|  13.3k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   344k|{
  673|   344k|    return vscan_value_internal(source, arg);
  674|   344k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  23.7k|{
  679|  23.7k|    auto n = vscan_value_internal(source, arg);
  680|  23.7k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  23.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 23.7k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  23.7k|    else {
  684|  23.7k|        source.sync_all();
  685|  23.7k|    }
  686|  23.7k|    return n;
  687|  23.7k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   267k|{
  476|   267k|    const auto argcount = args.size();
  477|   267k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 26.7k, False: 240k]
  |  Branch (477:60): [True: 26.7k, False: 0]
  ------------------
  478|  26.7k|        auto arg = args.get(0);
  479|  26.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  26.7k|    static_cast<    \
  |  |  247|  26.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  26.7k|    }
  481|       |
  482|   240k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 240k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   240k|    SCN_UNLIKELY_ATTR
  490|   240k|    {
  491|   240k|        auto handler = format_handler<false, CharT>{
  492|   240k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   240k|    static_cast<    \
  |  |  247|   240k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   240k|    static_cast<    \
  |  |  247|   240k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   240k|        return vscan_parse_format_string(format, handler);
  494|   240k|    }
  495|   240k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  4.00M|{
   36|  4.00M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 3.20M, False: 796k]
  ------------------
   37|  3.20M|        return false;
   38|  3.20M|    }
   39|   796k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 796k, False: 0]
  |  Branch (39:39): [True: 796k, False: 0]
  ------------------
   40|  4.00M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  40.1k|{
   69|  40.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  40.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 40.1k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  40.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  40.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 40.1k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  40.1k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  40.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  40.1k|    static_cast<    \
  |  |  247|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  40.1k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  40.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  40.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 40.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  40.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  40.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  40.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  40.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  40.1k|    }                                                  \
  |  |  |  |   70|  40.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  40.1k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  2.96M|    {
  314|  2.96M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  6.40M|    {
  133|  6.40M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.40M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  6.40M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  2.96M|    {
  264|  2.96M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  2.96M|{
  441|  2.96M|    const auto beg = handler.get_ctx().begin();
  442|  2.96M|    detail::parse_format_string<false>(format, handler);
  443|  2.96M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 240k, False: 2.72M]
  |  |  ------------------
  ------------------
  444|   240k|        return unexpected(handler.error);
  445|   240k|    }
  446|  2.72M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  2.96M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  20.1M|    {
  425|  20.1M|        return ctx.get();
  426|  20.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  20.1M|    {
  268|  20.1M|        return contiguous_ctx;
  269|  20.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  5.68M|    {
  318|  5.68M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 5.68M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  5.68M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  2.96M|{
   92|  2.96M|    auto arg = ctx.arg(id);
   93|  2.96M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.96M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  2.96M|    return arg;
   97|  2.96M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  6.40M|    {
  208|  6.40M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.40M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  6.40M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.40M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  6.40M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  6.40M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.40M, False: 0]
  |  |  ------------------
  ------------------
  218|  6.40M|            visited_args_lower64 |= (1ull << id);
  219|  6.40M|            return;
  220|  6.40M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  6.40M|    {
  193|  6.40M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.40M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  6.40M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  6.40M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.40M, False: 0]
  |  |  ------------------
  ------------------
  199|  6.40M|            return (visited_args_lower64 >> id) & 1ull;
  200|  6.40M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  6.40M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   891k|    {
  177|   891k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   891k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 891k, False: 0]
  |  |  ------------------
  ------------------
  178|   891k|            error = err;
  179|   891k|        }
  180|   891k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  2.96M|    {
  347|  2.96M|        return parse_ctx.next_arg_id();
  348|  2.96M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  2.96M|    {
  388|  2.96M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  2.96M|        set_arg_as_visited(arg_id);
  390|       |
  391|  2.96M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 2.96M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  2.96M|        auto specs = detail::format_specs{};
  401|  2.96M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  2.96M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  2.96M|            arg.type()};
  404|       |
  405|  2.96M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  2.96M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 2.96M]
  |  Branch (406:29): [True: 53.4k, False: 2.91M]
  ------------------
  407|  53.4k|            SCN_UNLIKELY_ATTR
  408|  53.4k|            on_error("Missing '}' in format string");
  409|  53.4k|            return parse_ctx.begin();
  410|  53.4k|        }
  411|  2.91M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.7k, False: 2.88M]
  |  |  ------------------
  ------------------
  412|  26.7k|            return parse_ctx.begin();
  413|  26.7k|        }
  414|  2.88M|        parse_ctx.advance_to(begin);
  415|       |
  416|  2.88M|        on_visit_scan_arg(
  417|  2.88M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  2.88M|                                           get_ctx().locale()},
  419|  2.88M|            arg);
  420|  2.88M|        return parse_ctx.begin();
  421|  2.91M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  2.96M|    {
  112|  2.96M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  2.88M|    {
  359|  2.88M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 2.88M]
  |  Branch (359:23): [True: 0, False: 2.88M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  2.88M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  2.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  2.88M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  2.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 160k, False: 2.72M]
  |  |  ------------------
  ------------------
  366|   160k|            on_error(r.error());
  367|   160k|        }
  368|  2.72M|        else {
  369|  2.72M|            get_ctx().advance_to(*r);
  370|  2.72M|        }
  371|  2.88M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   743k|    {
  172|   743k|        SCN_UNLIKELY_ATTR
  173|   743k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   743k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  6.40M|    {
  140|  6.40M|        {
  141|  6.40M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 6.40M]
  ------------------
  142|  6.40M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 6.40M]
  ------------------
  143|  6.40M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  6.40M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  6.40M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 6.40M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  6.40M|        }
  150|       |
  151|  6.40M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 6.40M, False: 0]
  ------------------
  152|  6.40M|            return;
  153|  6.40M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  6.40M|    {
  188|  6.40M|        return error;
  189|  6.40M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  18.7M|    {
  184|  18.7M|        return static_cast<bool>(error);
  185|  18.7M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   240k|    {
  314|   240k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   240k|    {
  241|   240k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   240k|{
  441|   240k|    const auto beg = handler.get_ctx().begin();
  442|   240k|    detail::parse_format_string<false>(format, handler);
  443|   240k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 240k, False: 0]
  |  |  ------------------
  ------------------
  444|   240k|        return unexpected(handler.error);
  445|   240k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   240k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.04M|    {
  425|  1.04M|        return ctx.get();
  426|  1.04M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.04M|    {
  245|  1.04M|        return ctx;
  246|  1.04M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   240k|    {
  318|   240k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 240k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   240k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   240k|{
   92|   240k|    auto arg = ctx.arg(id);
   93|   240k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   240k|    return arg;
   97|   240k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   240k|    {
  347|   240k|        return parse_ctx.next_arg_id();
  348|   240k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   240k|    {
  388|   240k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   240k|        set_arg_as_visited(arg_id);
  390|       |
  391|   240k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 240k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   240k|        auto specs = detail::format_specs{};
  401|   240k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   240k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   240k|            arg.type()};
  404|       |
  405|   240k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   240k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 240k]
  |  Branch (406:29): [True: 53.4k, False: 187k]
  ------------------
  407|  53.4k|            SCN_UNLIKELY_ATTR
  408|  53.4k|            on_error("Missing '}' in format string");
  409|  53.4k|            return parse_ctx.begin();
  410|  53.4k|        }
  411|   187k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.7k, False: 160k]
  |  |  ------------------
  ------------------
  412|  26.7k|            return parse_ctx.begin();
  413|  26.7k|        }
  414|   160k|        parse_ctx.advance_to(begin);
  415|       |
  416|   160k|        on_visit_scan_arg(
  417|   160k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   160k|                                           get_ctx().locale()},
  419|   160k|            arg);
  420|   160k|        return parse_ctx.begin();
  421|   187k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   240k|    {
  112|   240k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   160k|    {
  359|   160k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 160k]
  |  Branch (359:23): [True: 0, False: 160k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   160k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   160k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 160k, False: 0]
  |  |  ------------------
  ------------------
  366|   160k|            on_error(r.error());
  367|   160k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   160k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  3.73M|{
  456|  3.73M|    const auto argcount = args.size();
  457|  3.73M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 770k, False: 2.96M]
  |  Branch (457:60): [True: 770k, False: 0]
  ------------------
  458|   770k|        auto arg = args.get(0);
  459|   770k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   770k|    static_cast<    \
  |  |  247|   770k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   770k|    }
  461|       |
  462|  2.96M|    auto handler = format_handler<true, CharT>{
  463|  2.96M|        ranges::subrange<const CharT*>{source.data(),
  464|  2.96M|                                       source.data() + source.size()},
  465|  2.96M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.96M|    static_cast<    \
  |  |  247|  2.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.96M|    static_cast<    \
  |  |  247|  2.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  2.96M|    return vscan_parse_format_string(format, handler);
  467|  3.73M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.15M|{
   49|  1.15M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.15M|    auto reader =
   55|  1.15M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.15M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.15M|                                           source.data() + source.size()},
   58|  1.15M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.15M|    static_cast<    \
  |  |  247|  1.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.15M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.15M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.15M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.15M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 40.1k, False: 1.11M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  40.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  40.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  40.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  40.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  40.1k|    }                                                  \
  |  |  |  |   70|  1.15M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.11M|    return ranges::distance(source.data(), it);
   61|  1.15M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  3.46M|{
  456|  3.46M|    const auto argcount = args.size();
  457|  3.46M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 689k, False: 2.77M]
  |  Branch (457:60): [True: 689k, False: 0]
  ------------------
  458|   689k|        auto arg = args.get(0);
  459|   689k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   689k|    static_cast<    \
  |  |  247|   689k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   689k|    }
  461|       |
  462|  2.77M|    auto handler = format_handler<true, CharT>{
  463|  2.77M|        ranges::subrange<const CharT*>{source.data(),
  464|  2.77M|                                       source.data() + source.size()},
  465|  2.77M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.77M|    static_cast<    \
  |  |  247|  2.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.77M|    static_cast<    \
  |  |  247|  2.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  2.77M|    return vscan_parse_format_string(format, handler);
  467|  3.46M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  3.93M|{
   36|  3.93M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 3.20M, False: 736k]
  ------------------
   37|  3.20M|        return false;
   38|  3.20M|    }
   39|   736k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 736k, False: 0]
  |  Branch (39:39): [True: 736k, False: 0]
  ------------------
   40|  3.93M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.03M|{
   49|  1.03M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.03M|    auto reader =
   55|  1.03M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.03M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.03M|                                           source.data() + source.size()},
   58|  1.03M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.03M|    static_cast<    \
  |  |  247|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.03M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.03M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.03M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.03M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 71.3k, False: 962k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  71.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  71.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  71.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  71.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  71.3k|    }                                                  \
  |  |  |  |   70|  1.03M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   962k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   962k|    return ranges::distance(source.data(), it);
   61|  1.03M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  2.77M|    {
  314|  2.77M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  2.77M|    {
  264|  2.77M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  2.77M|{
  441|  2.77M|    const auto beg = handler.get_ctx().begin();
  442|  2.77M|    detail::parse_format_string<false>(format, handler);
  443|  2.77M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 428k, False: 2.34M]
  |  |  ------------------
  ------------------
  444|   428k|        return unexpected(handler.error);
  445|   428k|    }
  446|  2.34M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  2.77M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  18.2M|    {
  425|  18.2M|        return ctx.get();
  426|  18.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  18.2M|    {
  268|  18.2M|        return contiguous_ctx;
  269|  18.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  5.12M|    {
  318|  5.12M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 5.12M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  5.12M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  2.77M|{
   92|  2.77M|    auto arg = ctx.arg(id);
   93|  2.77M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.77M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  2.77M|    return arg;
   97|  2.77M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  2.77M|    {
  347|  2.77M|        return parse_ctx.next_arg_id();
  348|  2.77M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  2.77M|    {
  388|  2.77M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  2.77M|        set_arg_as_visited(arg_id);
  390|       |
  391|  2.77M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 2.77M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  2.77M|        auto specs = detail::format_specs{};
  401|  2.77M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  2.77M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  2.77M|            arg.type()};
  404|       |
  405|  2.77M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  2.77M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 2.77M]
  |  Branch (406:29): [True: 95.1k, False: 2.67M]
  ------------------
  407|  95.1k|            SCN_UNLIKELY_ATTR
  408|  95.1k|            on_error("Missing '}' in format string");
  409|  95.1k|            return parse_ctx.begin();
  410|  95.1k|        }
  411|  2.67M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.5k, False: 2.63M]
  |  |  ------------------
  ------------------
  412|  47.5k|            return parse_ctx.begin();
  413|  47.5k|        }
  414|  2.63M|        parse_ctx.advance_to(begin);
  415|       |
  416|  2.63M|        on_visit_scan_arg(
  417|  2.63M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  2.63M|                                           get_ctx().locale()},
  419|  2.63M|            arg);
  420|  2.63M|        return parse_ctx.begin();
  421|  2.67M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  2.77M|    {
  112|  2.77M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  2.63M|    {
  359|  2.63M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 2.63M]
  |  Branch (359:23): [True: 0, False: 2.63M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  2.63M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  2.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  2.63M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  2.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 285k, False: 2.34M]
  |  |  ------------------
  ------------------
  366|   285k|            on_error(r.error());
  367|   285k|        }
  368|  2.34M|        else {
  369|  2.34M|            get_ctx().advance_to(*r);
  370|  2.34M|        }
  371|  2.63M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   475k|{
  476|   475k|    const auto argcount = args.size();
  477|   475k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 47.5k, False: 428k]
  |  Branch (477:60): [True: 47.5k, False: 0]
  ------------------
  478|  47.5k|        auto arg = args.get(0);
  479|  47.5k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  47.5k|    static_cast<    \
  |  |  247|  47.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  47.5k|    }
  481|       |
  482|   428k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 428k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   428k|    SCN_UNLIKELY_ATTR
  490|   428k|    {
  491|   428k|        auto handler = format_handler<false, CharT>{
  492|   428k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   428k|    static_cast<    \
  |  |  247|   428k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   428k|    static_cast<    \
  |  |  247|   428k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   428k|        return vscan_parse_format_string(format, handler);
  494|   428k|    }
  495|   428k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  71.3k|{
   69|  71.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 71.3k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  71.3k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  71.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 71.3k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  71.3k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  71.3k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  71.3k|    static_cast<    \
  |  |  247|  71.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  71.3k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  71.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 71.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  71.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  71.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  71.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  71.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  71.3k|    }                                                  \
  |  |  |  |   70|  71.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  71.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   428k|    {
  314|   428k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   428k|    {
  241|   428k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   428k|{
  441|   428k|    const auto beg = handler.get_ctx().begin();
  442|   428k|    detail::parse_format_string<false>(format, handler);
  443|   428k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 428k, False: 0]
  |  |  ------------------
  ------------------
  444|   428k|        return unexpected(handler.error);
  445|   428k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   428k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  1.85M|    {
  425|  1.85M|        return ctx.get();
  426|  1.85M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  1.85M|    {
  245|  1.85M|        return ctx;
  246|  1.85M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   428k|    {
  318|   428k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 428k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   428k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   428k|{
   92|   428k|    auto arg = ctx.arg(id);
   93|   428k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   428k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 428k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   428k|    return arg;
   97|   428k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   428k|    {
  347|   428k|        return parse_ctx.next_arg_id();
  348|   428k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   428k|    {
  388|   428k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   428k|        set_arg_as_visited(arg_id);
  390|       |
  391|   428k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 428k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   428k|        auto specs = detail::format_specs{};
  401|   428k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   428k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   428k|            arg.type()};
  404|       |
  405|   428k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   428k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 428k]
  |  Branch (406:29): [True: 95.1k, False: 333k]
  ------------------
  407|  95.1k|            SCN_UNLIKELY_ATTR
  408|  95.1k|            on_error("Missing '}' in format string");
  409|  95.1k|            return parse_ctx.begin();
  410|  95.1k|        }
  411|   333k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.5k, False: 285k]
  |  |  ------------------
  ------------------
  412|  47.5k|            return parse_ctx.begin();
  413|  47.5k|        }
  414|   285k|        parse_ctx.advance_to(begin);
  415|       |
  416|   285k|        on_visit_scan_arg(
  417|   285k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   285k|                                           get_ctx().locale()},
  419|   285k|            arg);
  420|   285k|        return parse_ctx.begin();
  421|   333k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   428k|    {
  112|   428k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   285k|    {
  359|   285k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 285k]
  |  Branch (359:23): [True: 0, False: 285k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   285k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   285k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 285k, False: 0]
  |  |  ------------------
  ------------------
  366|   285k|            on_error(r.error());
  367|   285k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   285k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   385k|{
  502|   385k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   385k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   385k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  13.3k|{
  502|  13.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  13.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   344k|{
  502|   344k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   344k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  23.7k|{
  502|  23.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  23.7k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  2.22k|{
   52|  2.22k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  2.22k|    std::copy(data.begin(), data.end(),
   57|  2.22k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.22k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.22k|    const auto wsv_reinterpret_size =
   62|  2.22k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 118, False: 2.11k]
  ------------------
   63|  2.22k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.22k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  2.22k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.22k|    std::wstring_view wsv_transcoded;
   69|  2.22k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 1.73k, False: 491]
  ------------------
   70|  1.73k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  1.73k|        else {
   79|  1.73k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  1.73k|            wstring_buffer_transcoded_wide.resize(size);
   81|  1.73k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  1.73k|                sv.data(), sv.size(),
   83|  1.73k|                reinterpret_cast<char32_t*>(
   84|  1.73k|                    wstring_buffer_transcoded_wide.data()));
   85|  1.73k|        }
   86|  1.73k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  1.73k|    }
   88|       |
   89|  2.22k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  2.22k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.22k|{
  140|  2.22k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.22k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.22k|    buf.resize(sizeof...(Args));
  143|  2.22k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.22k|    return {buf.data(), buf.size()};
  145|  2.22k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  2.22k|{
  126|  2.22k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.22k|        return format_string_view_buffer;
  128|  2.22k|    }
  129|  2.22k|    else {
  130|  2.22k|        return wformat_string_view_buffer;
  131|  2.22k|    }
  132|  2.22k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.22k|{
  200|  2.22k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.22k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.22k|                                   format_strings);
  203|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|   256k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   256k|            auto result = scn::scan<T>(
  156|   256k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   256k|                scn::runtime_format(f));
  158|   256k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 234k]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|   234k|            it = result->begin();
  162|   234k|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|   256k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   256k|            auto result = scn::scan<T>(
  170|   256k|                global_locale,
  171|   256k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   256k|                scn::runtime_format(f));
  173|   256k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 234k]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|   234k|            it = result->begin();
  177|   234k|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  55.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  55.2k|            auto result = scn::scan_value<T>(
  185|  55.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  55.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 52.9k]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|  52.9k|            it = result->begin();
  190|  52.9k|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|   257k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   257k|            auto result = scn::scan<T>(
  156|   257k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   257k|                scn::runtime_format(f));
  158|   257k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 235k]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|   235k|            it = result->begin();
  162|   235k|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|   257k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   257k|            auto result = scn::scan<T>(
  170|   257k|                global_locale,
  171|   257k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   257k|                scn::runtime_format(f));
  173|   257k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 235k]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|   235k|            it = result->begin();
  177|   235k|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  54.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  54.6k|            auto result = scn::scan_value<T>(
  185|  54.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  54.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 52.4k]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|  52.4k|            it = result->begin();
  190|  52.4k|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|   366k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   366k|            auto result = scn::scan<T>(
  156|   366k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   366k|                scn::runtime_format(f));
  158|   366k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 344k]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|   344k|            it = result->begin();
  162|   344k|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|   366k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   366k|            auto result = scn::scan<T>(
  170|   366k|                global_locale,
  171|   366k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   366k|                scn::runtime_format(f));
  173|   366k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 344k]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|   344k|            it = result->begin();
  177|   344k|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  74.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  74.7k|            auto result = scn::scan_value<T>(
  185|  74.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  74.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 72.4k]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|  72.4k|            it = result->begin();
  190|  72.4k|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|   304k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   304k|            auto result = scn::scan<T>(
  156|   304k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   304k|                scn::runtime_format(f));
  158|   304k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 282k]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|   282k|            it = result->begin();
  162|   282k|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|   304k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   304k|            auto result = scn::scan<T>(
  170|   304k|                global_locale,
  171|   304k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   304k|                scn::runtime_format(f));
  173|   304k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 282k]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|   282k|            it = result->begin();
  177|   282k|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  61.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  61.9k|            auto result = scn::scan_value<T>(
  185|  61.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  61.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 59.7k]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|  59.7k|            it = result->begin();
  190|  59.7k|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|   374k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   374k|            auto result = scn::scan<T>(
  156|   374k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   374k|                scn::runtime_format(f));
  158|   374k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 351k]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|   351k|            it = result->begin();
  162|   351k|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|   374k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   374k|            auto result = scn::scan<T>(
  170|   374k|                global_locale,
  171|   374k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   374k|                scn::runtime_format(f));
  173|   374k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 351k]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|   351k|            it = result->begin();
  177|   351k|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  76.1k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  76.1k|            auto result = scn::scan_value<T>(
  185|  76.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  76.1k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 73.8k]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|  73.8k|            it = result->begin();
  190|  73.8k|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|   306k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   306k|            auto result = scn::scan<T>(
  156|   306k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   306k|                scn::runtime_format(f));
  158|   306k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 284k]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|   284k|            it = result->begin();
  162|   284k|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|   306k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   306k|            auto result = scn::scan<T>(
  170|   306k|                global_locale,
  171|   306k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   306k|                scn::runtime_format(f));
  173|   306k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 284k]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|   284k|            it = result->begin();
  177|   284k|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  62.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  62.3k|            auto result = scn::scan_value<T>(
  185|  62.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  62.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 60.1k]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|  60.1k|            it = result->begin();
  190|  60.1k|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|  22.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  22.2k|            auto result = scn::scan<T>(
  156|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  22.2k|                scn::runtime_format(f));
  158|  22.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 0]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|  22.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  22.2k|            auto result = scn::scan<T>(
  170|  22.2k|                global_locale,
  171|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  22.2k|                scn::runtime_format(f));
  173|  22.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 0]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  2.22k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.22k|            auto result = scn::scan_value<T>(
  185|  2.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.22k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 0]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|  22.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  22.2k|            auto result = scn::scan<T>(
  156|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  22.2k|                scn::runtime_format(f));
  158|  22.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 0]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|  22.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  22.2k|            auto result = scn::scan<T>(
  170|  22.2k|                global_locale,
  171|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  22.2k|                scn::runtime_format(f));
  173|  22.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 0]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  2.22k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.22k|            auto result = scn::scan_value<T>(
  185|  2.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.22k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 0]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|  22.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  22.2k|            auto result = scn::scan<T>(
  156|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  22.2k|                scn::runtime_format(f));
  158|  22.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 0]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|  22.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  22.2k|            auto result = scn::scan<T>(
  170|  22.2k|                global_locale,
  171|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  22.2k|                scn::runtime_format(f));
  173|  22.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 0]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  2.22k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.22k|            auto result = scn::scan_value<T>(
  185|  2.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.22k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 0]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|  22.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  22.2k|            auto result = scn::scan<T>(
  156|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  22.2k|                scn::runtime_format(f));
  158|  22.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 0]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|  22.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  22.2k|            auto result = scn::scan<T>(
  170|  22.2k|                global_locale,
  171|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  22.2k|                scn::runtime_format(f));
  173|  22.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 0]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  2.22k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.22k|            auto result = scn::scan_value<T>(
  185|  2.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.22k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 0]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|  22.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  22.2k|            auto result = scn::scan<T>(
  156|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  22.2k|                scn::runtime_format(f));
  158|  22.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 0]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|  22.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  22.2k|            auto result = scn::scan<T>(
  170|  22.2k|                global_locale,
  171|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  22.2k|                scn::runtime_format(f));
  173|  22.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 0]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  2.22k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.22k|            auto result = scn::scan_value<T>(
  185|  2.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.22k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 0]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.22k|{
  151|       |    // Regular scan
  152|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 22.2k, False: 2.22k]
  ------------------
  153|  22.2k|        auto it = scn::ranges::begin(source);
  154|  22.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  22.2k|            auto result = scn::scan<T>(
  156|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  22.2k|                scn::runtime_format(f));
  158|  22.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 22.2k, False: 0]
  ------------------
  159|  22.2k|                break;
  160|  22.2k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  22.2k|    }
  164|       |
  165|       |    // scan localized
  166|  22.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 22.2k, False: 2.22k]
  ------------------
  167|  22.2k|        auto it = scn::ranges::begin(source);
  168|  22.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  22.2k|            auto result = scn::scan<T>(
  170|  22.2k|                global_locale,
  171|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  22.2k|                scn::runtime_format(f));
  173|  22.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 22.2k, False: 0]
  ------------------
  174|  22.2k|                break;
  175|  22.2k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  22.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.22k|    {
  182|  2.22k|        auto it = scn::ranges::begin(source);
  183|  2.22k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.22k|            auto result = scn::scan_value<T>(
  185|  2.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.22k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.22k, False: 0]
  ------------------
  187|  2.22k|                break;
  188|  2.22k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.22k|    }
  192|  2.22k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  2.22k|{
  109|  2.22k|    using char_type = ranges::range_value_t<Source>;
  110|  2.22k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.22k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.22k|              std::back_inserter(deque));
  113|  2.22k|    return deque;
  114|  2.22k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  2.22k|{
   98|  2.22k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.22k|        return noncontiguous_buffer;
  100|  2.22k|    }
  101|  2.22k|    else {
  102|  2.22k|        return wnoncontiguous_buffer;
  103|  2.22k|    }
  104|  2.22k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.22k|{
  140|  2.22k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.22k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.22k|    buf.resize(sizeof...(Args));
  143|  2.22k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.22k|    return {buf.data(), buf.size()};
  145|  2.22k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  2.22k|{
  126|  2.22k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.22k|        return format_string_view_buffer;
  128|  2.22k|    }
  129|  2.22k|    else {
  130|  2.22k|        return wformat_string_view_buffer;
  131|  2.22k|    }
  132|  2.22k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  3.96k|{
  200|  3.96k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  3.96k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  3.96k|                                   format_strings);
  203|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|   242k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   242k|            auto result = scn::scan<T>(
  156|   242k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   242k|                scn::runtime_format(f));
  158|   242k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 202k]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|   202k|            it = result->begin();
  162|   202k|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|   242k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   242k|            auto result = scn::scan<T>(
  170|   242k|                global_locale,
  171|   242k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   242k|                scn::runtime_format(f));
  173|   242k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 202k]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|   202k|            it = result->begin();
  177|   202k|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  49.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  49.7k|            auto result = scn::scan_value<T>(
  185|  49.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  49.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 45.7k]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|  45.7k|            it = result->begin();
  190|  45.7k|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|   243k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   243k|            auto result = scn::scan<T>(
  156|   243k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   243k|                scn::runtime_format(f));
  158|   243k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 203k]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|   203k|            it = result->begin();
  162|   203k|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|   243k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   243k|            auto result = scn::scan<T>(
  170|   243k|                global_locale,
  171|   243k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   243k|                scn::runtime_format(f));
  173|   243k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 203k]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|   203k|            it = result->begin();
  177|   203k|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  48.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  48.9k|            auto result = scn::scan_value<T>(
  185|  48.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  48.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 45.0k]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|  45.0k|            it = result->begin();
  190|  45.0k|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|   334k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   334k|            auto result = scn::scan<T>(
  156|   334k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   334k|                scn::runtime_format(f));
  158|   334k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 295k]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|   295k|            it = result->begin();
  162|   295k|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|   334k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   334k|            auto result = scn::scan<T>(
  170|   334k|                global_locale,
  171|   334k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   334k|                scn::runtime_format(f));
  173|   334k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 295k]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|   295k|            it = result->begin();
  177|   295k|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  66.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  66.3k|            auto result = scn::scan_value<T>(
  185|  66.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  66.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 62.4k]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|  62.4k|            it = result->begin();
  190|  62.4k|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|   284k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   284k|            auto result = scn::scan<T>(
  156|   284k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   284k|                scn::runtime_format(f));
  158|   284k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 244k]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|   244k|            it = result->begin();
  162|   244k|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|   284k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   284k|            auto result = scn::scan<T>(
  170|   284k|                global_locale,
  171|   284k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   284k|                scn::runtime_format(f));
  173|   284k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 244k]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|   244k|            it = result->begin();
  177|   244k|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  55.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  55.8k|            auto result = scn::scan_value<T>(
  185|  55.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  55.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 51.8k]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|  51.8k|            it = result->begin();
  190|  51.8k|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|   340k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   340k|            auto result = scn::scan<T>(
  156|   340k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   340k|                scn::runtime_format(f));
  158|   340k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 300k]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|   300k|            it = result->begin();
  162|   300k|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|   340k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   340k|            auto result = scn::scan<T>(
  170|   340k|                global_locale,
  171|   340k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   340k|                scn::runtime_format(f));
  173|   340k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 300k]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|   300k|            it = result->begin();
  177|   300k|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  67.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  67.5k|            auto result = scn::scan_value<T>(
  185|  67.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  67.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 63.5k]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|  63.5k|            it = result->begin();
  190|  63.5k|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|   286k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   286k|            auto result = scn::scan<T>(
  156|   286k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   286k|                scn::runtime_format(f));
  158|   286k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 246k]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|   246k|            it = result->begin();
  162|   246k|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|   286k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   286k|            auto result = scn::scan<T>(
  170|   286k|                global_locale,
  171|   286k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   286k|                scn::runtime_format(f));
  173|   286k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 246k]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|   246k|            it = result->begin();
  177|   246k|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  56.1k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  56.1k|            auto result = scn::scan_value<T>(
  185|  56.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  56.1k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 52.1k]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|  52.1k|            it = result->begin();
  190|  52.1k|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|  39.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  39.6k|            auto result = scn::scan<T>(
  156|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.6k|                scn::runtime_format(f));
  158|  39.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 0]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|  39.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  39.6k|            auto result = scn::scan<T>(
  170|  39.6k|                global_locale,
  171|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  39.6k|                scn::runtime_format(f));
  173|  39.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 0]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  3.96k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.96k|            auto result = scn::scan_value<T>(
  185|  3.96k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.96k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 0]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|  39.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  39.6k|            auto result = scn::scan<T>(
  156|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.6k|                scn::runtime_format(f));
  158|  39.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 0]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|  39.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  39.6k|            auto result = scn::scan<T>(
  170|  39.6k|                global_locale,
  171|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  39.6k|                scn::runtime_format(f));
  173|  39.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 0]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  3.96k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.96k|            auto result = scn::scan_value<T>(
  185|  3.96k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.96k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 0]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|  39.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  39.6k|            auto result = scn::scan<T>(
  156|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.6k|                scn::runtime_format(f));
  158|  39.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 0]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|  39.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  39.6k|            auto result = scn::scan<T>(
  170|  39.6k|                global_locale,
  171|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  39.6k|                scn::runtime_format(f));
  173|  39.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 0]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  3.96k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.96k|            auto result = scn::scan_value<T>(
  185|  3.96k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.96k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 0]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|  39.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  39.6k|            auto result = scn::scan<T>(
  156|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.6k|                scn::runtime_format(f));
  158|  39.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 0]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|  39.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  39.6k|            auto result = scn::scan<T>(
  170|  39.6k|                global_locale,
  171|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  39.6k|                scn::runtime_format(f));
  173|  39.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 0]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  3.96k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.96k|            auto result = scn::scan_value<T>(
  185|  3.96k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.96k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 0]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|  39.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  39.6k|            auto result = scn::scan<T>(
  156|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.6k|                scn::runtime_format(f));
  158|  39.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 0]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|  39.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  39.6k|            auto result = scn::scan<T>(
  170|  39.6k|                global_locale,
  171|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  39.6k|                scn::runtime_format(f));
  173|  39.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 0]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  3.96k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.96k|            auto result = scn::scan_value<T>(
  185|  3.96k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.96k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 0]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  3.96k|{
  151|       |    // Regular scan
  152|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 39.6k, False: 3.96k]
  ------------------
  153|  39.6k|        auto it = scn::ranges::begin(source);
  154|  39.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  39.6k|            auto result = scn::scan<T>(
  156|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.6k|                scn::runtime_format(f));
  158|  39.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 39.6k, False: 0]
  ------------------
  159|  39.6k|                break;
  160|  39.6k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  39.6k|    }
  164|       |
  165|       |    // scan localized
  166|  39.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 39.6k, False: 3.96k]
  ------------------
  167|  39.6k|        auto it = scn::ranges::begin(source);
  168|  39.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  39.6k|            auto result = scn::scan<T>(
  170|  39.6k|                global_locale,
  171|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  39.6k|                scn::runtime_format(f));
  173|  39.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 39.6k, False: 0]
  ------------------
  174|  39.6k|                break;
  175|  39.6k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  39.6k|    }
  179|       |
  180|       |    // scan_value
  181|  3.96k|    {
  182|  3.96k|        auto it = scn::ranges::begin(source);
  183|  3.96k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  3.96k|            auto result = scn::scan_value<T>(
  185|  3.96k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  3.96k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 3.96k, False: 0]
  ------------------
  187|  3.96k|                break;
  188|  3.96k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  3.96k|    }
  192|  3.96k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  3.96k|{
  109|  3.96k|    using char_type = ranges::range_value_t<Source>;
  110|  3.96k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  3.96k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  3.96k|              std::back_inserter(deque));
  113|  3.96k|    return deque;
  114|  3.96k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  3.96k|{
   98|  3.96k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  3.96k|        return noncontiguous_buffer;
  100|  3.96k|    }
  101|  3.96k|    else {
  102|  3.96k|        return wnoncontiguous_buffer;
  103|  3.96k|    }
  104|  3.96k|}

LLVMFuzzerTestOneInput:
   59|  2.22k|{
   60|  2.22k|    scn::fuzz::run({data, size});
   61|  2.22k|    return 0;
   62|  2.22k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  2.22k|{
   36|  2.22k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.22k]
  |  Branch (36:42): [True: 0, False: 2.22k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.22k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   41|       |
   42|  2.22k|    auto f =
   43|  2.22k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  2.22k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  2.22k|    do_basic_run(sv, f);
   46|       |
   47|  2.22k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   48|  2.22k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  2.22k|                                          L"{:'}", L"{:'L}");
   50|  2.22k|    do_basic_run(wsv_reinterpret, wf);
   51|  2.22k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 1.73k, False: 491]
  ------------------
   52|  1.73k|        do_basic_run(wsv_transcode, wf);
   53|  1.73k|    }
   54|  2.22k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.22k|{
   25|  2.22k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.22k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.22k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.22k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.22k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.22k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.22k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.22k|{
   25|  2.22k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.22k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.22k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.22k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.22k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.22k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.22k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  3.96k|{
   25|  3.96k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.96k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.96k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.96k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.96k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.96k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.96k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  3.96k|{
   25|  3.96k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  3.96k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  3.96k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  3.96k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  3.96k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  3.96k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  3.96k|}

