_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
 1039|   461k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
 1039|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
 1039|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4085|   862k|{
 4086|   862k|    if constexpr (sizeof(U) == 1) {
 4087|   862k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|       |    else {
 4093|       |        // utf-32
 4094|       |        static_assert(sizeof(U) == 4);
 4095|       |        SCN_UNUSED(ch);
 4096|       |        return 1;
 4097|       |    }
 4098|   862k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4049|   862k|{
 4050|   862k|    static_assert(sizeof(U8) == 1);
 4051|       |
 4052|   862k|    SCN_GCC_COMPAT_PUSH
 4053|   862k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4054|   862k|    constexpr char lengths[] =
 4055|   862k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4056|   862k|        "\1\1\1\1\1\1\1\1"
 4057|   862k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4058|       |                            // byte
 4059|   862k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4060|   862k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4061|   862k|        "\4";               // highest bits 11110 -> 4-byte cp
 4062|   862k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4063|   862k|    SCN_GCC_COMPAT_POP
 4064|   862k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|   845k|{
 4292|   845k|    if constexpr (sizeof(CharT) == 1) {
 4293|   845k|        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|       |    else {
 4299|       |        SCN_EXPECT(input.size() == 1);
 4300|       |        auto cp = static_cast<char32_t>(input.front());
 4301|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4302|       |            return invalid_code_point;
 4303|       |        }
 4304|       |        return cp;
 4305|       |    }
 4306|   845k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4104|   845k|{
 4105|   845k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|   845k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   845k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4106|       |
 4107|   845k|    const auto is_trailing_code_unit = [](char ch) {
 4108|   845k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|   845k|    };
 4110|       |
 4111|   845k|    if (input.size() == 1) {
  ------------------
  |  Branch (4111:9): [True: 836k, False: 8.97k]
  ------------------
 4112|   836k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4112:13): [True: 1.01k, False: 835k]
  ------------------
 4113|  1.01k|            SCN_UNLIKELY_ATTR
 4114|  1.01k|            return invalid_code_point;
 4115|  1.01k|        }
 4116|   835k|        return static_cast<char32_t>(input[0]);
 4117|   836k|    }
 4118|       |
 4119|  8.97k|    if (input.size() == 2) {
  ------------------
  |  Branch (4119:9): [True: 3.65k, False: 5.31k]
  ------------------
 4120|  3.65k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4120:13): [True: 44, False: 3.61k]
  ------------------
 4121|     44|            SCN_UNLIKELY_ATTR
 4122|     44|            return invalid_code_point;
 4123|     44|        }
 4124|  3.61k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4124:13): [True: 830, False: 2.78k]
  ------------------
 4125|    830|            SCN_UNLIKELY_ATTR
 4126|    830|            return invalid_code_point;
 4127|    830|        }
 4128|       |
 4129|  2.78k|        char32_t cp{};
 4130|  2.78k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4131|  2.78k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4132|  2.78k|        return cp;
 4133|  3.61k|    }
 4134|       |
 4135|  5.31k|    if (input.size() == 3) {
  ------------------
  |  Branch (4135:9): [True: 4.14k, False: 1.17k]
  ------------------
 4136|  4.14k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4136:13): [True: 53, False: 4.08k]
  ------------------
 4137|     53|            SCN_UNLIKELY_ATTR
 4138|     53|            return invalid_code_point;
 4139|     53|        }
 4140|  4.08k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4140:13): [True: 613, False: 3.47k]
  ------------------
 4141|  4.08k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4141:13): [True: 260, False: 3.21k]
  ------------------
 4142|    873|            SCN_UNLIKELY_ATTR
 4143|    873|            return invalid_code_point;
 4144|    873|        }
 4145|       |
 4146|  3.21k|        char32_t cp{};
 4147|  3.21k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4148|  3.21k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4149|  3.21k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4150|  3.21k|        return cp;
 4151|  4.08k|    }
 4152|       |
 4153|  1.17k|    if (input.size() == 4) {
  ------------------
  |  Branch (4153:9): [True: 1.17k, False: 0]
  ------------------
 4154|  1.17k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4154:13): [True: 0, False: 1.17k]
  ------------------
 4155|      0|            SCN_UNLIKELY_ATTR
 4156|      0|            return invalid_code_point;
 4157|      0|        }
 4158|  1.17k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4158:13): [True: 275, False: 901]
  ------------------
 4159|    275|            SCN_UNLIKELY_ATTR
 4160|    275|            return invalid_code_point;
 4161|    275|        }
 4162|    901|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4162:13): [True: 391, False: 510]
  ------------------
 4163|    901|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4163:13): [True: 13, False: 497]
  ------------------
 4164|    901|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4164:13): [True: 10, False: 487]
  ------------------
 4165|    414|            SCN_UNLIKELY_ATTR
 4166|    414|            return invalid_code_point;
 4167|    414|        }
 4168|       |
 4169|    487|        char32_t cp{};
 4170|    487|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4171|    487|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4172|    487|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4173|    487|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4174|    487|        return cp;
 4175|    901|    }
 4176|       |
 4177|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4178|       |    // gcc 7 thinks we'll get here, even when we won't
 4179|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4180|      0|#endif
 4181|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4182|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4107|  13.0k|    const auto is_trailing_code_unit = [](char ch) {
 4108|  13.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  13.0k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|   593k|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|   593k|    else {
 3984|   593k|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|   593k|                                       to_address(first), to_address(last)))};
 3986|   593k|    }
 3987|   593k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  1.78M|{
  331|  1.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  1.78M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  4.57M|{
  309|  4.57M|    return p;
  310|  4.57M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|  1.37M|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|  1.37M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|  1.37M|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|  1.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|  1.37M|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|  1.37M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  87.3k|    {
 2883|  87.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  87.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  87.3k|    {
 2864|  87.3k|        return decay_copy(t.begin());
 2865|  87.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2107|  4.29M|{
 2108|  4.29M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  4.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  4.29M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   901k|    {
 2940|   901k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   901k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   901k|    {
 2922|   901k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   901k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  33.9k|{
 9893|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9894|  33.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  33.9k|                                   make_scan_args(result->values())));
 9896|  33.9k|    return result;
 9897|  33.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEEDav:
 9848|  73.2k|{
 9849|  73.2k|    return scan_result_type<Source, Args...>();
 9850|  73.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1565|  73.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  441|  73.2k|        : m_value(T{}), m_has_value(true)
  442|  73.2k|    {
  443|  73.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2Ev:
 6692|  73.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6535|   450k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3473|   450k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJaEEC2Ev:
 6466|   207k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  73.2k|{
 9834|  73.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  73.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 58.7k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  58.7k|    else {
 9838|  58.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  58.7k|    static_cast<    \
  |  | 1109|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  58.7k|    }
 9840|  73.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1753|   450k|    {
 1754|   450k|        return has_value();
 1755|   450k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   900k|    {
  505|   900k|        return m_has_value;
  506|   900k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1759|  86.6k|    {
 1760|  86.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  86.6k|        return this->get_unexpected().error();
 1762|  86.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  86.6k|    {
  488|  86.6k|        return m_unexpected;
  489|  86.6k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  379|  5.84M|    {
  380|  5.84M|        return m_unexpected;
  381|  5.84M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  364|  2.60M|        : m_unexpected(std::forward<Err>(e))
  365|  2.60M|    {
  366|  2.60M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.60M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  2.60M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  373|  3.36M|        : m_unexpected(std::forward<Args>(args)...)
  374|  3.36M|    {
  375|  3.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  3.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  3.36M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   292k|    {
  505|   292k|        return m_has_value;
  506|   292k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   190k|    {
  471|   190k|        return m_value;
  472|   190k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  410|   520k|{
  411|   520k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   520k|        T(std::forward<Args>(args)...);
  413|   520k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6566|   363k|    {
 6567|   363k|        m_range = std::forward<Other>(r);
 6568|   363k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|   363k|    {
 1809|   363k|        return value();
 1810|   363k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   363k|    {
 1783|   363k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   363k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   363k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   363k|        return this->get_value();
 1785|   363k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   363k|    {
  471|   363k|        return m_value;
  472|   363k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9654|   209k|{
 9655|   209k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|   209k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|   209k|{
 9592|   209k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   209k|    auto result = vscan_impl(buffer, format, args);
 9595|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9596|  41.2k|        return unexpected(result.error());
 9597|  41.2k|    }
 9598|   167k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   209k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5398|   450k|{
 5399|   450k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   450k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   450k|                  "\n"
 5403|   450k|                  "Unsupported range type given as input to a scanning "
 5404|   450k|                  "function.\n"
 5405|   450k|                  "A range needs to have a character type (value type) "
 5406|   450k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   450k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   450k|                  "to be included.\n"
 5409|   450k|                  "See the scnlib documentation for more details.");
 5410|   450k|    static_assert(
 5411|   450k|        !std::is_same_v<T, custom_char_traits>,
 5412|   450k|        "\n"
 5413|   450k|        "Unsupported range type given as input to a scanning "
 5414|   450k|        "function.\n"
 5415|   450k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   450k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   450k|        "not supported.");
 5418|   450k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   450k|                  "\n"
 5420|   450k|                  "Unsupported range type given as input to a scanning "
 5421|   450k|                  "function.\n"
 5422|   450k|                  "file_marker_found cannot be used as an "
 5423|   450k|                  "source range type to scn::scan.\n"
 5424|   450k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   450k|                  "and do not provide an explicit source range, "
 5426|   450k|                  "or use scn::scan with a FILE* directly.");
 5427|   450k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   450k|                  "\n"
 5429|   450k|                  "Unsupported range type given as input to a scanning "
 5430|   450k|                  "function.\n"
 5431|   450k|                  "In order to be scannable, a range needs to satisfy "
 5432|   450k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   450k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   450k|                  "\n"
 5435|   450k|                  "Unsupported range type given as input to a scanning "
 5436|   450k|                  "function.\n"
 5437|   450k|                  "A range needs to model forward_range and have a valid "
 5438|   450k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   450k|                  "Examples of scannable ranges are std::string, "
 5440|   450k|                  "std::string_view, "
 5441|   450k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   450k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   450k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   450k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   450k|{
 5338|   450k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   450k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   450k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   450k|    {
 3014|   450k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   450k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   450k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   450k|    {
 2995|   450k|        return t.data();
 2996|   450k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3396|   450k|    {
 3397|   450k|        return detail::to_address(ranges::begin(derived()));
 3398|   450k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  2.78M|{
  331|  2.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  2.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  2.78M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   814k|    {
 2883|   814k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   814k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   814k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   814k|    {
 2864|   814k|        return decay_copy(t.begin());
 2865|   814k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3493|  8.00M|    {
 3494|  8.00M|        return m_iterator;
 3495|  8.00M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3352|   450k|    {
 3353|   450k|        return static_cast<const D&>(*this);
 3354|   450k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   450k|    {
 3089|   450k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   450k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   450k|    {
 3055|   450k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   450k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   450k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2107|  1.27M|{
 2108|  1.27M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  1.27M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|  1.87M|    {
 3510|  1.87M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|  1.87M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1753|  1.90M|    {
 1754|  1.90M|        return has_value();
 1755|  1.90M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  504|  3.54M|    {
  505|  3.54M|        return m_has_value;
  506|  3.54M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1759|   520k|    {
 1760|   520k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   520k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   520k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   520k|        return this->get_unexpected().error();
 1762|   520k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   520k|    {
  488|   520k|        return m_unexpected;
  489|   520k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  86.6k|        : base(unexpect, std::move(e.error())),
 1630|  86.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  86.6k|    {
 1632|  86.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  86.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  86.6k|          m_has_value(false)
  466|  86.6k|    {
  467|  86.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   450k|    {
 1330|   450k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|   363k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   363k|                      ranges::iterator_t<SourceRange>>) {
 6799|   363k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   363k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  2.13M|    {
 2883|  2.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  2.13M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  2.13M|    {
 2864|  2.13M|        return decay_copy(t.begin());
 2865|  2.13M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6783|   363k|{
 6784|   363k|    return ranges::end(source);
 6785|   363k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   363k|    {
 2940|   363k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   363k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   363k|    {
 2922|   363k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   363k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3497|  5.55M|    {
 3498|  5.55M|        return m_sentinel;
 3499|  5.55M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1808|  1.12M|    {
 1809|  1.12M|        return value();
 1810|  1.12M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1782|  1.12M|    {
 1783|  1.12M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.12M|        return this->get_value();
 1785|  1.12M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  470|  1.12M|    {
  471|  1.12M|        return m_value;
  472|  1.12M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   363k|        : base(std::in_place, std::forward<U>(val)),
 1584|   363k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   363k|    {
 1586|   363k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|   363k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   363k|    {
  457|   363k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|  67.9k|    {
 8855|  67.9k|        return m_str;
 8856|  67.9k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   135k|{
 6196|   135k|    detail::check_scan_arg_types<Args...>();
 6197|   135k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   135k|}
_ZN3scn2v46detail20check_scan_arg_typesIJaEEEbv:
 5910|   207k|{
 5911|   207k|    constexpr bool default_constructible_constraint =
 5912|   207k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   207k|    static_assert(default_constructible_constraint,
 5914|   207k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   207k|    constexpr bool destructible_constraint =
 5917|   207k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   207k|    static_assert(destructible_constraint,
 5919|   207k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   207k|    constexpr bool non_reference_constraint =
 5922|   207k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   207k|    static_assert(non_reference_constraint,
 5924|   207k|                  "Scan argument types must not be references");
 5925|       |
 5926|   207k|    constexpr bool movable_constraint =
 5927|   207k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   207k|    static_assert(movable_constraint,
 5929|   207k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   207k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   207k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   207k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEEC2ERNSt3__15tupleIJaEEE:
 6171|   135k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   135k|    {
 6173|   135k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   135k|    {
 6181|   135k|        return {detail::make_arg<
 6182|   135k|            kind, Context,
 6183|   135k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   135k|                                 typename Context::char_type>::value>(args)...};
 6185|   135k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE1EavEEPvRT2_:
 5960|   135k|{
 5961|   135k|    return make_value<Context>(value).ref_value;
 5962|   135k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEEDaRT0_:
 5895|   146k|{
 5896|   146k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   146k|                                  needs_context_tag>) {
 5900|   146k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   146k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERa:
 5702|   146k|    {                                                                        \
 5703|   146k|        return val;                                                          \
 5704|   146k|    }
_ZN3scn2v46detail15make_value_implIaRaEEDaOT0_:
 5864|   207k|{
 5865|   207k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   207k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   207k|    constexpr bool scannable_char =
 5869|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   207k|    static_assert(scannable_char,
 5871|   207k|                  "Cannot scan an argument of an unsupported character "
 5872|   207k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   207k|    constexpr bool scannable_const =
 5875|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   207k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   207k|    constexpr bool scannable_disabled =
 5879|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   207k|    static_assert(scannable_disabled,
 5881|   207k|                  "Cannot scan an argument that has been disabled by "
 5882|   207k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   207k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   207k|    static_assert(
 5886|   207k|        scannable,
 5887|   207k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   207k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   207k|    return arg_value{arg};
 5891|   207k|}
_ZN3scn2v46detail9arg_valueC2IaEERT_:
 5645|   207k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   207k|    {
 5647|   207k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJaEE6valuesEv:
 6475|   194k|    {
 6476|   194k|        return m_values;
 6477|   194k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   135k|        : basic_scan_args(store.desc, store.args.data())
 6222|   135k|    {
 6223|   135k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6273|   836k|        : m_desc(desc), m_builtin_values(data)
 6274|   836k|    {
 6275|   836k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  4.15M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  4.15M|    static_cast<    \
  |  | 1109|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  4.15M|    static_cast<    \
  |  | 1109|  4.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  4.15M|    {
 3480|  4.15M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8531|   836k|{
 8532|   836k|    return s;
 8533|   836k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8508|   836k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  67.9k|        : m_str(r.str)
 8850|  67.9k|    {
 8851|  67.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1753|  73.2k|    {
 1754|  73.2k|        return has_value();
 1755|  73.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1828|   190k|    {
 1829|   190k|        return &value();
 1830|   190k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   190k|    {
 1783|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   190k|        return this->get_value();
 1785|   190k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6555|   363k|    {
 6556|   363k|        return ranges::begin(m_range);
 6557|   363k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  33.9k|{
 9962|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9963|  33.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  33.9k|                                   make_scan_args(result->values())));
 9965|  33.9k|    return result;
 9966|  33.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9672|   209k|{
 9673|   209k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|   209k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|   209k|{
 9608|   209k|#if !SCN_DISABLE_LOCALE
 9609|   209k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   209k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   209k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   209k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9616|  41.2k|        return unexpected(result.error());
 9617|  41.2k|    }
 9618|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   209k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  5.29k|{
10003|  5.29k|    auto result = make_scan_result<Source, T>();
10004|  5.29k|    fill_scan_result(
10005|  5.29k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  5.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  5.29k|                            detail::make_arg<scan_context>(result->value())));
10007|  5.29k|    return result;
10008|  5.29k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9685|  31.8k|{
 9686|  31.8k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  31.8k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  31.8k|{
 9632|  31.8k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  31.8k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  31.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.12k, False: 27.6k]
  |  |  ------------------
  ------------------
 9636|  4.12k|        return unexpected(result.error());
 9637|  4.12k|    }
 9638|  27.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  27.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  31.8k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEaEENS0_14basic_scan_argIT_EERT0_:
 5945|  10.5k|{
 5946|  10.5k|    check_scan_arg_types<T>();
 5947|       |
 5948|  10.5k|    basic_scan_arg<Context> arg;
 5949|  10.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  10.5k|    arg.m_value = make_value<Context>(value);
 5951|  10.5k|    return arg;
 5952|  10.5k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6040|   899k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5641|  1.26M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJaEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  13.4k|    {
 6498|  13.4k|        return std::get<0>(m_values);
 6499|  13.4k|    }
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  29.9k|{
 9893|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9894|  29.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  29.9k|                                   make_scan_args(result->values())));
 9896|  29.9k|    return result;
 9897|  29.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEEDav:
 9848|  64.2k|{
 9849|  64.2k|    return scan_result_type<Source, Args...>();
 9850|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1565|  64.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  441|  64.2k|        : m_value(T{}), m_has_value(true)
  442|  64.2k|    {
  443|  64.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2Ev:
 6692|  64.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJhEEC2Ev:
 6466|   189k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  64.2k|{
 9834|  64.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 49.7k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  49.7k|    else {
 9838|  49.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  49.7k|    static_cast<    \
  |  | 1109|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  49.7k|    }
 9840|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   256k|    {
  505|   256k|        return m_has_value;
  506|   256k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   163k|    {
  471|   163k|        return m_value;
  472|   163k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|  59.8k|    {
 8855|  59.8k|        return m_str;
 8856|  59.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   119k|{
 6196|   119k|    detail::check_scan_arg_types<Args...>();
 6197|   119k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   119k|}
_ZN3scn2v46detail20check_scan_arg_typesIJhEEEbv:
 5910|   189k|{
 5911|   189k|    constexpr bool default_constructible_constraint =
 5912|   189k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   189k|    static_assert(default_constructible_constraint,
 5914|   189k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   189k|    constexpr bool destructible_constraint =
 5917|   189k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   189k|    static_assert(destructible_constraint,
 5919|   189k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   189k|    constexpr bool non_reference_constraint =
 5922|   189k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   189k|    static_assert(non_reference_constraint,
 5924|   189k|                  "Scan argument types must not be references");
 5925|       |
 5926|   189k|    constexpr bool movable_constraint =
 5927|   189k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   189k|    static_assert(movable_constraint,
 5929|   189k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   189k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   189k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   189k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEEC2ERNSt3__15tupleIJhEEE:
 6171|   119k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   119k|    {
 6173|   119k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   119k|    {
 6181|   119k|        return {detail::make_arg<
 6182|   119k|            kind, Context,
 6183|   119k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   119k|                                 typename Context::char_type>::value>(args)...};
 6185|   119k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE7EhvEEPvRT2_:
 5960|   119k|{
 5961|   119k|    return make_value<Context>(value).ref_value;
 5962|   119k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEEDaRT0_:
 5895|   128k|{
 5896|   128k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   128k|                                  needs_context_tag>) {
 5900|   128k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   128k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERh:
 5702|   128k|    {                                                                        \
 5703|   128k|        return val;                                                          \
 5704|   128k|    }
_ZN3scn2v46detail15make_value_implIhRhEEDaOT0_:
 5864|   189k|{
 5865|   189k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   189k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   189k|    constexpr bool scannable_char =
 5869|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   189k|    static_assert(scannable_char,
 5871|   189k|                  "Cannot scan an argument of an unsupported character "
 5872|   189k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   189k|    constexpr bool scannable_const =
 5875|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   189k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   189k|    constexpr bool scannable_disabled =
 5879|   189k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   189k|    static_assert(scannable_disabled,
 5881|   189k|                  "Cannot scan an argument that has been disabled by "
 5882|   189k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   189k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   189k|    static_assert(
 5886|   189k|        scannable,
 5887|   189k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   189k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   189k|    return arg_value{arg};
 5891|   189k|}
_ZN3scn2v46detail9arg_valueC2IhEERT_:
 5645|   189k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   189k|    {
 5647|   189k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJhEE6valuesEv:
 6475|   178k|    {
 6476|   178k|        return m_values;
 6477|   178k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   119k|        : basic_scan_args(store.desc, store.args.data())
 6222|   119k|    {
 6223|   119k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  59.8k|        : m_str(r.str)
 8850|  59.8k|    {
 8851|  59.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1753|  64.2k|    {
 1754|  64.2k|        return has_value();
 1755|  64.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1828|   163k|    {
 1829|   163k|        return &value();
 1830|   163k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   163k|    {
 1783|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   163k|        return this->get_value();
 1785|   163k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  29.9k|{
 9962|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9963|  29.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  29.9k|                                   make_scan_args(result->values())));
 9965|  29.9k|    return result;
 9966|  29.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  4.41k|{
10003|  4.41k|    auto result = make_scan_result<Source, T>();
10004|  4.41k|    fill_scan_result(
10005|  4.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  4.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  4.41k|                            detail::make_arg<scan_context>(result->value())));
10007|  4.41k|    return result;
10008|  4.41k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEhEENS0_14basic_scan_argIT_EERT0_:
 5945|  8.82k|{
 5946|  8.82k|    check_scan_arg_types<T>();
 5947|       |
 5948|  8.82k|    basic_scan_arg<Context> arg;
 5949|  8.82k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  8.82k|    arg.m_value = make_value<Context>(value);
 5951|  8.82k|    return arg;
 5952|  8.82k|}
_ZNR3scn2v46detail25scan_result_value_storageIJhEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  11.6k|    {
 6498|  11.6k|        return std::get<0>(m_values);
 6499|  11.6k|    }
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  39.7k|{
 9893|  39.7k|    auto result = make_scan_result<Source, Args...>();
 9894|  39.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  39.7k|                                   make_scan_args(result->values())));
 9896|  39.7k|    return result;
 9897|  39.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEEDav:
 9848|  85.6k|{
 9849|  85.6k|    return scan_result_type<Source, Args...>();
 9850|  85.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1565|  85.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  441|  85.6k|        : m_value(T{}), m_has_value(true)
  442|  85.6k|    {
  443|  85.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6692|  85.6k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6466|   232k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  85.6k|{
 9834|  85.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  85.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 71.1k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  71.1k|    else {
 9838|  71.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  71.1k|    static_cast<    \
  |  | 1109|  71.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  71.1k|    }
 9840|  85.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   342k|    {
  505|   342k|        return m_has_value;
  506|   342k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   228k|    {
  471|   228k|        return m_value;
  472|   228k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|  79.5k|    {
 8855|  79.5k|        return m_str;
 8856|  79.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   158k|{
 6196|   158k|    detail::check_scan_arg_types<Args...>();
 6197|   158k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   158k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5910|   232k|{
 5911|   232k|    constexpr bool default_constructible_constraint =
 5912|   232k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   232k|    static_assert(default_constructible_constraint,
 5914|   232k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   232k|    constexpr bool destructible_constraint =
 5917|   232k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   232k|    static_assert(destructible_constraint,
 5919|   232k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   232k|    constexpr bool non_reference_constraint =
 5922|   232k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   232k|    static_assert(non_reference_constraint,
 5924|   232k|                  "Scan argument types must not be references");
 5925|       |
 5926|   232k|    constexpr bool movable_constraint =
 5927|   232k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   232k|    static_assert(movable_constraint,
 5929|   232k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   232k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   232k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   232k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6171|   158k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   158k|    {
 6173|   158k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   158k|    {
 6181|   158k|        return {detail::make_arg<
 6182|   158k|            kind, Context,
 6183|   158k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   158k|                                 typename Context::char_type>::value>(args)...};
 6185|   158k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5960|   158k|{
 5961|   158k|    return make_value<Context>(value).ref_value;
 5962|   158k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5895|   170k|{
 5896|   170k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   170k|                                  needs_context_tag>) {
 5900|   170k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   170k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5702|   170k|    {                                                                        \
 5703|   170k|        return val;                                                          \
 5704|   170k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5864|   232k|{
 5865|   232k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   232k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   232k|    constexpr bool scannable_char =
 5869|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   232k|    static_assert(scannable_char,
 5871|   232k|                  "Cannot scan an argument of an unsupported character "
 5872|   232k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   232k|    constexpr bool scannable_const =
 5875|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   232k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   232k|    constexpr bool scannable_disabled =
 5879|   232k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   232k|    static_assert(scannable_disabled,
 5881|   232k|                  "Cannot scan an argument that has been disabled by "
 5882|   232k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   232k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   232k|    static_assert(
 5886|   232k|        scannable,
 5887|   232k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   232k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   232k|    return arg_value{arg};
 5891|   232k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5645|   232k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   232k|    {
 5647|   232k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6475|   217k|    {
 6476|   217k|        return m_values;
 6477|   217k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   158k|        : basic_scan_args(store.desc, store.args.data())
 6222|   158k|    {
 6223|   158k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  79.5k|        : m_str(r.str)
 8850|  79.5k|    {
 8851|  79.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1753|  85.6k|    {
 1754|  85.6k|        return has_value();
 1755|  85.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1828|   228k|    {
 1829|   228k|        return &value();
 1830|   228k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   228k|    {
 1783|   228k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   228k|        return this->get_value();
 1785|   228k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  39.7k|{
 9962|  39.7k|    auto result = make_scan_result<Source, Args...>();
 9963|  39.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  39.7k|                                   make_scan_args(result->values())));
 9965|  39.7k|    return result;
 9966|  39.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  6.11k|{
10003|  6.11k|    auto result = make_scan_result<Source, T>();
10004|  6.11k|    fill_scan_result(
10005|  6.11k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  6.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  6.11k|                            detail::make_arg<scan_context>(result->value())));
10007|  6.11k|    return result;
10008|  6.11k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEENS0_14basic_scan_argIT_EERT0_:
 5945|  12.0k|{
 5946|  12.0k|    check_scan_arg_types<T>();
 5947|       |
 5948|  12.0k|    basic_scan_arg<Context> arg;
 5949|  12.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  12.0k|    arg.m_value = make_value<Context>(value);
 5951|  12.0k|    return arg;
 5952|  12.0k|}
_ZNR3scn2v46detail25scan_result_value_storageIJiEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  14.8k|    {
 6498|  14.8k|        return std::get<0>(m_values);
 6499|  14.8k|    }
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  32.4k|{
 9893|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9894|  32.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  32.4k|                                   make_scan_args(result->values())));
 9896|  32.4k|    return result;
 9897|  32.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEEDav:
 9848|  69.6k|{
 9849|  69.6k|    return scan_result_type<Source, Args...>();
 9850|  69.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1565|  69.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  441|  69.6k|        : m_value(T{}), m_has_value(true)
  442|  69.6k|    {
  443|  69.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6692|  69.6k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6466|   200k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  69.6k|{
 9834|  69.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  69.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 55.2k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  55.2k|    else {
 9838|  55.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  55.2k|    static_cast<    \
  |  | 1109|  55.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  55.2k|    }
 9840|  69.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   278k|    {
  505|   278k|        return m_has_value;
  506|   278k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   180k|    {
  471|   180k|        return m_value;
  472|   180k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|  64.8k|    {
 8855|  64.8k|        return m_str;
 8856|  64.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   129k|{
 6196|   129k|    detail::check_scan_arg_types<Args...>();
 6197|   129k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   129k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5910|   200k|{
 5911|   200k|    constexpr bool default_constructible_constraint =
 5912|   200k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   200k|    static_assert(default_constructible_constraint,
 5914|   200k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   200k|    constexpr bool destructible_constraint =
 5917|   200k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   200k|    static_assert(destructible_constraint,
 5919|   200k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   200k|    constexpr bool non_reference_constraint =
 5922|   200k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   200k|    static_assert(non_reference_constraint,
 5924|   200k|                  "Scan argument types must not be references");
 5925|       |
 5926|   200k|    constexpr bool movable_constraint =
 5927|   200k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   200k|    static_assert(movable_constraint,
 5929|   200k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   200k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   200k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   200k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6171|   129k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   129k|    {
 6173|   129k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   129k|    {
 6181|   129k|        return {detail::make_arg<
 6182|   129k|            kind, Context,
 6183|   129k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   129k|                                 typename Context::char_type>::value>(args)...};
 6185|   129k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE9EjvEEPvRT2_:
 5960|   129k|{
 5961|   129k|    return make_value<Context>(value).ref_value;
 5962|   129k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5895|   139k|{
 5896|   139k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   139k|                                  needs_context_tag>) {
 5900|   139k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   139k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5702|   139k|    {                                                                        \
 5703|   139k|        return val;                                                          \
 5704|   139k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5864|   200k|{
 5865|   200k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   200k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   200k|    constexpr bool scannable_char =
 5869|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   200k|    static_assert(scannable_char,
 5871|   200k|                  "Cannot scan an argument of an unsupported character "
 5872|   200k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   200k|    constexpr bool scannable_const =
 5875|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   200k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   200k|    constexpr bool scannable_disabled =
 5879|   200k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   200k|    static_assert(scannable_disabled,
 5881|   200k|                  "Cannot scan an argument that has been disabled by "
 5882|   200k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   200k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   200k|    static_assert(
 5886|   200k|        scannable,
 5887|   200k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   200k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   200k|    return arg_value{arg};
 5891|   200k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5645|   200k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   200k|    {
 5647|   200k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6475|   188k|    {
 6476|   188k|        return m_values;
 6477|   188k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   129k|        : basic_scan_args(store.desc, store.args.data())
 6222|   129k|    {
 6223|   129k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  64.8k|        : m_str(r.str)
 8850|  64.8k|    {
 8851|  64.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1753|  69.6k|    {
 1754|  69.6k|        return has_value();
 1755|  69.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1828|   180k|    {
 1829|   180k|        return &value();
 1830|   180k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   180k|    {
 1783|   180k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   180k|        return this->get_value();
 1785|   180k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  32.4k|{
 9962|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9963|  32.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  32.4k|                                   make_scan_args(result->values())));
 9965|  32.4k|    return result;
 9966|  32.4k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  4.85k|{
10003|  4.85k|    auto result = make_scan_result<Source, T>();
10004|  4.85k|    fill_scan_result(
10005|  4.85k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  4.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  4.85k|                            detail::make_arg<scan_context>(result->value())));
10007|  4.85k|    return result;
10008|  4.85k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEENS0_14basic_scan_argIT_EERT0_:
 5945|  9.68k|{
 5946|  9.68k|    check_scan_arg_types<T>();
 5947|       |
 5948|  9.68k|    basic_scan_arg<Context> arg;
 5949|  9.68k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  9.68k|    arg.m_value = make_value<Context>(value);
 5951|  9.68k|    return arg;
 5952|  9.68k|}
_ZNR3scn2v46detail25scan_result_value_storageIJjEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  12.5k|    {
 6498|  12.5k|        return std::get<0>(m_values);
 6499|  12.5k|    }
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  40.4k|{
 9893|  40.4k|    auto result = make_scan_result<Source, Args...>();
 9894|  40.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  40.4k|                                   make_scan_args(result->values())));
 9896|  40.4k|    return result;
 9897|  40.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEEDav:
 9848|  87.1k|{
 9849|  87.1k|    return scan_result_type<Source, Args...>();
 9850|  87.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1565|  87.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  441|  87.1k|        : m_value(T{}), m_has_value(true)
  442|  87.1k|    {
  443|  87.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2Ev:
 6692|  87.1k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJxEEC2Ev:
 6466|   235k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  87.1k|{
 9834|  87.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  87.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 72.6k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  72.6k|    else {
 9838|  72.6k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  72.6k|    static_cast<    \
  |  | 1109|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  72.6k|    }
 9840|  87.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   348k|    {
  505|   348k|        return m_has_value;
  506|   348k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   232k|    {
  471|   232k|        return m_value;
  472|   232k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|  80.8k|    {
 8855|  80.8k|        return m_str;
 8856|  80.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   161k|{
 6196|   161k|    detail::check_scan_arg_types<Args...>();
 6197|   161k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   161k|}
_ZN3scn2v46detail20check_scan_arg_typesIJxEEEbv:
 5910|   235k|{
 5911|   235k|    constexpr bool default_constructible_constraint =
 5912|   235k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   235k|    static_assert(default_constructible_constraint,
 5914|   235k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   235k|    constexpr bool destructible_constraint =
 5917|   235k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   235k|    static_assert(destructible_constraint,
 5919|   235k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   235k|    constexpr bool non_reference_constraint =
 5922|   235k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   235k|    static_assert(non_reference_constraint,
 5924|   235k|                  "Scan argument types must not be references");
 5925|       |
 5926|   235k|    constexpr bool movable_constraint =
 5927|   235k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   235k|    static_assert(movable_constraint,
 5929|   235k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   235k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   235k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   235k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEEC2ERNSt3__15tupleIJxEEE:
 6171|   161k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   161k|    {
 6173|   161k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   161k|    {
 6181|   161k|        return {detail::make_arg<
 6182|   161k|            kind, Context,
 6183|   161k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   161k|                                 typename Context::char_type>::value>(args)...};
 6185|   161k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5960|   161k|{
 5961|   161k|    return make_value<Context>(value).ref_value;
 5962|   161k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEEDaRT0_:
 5895|   173k|{
 5896|   173k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   173k|                                  needs_context_tag>) {
 5900|   173k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   173k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERx:
 5702|   173k|    {                                                                        \
 5703|   173k|        return val;                                                          \
 5704|   173k|    }
_ZN3scn2v46detail15make_value_implIxRxEEDaOT0_:
 5864|   235k|{
 5865|   235k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   235k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   235k|    constexpr bool scannable_char =
 5869|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   235k|    static_assert(scannable_char,
 5871|   235k|                  "Cannot scan an argument of an unsupported character "
 5872|   235k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   235k|    constexpr bool scannable_const =
 5875|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   235k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   235k|    constexpr bool scannable_disabled =
 5879|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   235k|    static_assert(scannable_disabled,
 5881|   235k|                  "Cannot scan an argument that has been disabled by "
 5882|   235k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   235k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   235k|    static_assert(
 5886|   235k|        scannable,
 5887|   235k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   235k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   235k|    return arg_value{arg};
 5891|   235k|}
_ZN3scn2v46detail9arg_valueC2IxEERT_:
 5645|   235k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   235k|    {
 5647|   235k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJxEE6valuesEv:
 6475|   220k|    {
 6476|   220k|        return m_values;
 6477|   220k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   161k|        : basic_scan_args(store.desc, store.args.data())
 6222|   161k|    {
 6223|   161k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  80.8k|        : m_str(r.str)
 8850|  80.8k|    {
 8851|  80.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1753|  87.1k|    {
 1754|  87.1k|        return has_value();
 1755|  87.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1828|   232k|    {
 1829|   232k|        return &value();
 1830|   232k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   232k|    {
 1783|   232k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   232k|        return this->get_value();
 1785|   232k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  40.4k|{
 9962|  40.4k|    auto result = make_scan_result<Source, Args...>();
 9963|  40.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  40.4k|                                   make_scan_args(result->values())));
 9965|  40.4k|    return result;
 9966|  40.4k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  6.22k|{
10003|  6.22k|    auto result = make_scan_result<Source, T>();
10004|  6.22k|    fill_scan_result(
10005|  6.22k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  6.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  6.22k|                            detail::make_arg<scan_context>(result->value())));
10007|  6.22k|    return result;
10008|  6.22k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEExEENS0_14basic_scan_argIT_EERT0_:
 5945|  12.2k|{
 5946|  12.2k|    check_scan_arg_types<T>();
 5947|       |
 5948|  12.2k|    basic_scan_arg<Context> arg;
 5949|  12.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  12.2k|    arg.m_value = make_value<Context>(value);
 5951|  12.2k|    return arg;
 5952|  12.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJxEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  15.1k|    {
 6498|  15.1k|        return std::get<0>(m_values);
 6499|  15.1k|    }
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  32.7k|{
 9893|  32.7k|    auto result = make_scan_result<Source, Args...>();
 9894|  32.7k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  32.7k|                                   make_scan_args(result->values())));
 9896|  32.7k|    return result;
 9897|  32.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEEDav:
 9848|  70.4k|{
 9849|  70.4k|    return scan_result_type<Source, Args...>();
 9850|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1565|  70.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  441|  70.4k|        : m_value(T{}), m_has_value(true)
  442|  70.4k|    {
  443|  70.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2Ev:
 6692|  70.4k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJyEEC2Ev:
 6466|   202k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  70.4k|{
 9834|  70.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 56.0k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  56.0k|    else {
 9838|  56.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  56.0k|    static_cast<    \
  |  | 1109|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  56.0k|    }
 9840|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   281k|    {
  505|   281k|        return m_has_value;
  506|   281k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   182k|    {
  471|   182k|        return m_value;
  472|   182k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|  65.5k|    {
 8855|  65.5k|        return m_str;
 8856|  65.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   131k|{
 6196|   131k|    detail::check_scan_arg_types<Args...>();
 6197|   131k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   131k|}
_ZN3scn2v46detail20check_scan_arg_typesIJyEEEbv:
 5910|   202k|{
 5911|   202k|    constexpr bool default_constructible_constraint =
 5912|   202k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   202k|    static_assert(default_constructible_constraint,
 5914|   202k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   202k|    constexpr bool destructible_constraint =
 5917|   202k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   202k|    static_assert(destructible_constraint,
 5919|   202k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   202k|    constexpr bool non_reference_constraint =
 5922|   202k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   202k|    static_assert(non_reference_constraint,
 5924|   202k|                  "Scan argument types must not be references");
 5925|       |
 5926|   202k|    constexpr bool movable_constraint =
 5927|   202k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   202k|    static_assert(movable_constraint,
 5929|   202k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   202k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   202k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   202k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEEC2ERNSt3__15tupleIJyEEE:
 6171|   131k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   131k|    {
 6173|   131k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   131k|    {
 6181|   131k|        return {detail::make_arg<
 6182|   131k|            kind, Context,
 6183|   131k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   131k|                                 typename Context::char_type>::value>(args)...};
 6185|   131k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE11EyvEEPvRT2_:
 5960|   131k|{
 5961|   131k|    return make_value<Context>(value).ref_value;
 5962|   131k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEEDaRT0_:
 5895|   140k|{
 5896|   140k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   140k|                                  needs_context_tag>) {
 5900|   140k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   140k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERy:
 5702|   140k|    {                                                                        \
 5703|   140k|        return val;                                                          \
 5704|   140k|    }
_ZN3scn2v46detail15make_value_implIyRyEEDaOT0_:
 5864|   202k|{
 5865|   202k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   202k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   202k|    constexpr bool scannable_char =
 5869|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   202k|    static_assert(scannable_char,
 5871|   202k|                  "Cannot scan an argument of an unsupported character "
 5872|   202k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   202k|    constexpr bool scannable_const =
 5875|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   202k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   202k|    constexpr bool scannable_disabled =
 5879|   202k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   202k|    static_assert(scannable_disabled,
 5881|   202k|                  "Cannot scan an argument that has been disabled by "
 5882|   202k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   202k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   202k|    static_assert(
 5886|   202k|        scannable,
 5887|   202k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   202k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   202k|    return arg_value{arg};
 5891|   202k|}
_ZN3scn2v46detail9arg_valueC2IyEERT_:
 5645|   202k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   202k|    {
 5647|   202k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJyEE6valuesEv:
 6475|   189k|    {
 6476|   189k|        return m_values;
 6477|   189k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   131k|        : basic_scan_args(store.desc, store.args.data())
 6222|   131k|    {
 6223|   131k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  65.5k|        : m_str(r.str)
 8850|  65.5k|    {
 8851|  65.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1753|  70.4k|    {
 1754|  70.4k|        return has_value();
 1755|  70.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1828|   182k|    {
 1829|   182k|        return &value();
 1830|   182k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   182k|    {
 1783|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   182k|        return this->get_value();
 1785|   182k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  32.7k|{
 9962|  32.7k|    auto result = make_scan_result<Source, Args...>();
 9963|  32.7k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  32.7k|                                   make_scan_args(result->values())));
 9965|  32.7k|    return result;
 9966|  32.7k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  4.91k|{
10003|  4.91k|    auto result = make_scan_result<Source, T>();
10004|  4.91k|    fill_scan_result(
10005|  4.91k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  4.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  4.91k|                            detail::make_arg<scan_context>(result->value())));
10007|  4.91k|    return result;
10008|  4.91k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEyEENS0_14basic_scan_argIT_EERT0_:
 5945|  9.81k|{
 5946|  9.81k|    check_scan_arg_types<T>();
 5947|       |
 5948|  9.81k|    basic_scan_arg<Context> arg;
 5949|  9.81k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  9.81k|    arg.m_value = make_value<Context>(value);
 5951|  9.81k|    return arg;
 5952|  9.81k|}
_ZNR3scn2v46detail25scan_result_value_storageIJyEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  12.6k|    {
 6498|  12.6k|        return std::get<0>(m_values);
 6499|  12.6k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  86.6k|    {
 2883|  86.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  86.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  86.6k|    {
 2864|  86.6k|        return decay_copy(t.begin());
 2865|  86.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2107|  9.22M|{
 2108|  9.22M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  9.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  9.22M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   898k|    {
 2940|   898k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   898k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   898k|    {
 2922|   898k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   898k|    }
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  33.9k|{
 9893|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9894|  33.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  33.9k|                                   make_scan_args(result->values())));
 9896|  33.9k|    return result;
 9897|  33.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEEDav:
 9848|  73.2k|{
 9849|  73.2k|    return scan_result_type<Source, Args...>();
 9850|  73.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1565|  73.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  441|  73.2k|        : m_value(T{}), m_has_value(true)
  442|  73.2k|    {
  443|  73.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2Ev:
 6692|  73.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6535|   449k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3473|   449k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  73.2k|{
 9834|  73.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  73.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 58.7k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  58.7k|    else {
 9838|  58.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  58.7k|    static_cast<    \
  |  | 1109|  58.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  58.7k|    }
 9840|  73.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   449k|    {
 1754|   449k|        return has_value();
 1755|   449k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   898k|    {
  505|   898k|        return m_has_value;
  506|   898k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  86.6k|    {
 1760|  86.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  86.6k|        return this->get_unexpected().error();
 1762|  86.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  86.6k|    {
  488|  86.6k|        return m_unexpected;
  489|  86.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   292k|    {
  505|   292k|        return m_has_value;
  506|   292k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   190k|    {
  471|   190k|        return m_value;
  472|   190k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   362k|    {
 6567|   362k|        m_range = std::forward<Other>(r);
 6568|   362k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   362k|    {
 1809|   362k|        return value();
 1810|   362k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   362k|    {
 1783|   362k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   362k|        return this->get_value();
 1785|   362k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   362k|    {
  471|   362k|        return m_value;
  472|   362k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9654|   209k|{
 9655|   209k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|   209k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|   209k|{
 9592|   209k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   209k|    auto result = vscan_impl(buffer, format, args);
 9595|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9596|  41.2k|        return unexpected(result.error());
 9597|  41.2k|    }
 9598|   167k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   209k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5398|   449k|{
 5399|   449k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   449k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   449k|                  "\n"
 5403|   449k|                  "Unsupported range type given as input to a scanning "
 5404|   449k|                  "function.\n"
 5405|   449k|                  "A range needs to have a character type (value type) "
 5406|   449k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   449k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   449k|                  "to be included.\n"
 5409|   449k|                  "See the scnlib documentation for more details.");
 5410|   449k|    static_assert(
 5411|   449k|        !std::is_same_v<T, custom_char_traits>,
 5412|   449k|        "\n"
 5413|   449k|        "Unsupported range type given as input to a scanning "
 5414|   449k|        "function.\n"
 5415|   449k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   449k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   449k|        "not supported.");
 5418|   449k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   449k|                  "\n"
 5420|   449k|                  "Unsupported range type given as input to a scanning "
 5421|   449k|                  "function.\n"
 5422|   449k|                  "file_marker_found cannot be used as an "
 5423|   449k|                  "source range type to scn::scan.\n"
 5424|   449k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   449k|                  "and do not provide an explicit source range, "
 5426|   449k|                  "or use scn::scan with a FILE* directly.");
 5427|   449k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   449k|                  "\n"
 5429|   449k|                  "Unsupported range type given as input to a scanning "
 5430|   449k|                  "function.\n"
 5431|   449k|                  "In order to be scannable, a range needs to satisfy "
 5432|   449k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   449k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   449k|                  "\n"
 5435|   449k|                  "Unsupported range type given as input to a scanning "
 5436|   449k|                  "function.\n"
 5437|   449k|                  "A range needs to model forward_range and have a valid "
 5438|   449k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   449k|                  "Examples of scannable ranges are std::string, "
 5440|   449k|                  "std::string_view, "
 5441|   449k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   449k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   449k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   449k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   449k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   449k|    else {
 5384|   449k|        return make_forward_scan_buffer(r);
 5385|   449k|    }
 5386|   449k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5202|   449k|{
 5203|   449k|    return basic_scan_forward_buffer_impl(range);
 5204|   449k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   449k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   449k|          m_cursor(ranges::begin(*m_range))
 4784|   449k|    {
 4785|   449k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4754|   449k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   449k|    {
 4756|   449k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4445|   449k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   449k|    {
 4447|   449k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4358|   449k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   812k|    {
 2883|   812k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   812k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   812k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   812k|    {
 2864|   812k|        return decay_copy(t.begin());
 2865|   812k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3493|  1.17M|    {
 3494|  1.17M|        return m_iterator;
 3495|  1.17M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4788|  2.32M|    {
 4789|  2.32M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 143k, False: 2.18M]
  ------------------
 4790|   143k|            return false;
 4791|   143k|        }
 4792|  2.18M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  2.18M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  2.18M|        }
 4795|  2.18M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 1.76M, False: 416k]
  ------------------
 4796|  1.76M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  1.76M|                                          this->m_current_view.begin(),
 4798|  1.76M|                                          this->m_current_view.end());
 4799|  1.76M|        }
 4800|  2.18M|        m_latest = *m_cursor;
 4801|  2.18M|        ++m_cursor;
 4802|  2.18M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  2.18M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  2.18M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  2.18M|        }
 4806|  2.18M|        return true;
 4807|  2.32M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  6.69M|    {
 2940|  6.69M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  6.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  6.69M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  6.69M|    {
 2922|  6.69M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  6.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  6.69M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3497|  7.05M|    {
 3498|  7.05M|        return m_sentinel;
 3499|  7.05M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4363|   449k|    {
 4364|   449k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   449k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   449k|        return true;
 4366|   449k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  86.6k|        : base(unexpect, std::move(e.error())),
 1630|  86.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  86.6k|    {
 1632|  86.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  86.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  86.6k|          m_has_value(false)
  466|  86.6k|    {
  467|  86.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   449k|    {
 1330|   449k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   362k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   362k|                      ranges::iterator_t<SourceRange>>) {
 6799|   362k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   362k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   362k|    {
 2883|   362k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   362k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   362k|    {
 2864|   362k|        return decay_copy(t.begin());
 2865|   362k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6783|   362k|{
 6784|   362k|    return ranges::end(source);
 6785|   362k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   362k|    {
 2940|   362k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   362k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   362k|    {
 2922|   362k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   362k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   362k|        : base(std::in_place, std::forward<U>(val)),
 1584|   362k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   362k|    {
 1586|   362k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   362k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   362k|    {
  457|   362k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  67.9k|    {
 8855|  67.9k|        return m_str;
 8856|  67.9k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|   812k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   812k|    static_cast<    \
  |  | 1109|   812k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   812k|    static_cast<    \
  |  | 1109|   812k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   812k|    {
 3480|   812k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  67.9k|        : m_str(r.str)
 8850|  67.9k|    {
 8851|  67.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1753|  73.2k|    {
 1754|  73.2k|        return has_value();
 1755|  73.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1828|   190k|    {
 1829|   190k|        return &value();
 1830|   190k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   190k|    {
 1783|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   190k|        return this->get_value();
 1785|   190k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6555|   362k|    {
 6556|   362k|        return ranges::begin(m_range);
 6557|   362k|    }
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  33.9k|{
 9962|  33.9k|    auto result = make_scan_result<Source, Args...>();
 9963|  33.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  33.9k|                                   make_scan_args(result->values())));
 9965|  33.9k|    return result;
 9966|  33.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9672|   209k|{
 9673|   209k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|   209k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|   209k|{
 9608|   209k|#if !SCN_DISABLE_LOCALE
 9609|   209k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   209k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   209k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   209k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   209k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 41.2k, False: 167k]
  |  |  ------------------
  ------------------
 9616|  41.2k|        return unexpected(result.error());
 9617|  41.2k|    }
 9618|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   209k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  5.28k|{
10003|  5.28k|    auto result = make_scan_result<Source, T>();
10004|  5.28k|    fill_scan_result(
10005|  5.28k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  5.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  5.28k|                            detail::make_arg<scan_context>(result->value())));
10007|  5.28k|    return result;
10008|  5.28k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9685|  31.3k|{
 9686|  31.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  31.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  31.3k|{
 9632|  31.3k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  31.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  31.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.12k, False: 27.2k]
  |  |  ------------------
  ------------------
 9636|  4.12k|        return unexpected(result.error());
 9637|  4.12k|    }
 9638|  27.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  27.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  31.3k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  29.9k|{
 9893|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9894|  29.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  29.9k|                                   make_scan_args(result->values())));
 9896|  29.9k|    return result;
 9897|  29.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEEDav:
 9848|  64.2k|{
 9849|  64.2k|    return scan_result_type<Source, Args...>();
 9850|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1565|  64.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  441|  64.2k|        : m_value(T{}), m_has_value(true)
  442|  64.2k|    {
  443|  64.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2Ev:
 6692|  64.2k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  64.2k|{
 9834|  64.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 49.7k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  49.7k|    else {
 9838|  49.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  49.7k|    static_cast<    \
  |  | 1109|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  49.7k|    }
 9840|  64.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   256k|    {
  505|   256k|        return m_has_value;
  506|   256k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   163k|    {
  471|   163k|        return m_value;
  472|   163k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  59.8k|    {
 8855|  59.8k|        return m_str;
 8856|  59.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  59.8k|        : m_str(r.str)
 8850|  59.8k|    {
 8851|  59.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1753|  64.2k|    {
 1754|  64.2k|        return has_value();
 1755|  64.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1828|   163k|    {
 1829|   163k|        return &value();
 1830|   163k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   163k|    {
 1783|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   163k|        return this->get_value();
 1785|   163k|    }
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  29.9k|{
 9962|  29.9k|    auto result = make_scan_result<Source, Args...>();
 9963|  29.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  29.9k|                                   make_scan_args(result->values())));
 9965|  29.9k|    return result;
 9966|  29.9k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  4.40k|{
10003|  4.40k|    auto result = make_scan_result<Source, T>();
10004|  4.40k|    fill_scan_result(
10005|  4.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  4.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  4.40k|                            detail::make_arg<scan_context>(result->value())));
10007|  4.40k|    return result;
10008|  4.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  39.6k|{
 9893|  39.6k|    auto result = make_scan_result<Source, Args...>();
 9894|  39.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  39.6k|                                   make_scan_args(result->values())));
 9896|  39.6k|    return result;
 9897|  39.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEEDav:
 9848|  85.1k|{
 9849|  85.1k|    return scan_result_type<Source, Args...>();
 9850|  85.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1565|  85.1k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  441|  85.1k|        : m_value(T{}), m_has_value(true)
  442|  85.1k|    {
  443|  85.1k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2Ev:
 6692|  85.1k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  85.1k|{
 9834|  85.1k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 70.7k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  70.7k|    else {
 9838|  70.7k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  70.7k|    static_cast<    \
  |  | 1109|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  70.7k|    }
 9840|  85.1k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   340k|    {
  505|   340k|        return m_has_value;
  506|   340k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   226k|    {
  471|   226k|        return m_value;
  472|   226k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  79.2k|    {
 8855|  79.2k|        return m_str;
 8856|  79.2k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  79.2k|        : m_str(r.str)
 8850|  79.2k|    {
 8851|  79.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1753|  85.1k|    {
 1754|  85.1k|        return has_value();
 1755|  85.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1828|   226k|    {
 1829|   226k|        return &value();
 1830|   226k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   226k|    {
 1783|   226k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   226k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   226k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   226k|        return this->get_value();
 1785|   226k|    }
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  39.6k|{
 9962|  39.6k|    auto result = make_scan_result<Source, Args...>();
 9963|  39.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  39.6k|                                   make_scan_args(result->values())));
 9965|  39.6k|    return result;
 9966|  39.6k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  5.92k|{
10003|  5.92k|    auto result = make_scan_result<Source, T>();
10004|  5.92k|    fill_scan_result(
10005|  5.92k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  5.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  5.92k|                            detail::make_arg<scan_context>(result->value())));
10007|  5.92k|    return result;
10008|  5.92k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  32.4k|{
 9893|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9894|  32.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  32.4k|                                   make_scan_args(result->values())));
 9896|  32.4k|    return result;
 9897|  32.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEEDav:
 9848|  69.7k|{
 9849|  69.7k|    return scan_result_type<Source, Args...>();
 9850|  69.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1565|  69.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  441|  69.7k|        : m_value(T{}), m_has_value(true)
  442|  69.7k|    {
  443|  69.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2Ev:
 6692|  69.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  69.7k|{
 9834|  69.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  69.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 55.2k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  55.2k|    else {
 9838|  55.2k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  55.2k|    static_cast<    \
  |  | 1109|  55.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  55.2k|    }
 9840|  69.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   278k|    {
  505|   278k|        return m_has_value;
  506|   278k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   180k|    {
  471|   180k|        return m_value;
  472|   180k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  64.9k|    {
 8855|  64.9k|        return m_str;
 8856|  64.9k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  64.9k|        : m_str(r.str)
 8850|  64.9k|    {
 8851|  64.9k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1753|  69.7k|    {
 1754|  69.7k|        return has_value();
 1755|  69.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1828|   180k|    {
 1829|   180k|        return &value();
 1830|   180k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   180k|    {
 1783|   180k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   180k|        return this->get_value();
 1785|   180k|    }
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  32.4k|{
 9962|  32.4k|    auto result = make_scan_result<Source, Args...>();
 9963|  32.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  32.4k|                                   make_scan_args(result->values())));
 9965|  32.4k|    return result;
 9966|  32.4k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  4.83k|{
10003|  4.83k|    auto result = make_scan_result<Source, T>();
10004|  4.83k|    fill_scan_result(
10005|  4.83k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  4.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  4.83k|                            detail::make_arg<scan_context>(result->value())));
10007|  4.83k|    return result;
10008|  4.83k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  40.3k|{
 9893|  40.3k|    auto result = make_scan_result<Source, Args...>();
 9894|  40.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  40.3k|                                   make_scan_args(result->values())));
 9896|  40.3k|    return result;
 9897|  40.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEEDav:
 9848|  86.6k|{
 9849|  86.6k|    return scan_result_type<Source, Args...>();
 9850|  86.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1565|  86.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  441|  86.6k|        : m_value(T{}), m_has_value(true)
  442|  86.6k|    {
  443|  86.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2Ev:
 6692|  86.6k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  86.6k|{
 9834|  86.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 72.1k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  72.1k|    else {
 9838|  72.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  72.1k|    static_cast<    \
  |  | 1109|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  72.1k|    }
 9840|  86.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   346k|    {
  505|   346k|        return m_has_value;
  506|   346k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   230k|    {
  471|   230k|        return m_value;
  472|   230k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  80.6k|    {
 8855|  80.6k|        return m_str;
 8856|  80.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  80.6k|        : m_str(r.str)
 8850|  80.6k|    {
 8851|  80.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1753|  86.6k|    {
 1754|  86.6k|        return has_value();
 1755|  86.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1828|   230k|    {
 1829|   230k|        return &value();
 1830|   230k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   230k|    {
 1783|   230k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   230k|        return this->get_value();
 1785|   230k|    }
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  40.3k|{
 9962|  40.3k|    auto result = make_scan_result<Source, Args...>();
 9963|  40.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  40.3k|                                   make_scan_args(result->values())));
 9965|  40.3k|    return result;
 9966|  40.3k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  6.02k|{
10003|  6.02k|    auto result = make_scan_result<Source, T>();
10004|  6.02k|    fill_scan_result(
10005|  6.02k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  6.02k|                            detail::make_arg<scan_context>(result->value())));
10007|  6.02k|    return result;
10008|  6.02k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  32.8k|{
 9893|  32.8k|    auto result = make_scan_result<Source, Args...>();
 9894|  32.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  32.8k|                                   make_scan_args(result->values())));
 9896|  32.8k|    return result;
 9897|  32.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEEDav:
 9848|  70.4k|{
 9849|  70.4k|    return scan_result_type<Source, Args...>();
 9850|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1565|  70.4k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  441|  70.4k|        : m_value(T{}), m_has_value(true)
  442|  70.4k|    {
  443|  70.4k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2Ev:
 6692|  70.4k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  70.4k|{
 9834|  70.4k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 56.0k]
  |  |  ------------------
  ------------------
 9835|  14.4k|        out = unexpected(in.error());
 9836|  14.4k|    }
 9837|  56.0k|    else {
 9838|  56.0k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  56.0k|    static_cast<    \
  |  | 1109|  56.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  56.0k|    }
 9840|  70.4k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  14.4k|        : base(unexpect, std::move(e.error())),
 1630|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.4k|    {
 1632|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.4k|    {
 1330|  14.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1570|  14.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  916|  14.4k|    {
  917|  14.4k|        assign_common(std::move(other));
  918|  14.4k|        return *this;
  919|  14.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  14.4k|    {
  964|  14.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.4k, False: 0]
  ------------------
  965|  14.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   281k|    {
  505|   281k|        return m_has_value;
  506|   281k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   182k|    {
  471|   182k|        return m_value;
  472|   182k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  14.4k|    {
 1060|  14.4k|        this->destroy_value();
 1061|  14.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  14.4k|    {
  519|  14.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.4k|                                  std::forward<Args>(args)...);
  521|  14.4k|        m_has_value = false;
  522|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.4k|    {
  496|  14.4k|        return std::move(m_unexpected);
  497|  14.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  65.6k|    {
 8855|  65.6k|        return m_str;
 8856|  65.6k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  65.6k|        : m_str(r.str)
 8850|  65.6k|    {
 8851|  65.6k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1753|  70.4k|    {
 1754|  70.4k|        return has_value();
 1755|  70.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1828|   182k|    {
 1829|   182k|        return &value();
 1830|   182k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   182k|    {
 1783|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   182k|        return this->get_value();
 1785|   182k|    }
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  32.8k|{
 9962|  32.8k|    auto result = make_scan_result<Source, Args...>();
 9963|  32.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  32.8k|                                   make_scan_args(result->values())));
 9965|  32.8k|    return result;
 9966|  32.8k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  4.89k|{
10003|  4.89k|    auto result = make_scan_result<Source, T>();
10004|  4.89k|    fill_scan_result(
10005|  4.89k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  4.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  4.89k|                            detail::make_arg<scan_context>(result->value())));
10007|  4.89k|    return result;
10008|  4.89k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   174k|    {
 2883|   174k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   174k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   174k|    {
 2864|   174k|        return decay_copy(t.begin());
 2865|   174k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2107|  1.19M|{
 2108|  1.19M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  1.19M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   370k|    {
 2940|   370k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   370k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   370k|    {
 2922|   370k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   370k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEEDav:
 9848|  30.7k|{
 9849|  30.7k|    return scan_result_type<Source, Args...>();
 9850|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2Ev:
 1565|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.7k|        : m_value(T{}), m_has_value(true)
  442|  30.7k|    {
  443|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2Ev:
 6692|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6535|   184k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3473|   184k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  30.7k|{
 9834|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 1.84k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  1.84k|    else {
 9838|  1.84k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  1.84k|    static_cast<    \
  |  | 1109|  1.84k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  1.84k|    }
 9840|  30.7k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1753|   184k|    {
 1754|   184k|        return has_value();
 1755|   184k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   369k|    {
  505|   369k|        return m_has_value;
  506|   369k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1759|   173k|    {
 1760|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   173k|        return this->get_unexpected().error();
 1762|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   173k|    {
  488|   173k|        return m_unexpected;
  489|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEaSEOSC_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvEaSEOSD_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   122k|    {
  505|   122k|        return m_has_value;
  506|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  34.4k|    {
  471|  34.4k|        return m_value;
  472|  34.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6566|  11.3k|    {
 6567|  11.3k|        m_range = std::forward<Other>(r);
 6568|  11.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|  11.3k|    {
 1809|  11.3k|        return value();
 1810|  11.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|  11.3k|    {
 1783|  11.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  11.3k|        return this->get_value();
 1785|  11.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  11.3k|    {
  471|  11.3k|        return m_value;
  472|  11.3k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|  88.1k|{
 9592|  88.1k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  88.1k|    auto result = vscan_impl(buffer, format, args);
 9595|  88.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 82.5k, False: 5.56k]
  |  |  ------------------
  ------------------
 9596|  82.5k|        return unexpected(result.error());
 9597|  82.5k|    }
 9598|  5.56k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  5.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  88.1k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5398|   184k|{
 5399|   184k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   184k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   184k|                  "\n"
 5403|   184k|                  "Unsupported range type given as input to a scanning "
 5404|   184k|                  "function.\n"
 5405|   184k|                  "A range needs to have a character type (value type) "
 5406|   184k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   184k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   184k|                  "to be included.\n"
 5409|   184k|                  "See the scnlib documentation for more details.");
 5410|   184k|    static_assert(
 5411|   184k|        !std::is_same_v<T, custom_char_traits>,
 5412|   184k|        "\n"
 5413|   184k|        "Unsupported range type given as input to a scanning "
 5414|   184k|        "function.\n"
 5415|   184k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   184k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   184k|        "not supported.");
 5418|   184k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   184k|                  "\n"
 5420|   184k|                  "Unsupported range type given as input to a scanning "
 5421|   184k|                  "function.\n"
 5422|   184k|                  "file_marker_found cannot be used as an "
 5423|   184k|                  "source range type to scn::scan.\n"
 5424|   184k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   184k|                  "and do not provide an explicit source range, "
 5426|   184k|                  "or use scn::scan with a FILE* directly.");
 5427|   184k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   184k|                  "\n"
 5429|   184k|                  "Unsupported range type given as input to a scanning "
 5430|   184k|                  "function.\n"
 5431|   184k|                  "In order to be scannable, a range needs to satisfy "
 5432|   184k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   184k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   184k|                  "\n"
 5435|   184k|                  "Unsupported range type given as input to a scanning "
 5436|   184k|                  "function.\n"
 5437|   184k|                  "A range needs to model forward_range and have a valid "
 5438|   184k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   184k|                  "Examples of scannable ranges are std::string, "
 5440|   184k|                  "std::string_view, "
 5441|   184k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   184k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   184k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   184k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   184k|{
 5338|   184k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   184k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   184k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   184k|    {
 3014|   184k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   184k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   184k|    {
 2995|   184k|        return t.data();
 2996|   184k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3396|   184k|    {
 3397|   184k|        return detail::to_address(ranges::begin(derived()));
 3398|   184k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   616k|{
  331|   616k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   616k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   616k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  308|   616k|{
  309|   616k|    return p;
  310|   616k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   196k|    {
 2883|   196k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   196k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   196k|    {
 2864|   196k|        return decay_copy(t.begin());
 2865|   196k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3493|  36.7M|    {
 3494|  36.7M|        return m_iterator;
 3495|  36.7M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3352|   184k|    {
 3353|   184k|        return static_cast<const D&>(*this);
 3354|   184k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   184k|    {
 3089|   184k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   184k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   184k|    {
 3055|   184k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   184k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|   551k|    {
 3510|   551k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|   551k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|   173k|        : base(unexpect, std::move(e.error())),
 1630|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   173k|    {
 1632|   173k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   173k|          m_has_value(false)
  466|   173k|    {
  467|   173k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   184k|    {
 1330|   184k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|  11.3k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  11.3k|                      ranges::iterator_t<SourceRange>>) {
 6799|  11.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  11.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   437k|    {
 2883|   437k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   437k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   437k|    {
 2864|   437k|        return decay_copy(t.begin());
 2865|   437k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6783|  11.3k|{
 6784|  11.3k|    return ranges::end(source);
 6785|  11.3k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  11.3k|    {
 2940|  11.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  11.3k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  11.3k|    {
 2922|  11.3k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  11.3k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3497|  35.6M|    {
 3498|  35.6M|        return m_sentinel;
 3499|  35.6M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  11.3k|        : base(std::in_place, std::forward<U>(val)),
 1584|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  11.3k|    {
 1586|  11.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|  11.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  11.3k|    {
  457|  11.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|  29.3k|    {
 8855|  29.3k|        return m_str;
 8856|  29.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJaEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  58.6k|{
 6196|  58.6k|    detail::check_scan_arg_types<Args...>();
 6197|  58.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  58.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEEC2ERNSt3__15tupleIJaEEE:
 6171|  58.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  58.6k|    {
 6173|  58.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  58.6k|    {
 6181|  58.6k|        return {detail::make_arg<
 6182|  58.6k|            kind, Context,
 6183|  58.6k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  58.6k|                                 typename Context::char_type>::value>(args)...};
 6185|  58.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE1EavEEPvRT2_:
 5960|  58.6k|{
 5961|  58.6k|    return make_value<Context>(value).ref_value;
 5962|  58.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEEDaRT0_:
 5895|  61.4k|{
 5896|  61.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  61.4k|                                  needs_context_tag>) {
 5900|  61.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  61.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERa:
 5702|  61.4k|    {                                                                        \
 5703|  61.4k|        return val;                                                          \
 5704|  61.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJaEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  58.6k|        : basic_scan_args(store.desc, store.args.data())
 6222|  58.6k|    {
 6223|  58.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6273|   352k|        : m_desc(desc), m_builtin_values(data)
 6274|   352k|    {
 6275|   352k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  1.43M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.43M|    static_cast<    \
  |  | 1109|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.43M|    static_cast<    \
  |  | 1109|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  1.43M|    {
 3480|  1.43M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8536|   352k|{
 8537|   352k|    return s;
 8538|   352k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8508|   352k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.3k|        : m_str(r.str)
 8850|  29.3k|    {
 8851|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1753|  30.7k|    {
 1754|  30.7k|        return has_value();
 1755|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1828|  34.4k|    {
 1829|  34.4k|        return &value();
 1830|  34.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  34.4k|    {
 1783|  34.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  34.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  34.4k|        return this->get_value();
 1785|  34.4k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6555|  11.3k|    {
 6556|  11.3k|        return ranges::begin(m_range);
 6557|  11.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|  88.1k|{
 9608|  88.1k|#if !SCN_DISABLE_LOCALE
 9609|  88.1k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  88.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  88.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  88.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  88.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 82.5k, False: 5.56k]
  |  |  ------------------
  ------------------
 9616|  82.5k|        return unexpected(result.error());
 9617|  82.5k|    }
 9618|  5.56k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  5.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  88.1k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  8.48k|{
 9632|  8.48k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  8.48k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  8.48k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  8.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.25k, False: 230]
  |  |  ------------------
  ------------------
 9636|  8.25k|        return unexpected(result.error());
 9637|  8.25k|    }
 9638|    230|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  8.48k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEaEENS0_14basic_scan_argIT_EERT0_:
 5945|  2.82k|{
 5946|  2.82k|    check_scan_arg_types<T>();
 5947|       |
 5948|  2.82k|    basic_scan_arg<Context> arg;
 5949|  2.82k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  2.82k|    arg.m_value = make_value<Context>(value);
 5951|  2.82k|    return arg;
 5952|  2.82k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6040|   369k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEEDav:
 9848|  30.6k|{
 9849|  30.6k|    return scan_result_type<Source, Args...>();
 9850|  30.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2Ev:
 1565|  30.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.6k|        : m_value(T{}), m_has_value(true)
  442|  30.6k|    {
  443|  30.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2Ev:
 6692|  30.6k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  30.6k|{
 9834|  30.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 1.76k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  1.76k|    else {
 9838|  1.76k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  1.76k|    static_cast<    \
  |  | 1109|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  1.76k|    }
 9840|  30.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEaSEOSC_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvEaSEOSD_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   122k|    {
  505|   122k|        return m_has_value;
  506|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  34.1k|    {
  471|  34.1k|        return m_value;
  472|  34.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|  29.2k|    {
 8855|  29.2k|        return m_str;
 8856|  29.2k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJhEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  58.5k|{
 6196|  58.5k|    detail::check_scan_arg_types<Args...>();
 6197|  58.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  58.5k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEEC2ERNSt3__15tupleIJhEEE:
 6171|  58.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  58.5k|    {
 6173|  58.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  58.5k|    {
 6181|  58.5k|        return {detail::make_arg<
 6182|  58.5k|            kind, Context,
 6183|  58.5k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  58.5k|                                 typename Context::char_type>::value>(args)...};
 6185|  58.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE7EhvEEPvRT2_:
 5960|  58.5k|{
 5961|  58.5k|    return make_value<Context>(value).ref_value;
 5962|  58.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEEDaRT0_:
 5895|  61.3k|{
 5896|  61.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  61.3k|                                  needs_context_tag>) {
 5900|  61.3k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  61.3k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERh:
 5702|  61.3k|    {                                                                        \
 5703|  61.3k|        return val;                                                          \
 5704|  61.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJhEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  58.5k|        : basic_scan_args(store.desc, store.args.data())
 6222|  58.5k|    {
 6223|  58.5k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.2k|        : m_str(r.str)
 8850|  29.2k|    {
 8851|  29.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1753|  30.6k|    {
 1754|  30.6k|        return has_value();
 1755|  30.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1828|  34.1k|    {
 1829|  34.1k|        return &value();
 1830|  34.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  34.1k|    {
 1783|  34.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  34.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  34.1k|        return this->get_value();
 1785|  34.1k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEhEENS0_14basic_scan_argIT_EERT0_:
 5945|  2.80k|{
 5946|  2.80k|    check_scan_arg_types<T>();
 5947|       |
 5948|  2.80k|    basic_scan_arg<Context> arg;
 5949|  2.80k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  2.80k|    arg.m_value = make_value<Context>(value);
 5951|  2.80k|    return arg;
 5952|  2.80k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEEDav:
 9848|  30.8k|{
 9849|  30.8k|    return scan_result_type<Source, Args...>();
 9850|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1565|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.8k|        : m_value(T{}), m_has_value(true)
  442|  30.8k|    {
  443|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6692|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  30.8k|{
 9834|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 1.93k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  1.93k|    else {
 9838|  1.93k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  1.93k|    static_cast<    \
  |  | 1109|  1.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  1.93k|    }
 9840|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   123k|    {
  505|   123k|        return m_has_value;
  506|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  34.7k|    {
  471|  34.7k|        return m_value;
  472|  34.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|  29.4k|    {
 8855|  29.4k|        return m_str;
 8856|  29.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  58.8k|{
 6196|  58.8k|    detail::check_scan_arg_types<Args...>();
 6197|  58.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  58.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6171|  58.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  58.8k|    {
 6173|  58.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  58.8k|    {
 6181|  58.8k|        return {detail::make_arg<
 6182|  58.8k|            kind, Context,
 6183|  58.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  58.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  58.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5960|  58.8k|{
 5961|  58.8k|    return make_value<Context>(value).ref_value;
 5962|  58.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5895|  61.6k|{
 5896|  61.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  61.6k|                                  needs_context_tag>) {
 5900|  61.6k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  61.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5702|  61.6k|    {                                                                        \
 5703|  61.6k|        return val;                                                          \
 5704|  61.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  58.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  58.8k|    {
 6223|  58.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.4k|        : m_str(r.str)
 8850|  29.4k|    {
 8851|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1753|  30.8k|    {
 1754|  30.8k|        return has_value();
 1755|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1828|  34.7k|    {
 1829|  34.7k|        return &value();
 1830|  34.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  34.7k|    {
 1783|  34.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  34.7k|        return this->get_value();
 1785|  34.7k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEENS0_14basic_scan_argIT_EERT0_:
 5945|  2.83k|{
 5946|  2.83k|    check_scan_arg_types<T>();
 5947|       |
 5948|  2.83k|    basic_scan_arg<Context> arg;
 5949|  2.83k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  2.83k|    arg.m_value = make_value<Context>(value);
 5951|  2.83k|    return arg;
 5952|  2.83k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEEDav:
 9848|  30.7k|{
 9849|  30.7k|    return scan_result_type<Source, Args...>();
 9850|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1565|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.7k|        : m_value(T{}), m_has_value(true)
  442|  30.7k|    {
  443|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6692|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  30.7k|{
 9834|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 1.83k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  1.83k|    else {
 9838|  1.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  1.83k|    static_cast<    \
  |  | 1109|  1.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  1.83k|    }
 9840|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   122k|    {
  505|   122k|        return m_has_value;
  506|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  34.3k|    {
  471|  34.3k|        return m_value;
  472|  34.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|  29.3k|    {
 8855|  29.3k|        return m_str;
 8856|  29.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  58.6k|{
 6196|  58.6k|    detail::check_scan_arg_types<Args...>();
 6197|  58.6k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  58.6k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6171|  58.6k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  58.6k|    {
 6173|  58.6k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  58.6k|    {
 6181|  58.6k|        return {detail::make_arg<
 6182|  58.6k|            kind, Context,
 6183|  58.6k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  58.6k|                                 typename Context::char_type>::value>(args)...};
 6185|  58.6k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE9EjvEEPvRT2_:
 5960|  58.6k|{
 5961|  58.6k|    return make_value<Context>(value).ref_value;
 5962|  58.6k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5895|  61.4k|{
 5896|  61.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  61.4k|                                  needs_context_tag>) {
 5900|  61.4k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  61.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  61.4k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5702|  61.4k|    {                                                                        \
 5703|  61.4k|        return val;                                                          \
 5704|  61.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  58.6k|        : basic_scan_args(store.desc, store.args.data())
 6222|  58.6k|    {
 6223|  58.6k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.3k|        : m_str(r.str)
 8850|  29.3k|    {
 8851|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1753|  30.7k|    {
 1754|  30.7k|        return has_value();
 1755|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1828|  34.3k|    {
 1829|  34.3k|        return &value();
 1830|  34.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  34.3k|    {
 1783|  34.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  34.3k|        return this->get_value();
 1785|  34.3k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEENS0_14basic_scan_argIT_EERT0_:
 5945|  2.81k|{
 5946|  2.81k|    check_scan_arg_types<T>();
 5947|       |
 5948|  2.81k|    basic_scan_arg<Context> arg;
 5949|  2.81k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  2.81k|    arg.m_value = make_value<Context>(value);
 5951|  2.81k|    return arg;
 5952|  2.81k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEEDav:
 9848|  30.9k|{
 9849|  30.9k|    return scan_result_type<Source, Args...>();
 9850|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2Ev:
 1565|  30.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.9k|        : m_value(T{}), m_has_value(true)
  442|  30.9k|    {
  443|  30.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2Ev:
 6692|  30.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  30.9k|{
 9834|  30.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 2.05k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  2.05k|    else {
 9838|  2.05k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  2.05k|    static_cast<    \
  |  | 1109|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  2.05k|    }
 9840|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEaSEOSC_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvEaSEOSD_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   123k|    {
  505|   123k|        return m_has_value;
  506|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  35.0k|    {
  471|  35.0k|        return m_value;
  472|  35.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|  29.5k|    {
 8855|  29.5k|        return m_str;
 8856|  29.5k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJxEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  59.0k|{
 6196|  59.0k|    detail::check_scan_arg_types<Args...>();
 6197|  59.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  59.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEEC2ERNSt3__15tupleIJxEEE:
 6171|  59.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  59.0k|    {
 6173|  59.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  59.0k|    {
 6181|  59.0k|        return {detail::make_arg<
 6182|  59.0k|            kind, Context,
 6183|  59.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  59.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  59.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5960|  59.0k|{
 5961|  59.0k|    return make_value<Context>(value).ref_value;
 5962|  59.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEEDaRT0_:
 5895|  61.8k|{
 5896|  61.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  61.8k|                                  needs_context_tag>) {
 5900|  61.8k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  61.8k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERx:
 5702|  61.8k|    {                                                                        \
 5703|  61.8k|        return val;                                                          \
 5704|  61.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJxEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  59.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  59.0k|    {
 6223|  59.0k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.5k|        : m_str(r.str)
 8850|  29.5k|    {
 8851|  29.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1753|  30.9k|    {
 1754|  30.9k|        return has_value();
 1755|  30.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1828|  35.0k|    {
 1829|  35.0k|        return &value();
 1830|  35.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  35.0k|    {
 1783|  35.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  35.0k|        return this->get_value();
 1785|  35.0k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEExEENS0_14basic_scan_argIT_EERT0_:
 5945|  2.85k|{
 5946|  2.85k|    check_scan_arg_types<T>();
 5947|       |
 5948|  2.85k|    basic_scan_arg<Context> arg;
 5949|  2.85k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  2.85k|    arg.m_value = make_value<Context>(value);
 5951|  2.85k|    return arg;
 5952|  2.85k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEEDav:
 9848|  30.8k|{
 9849|  30.8k|    return scan_result_type<Source, Args...>();
 9850|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2Ev:
 1565|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.8k|        : m_value(T{}), m_has_value(true)
  442|  30.8k|    {
  443|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2Ev:
 6692|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  30.8k|{
 9834|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 1.92k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  1.92k|    else {
 9838|  1.92k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  1.92k|    static_cast<    \
  |  | 1109|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  1.92k|    }
 9840|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEaSEOSC_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvEaSEOSD_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   123k|    {
  505|   123k|        return m_has_value;
  506|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  34.6k|    {
  471|  34.6k|        return m_value;
  472|  34.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|  29.4k|    {
 8855|  29.4k|        return m_str;
 8856|  29.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJyEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  58.8k|{
 6196|  58.8k|    detail::check_scan_arg_types<Args...>();
 6197|  58.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  58.8k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEEC2ERNSt3__15tupleIJyEEE:
 6171|  58.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  58.8k|    {
 6173|  58.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  58.8k|    {
 6181|  58.8k|        return {detail::make_arg<
 6182|  58.8k|            kind, Context,
 6183|  58.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  58.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  58.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE11EyvEEPvRT2_:
 5960|  58.8k|{
 5961|  58.8k|    return make_value<Context>(value).ref_value;
 5962|  58.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEEDaRT0_:
 5895|  61.6k|{
 5896|  61.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  61.6k|                                  needs_context_tag>) {
 5900|  61.6k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  61.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  61.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERy:
 5702|  61.6k|    {                                                                        \
 5703|  61.6k|        return val;                                                          \
 5704|  61.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJyEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  58.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  58.8k|    {
 6223|  58.8k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.4k|        : m_str(r.str)
 8850|  29.4k|    {
 8851|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1753|  30.8k|    {
 1754|  30.8k|        return has_value();
 1755|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1828|  34.6k|    {
 1829|  34.6k|        return &value();
 1830|  34.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  34.6k|    {
 1783|  34.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  34.6k|        return this->get_value();
 1785|  34.6k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEyEENS0_14basic_scan_argIT_EERT0_:
 5945|  2.83k|{
 5946|  2.83k|    check_scan_arg_types<T>();
 5947|       |
 5948|  2.83k|    basic_scan_arg<Context> arg;
 5949|  2.83k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  2.83k|    arg.m_value = make_value<Context>(value);
 5951|  2.83k|    return arg;
 5952|  2.83k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   173k|    {
 2883|   173k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   173k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   173k|    {
 2864|   173k|        return decay_copy(t.begin());
 2865|   173k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2107|   103M|{
 2108|   103M|    return SCN_FWD(t);
  ------------------
  |  | 1110|   103M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   103M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   369k|    {
 2940|   369k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   369k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   369k|    {
 2922|   369k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   369k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEEDav:
 9848|  30.7k|{
 9849|  30.7k|    return scan_result_type<Source, Args...>();
 9850|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2Ev:
 1565|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.7k|        : m_value(T{}), m_has_value(true)
  442|  30.7k|    {
  443|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2Ev:
 6692|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6535|   184k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3473|   184k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  30.7k|{
 9834|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 1.84k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  1.84k|    else {
 9838|  1.84k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  1.84k|    static_cast<    \
  |  | 1109|  1.84k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  1.84k|    }
 9840|  30.7k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   184k|    {
 1754|   184k|        return has_value();
 1755|   184k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   369k|    {
  505|   369k|        return m_has_value;
  506|   369k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1759|   173k|    {
 1760|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   173k|        return this->get_unexpected().error();
 1762|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   173k|    {
  488|   173k|        return m_unexpected;
  489|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEaSEOSI_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvEaSEOSJ_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   122k|    {
  505|   122k|        return m_has_value;
  506|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  34.4k|    {
  471|  34.4k|        return m_value;
  472|  34.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6566|  11.3k|    {
 6567|  11.3k|        m_range = std::forward<Other>(r);
 6568|  11.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|  11.3k|    {
 1809|  11.3k|        return value();
 1810|  11.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|  11.3k|    {
 1783|  11.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  11.3k|        return this->get_value();
 1785|  11.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  11.3k|    {
  471|  11.3k|        return m_value;
  472|  11.3k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|  88.1k|{
 9592|  88.1k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  88.1k|    auto result = vscan_impl(buffer, format, args);
 9595|  88.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 82.5k, False: 5.56k]
  |  |  ------------------
  ------------------
 9596|  82.5k|        return unexpected(result.error());
 9597|  82.5k|    }
 9598|  5.56k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  5.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  88.1k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5398|   184k|{
 5399|   184k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   184k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   184k|                  "\n"
 5403|   184k|                  "Unsupported range type given as input to a scanning "
 5404|   184k|                  "function.\n"
 5405|   184k|                  "A range needs to have a character type (value type) "
 5406|   184k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   184k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   184k|                  "to be included.\n"
 5409|   184k|                  "See the scnlib documentation for more details.");
 5410|   184k|    static_assert(
 5411|   184k|        !std::is_same_v<T, custom_char_traits>,
 5412|   184k|        "\n"
 5413|   184k|        "Unsupported range type given as input to a scanning "
 5414|   184k|        "function.\n"
 5415|   184k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   184k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   184k|        "not supported.");
 5418|   184k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   184k|                  "\n"
 5420|   184k|                  "Unsupported range type given as input to a scanning "
 5421|   184k|                  "function.\n"
 5422|   184k|                  "file_marker_found cannot be used as an "
 5423|   184k|                  "source range type to scn::scan.\n"
 5424|   184k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   184k|                  "and do not provide an explicit source range, "
 5426|   184k|                  "or use scn::scan with a FILE* directly.");
 5427|   184k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   184k|                  "\n"
 5429|   184k|                  "Unsupported range type given as input to a scanning "
 5430|   184k|                  "function.\n"
 5431|   184k|                  "In order to be scannable, a range needs to satisfy "
 5432|   184k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   184k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   184k|                  "\n"
 5435|   184k|                  "Unsupported range type given as input to a scanning "
 5436|   184k|                  "function.\n"
 5437|   184k|                  "A range needs to model forward_range and have a valid "
 5438|   184k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   184k|                  "Examples of scannable ranges are std::string, "
 5440|   184k|                  "std::string_view, "
 5441|   184k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   184k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   184k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   184k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   184k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   184k|    else {
 5384|   184k|        return make_forward_scan_buffer(r);
 5385|   184k|    }
 5386|   184k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5202|   184k|{
 5203|   184k|    return basic_scan_forward_buffer_impl(range);
 5204|   184k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   184k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   184k|          m_cursor(ranges::begin(*m_range))
 4784|   184k|    {
 4785|   184k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4754|   184k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   184k|    {
 4756|   184k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4445|   184k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   184k|    {
 4447|   184k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4358|   184k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   196k|    {
 2883|   196k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   196k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   196k|    {
 2864|   196k|        return decay_copy(t.begin());
 2865|   196k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3493|   207k|    {
 3494|   207k|        return m_iterator;
 3495|   207k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4788|  34.2M|    {
 4789|  34.2M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 104k, False: 34.1M]
  ------------------
 4790|   104k|            return false;
 4791|   104k|        }
 4792|  34.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  34.1M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  34.1M|        }
 4795|  34.1M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 33.9M, False: 134k]
  ------------------
 4796|  33.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  33.9M|                                          this->m_current_view.begin(),
 4798|  33.9M|                                          this->m_current_view.end());
 4799|  33.9M|        }
 4800|  34.1M|        m_latest = *m_cursor;
 4801|  34.1M|        ++m_cursor;
 4802|  34.1M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  34.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  34.1M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  34.1M|        }
 4806|  34.1M|        return true;
 4807|  34.2M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   102M|    {
 2940|   102M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   102M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   102M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   102M|    {
 2922|   102M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   102M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   102M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3497|   102M|    {
 3498|   102M|        return m_sentinel;
 3499|   102M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4363|   184k|    {
 4364|   184k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   184k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   184k|        return true;
 4366|   184k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|   173k|        : base(unexpect, std::move(e.error())),
 1630|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   173k|    {
 1632|   173k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   173k|          m_has_value(false)
  466|   173k|    {
  467|   173k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   184k|    {
 1330|   184k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|  11.3k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  11.3k|                      ranges::iterator_t<SourceRange>>) {
 6799|  11.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  11.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  11.3k|    {
 2883|  11.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  11.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  11.3k|    {
 2864|  11.3k|        return decay_copy(t.begin());
 2865|  11.3k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6783|  11.3k|{
 6784|  11.3k|    return ranges::end(source);
 6785|  11.3k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  11.3k|    {
 2940|  11.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  11.3k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  11.3k|    {
 2922|  11.3k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  11.3k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|  11.3k|        : base(std::in_place, std::forward<U>(val)),
 1584|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  11.3k|    {
 1586|  11.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|  11.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  11.3k|    {
  457|  11.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  29.3k|    {
 8855|  29.3k|        return m_str;
 8856|  29.3k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|   196k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   196k|    static_cast<    \
  |  | 1109|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   196k|    static_cast<    \
  |  | 1109|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   196k|    {
 3480|   196k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.3k|        : m_str(r.str)
 8850|  29.3k|    {
 8851|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1753|  30.7k|    {
 1754|  30.7k|        return has_value();
 1755|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1828|  34.4k|    {
 1829|  34.4k|        return &value();
 1830|  34.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|  34.4k|    {
 1783|  34.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  34.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  34.4k|        return this->get_value();
 1785|  34.4k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6555|  11.3k|    {
 6556|  11.3k|        return ranges::begin(m_range);
 6557|  11.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|  88.1k|{
 9608|  88.1k|#if !SCN_DISABLE_LOCALE
 9609|  88.1k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  88.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  88.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  88.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  88.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 82.5k, False: 5.56k]
  |  |  ------------------
  ------------------
 9616|  82.5k|        return unexpected(result.error());
 9617|  82.5k|    }
 9618|  5.56k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  5.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  88.1k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  8.48k|{
 9632|  8.48k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  8.48k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  8.48k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  8.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.25k, False: 230]
  |  |  ------------------
  ------------------
 9636|  8.25k|        return unexpected(result.error());
 9637|  8.25k|    }
 9638|    230|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  8.48k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEEDav:
 9848|  30.6k|{
 9849|  30.6k|    return scan_result_type<Source, Args...>();
 9850|  30.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2Ev:
 1565|  30.6k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.6k|        : m_value(T{}), m_has_value(true)
  442|  30.6k|    {
  443|  30.6k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2Ev:
 6692|  30.6k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  30.6k|{
 9834|  30.6k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 1.76k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  1.76k|    else {
 9838|  1.76k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  1.76k|    static_cast<    \
  |  | 1109|  1.76k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  1.76k|    }
 9840|  30.6k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEaSEOSI_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvEaSEOSJ_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   122k|    {
  505|   122k|        return m_has_value;
  506|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  34.1k|    {
  471|  34.1k|        return m_value;
  472|  34.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  29.2k|    {
 8855|  29.2k|        return m_str;
 8856|  29.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.2k|        : m_str(r.str)
 8850|  29.2k|    {
 8851|  29.2k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1753|  30.6k|    {
 1754|  30.6k|        return has_value();
 1755|  30.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1828|  34.1k|    {
 1829|  34.1k|        return &value();
 1830|  34.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|  34.1k|    {
 1783|  34.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  34.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  34.1k|        return this->get_value();
 1785|  34.1k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEEDav:
 9848|  30.8k|{
 9849|  30.8k|    return scan_result_type<Source, Args...>();
 9850|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2Ev:
 1565|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.8k|        : m_value(T{}), m_has_value(true)
  442|  30.8k|    {
  443|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2Ev:
 6692|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  30.8k|{
 9834|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 1.93k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  1.93k|    else {
 9838|  1.93k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  1.93k|    static_cast<    \
  |  | 1109|  1.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  1.93k|    }
 9840|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEaSEOSI_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvEaSEOSJ_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   123k|    {
  505|   123k|        return m_has_value;
  506|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  34.7k|    {
  471|  34.7k|        return m_value;
  472|  34.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  29.4k|    {
 8855|  29.4k|        return m_str;
 8856|  29.4k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.4k|        : m_str(r.str)
 8850|  29.4k|    {
 8851|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1753|  30.8k|    {
 1754|  30.8k|        return has_value();
 1755|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1828|  34.7k|    {
 1829|  34.7k|        return &value();
 1830|  34.7k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|  34.7k|    {
 1783|  34.7k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  34.7k|        return this->get_value();
 1785|  34.7k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEEDav:
 9848|  30.7k|{
 9849|  30.7k|    return scan_result_type<Source, Args...>();
 9850|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2Ev:
 1565|  30.7k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.7k|        : m_value(T{}), m_has_value(true)
  442|  30.7k|    {
  443|  30.7k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2Ev:
 6692|  30.7k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  30.7k|{
 9834|  30.7k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 1.83k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  1.83k|    else {
 9838|  1.83k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  1.83k|    static_cast<    \
  |  | 1109|  1.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  1.83k|    }
 9840|  30.7k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEaSEOSI_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvEaSEOSJ_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   122k|    {
  505|   122k|        return m_has_value;
  506|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  34.3k|    {
  471|  34.3k|        return m_value;
  472|  34.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  29.3k|    {
 8855|  29.3k|        return m_str;
 8856|  29.3k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.3k|        : m_str(r.str)
 8850|  29.3k|    {
 8851|  29.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1753|  30.7k|    {
 1754|  30.7k|        return has_value();
 1755|  30.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1828|  34.3k|    {
 1829|  34.3k|        return &value();
 1830|  34.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|  34.3k|    {
 1783|  34.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  34.3k|        return this->get_value();
 1785|  34.3k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEEDav:
 9848|  30.9k|{
 9849|  30.9k|    return scan_result_type<Source, Args...>();
 9850|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2Ev:
 1565|  30.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.9k|        : m_value(T{}), m_has_value(true)
  442|  30.9k|    {
  443|  30.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2Ev:
 6692|  30.9k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  30.9k|{
 9834|  30.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 2.05k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  2.05k|    else {
 9838|  2.05k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  2.05k|    static_cast<    \
  |  | 1109|  2.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  2.05k|    }
 9840|  30.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEaSEOSI_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvEaSEOSJ_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   123k|    {
  505|   123k|        return m_has_value;
  506|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  35.0k|    {
  471|  35.0k|        return m_value;
  472|  35.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  29.5k|    {
 8855|  29.5k|        return m_str;
 8856|  29.5k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.5k|        : m_str(r.str)
 8850|  29.5k|    {
 8851|  29.5k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1753|  30.9k|    {
 1754|  30.9k|        return has_value();
 1755|  30.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1828|  35.0k|    {
 1829|  35.0k|        return &value();
 1830|  35.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|  35.0k|    {
 1783|  35.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  35.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  35.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  35.0k|        return this->get_value();
 1785|  35.0k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEEDav:
 9848|  30.8k|{
 9849|  30.8k|    return scan_result_type<Source, Args...>();
 9850|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2Ev:
 1565|  30.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2Ev:
  441|  30.8k|        : m_value(T{}), m_has_value(true)
  442|  30.8k|    {
  443|  30.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2Ev:
 6692|  30.8k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|  30.8k|{
 9834|  30.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.8k, False: 1.92k]
  |  |  ------------------
  ------------------
 9835|  28.8k|        out = unexpected(in.error());
 9836|  28.8k|    }
 9837|  1.92k|    else {
 9838|  1.92k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  1.92k|    static_cast<    \
  |  | 1109|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  1.92k|    }
 9840|  30.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  28.8k|        : base(unexpect, std::move(e.error())),
 1630|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  28.8k|    {
 1632|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.8k|          m_has_value(false)
  466|  28.8k|    {
  467|  28.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  28.8k|    {
 1330|  28.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEaSEOSI_:
 1570|  28.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvEaSEOSJ_:
  916|  28.8k|    {
  917|  28.8k|        assign_common(std::move(other));
  918|  28.8k|        return *this;
  919|  28.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  28.8k|    {
  964|  28.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 28.8k, False: 0]
  ------------------
  965|  28.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 28.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  28.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  28.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   123k|    {
  505|   123k|        return m_has_value;
  506|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  34.6k|    {
  471|  34.6k|        return m_value;
  472|  34.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  28.8k|    {
 1060|  28.8k|        this->destroy_value();
 1061|  28.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  28.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  28.8k|    {
  519|  28.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  28.8k|                                  std::forward<Args>(args)...);
  521|  28.8k|        m_has_value = false;
  522|  28.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.8k|    {
  488|  28.8k|        return m_unexpected;
  489|  28.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  28.8k|    {
  496|  28.8k|        return std::move(m_unexpected);
  497|  28.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  29.4k|    {
 8855|  29.4k|        return m_str;
 8856|  29.4k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  29.4k|        : m_str(r.str)
 8850|  29.4k|    {
 8851|  29.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1753|  30.8k|    {
 1754|  30.8k|        return has_value();
 1755|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1828|  34.6k|    {
 1829|  34.6k|        return &value();
 1830|  34.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|  34.6k|    {
 1783|  34.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  34.6k|        return this->get_value();
 1785|  34.6k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3758|   718k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3759|   718k|    {
 3760|   718k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|   718k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3761|   718k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   592k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   592k|    else {
 3999|   592k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   592k|    }
 4001|   592k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  10.5M|    {
 3494|  10.5M|        return m_iterator;
 3495|  10.5M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  36.6M|    {
 3494|  36.6M|        return m_iterator;
 3495|  36.6M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  586|  5.90M|    {
  587|  5.90M|        return m_has_value;
  588|  5.90M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  569|   578k|    {
  570|   578k|        return m_unexpected;
  571|   578k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1759|   445k|    {
 1760|   445k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   445k|        return this->get_unexpected().error();
 1762|   445k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 7058|   858k|    {
 7059|   858k|        SCN_GCC_COMPAT_PUSH
 7060|   858k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 7061|   858k|        switch (type) {
 7062|   174k|            case presentation_type::none:
  ------------------
  |  Branch (7062:13): [True: 174k, False: 684k]
  ------------------
 7063|   174k|                return 10;
 7064|   175k|            case presentation_type::int_generic:
  ------------------
  |  Branch (7064:13): [True: 175k, False: 683k]
  ------------------
 7065|   175k|                return 0;
 7066|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (7066:13): [True: 0, False: 858k]
  ------------------
 7067|      0|                return arbitrary_base;
 7068|       |
 7069|  76.7k|            case presentation_type::int_binary:
  ------------------
  |  Branch (7069:13): [True: 76.7k, False: 782k]
  ------------------
 7070|  76.7k|                return 2;
 7071|   110k|            case presentation_type::int_octal:
  ------------------
  |  Branch (7071:13): [True: 110k, False: 748k]
  ------------------
 7072|   110k|                return 8;
 7073|   157k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (7073:13): [True: 157k, False: 701k]
  ------------------
 7074|   157k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (7074:13): [True: 0, False: 858k]
  ------------------
 7075|   157k|                return 10;
 7076|   164k|            case presentation_type::int_hex:
  ------------------
  |  Branch (7076:13): [True: 164k, False: 694k]
  ------------------
 7077|   164k|                return 16;
 7078|       |
 7079|      0|            default:
  ------------------
  |  Branch (7079:13): [True: 0, False: 858k]
  ------------------
 7080|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7081|      0|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7082|   858k|        }
 7083|   858k|        SCN_GCC_COMPAT_POP
 7084|   858k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7096|  1.02M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7140|   750k|    {
 7141|   750k|        m_specs.type = type;
 7142|   750k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7202|  99.0k|    {
 7203|  99.0k|        SCN_UNLIKELY_ATTR
 7204|  99.0k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7205|  99.0k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7213|   929k|    {
 7214|   929k|        return m_error;
 7215|   929k|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3935|   592k|{
 3936|   592k|    return unexpected(scan_error{c, m});
 3937|   592k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4325|  1.07M|{
 4326|       |    // Pattern_White_Space property
 4327|  1.07M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4327:13): [True: 945k, False: 130k]
  |  Branch (4327:27): [True: 378k, False: 566k]
  ------------------
 4328|  1.07M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4328:12): [True: 9.25k, False: 687k]
  ------------------
 4329|  1.07M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4329:12): [True: 3.48k, False: 684k]
  ------------------
 4330|  1.07M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4330:12): [True: 1.56k, False: 682k]
  ------------------
 4331|  1.07M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4331:12): [True: 2.08k, False: 680k]
  ------------------
 4332|  1.07M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4332:12): [True: 2.41k, False: 678k]
  ------------------
 4333|  1.07M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4333:12): [True: 0, False: 678k]
  ------------------
 4334|  1.07M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7896|   179k|{
 7897|   179k|    switch (type) {
 7898|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7898:9): [True: 0, False: 179k]
  ------------------
 7899|      0|            return arg_type_category::none;
 7900|       |
 7901|  29.8k|        case arg_type::schar_type:
  ------------------
  |  Branch (7901:9): [True: 29.8k, False: 149k]
  ------------------
 7902|  29.8k|        case arg_type::short_type:
  ------------------
  |  Branch (7902:9): [True: 0, False: 179k]
  ------------------
 7903|  63.0k|        case arg_type::int_type:
  ------------------
  |  Branch (7903:9): [True: 33.2k, False: 146k]
  ------------------
 7904|  63.0k|        case arg_type::long_type:
  ------------------
  |  Branch (7904:9): [True: 0, False: 179k]
  ------------------
 7905|  96.8k|        case arg_type::llong_type:
  ------------------
  |  Branch (7905:9): [True: 33.7k, False: 145k]
  ------------------
 7906|  96.8k|        case arg_type::int128_type:
  ------------------
  |  Branch (7906:9): [True: 0, False: 179k]
  ------------------
 7907|  96.8k|            return arg_type_category::integer;
 7908|       |
 7909|  26.2k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7909:9): [True: 26.2k, False: 153k]
  ------------------
 7910|  26.2k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7910:9): [True: 0, False: 179k]
  ------------------
 7911|  54.2k|        case arg_type::uint_type:
  ------------------
  |  Branch (7911:9): [True: 28.0k, False: 151k]
  ------------------
 7912|  54.2k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7912:9): [True: 0, False: 179k]
  ------------------
 7913|  82.5k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7913:9): [True: 28.3k, False: 151k]
  ------------------
 7914|  82.5k|        case arg_type::uint128_type:
  ------------------
  |  Branch (7914:9): [True: 0, False: 179k]
  ------------------
 7915|  82.5k|            return arg_type_category::unsigned_integer;
 7916|       |
 7917|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7917:9): [True: 0, False: 179k]
  ------------------
 7918|      0|            return arg_type_category::pointer;
 7919|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7919:9): [True: 0, False: 179k]
  ------------------
 7920|      0|            return arg_type_category::boolean;
 7921|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7921:9): [True: 0, False: 179k]
  ------------------
 7922|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7922:9): [True: 0, False: 179k]
  ------------------
 7923|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7923:9): [True: 0, False: 179k]
  ------------------
 7924|      0|            return arg_type_category::character;
 7925|       |
 7926|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7926:9): [True: 0, False: 179k]
  ------------------
 7927|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7927:9): [True: 0, False: 179k]
  ------------------
 7928|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7928:9): [True: 0, False: 179k]
  ------------------
 7929|      0|        case arg_type::float16_type:
  ------------------
  |  Branch (7929:9): [True: 0, False: 179k]
  ------------------
 7930|      0|        case arg_type::float32_type:
  ------------------
  |  Branch (7930:9): [True: 0, False: 179k]
  ------------------
 7931|      0|        case arg_type::float64_type:
  ------------------
  |  Branch (7931:9): [True: 0, False: 179k]
  ------------------
 7932|      0|        case arg_type::float128_type:
  ------------------
  |  Branch (7932:9): [True: 0, False: 179k]
  ------------------
 7933|      0|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (7933:9): [True: 0, False: 179k]
  ------------------
 7934|      0|            return arg_type_category::floating;
 7935|       |
 7936|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7936:9): [True: 0, False: 179k]
  ------------------
 7937|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7937:9): [True: 0, False: 179k]
  ------------------
 7938|      0|        case arg_type::string_view_type:
  ------------------
  |  Branch (7938:9): [True: 0, False: 179k]
  ------------------
 7939|      0|            return arg_type_category::string;
 7940|       |
 7941|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7941:9): [True: 0, False: 179k]
  ------------------
 7942|      0|            return arg_type_category::custom;
 7943|       |
 7944|      0|            SCN_CLANG_PUSH
 7945|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7946|      0|        default:
  ------------------
  |  Branch (7946:9): [True: 0, False: 179k]
  ------------------
 7947|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7948|   179k|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7949|   179k|            SCN_CLANG_POP
 7950|   179k|    }
 7951|       |
 7952|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7953|   179k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1769|   133k|    {
 1770|   133k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|   133k|        return std::move(this->get_unexpected().error());
 1772|   133k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7988|   880k|{
 7989|   880k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  | 1039|   880k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 880k]
  |  |  ------------------
  ------------------
 7990|      0|        return handler.on_error("Invalid type specifier for integer type");
 7991|      0|    }
 7992|   880k|    if (specs.localized) {
  ------------------
  |  Branch (7992:9): [True: 179k, False: 700k]
  ------------------
 7993|   179k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  | 1039|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 7994|       |            // clang-format off
 7995|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7996|       |            // clang-format on
 7997|      0|            return;
 7998|      0|        }
 7999|   179k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  | 1039|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 8000|       |            // clang-format off
 8001|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 8002|       |            // clang-format on
 8003|      0|        }
 8004|   179k|    }
 8005|   880k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1753|  5.33M|    {
 1754|  5.33M|        return has_value();
 1755|  5.33M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4490|  62.0M|    {
 4491|  62.0M|        assert(m_begin);
 4492|  62.0M|        return m_end == nullptr;
 4493|  62.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4507|  1.41M|    {
 4508|  1.41M|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 1.41M]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|  1.41M|        return parent()->get_segment_starting_at(position());
 4514|  1.41M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4501|  34.1M|    {
 4502|  34.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  34.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  34.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4394|  1.41M|    {
 4395|  1.41M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 377k, False: 1.03M]
  |  |  ------------------
  ------------------
 4396|  1.41M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|   377k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|   377k|        }
 4399|  1.03M|        const auto start = pos - m_putback_buffer.size();
 4400|  1.03M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|  1.03M|        return m_current_view.substr(start);
 4402|  1.03M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4496|   336k|    {
 4497|   336k|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4498|   336k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4499|   336k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4485|  2.18M|    {
 4486|  2.18M|        return m_position;
 4487|  2.18M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4416|  1.34M|    {
 4417|  1.34M|        return m_is_contiguous;
 4418|  1.34M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4490|   138G|    {
 4491|   138G|        assert(m_begin);
 4492|   138G|        return m_end == nullptr;
 4493|   138G|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|  5.47k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|  5.47k|    else {
 3999|  5.47k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|  5.47k|    }
 4001|  5.47k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4507|   140k|    {
 4508|   140k|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 140k]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|   140k|        return parent()->get_segment_starting_at(position());
 4514|   140k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4501|  69.5G|    {
 4502|  69.5G|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  69.5G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  69.5G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  69.5G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  69.5G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4394|   140k|    {
 4395|   140k|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.71k, False: 137k]
  |  |  ------------------
  ------------------
 4396|   140k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|  2.71k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|  2.71k|        }
 4399|   137k|        const auto start = pos - m_putback_buffer.size();
 4400|   137k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|   137k|        return m_current_view.substr(start);
 4402|   137k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4496|   100k|    {
 4497|   100k|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4498|   100k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4499|   100k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4485|   245k|    {
 4486|   245k|        return m_position;
 4487|   245k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4416|   554k|    {
 4417|   554k|        return m_is_contiguous;
 4418|   554k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3347|  1.76M|    {
 3348|  1.76M|        return static_cast<D&>(*this);
 3349|  1.76M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3388|  1.76M|    {
 3389|  1.76M|        return detail::to_address(ranges::begin(derived()));
 3390|  1.76M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3347|   425k|    {
 3348|   425k|        return static_cast<D&>(*this);
 3349|   425k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3388|   425k|    {
 3389|   425k|        return detail::to_address(ranges::begin(derived()));
 3390|   425k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9051|   330k|    {
 9052|   330k|        return ranges::subrange{begin(), end()};
 9053|   330k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9043|   330k|    {
 9044|   330k|        return ranges::default_sentinel;
 9045|   330k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  3.44M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  3.44M|    static_cast<    \
  |  | 1109|  3.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  3.44M|    static_cast<    \
  |  | 1109|  3.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  3.44M|    {
 3480|  3.44M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8870|   835k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   424k|    {
 1993|   424k|        return detail::transform_error_impl(std::move(*this),
 1994|   424k|                                            std::forward<F>(f));
 1995|   424k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   424k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   424k|    else {
 1486|   424k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   424k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   424k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 412k, False: 12.0k]
  |  |  ------------------
  ------------------
 1488|   424k|                   ? result(*std::forward<Exp>(exp))
 1489|   424k|                   : result(unexpect,
 1490|  12.0k|                            trivial_invoke(std::forward<F>(f),
 1491|  12.0k|                                           std::forward<Exp>(exp).error()));
 1492|   424k|    }
 1493|   424k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  2.14M|    {
  505|  2.14M|        return m_has_value;
  506|  2.14M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|   738k|    {
 1819|   738k|        return std::move(value());
 1820|   738k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|   834k|    {
 1783|   834k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   834k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   834k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   834k|        return this->get_value();
 1785|   834k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   834k|    {
  471|   834k|        return m_value;
  472|   834k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|  1.33M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.33M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.33M|    {
 1586|  1.33M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  1.33M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.33M|    {
  457|  1.33M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.48M|    {
 1330|  1.48M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  26.7k|{
 1364|  26.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  26.7k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  23.4k|    {
 1770|  23.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  23.4k|        return std::move(this->get_unexpected().error());
 1772|  23.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  23.8k|    {
  488|  23.8k|        return m_unexpected;
  489|  23.8k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  379|   153k|    {
  380|   153k|        return m_unexpected;
  381|   153k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|  40.2k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  40.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  40.2k|    {
 1642|  40.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   142k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   142k|          m_has_value(false)
  466|   142k|    {
  467|   142k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9051|   109k|    {
 9052|   109k|        return ranges::subrange{begin(), end()};
 9053|   109k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9043|   109k|    {
 9044|   109k|        return ranges::default_sentinel;
 9045|   109k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|   970k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   970k|    static_cast<    \
  |  | 1109|   970k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   970k|    static_cast<    \
  |  | 1109|   970k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   970k|    {
 3480|   970k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   135k|    {
 1993|   135k|        return detail::transform_error_impl(std::move(*this),
 1994|   135k|                                            std::forward<F>(f));
 1995|   135k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   135k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   135k|    else {
 1486|   135k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   135k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 133k, False: 1.76k]
  |  |  ------------------
  ------------------
 1488|   135k|                   ? result(*std::forward<Exp>(exp))
 1489|   135k|                   : result(unexpect,
 1490|  1.76k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.76k|                                           std::forward<Exp>(exp).error()));
 1492|   135k|    }
 1493|   135k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   647k|    {
  505|   647k|        return m_has_value;
  506|   647k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|   214k|    {
 1819|   214k|        return std::move(value());
 1820|   214k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|   225k|    {
 1783|   225k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   225k|        return this->get_value();
 1785|   225k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   225k|    {
  471|   225k|        return m_value;
  472|   225k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|   158k|        : base(std::in_place, std::forward<U>(val)),
 1584|   158k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   158k|    {
 1586|   158k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   158k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   158k|    {
  457|   158k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   486k|    {
 1330|   486k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  20.6k|    {
 1770|  20.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  20.6k|        return std::move(this->get_unexpected().error());
 1772|  20.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  20.7k|    {
  488|  20.7k|        return m_unexpected;
  489|  20.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|   106k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   106k|    {
 1642|   106k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   328k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   328k|          m_has_value(false)
  466|   328k|    {
  467|   328k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  364|   592k|        : m_unexpected(std::forward<Err>(e))
  365|   592k|    {
  366|   592k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   592k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   592k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   520k|        : base(unexpect, std::move(e.error())),
 1630|   520k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   520k|    {
 1632|   520k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  464|   520k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   520k|          m_has_value(false)
  466|   520k|    {
  467|   520k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.26M|    {
 1330|  1.26M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|   159k|        : base(unexpect, std::move(e.error())),
 1630|   159k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   159k|    {
 1632|   159k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|   171k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   171k|          m_has_value(false)
  466|   171k|    {
  467|   171k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.67M|    {
 1330|  2.67M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  2.50M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.50M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.50M|    {
 1586|  2.50M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.50M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.50M|    {
  457|  2.50M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1753|  2.67M|    {
 1754|  2.67M|        return has_value();
 1755|  2.67M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  504|  5.35M|    {
  505|  5.35M|        return m_has_value;
  506|  5.35M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1759|   171k|    {
 1760|   171k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   171k|        return this->get_unexpected().error();
 1762|   171k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   171k|    {
  488|   171k|        return m_unexpected;
  489|   171k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  2.22M|    {
 1819|  2.22M|        return std::move(value());
 1820|  2.22M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  2.50M|    {
 1783|  2.50M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.50M|        return this->get_value();
 1785|  2.50M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  470|  2.50M|    {
  471|  2.50M|        return m_value;
  472|  2.50M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|   328k|        : base(unexpect, std::move(e.error())),
 1630|   328k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   328k|    {
 1632|   328k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|   329k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   329k|          m_has_value(false)
  466|   329k|    {
  467|   329k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   618k|    {
 1330|   618k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|   289k|        : base(std::in_place, std::forward<U>(val)),
 1584|   289k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   289k|    {
 1586|   289k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   289k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   289k|    {
  457|   289k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1753|   618k|    {
 1754|   618k|        return has_value();
 1755|   618k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  504|  1.23M|    {
  505|  1.23M|        return m_has_value;
  506|  1.23M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1759|   329k|    {
 1760|   329k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   329k|        return this->get_unexpected().error();
 1762|   329k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   329k|    {
  488|   329k|        return m_unexpected;
  489|   329k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|   278k|    {
 1819|   278k|        return std::move(value());
 1820|   278k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|   289k|    {
 1783|   289k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   289k|        return this->get_value();
 1785|   289k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  470|   289k|    {
  471|   289k|        return m_value;
  472|   289k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   425k|    {
 1993|   425k|        return detail::transform_error_impl(std::move(*this),
 1994|   425k|                                            std::forward<F>(f));
 1995|   425k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   425k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   425k|    else {
 1486|   425k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   425k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   425k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 414k, False: 11.1k]
  |  |  ------------------
  ------------------
 1488|   425k|                   ? result(*std::forward<Exp>(exp))
 1489|   425k|                   : result(unexpect,
 1490|  11.1k|                            trivial_invoke(std::forward<F>(f),
 1491|  11.1k|                                           std::forward<Exp>(exp).error()));
 1492|   425k|    }
 1493|   425k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  1.47M|    {
  505|  1.47M|        return m_has_value;
  506|  1.47M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|   414k|    {
 1819|   414k|        return std::move(value());
 1820|   414k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   510k|    {
 1783|   510k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   510k|        return this->get_value();
 1785|   510k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   510k|    {
  471|   510k|        return m_value;
  472|   510k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1769|  11.1k|    {
 1770|  11.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  11.1k|        return std::move(this->get_unexpected().error());
 1772|  11.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  11.5k|    {
  488|  11.5k|        return m_unexpected;
  489|  11.5k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|  11.1k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  11.1k|    {
 1642|  11.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9035|   967k|    {
 9036|   967k|        return m_current;
 9037|   967k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8928|   660k|    {
 8929|   660k|        return m_locale;
 8930|   660k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8934|   710k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   710k|    static_cast<    \
  |  | 1109|   710k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   710k|    static_cast<    \
  |  | 1109|   710k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   710k|    {
 8936|   710k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   101k|        : base(unexpect, std::move(e.error())),
 1630|   101k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   101k|    {
 1632|   101k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9035|   279k|    {
 9036|   279k|        return m_current;
 9037|   279k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8928|   219k|    {
 8929|   219k|        return m_locale;
 8930|   219k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8934|   318k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   318k|    static_cast<    \
  |  | 1109|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   318k|    static_cast<    \
  |  | 1109|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   318k|    {
 8936|   318k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   221k|        : base(unexpect, std::move(e.error())),
 1630|   221k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   221k|    {
 1632|   221k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   777k|        : base(unexpect, std::move(e.error())),
 1630|   777k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   777k|    {
 1632|   777k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  563|   777k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  564|   777k|          m_has_value(false)
  565|   777k|    {
  566|   777k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   777k|    {
 1330|   777k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1565|  4.54M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  543|  4.54M|        : m_deferred_init(), m_has_value(true)
  544|  4.54M|    {
  545|  4.54M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  2.29M|    {
 4577|  2.29M|        return x.is_at_end();
 4578|  2.29M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4620|  4.86M|    {
 4621|  4.86M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 4.86M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  4.86M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 4.86M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  4.86M|        return !read_at_position();
 4628|  4.86M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4600|  19.7M|    {
 4601|  19.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  19.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  19.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 19.7M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  19.7M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  19.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 17.3M, False: 2.32M]
  |  |  ------------------
  ------------------
 4608|  17.3M|            return true;
 4609|  17.3M|        }
 4610|       |
 4611|  4.51M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 2.32M, False: 2.18M]
  ------------------
 4612|  2.32M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 143k, False: 2.18M]
  ------------------
 4613|   143k|                return false;
 4614|   143k|            }
 4615|  2.32M|        }
 4616|  2.18M|        return true;
 4617|  2.32M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4535|  6.15M|    {
 4536|  6.15M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  6.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  6.15M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 6.15M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  6.15M|        auto res = read_at_position();
 4545|  6.15M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  6.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  6.15M|        return parent()->get_character_at(m_position);
 4547|  6.15M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4405|  6.15M|    {
 4406|  6.15M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  6.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.91M, False: 2.24M]
  |  |  ------------------
  ------------------
 4407|  6.15M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  3.91M|            return m_putback_buffer[pos];
 4409|  3.91M|        }
 4410|  2.24M|        const auto start = pos - m_putback_buffer.size();
 4411|  2.24M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  2.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  2.24M|        return m_current_view[start];
 4413|  2.24M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  1.25M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.25M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.25M|    {
 1586|  1.25M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  1.25M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.25M|    {
  457|  1.25M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.28M|    {
 1330|  1.28M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  364|  49.1k|        : m_unexpected(std::forward<Err>(e))
  365|  49.1k|    {
  366|  49.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  49.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  49.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  23.8k|        : base(unexpect, std::move(e.error())),
 1630|  23.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  23.8k|    {
 1632|  23.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  23.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  23.8k|          m_has_value(false)
  466|  23.8k|    {
  467|  23.8k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  76.7k|        : m_unexpected(std::forward<Args>(args)...)
  374|  76.7k|    {
  375|  76.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  76.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  76.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4521|  8.68M|    {
 4522|  8.68M|        ++m_position;
 4523|  8.68M|        (void)read_at_position();
 4524|  8.68M|        return *this;
 4525|  8.68M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1753|   520k|    {
 1754|   520k|        return has_value();
 1755|   520k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|  96.3k|    {
 1809|  96.3k|        return value();
 1810|  96.3k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4570|  5.46M|    {
 4571|  5.46M|        return !(lhs == rhs);
 4572|  5.46M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4565|  5.77M|    {
 4566|  5.77M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 5.77M, False: 0]
  |  Branch (4566:46): [True: 531k, False: 5.24M]
  ------------------
 4567|  5.77M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  364|  27.5k|        : m_unexpected(std::forward<Err>(e))
  365|  27.5k|    {
  366|  27.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  27.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  27.5k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  9.70k|        : base(unexpect, std::move(e.error())),
 1630|  9.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  9.70k|    {
 1632|  9.70k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  9.70k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  9.70k|          m_has_value(false)
  466|  9.70k|    {
  467|  9.70k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   604k|    {
 1330|   604k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   595k|        : base(std::in_place, std::forward<U>(val)),
 1584|   595k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   595k|    {
 1586|   595k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   595k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   595k|    {
  457|   595k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   604k|    {
 1754|   604k|        return has_value();
 1755|   604k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.20M|    {
  505|  1.20M|        return m_has_value;
  506|  1.20M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|  9.70k|    {
 1760|  9.70k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  9.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  9.70k|        return this->get_unexpected().error();
 1762|  9.70k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  9.70k|    {
  488|  9.70k|        return m_unexpected;
  489|  9.70k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   595k|    {
 1819|   595k|        return std::move(value());
 1820|   595k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   595k|    {
 1783|   595k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   595k|        return this->get_value();
 1785|   595k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   595k|    {
  471|   595k|        return m_value;
  472|   595k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  7.52M|    {
 3498|  7.52M|        return m_sentinel;
 3499|  7.52M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  364|  12.5k|        : m_unexpected(std::forward<Err>(e))
  365|  12.5k|    {
  366|  12.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  12.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  12.5k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  379|  1.20M|    {
  380|  1.20M|        return m_unexpected;
  381|  1.20M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|   110k|        : m_unexpected(std::forward<Args>(args)...)
  374|   110k|    {
  375|   110k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   110k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|   110k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  364|  2.30M|        : m_unexpected(std::forward<Err>(e))
  365|  2.30M|    {
  366|  2.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  2.30M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  379|  2.30M|    {
  380|  2.30M|        return m_unexpected;
  381|  2.30M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  373|  2.30M|        : m_unexpected(std::forward<Args>(args)...)
  374|  2.30M|    {
  375|  2.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  2.30M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  49.1k|{
 1364|  49.1k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  49.1k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  364|  49.1k|        : m_unexpected(std::forward<Err>(e))
  365|  49.1k|    {
  366|  49.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  49.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  49.1k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1363|   133k|{
 1364|   133k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|   133k|}
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  410|  30.5k|{
  411|  30.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  30.5k|        T(std::forward<Args>(args)...);
  413|  30.5k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3120|   129k|    {
 3121|   129k|        return fn::impl(std::forward<T>(t));
 3122|   129k|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3111|   129k|    {
 3112|   129k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3113|   129k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3088|   129k|    {
 3089|   129k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   129k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3054|   129k|    {
 3055|   129k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   129k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  416|  30.5k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  30.5k|    else {
  423|  30.5k|        p->~T();
  424|  30.5k|    }
  425|  30.5k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1759|    360|    {
 1760|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    360|        return this->get_unexpected().error();
 1762|    360|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  11.8k|        : base(unexpect, std::move(e.error())),
 1630|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.8k|    {
 1632|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  23.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  23.2k|          m_has_value(false)
  466|  23.2k|    {
  467|  23.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.61M|    {
 1330|  1.61M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1583|   139k|        : base(std::in_place, std::forward<U>(val)),
 1584|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   139k|    {
 1586|   139k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   139k|    {
  457|   139k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|   840k|        : base(unexpect, std::move(e.error())),
 1630|   840k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   840k|    {
 1632|   840k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|   840k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   840k|          m_has_value(false)
  466|   840k|    {
  467|   840k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1753|  1.30M|    {
 1754|  1.30M|        return has_value();
 1755|  1.30M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  2.75M|    {
  505|  2.75M|        return m_has_value;
  506|  2.75M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1759|   369k|    {
 1760|   369k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   369k|        return this->get_unexpected().error();
 1762|   369k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|   397k|    {
  488|   397k|        return m_unexpected;
  489|   397k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1583|   412k|        : base(std::in_place, std::forward<U>(val)),
 1584|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   412k|    {
 1586|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   412k|    {
  457|   412k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   412k|    {
 1330|   412k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|   141k|    {
 1809|   141k|        return value();
 1810|   141k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|   748k|    {
 1783|   748k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   748k|        return this->get_value();
 1785|   748k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  470|   748k|    {
  471|   748k|        return m_value;
  472|   748k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1753|   412k|    {
 1754|   412k|        return has_value();
 1755|   412k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  504|   825k|    {
  505|   825k|        return m_has_value;
  506|   825k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   412k|    {
 1330|   412k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   412k|    {
 1819|   412k|        return std::move(value());
 1820|   412k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   412k|    {
 1783|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   412k|        return this->get_value();
 1785|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  470|   412k|    {
  471|   412k|        return m_value;
  472|   412k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   336k|    {
 1993|   336k|        return detail::transform_error_impl(std::move(*this),
 1994|   336k|                                            std::forward<F>(f));
 1995|   336k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   336k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   336k|    else {
 1486|   336k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   336k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   336k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 325k, False: 11.4k]
  |  |  ------------------
  ------------------
 1488|   336k|                   ? result(*std::forward<Exp>(exp))
 1489|   336k|                   : result(unexpect,
 1490|  11.4k|                            trivial_invoke(std::forward<F>(f),
 1491|  11.4k|                                           std::forward<Exp>(exp).error()));
 1492|   336k|    }
 1493|   336k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1583|   609k|        : base(std::in_place, std::forward<U>(val)),
 1584|   609k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   609k|    {
 1586|   609k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   609k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   609k|    {
  457|   609k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  11.4k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  11.4k|    {
 1642|  11.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|   607k|    {
 1819|   607k|        return std::move(value());
 1820|   607k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1583|   412k|        : base(std::in_place, std::forward<U>(val)),
 1584|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   412k|    {
 1586|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   412k|    {
  457|   412k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   412k|    {
 1993|   412k|        return detail::transform_error_impl(std::move(*this),
 1994|   412k|                                            std::forward<F>(f));
 1995|   412k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|   412k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   412k|    else {
 1486|   412k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   412k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   412k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 412k, False: 0]
  |  |  ------------------
  ------------------
 1488|   412k|                   ? result(*std::forward<Exp>(exp))
 1489|   412k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   412k|    }
 1493|   412k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  504|   825k|    {
  505|   825k|        return m_has_value;
  506|   825k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1818|   412k|    {
 1819|   412k|        return std::move(value());
 1820|   412k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   412k|    {
 1783|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   412k|        return this->get_value();
 1785|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  470|   412k|    {
  471|   412k|        return m_value;
  472|   412k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   412k|        : base(std::in_place, std::forward<U>(val)),
 1584|   412k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   412k|    {
 1586|   412k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|   412k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   412k|    {
  457|   412k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   412k|    {
 1330|   412k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1753|   412k|    {
 1754|   412k|        return has_value();
 1755|   412k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   825k|    {
  505|   825k|        return m_has_value;
  506|   825k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1818|   412k|    {
 1819|   412k|        return std::move(value());
 1820|   412k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   412k|    {
 1783|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   412k|        return this->get_value();
 1785|   412k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   412k|    {
  471|   412k|        return m_value;
  472|   412k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   309k|    {
 1993|   309k|        return detail::transform_error_impl(std::move(*this),
 1994|   309k|                                            std::forward<F>(f));
 1995|   309k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1475|   309k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   309k|    else {
 1486|   309k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   309k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   309k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 281k, False: 28.2k]
  |  |  ------------------
  ------------------
 1488|   309k|                   ? result(*std::forward<Exp>(exp))
 1489|   309k|                   : result(unexpect,
 1490|  28.2k|                            trivial_invoke(std::forward<F>(f),
 1491|  28.2k|                                           std::forward<Exp>(exp).error()));
 1492|   309k|    }
 1493|   309k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1769|  28.2k|    {
 1770|  28.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  28.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  28.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  28.2k|        return std::move(this->get_unexpected().error());
 1772|  28.2k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  3.25k|        : base(unexpect, std::move(e.error())),
 1630|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.25k|    {
 1632|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  651|  3.25k|        : m_has_value(false)
  652|  3.25k|    {
  653|  3.25k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  715|  3.25k|    {
  716|  3.25k|        scn::detail::construct_at(unexpected_ptr(),
  717|  3.25k|                                  std::forward<Args>(args)...);
  718|  3.25k|        m_has_value = false;
  719|  3.25k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  9.77k|    {
  745|  9.77k|        return reinterpret_cast<unexpected<E>*>(
  746|  9.77k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  9.77k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  9.77k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  60.6k|    {
 1330|  60.6k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|  57.4k|        : base(std::in_place, std::forward<U>(val)),
 1584|  57.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  57.4k|    {
 1586|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  641|  57.4k|        : m_has_value(true)
  642|  57.4k|    {
  643|  57.4k|        construct(std::forward<Args>(args)...);
  644|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  708|  57.4k|    {
  709|  57.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  57.4k|        m_has_value = true;
  711|  57.4k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  410|  57.4k|{
  411|  57.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  57.4k|        T(std::forward<Args>(args)...);
  413|  57.4k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   172k|    {
  733|   172k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   172k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   172k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1753|  60.6k|    {
 1754|  60.6k|        return has_value();
 1755|  60.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  701|   182k|    {
  702|   182k|        return m_has_value;
  703|   182k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1759|  3.25k|    {
 1760|  3.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  3.25k|        return this->get_unexpected().error();
 1762|  3.25k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|  3.25k|    {
  685|  3.25k|        return *unexpected_ptr();
  686|  3.25k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1818|  57.4k|    {
 1819|  57.4k|        return std::move(value());
 1820|  57.4k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|  57.4k|    {
 1783|  57.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  57.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  57.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  57.4k|        return this->get_value();
 1785|  57.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  667|  57.4k|    {
  668|  57.4k|        return *value_ptr();
  669|  57.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  657|  60.6k|    {
  658|  60.6k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 57.4k, False: 3.25k]
  ------------------
  659|  57.4k|            destroy_value();
  660|  57.4k|        }
  661|  3.25k|        else {
  662|  3.25k|            destroy_unexpected();
  663|  3.25k|        }
  664|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  57.4k|    {
  723|  57.4k|        scn::detail::destroy_at(value_ptr());
  724|  57.4k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  416|  57.4k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  57.4k|    else {
  423|  57.4k|        p->~T();
  424|  57.4k|    }
  425|  57.4k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  3.25k|    {
  727|  3.25k|        scn::detail::destroy_at(unexpected_ptr());
  728|  3.25k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|  1.48M|    {
 1754|  1.48M|        return has_value();
 1755|  1.48M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|  2.96M|    {
  505|  2.96M|        return m_has_value;
  506|  2.96M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   142k|    {
 1760|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   142k|        return this->get_unexpected().error();
 1762|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   142k|    {
  488|   142k|        return m_unexpected;
  489|   142k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.05M|    {
 1819|  1.05M|        return std::move(value());
 1820|  1.05M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  1.33M|    {
 1783|  1.33M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.33M|        return this->get_value();
 1785|  1.33M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.33M|    {
  471|  1.33M|        return m_value;
  472|  1.33M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3493|   637k|    {
 3494|   637k|        return m_iterator;
 3495|   637k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3497|   637k|    {
 3498|   637k|        return m_sentinel;
 3499|   637k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   281k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   281k|    static_cast<    \
  |  | 1109|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   281k|    static_cast<    \
  |  | 1109|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   281k|    {
 3480|   281k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  2.57M|    {
 4588|  2.57M|        return !x.is_at_end();
 4589|  2.57M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  11.5k|        : base(unexpect, std::move(e.error())),
 1630|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.5k|    {
 1632|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  11.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  11.5k|          m_has_value(false)
  466|  11.5k|    {
  467|  11.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   947k|    {
 1330|   947k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|   936k|        : base(std::in_place, std::forward<U>(val)),
 1584|   936k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   936k|    {
 1586|   936k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   936k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   936k|    {
  457|   936k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1753|   522k|    {
 1754|   522k|        return has_value();
 1755|   522k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|  96.4k|    {
 1809|  96.4k|        return value();
 1810|  96.4k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  8.74k|        : base(unexpect, std::move(e.error())),
 1630|  8.74k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  8.74k|    {
 1632|  8.74k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  8.74k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  8.74k|          m_has_value(false)
  466|  8.74k|    {
  467|  8.74k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   604k|    {
 1330|   604k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   595k|        : base(std::in_place, std::forward<U>(val)),
 1584|   595k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   595k|    {
 1586|   595k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|   595k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   595k|    {
  457|   595k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1753|   604k|    {
 1754|   604k|        return has_value();
 1755|   604k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.20M|    {
  505|  1.20M|        return m_has_value;
  506|  1.20M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1759|  8.74k|    {
 1760|  8.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  8.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  8.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  8.74k|        return this->get_unexpected().error();
 1762|  8.74k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  8.74k|    {
  488|  8.74k|        return m_unexpected;
  489|  8.74k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   595k|    {
 1819|   595k|        return std::move(value());
 1820|   595k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   595k|    {
 1783|   595k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   595k|        return this->get_value();
 1785|   595k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  470|   595k|    {
  471|   595k|        return m_value;
  472|   595k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1759|    360|    {
 1760|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    360|        return this->get_unexpected().error();
 1762|    360|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  12.0k|        : base(unexpect, std::move(e.error())),
 1630|  12.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.0k|    {
 1632|  12.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  12.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  12.0k|          m_has_value(false)
  466|  12.0k|    {
  467|  12.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   968k|    {
 1330|   968k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|   139k|        : base(std::in_place, std::forward<U>(val)),
 1584|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   139k|    {
 1586|   139k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   139k|    {
  457|   139k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   814k|        : base(unexpect, std::move(e.error())),
 1630|   814k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   814k|    {
 1632|   814k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|   814k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   814k|          m_has_value(false)
  466|   814k|    {
  467|   814k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1753|   968k|    {
 1754|   968k|        return has_value();
 1755|   968k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  1.47M|    {
  505|  1.47M|        return m_has_value;
  506|  1.47M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1759|   359k|    {
 1760|   359k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   359k|        return this->get_unexpected().error();
 1762|   359k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|   359k|    {
  488|   359k|        return m_unexpected;
  489|   359k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|   414k|        : base(std::in_place, std::forward<U>(val)),
 1584|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   414k|    {
 1586|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   414k|    {
  457|   414k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   414k|    {
 1330|   414k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   141k|    {
 1809|   141k|        return value();
 1810|   141k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   141k|    {
 1783|   141k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   141k|        return this->get_value();
 1785|   141k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|   141k|    {
  471|   141k|        return m_value;
  472|   141k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|   414k|    {
 1754|   414k|        return has_value();
 1755|   414k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|   828k|    {
  505|   828k|        return m_has_value;
  506|   828k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   414k|    {
 1330|   414k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   414k|    {
 1819|   414k|        return std::move(value());
 1820|   414k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   414k|    {
 1783|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   414k|        return this->get_value();
 1785|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|   414k|    {
  471|   414k|        return m_value;
  472|   414k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|  2.59k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.59k|    {
 1586|  2.59k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.59k|    {
  457|  2.59k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1583|   414k|        : base(std::in_place, std::forward<U>(val)),
 1584|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   414k|    {
 1586|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   414k|    {
  457|   414k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   414k|    {
 1993|   414k|        return detail::transform_error_impl(std::move(*this),
 1994|   414k|                                            std::forward<F>(f));
 1995|   414k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1475|   414k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   414k|    else {
 1486|   414k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   414k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   414k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 414k, False: 0]
  |  |  ------------------
  ------------------
 1488|   414k|                   ? result(*std::forward<Exp>(exp))
 1489|   414k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   414k|    }
 1493|   414k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  504|   828k|    {
  505|   828k|        return m_has_value;
  506|   828k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|   414k|    {
 1819|   414k|        return std::move(value());
 1820|   414k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|   414k|    {
 1783|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   414k|        return this->get_value();
 1785|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  470|   414k|    {
  471|   414k|        return m_value;
  472|   414k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   414k|        : base(std::in_place, std::forward<U>(val)),
 1584|   414k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   414k|    {
 1586|   414k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|   414k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   414k|    {
  457|   414k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   414k|    {
 1330|   414k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1753|   414k|    {
 1754|   414k|        return has_value();
 1755|   414k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  504|   828k|    {
  505|   828k|        return m_has_value;
  506|   828k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|   414k|    {
 1819|   414k|        return std::move(value());
 1820|   414k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|   414k|    {
 1783|   414k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   414k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   414k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   414k|        return this->get_value();
 1785|   414k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  470|   414k|    {
  471|   414k|        return m_value;
  472|   414k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  3.49k|        : base(unexpect, std::move(e.error())),
 1630|  3.49k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.49k|    {
 1632|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  651|  3.49k|        : m_has_value(false)
  652|  3.49k|    {
  653|  3.49k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  715|  3.49k|    {
  716|  3.49k|        scn::detail::construct_at(unexpected_ptr(),
  717|  3.49k|                                  std::forward<Args>(args)...);
  718|  3.49k|        m_has_value = false;
  719|  3.49k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  10.4k|    {
  745|  10.4k|        return reinterpret_cast<unexpected<E>*>(
  746|  10.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  10.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  10.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  60.8k|    {
 1330|  60.8k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1583|  57.3k|        : base(std::in_place, std::forward<U>(val)),
 1584|  57.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  57.3k|    {
 1586|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  641|  57.3k|        : m_has_value(true)
  642|  57.3k|    {
  643|  57.3k|        construct(std::forward<Args>(args)...);
  644|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  708|  57.3k|    {
  709|  57.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  57.3k|        m_has_value = true;
  711|  57.3k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  410|  57.3k|{
  411|  57.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  57.3k|        T(std::forward<Args>(args)...);
  413|  57.3k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   172k|    {
  733|   172k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   172k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   172k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1753|  60.8k|    {
 1754|  60.8k|        return has_value();
 1755|  60.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  701|   182k|    {
  702|   182k|        return m_has_value;
  703|   182k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1759|  3.49k|    {
 1760|  3.49k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  3.49k|        return this->get_unexpected().error();
 1762|  3.49k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|  3.49k|    {
  685|  3.49k|        return *unexpected_ptr();
  686|  3.49k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1818|  57.3k|    {
 1819|  57.3k|        return std::move(value());
 1820|  57.3k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  57.3k|    {
 1783|  57.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  57.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  57.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  57.3k|        return this->get_value();
 1785|  57.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  667|  57.3k|    {
  668|  57.3k|        return *value_ptr();
  669|  57.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  657|  60.8k|    {
  658|  60.8k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 57.3k, False: 3.49k]
  ------------------
  659|  57.3k|            destroy_value();
  660|  57.3k|        }
  661|  3.49k|        else {
  662|  3.49k|            destroy_unexpected();
  663|  3.49k|        }
  664|  60.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  57.3k|    {
  723|  57.3k|        scn::detail::destroy_at(value_ptr());
  724|  57.3k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  416|  57.3k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  57.3k|    else {
  423|  57.3k|        p->~T();
  424|  57.3k|    }
  425|  57.3k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  3.49k|    {
  727|  3.49k|        scn::detail::destroy_at(unexpected_ptr());
  728|  3.49k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  1.44M|    {
 3014|  1.44M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  1.44M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  1.44M|    {
 2995|  1.44M|        return t.data();
 2996|  1.44M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1583|   749k|        : base(std::in_place, std::forward<U>(val)),
 1584|   749k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   749k|    {
 1586|   749k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  455|   749k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   749k|    {
  457|   749k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   281k|    {
 1809|   281k|        return value();
 1810|   281k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|   280k|    {
 1809|   280k|        return value();
 1810|   280k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|   309k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   309k|    static_cast<    \
  |  | 1109|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   309k|    {
 3930|   309k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|   635k|    {
 4577|   635k|        return x.is_at_end();
 4578|   635k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4620|  34.7M|    {
 4621|  34.7M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 34.7M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  34.7M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 34.7M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  34.7M|        return !read_at_position();
 4628|  34.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4600|  69.4G|    {
 4601|  69.4G|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  69.4G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  69.4G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  69.4G|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 69.4G]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  69.4G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  69.4G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 69.3G, False: 34.2M]
  |  |  ------------------
  ------------------
 4608|  69.3G|            return true;
 4609|  69.3G|        }
 4610|       |
 4611|  68.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 34.2M, False: 34.1M]
  ------------------
 4612|  34.2M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 104k, False: 34.1M]
  ------------------
 4613|   104k|                return false;
 4614|   104k|            }
 4615|  34.2M|        }
 4616|  34.1M|        return true;
 4617|  34.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4374|  69.4G|    {
 4375|  69.4G|        return m_putback_buffer.size() + m_current_view.size();
 4376|  69.4G|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4535|  34.8M|    {
 4536|  34.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  34.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  34.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 34.8M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  34.8M|        auto res = read_at_position();
 4545|  34.8M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  34.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  34.8M|        return parent()->get_character_at(m_position);
 4547|  34.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4405|  34.8M|    {
 4406|  34.8M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  34.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 665k, False: 34.1M]
  |  |  ------------------
  ------------------
 4407|  34.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|   665k|            return m_putback_buffer[pos];
 4409|   665k|        }
 4410|  34.1M|        const auto start = pos - m_putback_buffer.size();
 4411|  34.1M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  34.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  34.1M|        return m_current_view[start];
 4413|  34.1M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|   381k|        : base(std::in_place, std::forward<U>(val)),
 1584|   381k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   381k|    {
 1586|   381k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   381k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   381k|    {
  457|   381k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   402k|    {
 1330|   402k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  20.7k|        : base(unexpect, std::move(e.error())),
 1630|  20.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  20.7k|    {
 1632|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  20.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  20.7k|          m_has_value(false)
  466|  20.7k|    {
  467|  20.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4521|  69.3G|    {
 4522|  69.3G|        ++m_position;
 4523|  69.3G|        (void)read_at_position();
 4524|  69.3G|        return *this;
 4525|  69.3G|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1753|   166k|    {
 1754|   166k|        return has_value();
 1755|   166k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|  10.3k|    {
 1809|  10.3k|        return value();
 1810|  10.3k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4570|  69.3G|    {
 4571|  69.3G|        return !(lhs == rhs);
 4572|  69.3G|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4565|  69.3G|    {
 4566|  69.3G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 69.3G, False: 0]
  |  Branch (4566:46): [True: 33.9M, False: 69.2G]
  ------------------
 4567|  69.3G|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4085|   271k|{
 4086|       |    if constexpr (sizeof(U) == 1) {
 4087|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|   271k|    else {
 4093|       |        // utf-32
 4094|   271k|        static_assert(sizeof(U) == 4);
 4095|   271k|        SCN_UNUSED(ch);
  ------------------
  |  | 1089|   271k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4096|   271k|        return 1;
 4097|   271k|    }
 4098|   271k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|   271k|{
 4292|       |    if constexpr (sizeof(CharT) == 1) {
 4293|       |        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|   271k|    else {
 4299|   271k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1104|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4300|   271k|        auto cp = static_cast<char32_t>(input.front());
 4301|   271k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 105k, False: 166k]
  |  |  ------------------
  ------------------
 4302|   105k|            return invalid_code_point;
 4303|   105k|        }
 4304|   166k|        return cp;
 4305|   271k|    }
 4306|   271k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  1.42k|        : base(unexpect, std::move(e.error())),
 1630|  1.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.42k|    {
 1632|  1.42k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  1.42k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.42k|          m_has_value(false)
  466|  1.42k|    {
  467|  1.42k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   119k|    {
 1330|   119k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   118k|        : base(std::in_place, std::forward<U>(val)),
 1584|   118k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   118k|    {
 1586|   118k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   118k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   118k|    {
  457|   118k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   119k|    {
 1754|   119k|        return has_value();
 1755|   119k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|   239k|    {
  505|   239k|        return m_has_value;
  506|   239k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|  1.42k|    {
 1760|  1.42k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.42k|        return this->get_unexpected().error();
 1762|  1.42k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  1.42k|    {
  488|  1.42k|        return m_unexpected;
  489|  1.42k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   118k|    {
 1819|   118k|        return std::move(value());
 1820|   118k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   118k|    {
 1783|   118k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   118k|        return this->get_value();
 1785|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   118k|    {
  471|   118k|        return m_value;
  472|   118k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  35.4M|    {
 3498|  35.4M|        return m_sentinel;
 3499|  35.4M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1759|     72|    {
 1760|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     72|        return this->get_unexpected().error();
 1762|     72|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  18.9k|        : base(unexpect, std::move(e.error())),
 1630|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  18.9k|    {
 1632|  18.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  37.8k|          m_has_value(false)
  466|  37.8k|    {
  467|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   508k|    {
 1330|   508k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1583|  10.6k|        : base(std::in_place, std::forward<U>(val)),
 1584|  10.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  10.6k|    {
 1586|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  10.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  10.6k|    {
  457|  10.6k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|   375k|        : base(unexpect, std::move(e.error())),
 1630|   375k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   375k|    {
 1632|   375k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|   375k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   375k|          m_has_value(false)
  466|   375k|    {
  467|   375k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1753|   400k|    {
 1754|   400k|        return has_value();
 1755|   400k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  504|   849k|    {
  505|   849k|        return m_has_value;
  506|   849k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1759|   142k|    {
 1760|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   142k|        return this->get_unexpected().error();
 1762|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|   247k|    {
  488|   247k|        return m_unexpected;
  489|   247k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1583|   133k|        : base(std::in_place, std::forward<U>(val)),
 1584|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   133k|    {
 1586|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   133k|    {
  457|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   133k|    {
 1330|   133k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|  10.6k|    {
 1809|  10.6k|        return value();
 1810|  10.6k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  94.6k|    {
 1783|  94.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  94.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  94.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  94.6k|        return this->get_value();
 1785|  94.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  94.6k|    {
  471|  94.6k|        return m_value;
  472|  94.6k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1753|   133k|    {
 1754|   133k|        return has_value();
 1755|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  504|   266k|    {
  505|   266k|        return m_has_value;
  506|   266k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   133k|    {
 1330|   133k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   133k|    {
 1819|   133k|        return std::move(value());
 1820|   133k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   133k|    {
 1783|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   133k|        return this->get_value();
 1785|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  470|   133k|    {
  471|   133k|        return m_value;
  472|   133k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   100k|    {
 1993|   100k|        return detail::transform_error_impl(std::move(*this),
 1994|   100k|                                            std::forward<F>(f));
 1995|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   100k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   100k|    else {
 1486|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 81.2k, False: 18.8k]
  |  |  ------------------
  ------------------
 1488|   100k|                   ? result(*std::forward<Exp>(exp))
 1489|   100k|                   : result(unexpect,
 1490|  18.8k|                            trivial_invoke(std::forward<F>(f),
 1491|  18.8k|                                           std::forward<Exp>(exp).error()));
 1492|   100k|    }
 1493|   100k|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1583|  84.0k|        : base(std::in_place, std::forward<U>(val)),
 1584|  84.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  84.0k|    {
 1586|  84.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  84.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  84.0k|    {
  457|  84.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  18.8k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  18.8k|    {
 1642|  18.8k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  84.0k|    {
 1819|  84.0k|        return std::move(value());
 1820|  84.0k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1583|   133k|        : base(std::in_place, std::forward<U>(val)),
 1584|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   133k|    {
 1586|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   133k|    {
  457|   133k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   133k|    {
 1993|   133k|        return detail::transform_error_impl(std::move(*this),
 1994|   133k|                                            std::forward<F>(f));
 1995|   133k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|   133k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   133k|    else {
 1486|   133k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   133k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
 1488|   133k|                   ? result(*std::forward<Exp>(exp))
 1489|   133k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   133k|    }
 1493|   133k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  504|   266k|    {
  505|   266k|        return m_has_value;
  506|   266k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1818|   133k|    {
 1819|   133k|        return std::move(value());
 1820|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   133k|    {
 1783|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   133k|        return this->get_value();
 1785|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  470|   133k|    {
  471|   133k|        return m_value;
  472|   133k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   133k|        : base(std::in_place, std::forward<U>(val)),
 1584|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   133k|    {
 1586|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   133k|    {
  457|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   133k|    {
 1330|   133k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1753|   133k|    {
 1754|   133k|        return has_value();
 1755|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   266k|    {
  505|   266k|        return m_has_value;
  506|   266k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1818|   133k|    {
 1819|   133k|        return std::move(value());
 1820|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   133k|    {
 1783|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   133k|        return this->get_value();
 1785|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   133k|    {
  471|   133k|        return m_value;
  472|   133k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   107k|    {
 1993|   107k|        return detail::transform_error_impl(std::move(*this),
 1994|   107k|                                            std::forward<F>(f));
 1995|   107k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1475|   107k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   107k|    else {
 1486|   107k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   107k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   107k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.75k, False: 104k]
  |  |  ------------------
  ------------------
 1488|   107k|                   ? result(*std::forward<Exp>(exp))
 1489|   107k|                   : result(unexpect,
 1490|   104k|                            trivial_invoke(std::forward<F>(f),
 1491|   104k|                                           std::forward<Exp>(exp).error()));
 1492|   107k|    }
 1493|   107k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1769|   104k|    {
 1770|   104k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|   104k|        return std::move(this->get_unexpected().error());
 1772|   104k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  11.8k|        : base(unexpect, std::move(e.error())),
 1630|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.8k|    {
 1632|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  651|  11.8k|        : m_has_value(false)
  652|  11.8k|    {
  653|  11.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  715|  11.8k|    {
  716|  11.8k|        scn::detail::construct_at(unexpected_ptr(),
  717|  11.8k|                                  std::forward<Args>(args)...);
  718|  11.8k|        m_has_value = false;
  719|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  35.6k|    {
  745|  35.6k|        return reinterpret_cast<unexpected<E>*>(
  746|  35.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  35.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  35.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  20.7k|    {
 1330|  20.7k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1583|  8.80k|        : base(std::in_place, std::forward<U>(val)),
 1584|  8.80k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  8.80k|    {
 1586|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  641|  8.80k|        : m_has_value(true)
  642|  8.80k|    {
  643|  8.80k|        construct(std::forward<Args>(args)...);
  644|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  708|  8.80k|    {
  709|  8.80k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  8.80k|        m_has_value = true;
  711|  8.80k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  410|  8.80k|{
  411|  8.80k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  8.80k|        T(std::forward<Args>(args)...);
  413|  8.80k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  26.4k|    {
  733|  26.4k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  26.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  26.4k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|  20.7k|    {
 1754|  20.7k|        return has_value();
 1755|  20.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  62.1k|    {
  702|  62.1k|        return m_has_value;
  703|  62.1k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1759|  11.8k|    {
 1760|  11.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  11.8k|        return this->get_unexpected().error();
 1762|  11.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|  11.8k|    {
  685|  11.8k|        return *unexpected_ptr();
  686|  11.8k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1818|  8.80k|    {
 1819|  8.80k|        return std::move(value());
 1820|  8.80k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  8.80k|    {
 1783|  8.80k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  8.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  8.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  8.80k|        return this->get_value();
 1785|  8.80k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  8.80k|    {
  668|  8.80k|        return *value_ptr();
  669|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|  20.7k|    {
  658|  20.7k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 8.80k, False: 11.8k]
  ------------------
  659|  8.80k|            destroy_value();
  660|  8.80k|        }
  661|  11.8k|        else {
  662|  11.8k|            destroy_unexpected();
  663|  11.8k|        }
  664|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  8.80k|    {
  723|  8.80k|        scn::detail::destroy_at(value_ptr());
  724|  8.80k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  416|  8.80k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  8.80k|    else {
  423|  8.80k|        p->~T();
  424|  8.80k|    }
  425|  8.80k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  11.8k|    {
  727|  11.8k|        scn::detail::destroy_at(unexpected_ptr());
  728|  11.8k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|   486k|    {
 1754|   486k|        return has_value();
 1755|   486k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|   972k|    {
  505|   972k|        return m_has_value;
  506|   972k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   328k|    {
 1760|   328k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   328k|        return this->get_unexpected().error();
 1762|   328k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   328k|    {
  488|   328k|        return m_unexpected;
  489|   328k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   147k|    {
 1819|   147k|        return std::move(value());
 1820|   147k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   158k|    {
 1783|   158k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   158k|        return this->get_value();
 1785|   158k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|   158k|    {
  471|   158k|        return m_value;
  472|   158k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3493|  6.83k|    {
 3494|  6.83k|        return m_iterator;
 3495|  6.83k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3497|  6.83k|    {
 3498|  6.83k|        return m_sentinel;
 3499|  6.83k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|  2.75k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  2.75k|    static_cast<    \
  |  | 1109|  2.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  2.75k|    static_cast<    \
  |  | 1109|  2.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  2.75k|    {
 3480|  2.75k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  34.1M|    {
 4588|  34.1M|        return !x.is_at_end();
 4589|  34.1M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  20.7k|        : base(unexpect, std::move(e.error())),
 1630|  20.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  20.7k|    {
 1632|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  20.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  20.7k|          m_has_value(false)
  466|  20.7k|    {
  467|  20.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   402k|    {
 1330|   402k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|   381k|        : base(std::in_place, std::forward<U>(val)),
 1584|   381k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   381k|    {
 1586|   381k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   381k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   381k|    {
  457|   381k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1753|   166k|    {
 1754|   166k|        return has_value();
 1755|   166k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   647k|    {
  505|   647k|        return m_has_value;
  506|   647k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|  10.3k|    {
 1809|  10.3k|        return value();
 1810|  10.3k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   225k|    {
 1783|   225k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   225k|        return this->get_value();
 1785|   225k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   225k|    {
  471|   225k|        return m_value;
  472|   225k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  1.42k|        : base(unexpect, std::move(e.error())),
 1630|  1.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.42k|    {
 1632|  1.42k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.42k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.42k|          m_has_value(false)
  466|  1.42k|    {
  467|  1.42k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   119k|    {
 1330|   119k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   118k|        : base(std::in_place, std::forward<U>(val)),
 1584|   118k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   118k|    {
 1586|   118k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|   118k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   118k|    {
  457|   118k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   135k|    {
 1993|   135k|        return detail::transform_error_impl(std::move(*this),
 1994|   135k|                                            std::forward<F>(f));
 1995|   135k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   135k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   135k|    else {
 1486|   135k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   135k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 133k, False: 1.76k]
  |  |  ------------------
  ------------------
 1488|   135k|                   ? result(*std::forward<Exp>(exp))
 1489|   135k|                   : result(unexpect,
 1490|  1.76k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.76k|                                           std::forward<Exp>(exp).error()));
 1492|   135k|    }
 1493|   135k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|   214k|    {
 1819|   214k|        return std::move(value());
 1820|   214k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1769|  20.6k|    {
 1770|  20.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  20.6k|        return std::move(this->get_unexpected().error());
 1772|  20.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  20.7k|    {
  488|  20.7k|        return m_unexpected;
  489|  20.7k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.76k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.76k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.76k|    {
 1642|  1.76k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1753|   119k|    {
 1754|   119k|        return has_value();
 1755|   119k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  504|   239k|    {
  505|   239k|        return m_has_value;
  506|   239k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1759|  1.42k|    {
 1760|  1.42k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.42k|        return this->get_unexpected().error();
 1762|  1.42k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  1.42k|    {
  488|  1.42k|        return m_unexpected;
  489|  1.42k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   118k|    {
 1819|   118k|        return std::move(value());
 1820|   118k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   118k|    {
 1783|   118k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   118k|        return this->get_value();
 1785|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  470|   118k|    {
  471|   118k|        return m_value;
  472|   118k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1759|     72|    {
 1760|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     72|        return this->get_unexpected().error();
 1762|     72|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  18.9k|        : base(unexpect, std::move(e.error())),
 1630|  18.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  18.9k|    {
 1632|  18.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  37.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  37.8k|          m_has_value(false)
  466|  37.8k|    {
  467|  37.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   400k|    {
 1330|   400k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|  10.6k|        : base(std::in_place, std::forward<U>(val)),
 1584|  10.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  10.6k|    {
 1586|  10.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|  10.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  10.6k|    {
  457|  10.6k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   270k|        : base(unexpect, std::move(e.error())),
 1630|   270k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   270k|    {
 1632|   270k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|   270k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   270k|          m_has_value(false)
  466|   270k|    {
  467|   270k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1753|   400k|    {
 1754|   400k|        return has_value();
 1755|   400k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|   634k|    {
  505|   634k|        return m_has_value;
  506|   634k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1759|   142k|    {
 1760|   142k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   142k|        return this->get_unexpected().error();
 1762|   142k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|   142k|    {
  488|   142k|        return m_unexpected;
  489|   142k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|   133k|        : base(std::in_place, std::forward<U>(val)),
 1584|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   133k|    {
 1586|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   133k|    {
  457|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   133k|    {
 1330|   133k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|  10.6k|    {
 1809|  10.6k|        return value();
 1810|  10.6k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  91.9k|    {
 1783|  91.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  91.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  91.9k|        return this->get_value();
 1785|  91.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  91.9k|    {
  471|  91.9k|        return m_value;
  472|  91.9k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|   133k|    {
 1754|   133k|        return has_value();
 1755|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|   266k|    {
  505|   266k|        return m_has_value;
  506|   266k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   133k|    {
 1330|   133k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   133k|    {
 1819|   133k|        return std::move(value());
 1820|   133k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   133k|    {
 1783|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   133k|        return this->get_value();
 1785|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|   133k|    {
  471|   133k|        return m_value;
  472|   133k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   100k|    {
 1993|   100k|        return detail::transform_error_impl(std::move(*this),
 1994|   100k|                                            std::forward<F>(f));
 1995|   100k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   100k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   100k|    else {
 1486|   100k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   100k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 81.2k, False: 18.8k]
  |  |  ------------------
  ------------------
 1488|   100k|                   ? result(*std::forward<Exp>(exp))
 1489|   100k|                   : result(unexpect,
 1490|  18.8k|                            trivial_invoke(std::forward<F>(f),
 1491|  18.8k|                                           std::forward<Exp>(exp).error()));
 1492|   100k|    }
 1493|   100k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|  81.2k|        : base(std::in_place, std::forward<U>(val)),
 1584|  81.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  81.2k|    {
 1586|  81.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  81.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  81.2k|    {
  457|  81.2k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1639|  18.8k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  18.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  18.8k|    {
 1642|  18.8k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  81.2k|    {
 1819|  81.2k|        return std::move(value());
 1820|  81.2k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1583|   133k|        : base(std::in_place, std::forward<U>(val)),
 1584|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   133k|    {
 1586|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   133k|    {
  457|   133k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   133k|    {
 1993|   133k|        return detail::transform_error_impl(std::move(*this),
 1994|   133k|                                            std::forward<F>(f));
 1995|   133k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1475|   133k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   133k|    else {
 1486|   133k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   133k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 133k, False: 0]
  |  |  ------------------
  ------------------
 1488|   133k|                   ? result(*std::forward<Exp>(exp))
 1489|   133k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   133k|    }
 1493|   133k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  504|   266k|    {
  505|   266k|        return m_has_value;
  506|   266k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|   133k|    {
 1819|   133k|        return std::move(value());
 1820|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|   133k|    {
 1783|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   133k|        return this->get_value();
 1785|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  470|   133k|    {
  471|   133k|        return m_value;
  472|   133k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   133k|        : base(std::in_place, std::forward<U>(val)),
 1584|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   133k|    {
 1586|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   133k|    {
  457|   133k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   133k|    {
 1330|   133k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1753|   133k|    {
 1754|   133k|        return has_value();
 1755|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  504|   266k|    {
  505|   266k|        return m_has_value;
  506|   266k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|   133k|    {
 1819|   133k|        return std::move(value());
 1820|   133k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|   133k|    {
 1783|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   133k|        return this->get_value();
 1785|   133k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  470|   133k|    {
  471|   133k|        return m_value;
  472|   133k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1629|  11.8k|        : base(unexpect, std::move(e.error())),
 1630|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.8k|    {
 1632|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  651|  11.8k|        : m_has_value(false)
  652|  11.8k|    {
  653|  11.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  715|  11.8k|    {
  716|  11.8k|        scn::detail::construct_at(unexpected_ptr(),
  717|  11.8k|                                  std::forward<Args>(args)...);
  718|  11.8k|        m_has_value = false;
  719|  11.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  35.6k|    {
  745|  35.6k|        return reinterpret_cast<unexpected<E>*>(
  746|  35.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  35.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  35.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  20.7k|    {
 1330|  20.7k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1583|  8.80k|        : base(std::in_place, std::forward<U>(val)),
 1584|  8.80k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  8.80k|    {
 1586|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  641|  8.80k|        : m_has_value(true)
  642|  8.80k|    {
  643|  8.80k|        construct(std::forward<Args>(args)...);
  644|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  708|  8.80k|    {
  709|  8.80k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  8.80k|        m_has_value = true;
  711|  8.80k|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  410|  8.80k|{
  411|  8.80k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  8.80k|        T(std::forward<Args>(args)...);
  413|  8.80k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  26.4k|    {
  733|  26.4k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  26.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  26.4k|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|  20.7k|    {
 1754|  20.7k|        return has_value();
 1755|  20.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  62.1k|    {
  702|  62.1k|        return m_has_value;
  703|  62.1k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1759|  11.8k|    {
 1760|  11.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  11.8k|        return this->get_unexpected().error();
 1762|  11.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|  11.8k|    {
  685|  11.8k|        return *unexpected_ptr();
  686|  11.8k|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1818|  8.80k|    {
 1819|  8.80k|        return std::move(value());
 1820|  8.80k|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1782|  8.80k|    {
 1783|  8.80k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  8.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  8.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  8.80k|        return this->get_value();
 1785|  8.80k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  8.80k|    {
  668|  8.80k|        return *value_ptr();
  669|  8.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|  20.7k|    {
  658|  20.7k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 8.80k, False: 11.8k]
  ------------------
  659|  8.80k|            destroy_value();
  660|  8.80k|        }
  661|  11.8k|        else {
  662|  11.8k|            destroy_unexpected();
  663|  11.8k|        }
  664|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  8.80k|    {
  723|  8.80k|        scn::detail::destroy_at(value_ptr());
  724|  8.80k|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  416|  8.80k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  8.80k|    else {
  423|  8.80k|        p->~T();
  424|  8.80k|    }
  425|  8.80k|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  11.8k|    {
  727|  11.8k|        scn::detail::destroy_at(unexpected_ptr());
  728|  11.8k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   425k|    {
 3014|   425k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   425k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   425k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   425k|    {
 2995|   425k|        return t.data();
 2996|   425k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|  10.6k|    {
 1809|  10.6k|        return value();
 1810|  10.6k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|  10.6k|    {
 1809|  10.6k|        return value();
 1810|  10.6k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|   107k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   107k|    static_cast<    \
  |  | 1109|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   107k|    {
 3930|   107k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4374|  24.5M|    {
 4375|  24.5M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  24.5M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6262|   836k|    {
 6263|   836k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   836k|        return static_cast<std::size_t>(m_desc &
 6268|   836k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6288|  1.67M|    {
 6289|  1.67M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|  1.67M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6230|   836k|    {
 6231|   836k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|   836k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|   836k|        const auto t = type(id);
 6243|   836k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|   836k|        basic_scan_arg<Context> arg;
 6248|   836k|        arg.m_type = t;
 6249|   836k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 836k, False: 0]
  ------------------
 6250|   836k|            arg.m_value.ref_value = m_builtin_values[id];
 6251|   836k|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|   836k|        return arg;
 6256|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6297|   836k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|   836k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|   836k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|   836k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|   836k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6292|   836k|    {
 6293|   836k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|   836k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6046|  1.56M|    {
 6047|  1.56M|        return m_type != detail::arg_type::none_type;
 6048|  1.56M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|  95.4k|{
 9494|  95.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  95.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  95.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  95.4k|{
 9353|  95.4k|#define SCN_VISIT(Type)                                                \
 9354|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  95.4k|    }                                                                  \
 9357|  95.4k|    else {                                                             \
 9358|  95.4k|        return vis(monostate_val);                                     \
 9359|  95.4k|    }
 9360|       |
 9361|  95.4k|    monostate monostate_val{};
 9362|       |
 9363|  95.4k|    switch (get_arg_type(arg)) {
 9364|  15.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 15.8k, False: 79.5k]
  ------------------
 9365|  15.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  15.8k|    }                                                                  \
  |  | 9357|  15.8k|    else {                                                             \
  |  | 9358|  15.8k|        return vis(monostate_val);                                     \
  |  | 9359|  15.8k|    }
  ------------------
 9366|  15.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 95.4k]
  ------------------
 9367|  15.8k|            SCN_VISIT(short);
  ------------------
  |  | 9354|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  15.8k|    }                                                                  \
  |  | 9357|  15.8k|    else {                                                             \
  |  | 9358|  15.8k|        return vis(monostate_val);                                     \
  |  | 9359|  15.8k|    }
  ------------------
 9368|  34.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 18.3k, False: 77.1k]
  ------------------
 9369|  34.2k|            SCN_VISIT(int);
  ------------------
  |  | 9354|  34.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  34.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  34.2k|    }                                                                  \
  |  | 9357|  34.2k|    else {                                                             \
  |  | 9358|  34.2k|        return vis(monostate_val);                                     \
  |  | 9359|  34.2k|    }
  ------------------
 9370|  34.2k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 95.4k]
  ------------------
 9371|  34.2k|            SCN_VISIT(long);
  ------------------
  |  | 9354|  34.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  34.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  34.2k|    }                                                                  \
  |  | 9357|  34.2k|    else {                                                             \
  |  | 9358|  34.2k|        return vis(monostate_val);                                     \
  |  | 9359|  34.2k|    }
  ------------------
 9372|  52.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 18.6k, False: 76.7k]
  ------------------
 9373|  52.9k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|  52.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  52.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  52.9k|    }                                                                  \
  |  | 9357|  52.9k|    else {                                                             \
  |  | 9358|  52.9k|        return vis(monostate_val);                                     \
  |  | 9359|  52.9k|    }
  ------------------
 9374|  52.9k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 95.4k]
  ------------------
 9375|  52.9k|#if SCN_HAS_INT128
 9376|  52.9k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|  52.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  52.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  52.9k|    }                                                                  \
  |  | 9357|  52.9k|    else {                                                             \
  |  | 9358|  52.9k|        return vis(monostate_val);                                     \
  |  | 9359|  52.9k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|  66.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 13.2k, False: 82.2k]
  ------------------
 9381|  66.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|  66.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  66.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  66.1k|    }                                                                  \
  |  | 9357|  66.1k|    else {                                                             \
  |  | 9358|  66.1k|        return vis(monostate_val);                                     \
  |  | 9359|  66.1k|    }
  ------------------
 9382|  66.1k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 95.4k]
  ------------------
 9383|  66.1k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|  66.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  66.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  66.1k|    }                                                                  \
  |  | 9357|  66.1k|    else {                                                             \
  |  | 9358|  66.1k|        return vis(monostate_val);                                     \
  |  | 9359|  66.1k|    }
  ------------------
 9384|  80.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 14.5k, False: 80.9k]
  ------------------
 9385|  80.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  80.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  80.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  80.7k|    }                                                                  \
  |  | 9357|  80.7k|    else {                                                             \
  |  | 9358|  80.7k|        return vis(monostate_val);                                     \
  |  | 9359|  80.7k|    }
  ------------------
 9386|  80.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 95.4k]
  ------------------
 9387|  80.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  80.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  80.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  80.7k|    }                                                                  \
  |  | 9357|  80.7k|    else {                                                             \
  |  | 9358|  80.7k|        return vis(monostate_val);                                     \
  |  | 9359|  80.7k|    }
  ------------------
 9388|  95.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 14.7k, False: 80.7k]
  ------------------
 9389|  95.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  95.4k|    }                                                                  \
  |  | 9357|  95.4k|    else {                                                             \
  |  | 9358|  95.4k|        return vis(monostate_val);                                     \
  |  | 9359|  95.4k|    }
  ------------------
 9390|  95.4k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 95.4k]
  ------------------
 9391|  95.4k|#if SCN_HAS_INT128
 9392|  95.4k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  95.4k|    }                                                                  \
  |  | 9357|  95.4k|    else {                                                             \
  |  | 9358|  95.4k|        return vis(monostate_val);                                     \
  |  | 9359|  95.4k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  95.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 95.4k]
  ------------------
 9397|  95.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  95.4k|    }                                                                  \
  |  | 9357|  95.4k|    else {                                                             \
  |  | 9358|  95.4k|        return vis(monostate_val);                                     \
  |  | 9359|  95.4k|    }
  ------------------
 9398|  95.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 95.4k]
  ------------------
 9399|  95.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  95.4k|    }                                                                  \
  |  | 9357|  95.4k|    else {                                                             \
  |  | 9358|  95.4k|        return vis(monostate_val);                                     \
  |  | 9359|  95.4k|    }
  ------------------
 9400|  95.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 95.4k]
  ------------------
 9401|  95.4k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  95.4k|    }                                                                  \
  |  | 9357|  95.4k|    else {                                                             \
  |  | 9358|  95.4k|        return vis(monostate_val);                                     \
  |  | 9359|  95.4k|    }
  ------------------
 9402|  95.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 95.4k]
  ------------------
 9403|  95.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  95.4k|    }                                                                  \
  |  | 9357|  95.4k|    else {                                                             \
  |  | 9358|  95.4k|        return vis(monostate_val);                                     \
  |  | 9359|  95.4k|    }
  ------------------
 9404|  95.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 95.4k]
  ------------------
 9405|  95.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  95.4k|    }                                                                  \
  |  | 9357|  95.4k|    else {                                                             \
  |  | 9358|  95.4k|        return vis(monostate_val);                                     \
  |  | 9359|  95.4k|    }
  ------------------
 9406|  95.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 95.4k]
  ------------------
 9407|  95.4k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  95.4k|    }                                                                  \
  |  | 9357|  95.4k|    else {                                                             \
  |  | 9358|  95.4k|        return vis(monostate_val);                                     \
  |  | 9359|  95.4k|    }
  ------------------
 9408|  95.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 95.4k]
  ------------------
 9409|  95.4k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  95.4k|    }                                                                  \
  |  | 9357|  95.4k|    else {                                                             \
  |  | 9358|  95.4k|        return vis(monostate_val);                                     \
  |  | 9359|  95.4k|    }
  ------------------
 9410|  95.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 95.4k]
  ------------------
 9411|  95.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  95.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  95.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  95.4k|    }                                                                  \
  |  | 9357|  95.4k|    else {                                                             \
  |  | 9358|  95.4k|        return vis(monostate_val);                                     \
  |  | 9359|  95.4k|    }
  ------------------
 9412|  95.4k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 95.4k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  95.4k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 95.4k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 95.4k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 95.4k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 95.4k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 95.4k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 95.4k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 95.4k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 95.4k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 95.4k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 95.4k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  95.4k|            SCN_CLANG_POP
 9473|  95.4k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  2.27M|{
 6092|  2.27M|    return arg.m_type;
 6093|  2.27M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|   850k|{
 6104|   850k|    return arg.m_value;
 6105|   850k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   355k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   355k|    static_cast<    \
  |  | 1109|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   355k|    {
 9021|   355k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4708|   449k|{
 4709|   449k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 449k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   449k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   449k|                            ranges::default_sentinel};
 4715|   449k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4471|   449k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   449k|    {
 4473|   449k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   449k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   449k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|  94.1k|{
 9494|  94.1k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  94.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  94.1k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  94.1k|{
 9353|  94.1k|#define SCN_VISIT(Type)                                                \
 9354|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  94.1k|    }                                                                  \
 9357|  94.1k|    else {                                                             \
 9358|  94.1k|        return vis(monostate_val);                                     \
 9359|  94.1k|    }
 9360|       |
 9361|  94.1k|    monostate monostate_val{};
 9362|       |
 9363|  94.1k|    switch (get_arg_type(arg)) {
 9364|  15.8k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 15.8k, False: 78.2k]
  ------------------
 9365|  15.8k|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  15.8k|    }                                                                  \
  |  | 9357|  15.8k|    else {                                                             \
  |  | 9358|  15.8k|        return vis(monostate_val);                                     \
  |  | 9359|  15.8k|    }
  ------------------
 9366|  15.8k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 94.1k]
  ------------------
 9367|  15.8k|            SCN_VISIT(short);
  ------------------
  |  | 9354|  15.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  15.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  15.8k|    }                                                                  \
  |  | 9357|  15.8k|    else {                                                             \
  |  | 9358|  15.8k|        return vis(monostate_val);                                     \
  |  | 9359|  15.8k|    }
  ------------------
 9368|  33.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 17.7k, False: 76.3k]
  ------------------
 9369|  33.6k|            SCN_VISIT(int);
  ------------------
  |  | 9354|  33.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  33.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  33.6k|    }                                                                  \
  |  | 9357|  33.6k|    else {                                                             \
  |  | 9358|  33.6k|        return vis(monostate_val);                                     \
  |  | 9359|  33.6k|    }
  ------------------
 9370|  33.6k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 94.1k]
  ------------------
 9371|  33.6k|            SCN_VISIT(long);
  ------------------
  |  | 9354|  33.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  33.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  33.6k|    }                                                                  \
  |  | 9357|  33.6k|    else {                                                             \
  |  | 9358|  33.6k|        return vis(monostate_val);                                     \
  |  | 9359|  33.6k|    }
  ------------------
 9372|  51.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 18.0k, False: 76.0k]
  ------------------
 9373|  51.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|  51.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  51.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  51.7k|    }                                                                  \
  |  | 9357|  51.7k|    else {                                                             \
  |  | 9358|  51.7k|        return vis(monostate_val);                                     \
  |  | 9359|  51.7k|    }
  ------------------
 9374|  51.7k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 94.1k]
  ------------------
 9375|  51.7k|#if SCN_HAS_INT128
 9376|  51.7k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|  51.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  51.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  51.7k|    }                                                                  \
  |  | 9357|  51.7k|    else {                                                             \
  |  | 9358|  51.7k|        return vis(monostate_val);                                     \
  |  | 9359|  51.7k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|  64.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 13.2k, False: 80.9k]
  ------------------
 9381|  64.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|  64.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  64.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  64.9k|    }                                                                  \
  |  | 9357|  64.9k|    else {                                                             \
  |  | 9358|  64.9k|        return vis(monostate_val);                                     \
  |  | 9359|  64.9k|    }
  ------------------
 9382|  64.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 94.1k]
  ------------------
 9383|  64.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|  64.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  64.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  64.9k|    }                                                                  \
  |  | 9357|  64.9k|    else {                                                             \
  |  | 9358|  64.9k|        return vis(monostate_val);                                     \
  |  | 9359|  64.9k|    }
  ------------------
 9384|  79.4k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 14.5k, False: 79.6k]
  ------------------
 9385|  79.4k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  79.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  79.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  79.4k|    }                                                                  \
  |  | 9357|  79.4k|    else {                                                             \
  |  | 9358|  79.4k|        return vis(monostate_val);                                     \
  |  | 9359|  79.4k|    }
  ------------------
 9386|  79.4k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 94.1k]
  ------------------
 9387|  79.4k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  79.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  79.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  79.4k|    }                                                                  \
  |  | 9357|  79.4k|    else {                                                             \
  |  | 9358|  79.4k|        return vis(monostate_val);                                     \
  |  | 9359|  79.4k|    }
  ------------------
 9388|  94.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 14.6k, False: 79.4k]
  ------------------
 9389|  94.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  94.1k|    }                                                                  \
  |  | 9357|  94.1k|    else {                                                             \
  |  | 9358|  94.1k|        return vis(monostate_val);                                     \
  |  | 9359|  94.1k|    }
  ------------------
 9390|  94.1k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 94.1k]
  ------------------
 9391|  94.1k|#if SCN_HAS_INT128
 9392|  94.1k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  94.1k|    }                                                                  \
  |  | 9357|  94.1k|    else {                                                             \
  |  | 9358|  94.1k|        return vis(monostate_val);                                     \
  |  | 9359|  94.1k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  94.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 94.1k]
  ------------------
 9397|  94.1k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  94.1k|    }                                                                  \
  |  | 9357|  94.1k|    else {                                                             \
  |  | 9358|  94.1k|        return vis(monostate_val);                                     \
  |  | 9359|  94.1k|    }
  ------------------
 9398|  94.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 94.1k]
  ------------------
 9399|  94.1k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  94.1k|    }                                                                  \
  |  | 9357|  94.1k|    else {                                                             \
  |  | 9358|  94.1k|        return vis(monostate_val);                                     \
  |  | 9359|  94.1k|    }
  ------------------
 9400|  94.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 94.1k]
  ------------------
 9401|  94.1k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  94.1k|    }                                                                  \
  |  | 9357|  94.1k|    else {                                                             \
  |  | 9358|  94.1k|        return vis(monostate_val);                                     \
  |  | 9359|  94.1k|    }
  ------------------
 9402|  94.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 94.1k]
  ------------------
 9403|  94.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  94.1k|    }                                                                  \
  |  | 9357|  94.1k|    else {                                                             \
  |  | 9358|  94.1k|        return vis(monostate_val);                                     \
  |  | 9359|  94.1k|    }
  ------------------
 9404|  94.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 94.1k]
  ------------------
 9405|  94.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  94.1k|    }                                                                  \
  |  | 9357|  94.1k|    else {                                                             \
  |  | 9358|  94.1k|        return vis(monostate_val);                                     \
  |  | 9359|  94.1k|    }
  ------------------
 9406|  94.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 94.1k]
  ------------------
 9407|  94.1k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  94.1k|    }                                                                  \
  |  | 9357|  94.1k|    else {                                                             \
  |  | 9358|  94.1k|        return vis(monostate_val);                                     \
  |  | 9359|  94.1k|    }
  ------------------
 9408|  94.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 94.1k]
  ------------------
 9409|  94.1k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  94.1k|    }                                                                  \
  |  | 9357|  94.1k|    else {                                                             \
  |  | 9358|  94.1k|        return vis(monostate_val);                                     \
  |  | 9359|  94.1k|    }
  ------------------
 9410|  94.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 94.1k]
  ------------------
 9411|  94.1k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  94.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  94.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  94.1k|    }                                                                  \
  |  | 9357|  94.1k|    else {                                                             \
  |  | 9358|  94.1k|        return vis(monostate_val);                                     \
  |  | 9359|  94.1k|    }
  ------------------
 9412|  94.1k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 94.1k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  94.1k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 94.1k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 94.1k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 94.1k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 94.1k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 94.1k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 94.1k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 94.1k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 94.1k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 94.1k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 94.1k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  94.1k|            SCN_CLANG_POP
 9473|  94.1k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6361|   354k|        : m_format{format},
 6362|   354k|          m_next_arg_id{next_arg_id},
 6363|   354k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   354k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   354k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   354k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   354k|    {
 6369|   354k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   354k|    {
 3089|   354k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   354k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   354k|    {
 3055|   354k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   354k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   354k|{
 7878|   354k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   354k|    handler.check_args_exhausted();
 7880|   354k|    return handler.get_error();
 7881|   354k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   354k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   354k|    auto begin = format.data();
 7846|   354k|    auto it = begin;
 7847|   354k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   635k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 354k, False: 280k]
  ------------------
 7850|   354k|        const auto ch = *it++;
 7851|   354k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 354k, False: 0]
  ------------------
 7852|   354k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   354k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   354k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 74.3k, False: 280k]
  ------------------
 7856|  74.3k|                return;
 7857|  74.3k|            }
 7858|   354k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   354k|    }
 7869|       |
 7870|   280k|    handler.on_literal_text(begin, end);
 7871|   280k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7774|   354k|{
 7775|   354k|    struct id_adapter {
 7776|   354k|        constexpr void operator()()
 7777|   354k|        {
 7778|   354k|            arg_id = handler.on_arg_id();
 7779|   354k|        }
 7780|   354k|        constexpr void operator()(std::size_t id)
 7781|   354k|        {
 7782|   354k|            arg_id = handler.on_arg_id(id);
 7783|   354k|        }
 7784|       |
 7785|   354k|        constexpr void on_error(const char* msg)
 7786|   354k|        {
 7787|   354k|            SCN_UNLIKELY_ATTR
 7788|   354k|            handler.on_error(msg);
 7789|   354k|        }
 7790|       |
 7791|   354k|        Handler& handler;
 7792|   354k|        std::size_t arg_id;
 7793|   354k|    };
 7794|       |
 7795|   354k|    ++begin;
 7796|   354k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   354k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 354k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   354k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 354k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   354k|    else {
 7808|   354k|        auto adapter = id_adapter{handler, 0};
 7809|   354k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   354k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   354k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 354k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   354k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 354k, False: 0]
  ------------------
 7820|   354k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   354k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   354k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 24.7k, False: 330k]
  |  |  |  Branch (1039:45): [True: 0, False: 354k]
  |  |  |  Branch (1039:45): [True: 24.7k, False: 330k]
  |  |  ------------------
  ------------------
 7826|  24.7k|                handler.on_error("Unknown format specifier");
 7827|  24.7k|                return begin;
 7828|  24.7k|            }
 7829|   354k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   354k|    }
 7836|   330k|    return begin + 1;
 7837|   354k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8918|   710k|    {
 8919|   710k|        return m_args.get(id);
 8920|   710k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6396|   710k|    {
 6397|   710k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 710k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   710k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   710k|        do_check_arg_id(id);
 6405|   710k|        return id;
 6406|   710k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6890|   710k|{
 6891|   710k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   710k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   710k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   354k|{
 7276|   354k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   354k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 354k, False: 0]
  |  Branch (7277:26): [True: 0, False: 354k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   354k|    handler();
 7282|   354k|    return begin;
 7283|   354k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   354k|        {
 7778|   354k|            arg_id = handler.on_arg_id();
 7779|   354k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6391|   660k|    {
 6392|   660k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   660k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6380|  1.37M|    {
 6381|  1.37M|        return m_format.data();
 6382|  1.37M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   354k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   354k|    {
 7962|   354k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   354k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7690|   354k|{
 7691|   354k|    auto do_presentation = [&]() -> const CharT* {
 7692|   354k|        if (*begin == CharT{'['}) {
 7693|   354k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   354k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   354k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   354k|                return begin;
 7699|   354k|            }
 7700|   354k|            handler.on_character_set_string(set);
 7701|   354k|            return begin;
 7702|   354k|        }
 7703|   354k|        if (*begin == CharT{'/'}) {
 7704|   354k|            return parse_presentation_regex(begin, end, handler);
 7705|   354k|        }
 7706|   354k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   354k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   354k|            handler.on_error("Invalid type specifier in format string");
 7709|   354k|            return begin;
 7710|   354k|        }
 7711|   354k|        handler.on_type(type);
 7712|   354k|        return begin;
 7713|   354k|    };
 7714|       |
 7715|   354k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 354k, False: 0]
  |  Branch (7715:28): [True: 338k, False: 16.5k]
  ------------------
 7716|   354k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 330k, False: 8.25k]
  |  Branch (7716:36): [True: 265k, False: 64.4k]
  ------------------
 7717|   265k|        return do_presentation();
 7718|   265k|    }
 7719|       |
 7720|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  89.1k|    begin = parse_align(begin, end, handler);
 7726|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  89.1k|    begin = parse_width(begin, end, handler);
 7732|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  89.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 89.1k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  89.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 64.4k, False: 24.7k]
  ------------------
 7751|  64.4k|        handler.on_localized();
 7752|  64.4k|        ++begin;
 7753|  64.4k|    }
 7754|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  89.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 89.1k, False: 0]
  |  Branch (7759:25): [True: 24.7k, False: 64.4k]
  ------------------
 7760|  24.7k|        do_presentation();
 7761|  24.7k|    }
 7762|  89.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  89.1k|    return begin;
 7768|  89.1k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7339|   677k|{
 7340|   677k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 531k, False: 145k]
  |  Branch (7340:33): [True: 531k, False: 0]
  ------------------
 7341|   677k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 128k, False: 16.5k]
  |  Branch (7341:33): [True: 128k, False: 0]
  ------------------
 7342|   677k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   290k|    auto do_presentation = [&]() -> const CharT* {
 7692|   290k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 290k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   290k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 290k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   290k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   290k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.5k, False: 273k]
  |  |  ------------------
  ------------------
 7708|  16.5k|            handler.on_error("Invalid type specifier in format string");
 7709|  16.5k|            return begin;
 7710|  16.5k|        }
 7711|   273k|        handler.on_type(type);
 7712|   273k|        return begin;
 7713|   290k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7287|   581k|{
 7288|   581k|    switch (type) {
 7289|  44.7k|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 44.7k, False: 536k]
  ------------------
 7290|  61.2k|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 16.5k, False: 564k]
  ------------------
 7291|  61.2k|            return presentation_type::int_binary;
 7292|   127k|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 127k, False: 454k]
  ------------------
 7293|   127k|            return presentation_type::int_decimal;
 7294|   145k|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 145k, False: 436k]
  ------------------
 7295|   145k|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 581k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|  79.4k|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 79.4k, False: 501k]
  ------------------
 7299|  79.4k|            return presentation_type::int_octal;
 7300|   134k|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 134k, False: 446k]
  ------------------
 7301|   134k|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 581k]
  ------------------
 7302|   134k|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 581k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 581k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|      0|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 0, False: 581k]
  ------------------
 7307|      0|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 581k]
  ------------------
 7308|      0|            return presentation_type::float_hex;
 7309|      0|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 0, False: 581k]
  ------------------
 7310|      0|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 581k]
  ------------------
 7311|      0|            return presentation_type::float_scientific;
 7312|      0|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 0, False: 581k]
  ------------------
 7313|      0|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 581k]
  ------------------
 7314|      0|            return presentation_type::float_fixed;
 7315|      0|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 0, False: 581k]
  ------------------
 7316|      0|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 581k]
  ------------------
 7317|      0|            return presentation_type::float_general;
 7318|      0|        case 's':
  ------------------
  |  Branch (7318:9): [True: 0, False: 581k]
  ------------------
 7319|      0|            return presentation_type::string;
 7320|      0|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 0, False: 581k]
  ------------------
 7321|      0|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 581k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 581k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 581k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 581k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|  33.0k|        default:
  ------------------
  |  Branch (7332:9): [True: 33.0k, False: 548k]
  ------------------
 7333|  33.0k|            return presentation_type::none;
 7334|   581k|    }
 7335|   581k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|  89.1k|{
 7365|  89.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  89.1k|    auto check_align = [](wchar_t ch) {
 7368|  89.1k|        switch (ch) {
 7369|  89.1k|            case L'<':
 7370|  89.1k|                return align_type::left;
 7371|  89.1k|            case L'>':
 7372|  89.1k|                return align_type::right;
 7373|  89.1k|            case L'^':
 7374|  89.1k|                return align_type::center;
 7375|  89.1k|            default:
 7376|  89.1k|                return align_type::none;
 7377|  89.1k|        }
 7378|  89.1k|    };
 7379|       |
 7380|  89.1k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  89.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.1k]
  |  |  |  Branch (1039:45): [True: 0, False: 89.1k]
  |  |  |  Branch (1039:45): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7382|  89.1k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  89.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  89.1k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  89.1k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  89.1k|    const auto begin_before_fill = begin;
 7392|  89.1k|    begin += potential_fill_len;
 7393|       |
 7394|  89.1k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 89.1k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  89.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  89.1k|    const auto begin_after_fill = begin;
 7400|  89.1k|    ++begin;
 7401|       |
 7402|  89.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 89.1k, False: 0]
  ------------------
 7403|  89.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  89.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 89.1k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|  89.1k|    }
 7411|       |
 7412|  89.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 89.1k, False: 0]
  ------------------
 7413|  89.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 89.1k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  89.1k|        return begin_before_fill;
 7418|  89.1k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  89.1k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7346|   178k|{
 7347|   178k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|       |    if constexpr (sizeof(CharT) != 1) {
 7349|       |        return 1;
 7350|       |    }
 7351|   178k|    else {
 7352|   178k|        const auto lengths =
 7353|   178k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|   178k|            "\3\4";
 7355|   178k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|   178k|        return len;
 7357|   178k|    }
 7358|   178k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|   178k|    auto check_align = [](wchar_t ch) {
 7368|   178k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 178k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 178k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 178k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   178k|            default:
  ------------------
  |  Branch (7375:13): [True: 178k, False: 0]
  ------------------
 7376|   178k|                return align_type::none;
 7377|   178k|        }
 7378|   178k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7429|  89.1k|{
 7430|  89.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  89.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 72.6k, False: 16.5k]
  |  Branch (7432:33): [True: 0, False: 72.6k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|  89.1k|    return begin;
 7443|  89.1k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7966|  64.4k|    {
 7967|  64.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  64.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 28.6k, False: 35.7k]
  ------------------
 7969|  64.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 0, False: 28.6k]
  ------------------
 7970|  64.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 0]
  ------------------
 7971|  64.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|  64.4k|        Handler::on_localized();
 7979|  64.4k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7109|   179k|    {
 7110|   179k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7111|   179k|            m_specs.localized = true;
 7112|       |        }
 7113|       |        else {
 7114|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7115|       |        }
 7116|   179k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|   330k|{
 9494|   330k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   330k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   330k|{
 9353|   330k|#define SCN_VISIT(Type)                                                \
 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   330k|    }                                                                  \
 9357|   330k|    else {                                                             \
 9358|   330k|        return vis(monostate_val);                                     \
 9359|   330k|    }
 9360|       |
 9361|   330k|    monostate monostate_val{};
 9362|       |
 9363|   330k|    switch (get_arg_type(arg)) {
 9364|  53.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 53.2k, False: 276k]
  ------------------
 9365|  53.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  53.2k|    }                                                                  \
  |  | 9357|  53.2k|    else {                                                             \
  |  | 9358|  53.2k|        return vis(monostate_val);                                     \
  |  | 9359|  53.2k|    }
  ------------------
 9366|  53.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 330k]
  ------------------
 9367|  53.2k|            SCN_VISIT(short);
  ------------------
  |  | 9354|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  53.2k|    }                                                                  \
  |  | 9357|  53.2k|    else {                                                             \
  |  | 9358|  53.2k|        return vis(monostate_val);                                     \
  |  | 9359|  53.2k|    }
  ------------------
 9368|   116k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 63.1k, False: 266k]
  ------------------
 9369|   116k|            SCN_VISIT(int);
  ------------------
  |  | 9354|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   116k|    }                                                                  \
  |  | 9357|   116k|    else {                                                             \
  |  | 9358|   116k|        return vis(monostate_val);                                     \
  |  | 9359|   116k|    }
  ------------------
 9370|   116k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 330k]
  ------------------
 9371|   116k|            SCN_VISIT(long);
  ------------------
  |  | 9354|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   116k|    }                                                                  \
  |  | 9357|   116k|    else {                                                             \
  |  | 9358|   116k|        return vis(monostate_val);                                     \
  |  | 9359|   116k|    }
  ------------------
 9372|   180k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 64.3k, False: 265k]
  ------------------
 9373|   180k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|   180k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   180k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   180k|    }                                                                  \
  |  | 9357|   180k|    else {                                                             \
  |  | 9358|   180k|        return vis(monostate_val);                                     \
  |  | 9359|   180k|    }
  ------------------
 9374|   180k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 330k]
  ------------------
 9375|   180k|#if SCN_HAS_INT128
 9376|   180k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|   180k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   180k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   180k|    }                                                                  \
  |  | 9357|   180k|    else {                                                             \
  |  | 9358|   180k|        return vis(monostate_val);                                     \
  |  | 9359|   180k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|   227k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 46.8k, False: 283k]
  ------------------
 9381|   227k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   227k|    }                                                                  \
  |  | 9357|   227k|    else {                                                             \
  |  | 9358|   227k|        return vis(monostate_val);                                     \
  |  | 9359|   227k|    }
  ------------------
 9382|   227k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 330k]
  ------------------
 9383|   227k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   227k|    }                                                                  \
  |  | 9357|   227k|    else {                                                             \
  |  | 9358|   227k|        return vis(monostate_val);                                     \
  |  | 9359|   227k|    }
  ------------------
 9384|   278k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 51.0k, False: 279k]
  ------------------
 9385|   278k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   278k|    }                                                                  \
  |  | 9357|   278k|    else {                                                             \
  |  | 9358|   278k|        return vis(monostate_val);                                     \
  |  | 9359|   278k|    }
  ------------------
 9386|   278k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 330k]
  ------------------
 9387|   278k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   278k|    }                                                                  \
  |  | 9357|   278k|    else {                                                             \
  |  | 9358|   278k|        return vis(monostate_val);                                     \
  |  | 9359|   278k|    }
  ------------------
 9388|   330k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 51.5k, False: 278k]
  ------------------
 9389|   330k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9390|   330k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 330k]
  ------------------
 9391|   330k|#if SCN_HAS_INT128
 9392|   330k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|   330k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 330k]
  ------------------
 9397|   330k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9398|   330k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 330k]
  ------------------
 9399|   330k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9400|   330k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 330k]
  ------------------
 9401|   330k|            SCN_VISIT(char);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9402|   330k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 330k]
  ------------------
 9403|   330k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9404|   330k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 330k]
  ------------------
 9405|   330k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9406|   330k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 330k]
  ------------------
 9407|   330k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9408|   330k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 330k]
  ------------------
 9409|   330k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9410|   330k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 330k]
  ------------------
 9411|   330k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9412|   330k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 330k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   330k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 330k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 330k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 330k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 330k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 330k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 330k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 330k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 330k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 330k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 330k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   330k|            SCN_CLANG_POP
 9473|   330k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6361|   355k|        : m_format{format},
 6362|   355k|          m_next_arg_id{next_arg_id},
 6363|   355k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   355k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   355k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   355k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   355k|    {
 6369|   355k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   355k|{
 7878|   355k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   355k|    handler.check_args_exhausted();
 7880|   355k|    return handler.get_error();
 7881|   355k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   355k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   355k|    auto begin = format.data();
 7846|   355k|    auto it = begin;
 7847|   355k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   636k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 355k, False: 281k]
  ------------------
 7850|   355k|        const auto ch = *it++;
 7851|   355k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 355k, False: 0]
  ------------------
 7852|   355k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   355k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   355k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 74.3k, False: 281k]
  ------------------
 7856|  74.3k|                return;
 7857|  74.3k|            }
 7858|   355k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   355k|    }
 7869|       |
 7870|   281k|    handler.on_literal_text(begin, end);
 7871|   281k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9057|   281k|    {
 9058|   281k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   281k|    static_cast<    \
  |  | 1109|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   281k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7774|   355k|{
 7775|   355k|    struct id_adapter {
 7776|   355k|        constexpr void operator()()
 7777|   355k|        {
 7778|   355k|            arg_id = handler.on_arg_id();
 7779|   355k|        }
 7780|   355k|        constexpr void operator()(std::size_t id)
 7781|   355k|        {
 7782|   355k|            arg_id = handler.on_arg_id(id);
 7783|   355k|        }
 7784|       |
 7785|   355k|        constexpr void on_error(const char* msg)
 7786|   355k|        {
 7787|   355k|            SCN_UNLIKELY_ATTR
 7788|   355k|            handler.on_error(msg);
 7789|   355k|        }
 7790|       |
 7791|   355k|        Handler& handler;
 7792|   355k|        std::size_t arg_id;
 7793|   355k|    };
 7794|       |
 7795|   355k|    ++begin;
 7796|   355k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   355k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 355k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   355k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 355k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   355k|    else {
 7808|   355k|        auto adapter = id_adapter{handler, 0};
 7809|   355k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   355k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   355k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 355k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   355k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 355k, False: 0]
  ------------------
 7820|   355k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   355k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   355k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 24.7k, False: 330k]
  |  |  |  Branch (1039:45): [True: 0, False: 355k]
  |  |  |  Branch (1039:45): [True: 24.7k, False: 330k]
  |  |  ------------------
  ------------------
 7826|  24.7k|                handler.on_error("Unknown format specifier");
 7827|  24.7k|                return begin;
 7828|  24.7k|            }
 7829|   355k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   355k|    }
 7836|   330k|    return begin + 1;
 7837|   355k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   355k|{
 7276|   355k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   355k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 355k, False: 0]
  |  Branch (7277:26): [True: 0, False: 355k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   355k|    handler();
 7282|   355k|    return begin;
 7283|   355k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   355k|        {
 7778|   355k|            arg_id = handler.on_arg_id();
 7779|   355k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   355k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   355k|    {
 7962|   355k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   355k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7690|   355k|{
 7691|   355k|    auto do_presentation = [&]() -> const CharT* {
 7692|   355k|        if (*begin == CharT{'['}) {
 7693|   355k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   355k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   355k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   355k|                return begin;
 7699|   355k|            }
 7700|   355k|            handler.on_character_set_string(set);
 7701|   355k|            return begin;
 7702|   355k|        }
 7703|   355k|        if (*begin == CharT{'/'}) {
 7704|   355k|            return parse_presentation_regex(begin, end, handler);
 7705|   355k|        }
 7706|   355k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   355k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   355k|            handler.on_error("Invalid type specifier in format string");
 7709|   355k|            return begin;
 7710|   355k|        }
 7711|   355k|        handler.on_type(type);
 7712|   355k|        return begin;
 7713|   355k|    };
 7714|       |
 7715|   355k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 355k, False: 0]
  |  Branch (7715:28): [True: 338k, False: 16.5k]
  ------------------
 7716|   355k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 330k, False: 8.25k]
  |  Branch (7716:36): [True: 266k, False: 64.4k]
  ------------------
 7717|   266k|        return do_presentation();
 7718|   266k|    }
 7719|       |
 7720|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  89.2k|    begin = parse_align(begin, end, handler);
 7726|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  89.2k|    begin = parse_width(begin, end, handler);
 7732|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  89.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 89.2k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  89.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 64.4k, False: 24.7k]
  ------------------
 7751|  64.4k|        handler.on_localized();
 7752|  64.4k|        ++begin;
 7753|  64.4k|    }
 7754|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  89.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 89.2k, False: 0]
  |  Branch (7759:25): [True: 24.7k, False: 64.4k]
  ------------------
 7760|  24.7k|        do_presentation();
 7761|  24.7k|    }
 7762|  89.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  89.2k|    return begin;
 7768|  89.2k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   290k|    auto do_presentation = [&]() -> const CharT* {
 7692|   290k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 290k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   290k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 290k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   290k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   290k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.5k, False: 274k]
  |  |  ------------------
  ------------------
 7708|  16.5k|            handler.on_error("Invalid type specifier in format string");
 7709|  16.5k|            return begin;
 7710|  16.5k|        }
 7711|   274k|        handler.on_type(type);
 7712|   274k|        return begin;
 7713|   290k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7364|  89.2k|{
 7365|  89.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  89.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  89.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  89.2k|    auto check_align = [](wchar_t ch) {
 7368|  89.2k|        switch (ch) {
 7369|  89.2k|            case L'<':
 7370|  89.2k|                return align_type::left;
 7371|  89.2k|            case L'>':
 7372|  89.2k|                return align_type::right;
 7373|  89.2k|            case L'^':
 7374|  89.2k|                return align_type::center;
 7375|  89.2k|            default:
 7376|  89.2k|                return align_type::none;
 7377|  89.2k|        }
 7378|  89.2k|    };
 7379|       |
 7380|  89.2k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  89.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.2k]
  |  |  |  Branch (1039:45): [True: 0, False: 89.2k]
  |  |  |  Branch (1039:45): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7382|  89.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  89.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  89.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  89.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  89.2k|    const auto begin_before_fill = begin;
 7392|  89.2k|    begin += potential_fill_len;
 7393|       |
 7394|  89.2k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 89.2k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  89.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  89.2k|    const auto begin_after_fill = begin;
 7400|  89.2k|    ++begin;
 7401|       |
 7402|  89.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 89.2k, False: 0]
  ------------------
 7403|  89.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  89.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 89.2k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  89.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 89.2k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|  89.2k|    }
 7411|       |
 7412|  89.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 89.2k, False: 0]
  ------------------
 7413|  89.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 89.2k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  89.2k|        return begin_before_fill;
 7418|  89.2k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  89.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|   178k|    auto check_align = [](wchar_t ch) {
 7368|   178k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 178k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 178k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 178k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   178k|            default:
  ------------------
  |  Branch (7375:13): [True: 178k, False: 0]
  ------------------
 7376|   178k|                return align_type::none;
 7377|   178k|        }
 7378|   178k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7429|  89.2k|{
 7430|  89.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  89.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  89.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  89.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 72.7k, False: 16.5k]
  |  Branch (7432:33): [True: 0, False: 72.7k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|  89.2k|    return begin;
 7443|  89.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7966|  64.4k|    {
 7967|  64.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  64.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 28.7k, False: 35.7k]
  ------------------
 7969|  64.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 0, False: 28.7k]
  ------------------
 7970|  64.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 0]
  ------------------
 7971|  64.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|  64.4k|        Handler::on_localized();
 7979|  64.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   330k|{
 9494|   330k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   330k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   330k|{
 9353|   330k|#define SCN_VISIT(Type)                                                \
 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   330k|    }                                                                  \
 9357|   330k|    else {                                                             \
 9358|   330k|        return vis(monostate_val);                                     \
 9359|   330k|    }
 9360|       |
 9361|   330k|    monostate monostate_val{};
 9362|       |
 9363|   330k|    switch (get_arg_type(arg)) {
 9364|  53.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 53.2k, False: 277k]
  ------------------
 9365|  53.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  53.2k|    }                                                                  \
  |  | 9357|  53.2k|    else {                                                             \
  |  | 9358|  53.2k|        return vis(monostate_val);                                     \
  |  | 9359|  53.2k|    }
  ------------------
 9366|  53.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 330k]
  ------------------
 9367|  53.2k|            SCN_VISIT(short);
  ------------------
  |  | 9354|  53.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  53.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  53.2k|    }                                                                  \
  |  | 9357|  53.2k|    else {                                                             \
  |  | 9358|  53.2k|        return vis(monostate_val);                                     \
  |  | 9359|  53.2k|    }
  ------------------
 9368|   116k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 63.2k, False: 267k]
  ------------------
 9369|   116k|            SCN_VISIT(int);
  ------------------
  |  | 9354|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   116k|    }                                                                  \
  |  | 9357|   116k|    else {                                                             \
  |  | 9358|   116k|        return vis(monostate_val);                                     \
  |  | 9359|   116k|    }
  ------------------
 9370|   116k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 330k]
  ------------------
 9371|   116k|            SCN_VISIT(long);
  ------------------
  |  | 9354|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   116k|    }                                                                  \
  |  | 9357|   116k|    else {                                                             \
  |  | 9358|   116k|        return vis(monostate_val);                                     \
  |  | 9359|   116k|    }
  ------------------
 9372|   180k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 64.4k, False: 266k]
  ------------------
 9373|   180k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|   180k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   180k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   180k|    }                                                                  \
  |  | 9357|   180k|    else {                                                             \
  |  | 9358|   180k|        return vis(monostate_val);                                     \
  |  | 9359|   180k|    }
  ------------------
 9374|   180k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 330k]
  ------------------
 9375|   180k|#if SCN_HAS_INT128
 9376|   180k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|   180k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   180k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   180k|    }                                                                  \
  |  | 9357|   180k|    else {                                                             \
  |  | 9358|   180k|        return vis(monostate_val);                                     \
  |  | 9359|   180k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|   227k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 46.8k, False: 283k]
  ------------------
 9381|   227k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   227k|    }                                                                  \
  |  | 9357|   227k|    else {                                                             \
  |  | 9358|   227k|        return vis(monostate_val);                                     \
  |  | 9359|   227k|    }
  ------------------
 9382|   227k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 330k]
  ------------------
 9383|   227k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   227k|    }                                                                  \
  |  | 9357|   227k|    else {                                                             \
  |  | 9358|   227k|        return vis(monostate_val);                                     \
  |  | 9359|   227k|    }
  ------------------
 9384|   278k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 51.1k, False: 279k]
  ------------------
 9385|   278k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   278k|    }                                                                  \
  |  | 9357|   278k|    else {                                                             \
  |  | 9358|   278k|        return vis(monostate_val);                                     \
  |  | 9359|   278k|    }
  ------------------
 9386|   278k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 330k]
  ------------------
 9387|   278k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|   278k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   278k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   278k|    }                                                                  \
  |  | 9357|   278k|    else {                                                             \
  |  | 9358|   278k|        return vis(monostate_val);                                     \
  |  | 9359|   278k|    }
  ------------------
 9388|   330k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 51.6k, False: 278k]
  ------------------
 9389|   330k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9390|   330k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 330k]
  ------------------
 9391|   330k|#if SCN_HAS_INT128
 9392|   330k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|   330k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 330k]
  ------------------
 9397|   330k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9398|   330k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 330k]
  ------------------
 9399|   330k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9400|   330k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 330k]
  ------------------
 9401|   330k|            SCN_VISIT(char);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9402|   330k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 330k]
  ------------------
 9403|   330k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9404|   330k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 330k]
  ------------------
 9405|   330k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9406|   330k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 330k]
  ------------------
 9407|   330k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9408|   330k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 330k]
  ------------------
 9409|   330k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9410|   330k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 330k]
  ------------------
 9411|   330k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   330k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   330k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   330k|    }                                                                  \
  |  | 9357|   330k|    else {                                                             \
  |  | 9358|   330k|        return vis(monostate_val);                                     \
  |  | 9359|   330k|    }
  ------------------
 9412|   330k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 330k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   330k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 330k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 330k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 330k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 330k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 330k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 330k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 330k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 330k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 330k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 330k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   330k|            SCN_CLANG_POP
 9473|   330k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4369|  86.6k|    {
 4370|  86.6k|        return sync(0);
 4371|  86.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6262|   352k|    {
 6263|   352k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 352k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   352k|        return static_cast<std::size_t>(m_desc &
 6268|   352k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   352k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6288|   704k|    {
 6289|   704k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|   704k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6230|   352k|    {
 6231|   352k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 352k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|   352k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 352k]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|   352k|        const auto t = type(id);
 6243|   352k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 352k]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|   352k|        basic_scan_arg<Context> arg;
 6248|   352k|        arg.m_type = t;
 6249|   352k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 352k, False: 0]
  ------------------
 6250|   352k|            arg.m_value.ref_value = m_builtin_values[id];
 6251|   352k|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|   352k|        return arg;
 6256|   352k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6297|   352k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|   352k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|   352k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|   352k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|   352k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6292|   352k|    {
 6293|   352k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|   352k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6046|   588k|    {
 6047|   588k|        return m_type != detail::arg_type::none_type;
 6048|   588k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|  25.4k|{
 9494|  25.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  25.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  25.4k|{
 9353|  25.4k|#define SCN_VISIT(Type)                                                \
 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  25.4k|    }                                                                  \
 9357|  25.4k|    else {                                                             \
 9358|  25.4k|        return vis(monostate_val);                                     \
 9359|  25.4k|    }
 9360|       |
 9361|  25.4k|    monostate monostate_val{};
 9362|       |
 9363|  25.4k|    switch (get_arg_type(arg)) {
 9364|  4.23k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 4.23k, False: 21.2k]
  ------------------
 9365|  4.23k|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  4.23k|    }                                                                  \
  |  | 9357|  4.23k|    else {                                                             \
  |  | 9358|  4.23k|        return vis(monostate_val);                                     \
  |  | 9359|  4.23k|    }
  ------------------
 9366|  4.23k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 25.4k]
  ------------------
 9367|  4.23k|            SCN_VISIT(short);
  ------------------
  |  | 9354|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  4.23k|    }                                                                  \
  |  | 9357|  4.23k|    else {                                                             \
  |  | 9358|  4.23k|        return vis(monostate_val);                                     \
  |  | 9359|  4.23k|    }
  ------------------
 9368|  8.48k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 4.25k, False: 21.2k]
  ------------------
 9369|  8.48k|            SCN_VISIT(int);
  ------------------
  |  | 9354|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  8.48k|    }                                                                  \
  |  | 9357|  8.48k|    else {                                                             \
  |  | 9358|  8.48k|        return vis(monostate_val);                                     \
  |  | 9359|  8.48k|    }
  ------------------
 9370|  8.48k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 25.4k]
  ------------------
 9371|  8.48k|            SCN_VISIT(long);
  ------------------
  |  | 9354|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  8.48k|    }                                                                  \
  |  | 9357|  8.48k|    else {                                                             \
  |  | 9358|  8.48k|        return vis(monostate_val);                                     \
  |  | 9359|  8.48k|    }
  ------------------
 9372|  12.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 4.28k, False: 21.1k]
  ------------------
 9373|  12.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  12.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  12.7k|    }                                                                  \
  |  | 9357|  12.7k|    else {                                                             \
  |  | 9358|  12.7k|        return vis(monostate_val);                                     \
  |  | 9359|  12.7k|    }
  ------------------
 9374|  12.7k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 25.4k]
  ------------------
 9375|  12.7k|#if SCN_HAS_INT128
 9376|  12.7k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  12.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  12.7k|    }                                                                  \
  |  | 9357|  12.7k|    else {                                                             \
  |  | 9358|  12.7k|        return vis(monostate_val);                                     \
  |  | 9359|  12.7k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|  16.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 4.20k, False: 21.2k]
  ------------------
 9381|  16.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  16.9k|    }                                                                  \
  |  | 9357|  16.9k|    else {                                                             \
  |  | 9358|  16.9k|        return vis(monostate_val);                                     \
  |  | 9359|  16.9k|    }
  ------------------
 9382|  16.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 25.4k]
  ------------------
 9383|  16.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  16.9k|    }                                                                  \
  |  | 9357|  16.9k|    else {                                                             \
  |  | 9358|  16.9k|        return vis(monostate_val);                                     \
  |  | 9359|  16.9k|    }
  ------------------
 9384|  21.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 4.22k, False: 21.2k]
  ------------------
 9385|  21.2k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  21.2k|    }                                                                  \
  |  | 9357|  21.2k|    else {                                                             \
  |  | 9358|  21.2k|        return vis(monostate_val);                                     \
  |  | 9359|  21.2k|    }
  ------------------
 9386|  21.2k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 25.4k]
  ------------------
 9387|  21.2k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  21.2k|    }                                                                  \
  |  | 9357|  21.2k|    else {                                                             \
  |  | 9358|  21.2k|        return vis(monostate_val);                                     \
  |  | 9359|  21.2k|    }
  ------------------
 9388|  25.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 4.25k, False: 21.2k]
  ------------------
 9389|  25.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9390|  25.4k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 25.4k]
  ------------------
 9391|  25.4k|#if SCN_HAS_INT128
 9392|  25.4k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  25.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 25.4k]
  ------------------
 9397|  25.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9398|  25.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 25.4k]
  ------------------
 9399|  25.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9400|  25.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 25.4k]
  ------------------
 9401|  25.4k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9402|  25.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 25.4k]
  ------------------
 9403|  25.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9404|  25.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 25.4k]
  ------------------
 9405|  25.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9406|  25.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 25.4k]
  ------------------
 9407|  25.4k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9408|  25.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 25.4k]
  ------------------
 9409|  25.4k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9410|  25.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 25.4k]
  ------------------
 9411|  25.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9412|  25.4k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 25.4k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  25.4k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 25.4k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 25.4k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 25.4k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 25.4k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 25.4k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 25.4k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 25.4k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 25.4k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 25.4k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 25.4k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  25.4k|            SCN_CLANG_POP
 9473|  25.4k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|   907k|{
 6092|   907k|    return arg.m_type;
 6093|   907k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|   270k|{
 6104|   270k|    return arg.m_value;
 6105|   270k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   159k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   159k|    static_cast<    \
  |  | 1109|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   159k|    {
 9021|   159k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6361|   159k|        : m_format{format},
 6362|   159k|          m_next_arg_id{next_arg_id},
 6363|   159k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   159k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   159k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   159k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   159k|    {
 6369|   159k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   159k|    {
 3089|   159k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   159k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   159k|    {
 3055|   159k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   159k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   159k|{
 7878|   159k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   159k|    handler.check_args_exhausted();
 7880|   159k|    return handler.get_error();
 7881|   159k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   159k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   159k|    auto begin = format.data();
 7846|   159k|    auto it = begin;
 7847|   159k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   169k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 159k, False: 10.6k]
  ------------------
 7850|   159k|        const auto ch = *it++;
 7851|   159k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 159k, False: 0]
  ------------------
 7852|   159k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   159k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   159k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 148k, False: 10.6k]
  ------------------
 7856|   148k|                return;
 7857|   148k|            }
 7858|   159k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   159k|    }
 7869|       |
 7870|  10.6k|    handler.on_literal_text(begin, end);
 7871|  10.6k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7774|   159k|{
 7775|   159k|    struct id_adapter {
 7776|   159k|        constexpr void operator()()
 7777|   159k|        {
 7778|   159k|            arg_id = handler.on_arg_id();
 7779|   159k|        }
 7780|   159k|        constexpr void operator()(std::size_t id)
 7781|   159k|        {
 7782|   159k|            arg_id = handler.on_arg_id(id);
 7783|   159k|        }
 7784|       |
 7785|   159k|        constexpr void on_error(const char* msg)
 7786|   159k|        {
 7787|   159k|            SCN_UNLIKELY_ATTR
 7788|   159k|            handler.on_error(msg);
 7789|   159k|        }
 7790|       |
 7791|   159k|        Handler& handler;
 7792|   159k|        std::size_t arg_id;
 7793|   159k|    };
 7794|       |
 7795|   159k|    ++begin;
 7796|   159k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   159k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 159k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   159k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 159k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   159k|    else {
 7808|   159k|        auto adapter = id_adapter{handler, 0};
 7809|   159k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   159k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   159k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 159k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   159k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 159k, False: 0]
  ------------------
 7820|   159k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   159k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   159k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 49.5k, False: 109k]
  |  |  |  Branch (1039:45): [True: 0, False: 159k]
  |  |  |  Branch (1039:45): [True: 49.5k, False: 109k]
  |  |  ------------------
  ------------------
 7826|  49.5k|                handler.on_error("Unknown format specifier");
 7827|  49.5k|                return begin;
 7828|  49.5k|            }
 7829|   159k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   159k|    }
 7836|   109k|    return begin + 1;
 7837|   159k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8918|   318k|    {
 8919|   318k|        return m_args.get(id);
 8920|   318k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6396|   318k|    {
 6397|   318k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 318k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   318k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   318k|        do_check_arg_id(id);
 6405|   318k|        return id;
 6406|   318k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6890|   318k|{
 6891|   318k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   318k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   318k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   159k|{
 7276|   159k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   159k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 159k, False: 0]
  |  Branch (7277:26): [True: 0, False: 159k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   159k|    handler();
 7282|   159k|    return begin;
 7283|   159k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   159k|        {
 7778|   159k|            arg_id = handler.on_arg_id();
 7779|   159k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6391|   219k|    {
 6392|   219k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   219k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4708|   184k|{
 4709|   184k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 184k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   184k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   184k|                            ranges::default_sentinel};
 4715|   184k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4471|   184k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   184k|    {
 4473|   184k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   184k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   184k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6380|   538k|    {
 6381|   538k|        return m_format.data();
 6382|   538k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   159k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   159k|    {
 7962|   159k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   159k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7690|   159k|{
 7691|   159k|    auto do_presentation = [&]() -> const CharT* {
 7692|   159k|        if (*begin == CharT{'['}) {
 7693|   159k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   159k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   159k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   159k|                return begin;
 7699|   159k|            }
 7700|   159k|            handler.on_character_set_string(set);
 7701|   159k|            return begin;
 7702|   159k|        }
 7703|   159k|        if (*begin == CharT{'/'}) {
 7704|   159k|            return parse_presentation_regex(begin, end, handler);
 7705|   159k|        }
 7706|   159k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   159k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   159k|            handler.on_error("Invalid type specifier in format string");
 7709|   159k|            return begin;
 7710|   159k|        }
 7711|   159k|        handler.on_type(type);
 7712|   159k|        return begin;
 7713|   159k|    };
 7714|       |
 7715|   159k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 159k, False: 0]
  |  Branch (7715:28): [True: 126k, False: 33.0k]
  ------------------
 7716|   159k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 109k, False: 16.5k]
  |  Branch (7716:36): [True: 84.4k, False: 25.2k]
  ------------------
 7717|  84.4k|        return do_presentation();
 7718|  84.4k|    }
 7719|       |
 7720|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  74.7k|    begin = parse_align(begin, end, handler);
 7726|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  74.7k|    begin = parse_width(begin, end, handler);
 7732|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  74.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 74.7k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  74.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 25.2k, False: 49.5k]
  ------------------
 7751|  25.2k|        handler.on_localized();
 7752|  25.2k|        ++begin;
 7753|  25.2k|    }
 7754|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  74.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 74.7k, False: 0]
  |  Branch (7759:25): [True: 49.5k, False: 25.2k]
  ------------------
 7760|  49.5k|        do_presentation();
 7761|  49.5k|    }
 7762|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  74.7k|    return begin;
 7768|  74.7k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7339|   252k|{
 7340|   252k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 168k, False: 83.5k]
  |  Branch (7340:33): [True: 168k, False: 0]
  ------------------
 7341|   252k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 50.4k, False: 33.0k]
  |  Branch (7341:33): [True: 50.4k, False: 0]
  ------------------
 7342|   252k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   134k|    auto do_presentation = [&]() -> const CharT* {
 7692|   134k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 134k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   134k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 134k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   134k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   134k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 33.0k, False: 100k]
  |  |  ------------------
  ------------------
 7708|  33.0k|            handler.on_error("Invalid type specifier in format string");
 7709|  33.0k|            return begin;
 7710|  33.0k|        }
 7711|   100k|        handler.on_type(type);
 7712|   100k|        return begin;
 7713|   134k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7287|   268k|{
 7288|   268k|    switch (type) {
 7289|  33.4k|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 33.4k, False: 234k]
  ------------------
 7290|  66.4k|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 33.0k, False: 235k]
  ------------------
 7291|  66.4k|            return presentation_type::int_binary;
 7292|  33.9k|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 33.9k, False: 234k]
  ------------------
 7293|  33.9k|            return presentation_type::int_decimal;
 7294|  33.9k|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 33.9k, False: 234k]
  ------------------
 7295|  33.9k|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 268k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|  33.5k|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 33.5k, False: 234k]
  ------------------
 7299|  33.5k|            return presentation_type::int_octal;
 7300|  34.0k|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 34.0k, False: 234k]
  ------------------
 7301|  34.0k|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 268k]
  ------------------
 7302|  34.0k|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 268k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 268k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|      0|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 0, False: 268k]
  ------------------
 7307|      0|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 268k]
  ------------------
 7308|      0|            return presentation_type::float_hex;
 7309|      0|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 0, False: 268k]
  ------------------
 7310|      0|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 268k]
  ------------------
 7311|      0|            return presentation_type::float_scientific;
 7312|      0|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 0, False: 268k]
  ------------------
 7313|      0|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 268k]
  ------------------
 7314|      0|            return presentation_type::float_fixed;
 7315|      0|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 0, False: 268k]
  ------------------
 7316|      0|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 268k]
  ------------------
 7317|      0|            return presentation_type::float_general;
 7318|      0|        case 's':
  ------------------
  |  Branch (7318:9): [True: 0, False: 268k]
  ------------------
 7319|      0|            return presentation_type::string;
 7320|      0|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 0, False: 268k]
  ------------------
 7321|      0|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 268k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 268k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 268k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 268k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|  66.0k|        default:
  ------------------
  |  Branch (7332:9): [True: 66.0k, False: 201k]
  ------------------
 7333|  66.0k|            return presentation_type::none;
 7334|   268k|    }
 7335|   268k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|  74.7k|{
 7365|  74.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  74.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  74.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  74.7k|    auto check_align = [](wchar_t ch) {
 7368|  74.7k|        switch (ch) {
 7369|  74.7k|            case L'<':
 7370|  74.7k|                return align_type::left;
 7371|  74.7k|            case L'>':
 7372|  74.7k|                return align_type::right;
 7373|  74.7k|            case L'^':
 7374|  74.7k|                return align_type::center;
 7375|  74.7k|            default:
 7376|  74.7k|                return align_type::none;
 7377|  74.7k|        }
 7378|  74.7k|    };
 7379|       |
 7380|  74.7k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  74.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  |  Branch (1039:45): [True: 0, False: 74.7k]
  |  |  |  Branch (1039:45): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7382|  74.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  74.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  74.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  74.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  74.7k|    const auto begin_before_fill = begin;
 7392|  74.7k|    begin += potential_fill_len;
 7393|       |
 7394|  74.7k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 74.7k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  74.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  74.7k|    const auto begin_after_fill = begin;
 7400|  74.7k|    ++begin;
 7401|       |
 7402|  74.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 74.7k, False: 0]
  ------------------
 7403|  74.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  74.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 74.7k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|  74.7k|    }
 7411|       |
 7412|  74.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 74.7k, False: 0]
  ------------------
 7413|  74.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 74.7k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  74.7k|        return begin_before_fill;
 7418|  74.7k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  74.7k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7346|   149k|{
 7347|   149k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|   149k|    if constexpr (sizeof(CharT) != 1) {
 7349|   149k|        return 1;
 7350|       |    }
 7351|       |    else {
 7352|       |        const auto lengths =
 7353|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|       |            "\3\4";
 7355|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|       |        return len;
 7357|       |    }
 7358|   149k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|   149k|    auto check_align = [](wchar_t ch) {
 7368|   149k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 149k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 149k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 149k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   149k|            default:
  ------------------
  |  Branch (7375:13): [True: 149k, False: 0]
  ------------------
 7376|   149k|                return align_type::none;
 7377|   149k|        }
 7378|   149k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7429|  74.7k|{
 7430|  74.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  74.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  74.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  74.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 41.7k, False: 33.0k]
  |  Branch (7432:33): [True: 0, False: 41.7k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|  74.7k|    return begin;
 7443|  74.7k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7966|  25.2k|    {
 7967|  25.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  25.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 12.5k, False: 12.6k]
  ------------------
 7969|  25.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 0, False: 12.5k]
  ------------------
 7970|  25.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 0]
  ------------------
 7971|  25.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|  25.2k|        Handler::on_localized();
 7979|  25.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   109k|{
 9494|   109k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   109k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   109k|{
 9353|   109k|#define SCN_VISIT(Type)                                                \
 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   109k|    }                                                                  \
 9357|   109k|    else {                                                             \
 9358|   109k|        return vis(monostate_val);                                     \
 9359|   109k|    }
 9360|       |
 9361|   109k|    monostate monostate_val{};
 9362|       |
 9363|   109k|    switch (get_arg_type(arg)) {
 9364|  18.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 18.2k, False: 91.4k]
  ------------------
 9365|  18.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|  18.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  18.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  18.2k|    }                                                                  \
  |  | 9357|  18.2k|    else {                                                             \
  |  | 9358|  18.2k|        return vis(monostate_val);                                     \
  |  | 9359|  18.2k|    }
  ------------------
 9366|  18.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 109k]
  ------------------
 9367|  18.2k|            SCN_VISIT(short);
  ------------------
  |  | 9354|  18.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  18.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  18.2k|    }                                                                  \
  |  | 9357|  18.2k|    else {                                                             \
  |  | 9358|  18.2k|        return vis(monostate_val);                                     \
  |  | 9359|  18.2k|    }
  ------------------
 9368|  36.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 18.3k, False: 91.4k]
  ------------------
 9369|  36.5k|            SCN_VISIT(int);
  ------------------
  |  | 9354|  36.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  36.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  36.5k|    }                                                                  \
  |  | 9357|  36.5k|    else {                                                             \
  |  | 9358|  36.5k|        return vis(monostate_val);                                     \
  |  | 9359|  36.5k|    }
  ------------------
 9370|  36.5k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 109k]
  ------------------
 9371|  36.5k|            SCN_VISIT(long);
  ------------------
  |  | 9354|  36.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  36.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  36.5k|    }                                                                  \
  |  | 9357|  36.5k|    else {                                                             \
  |  | 9358|  36.5k|        return vis(monostate_val);                                     \
  |  | 9359|  36.5k|    }
  ------------------
 9372|  54.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 18.4k, False: 91.3k]
  ------------------
 9373|  54.9k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  54.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  54.9k|    }                                                                  \
  |  | 9357|  54.9k|    else {                                                             \
  |  | 9358|  54.9k|        return vis(monostate_val);                                     \
  |  | 9359|  54.9k|    }
  ------------------
 9374|  54.9k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 109k]
  ------------------
 9375|  54.9k|#if SCN_HAS_INT128
 9376|  54.9k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  54.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  54.9k|    }                                                                  \
  |  | 9357|  54.9k|    else {                                                             \
  |  | 9358|  54.9k|        return vis(monostate_val);                                     \
  |  | 9359|  54.9k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|  73.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 18.1k, False: 91.5k]
  ------------------
 9381|  73.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|  73.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  73.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  73.1k|    }                                                                  \
  |  | 9357|  73.1k|    else {                                                             \
  |  | 9358|  73.1k|        return vis(monostate_val);                                     \
  |  | 9359|  73.1k|    }
  ------------------
 9382|  73.1k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 109k]
  ------------------
 9383|  73.1k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|  73.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  73.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  73.1k|    }                                                                  \
  |  | 9357|  73.1k|    else {                                                             \
  |  | 9358|  73.1k|        return vis(monostate_val);                                     \
  |  | 9359|  73.1k|    }
  ------------------
 9384|  91.4k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 18.2k, False: 91.4k]
  ------------------
 9385|  91.4k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  91.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  91.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  91.4k|    }                                                                  \
  |  | 9357|  91.4k|    else {                                                             \
  |  | 9358|  91.4k|        return vis(monostate_val);                                     \
  |  | 9359|  91.4k|    }
  ------------------
 9386|  91.4k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 109k]
  ------------------
 9387|  91.4k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  91.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  91.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  91.4k|    }                                                                  \
  |  | 9357|  91.4k|    else {                                                             \
  |  | 9358|  91.4k|        return vis(monostate_val);                                     \
  |  | 9359|  91.4k|    }
  ------------------
 9388|   109k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 18.3k, False: 91.4k]
  ------------------
 9389|   109k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9390|   109k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 109k]
  ------------------
 9391|   109k|#if SCN_HAS_INT128
 9392|   109k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|   109k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 109k]
  ------------------
 9397|   109k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9398|   109k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 109k]
  ------------------
 9399|   109k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9400|   109k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 109k]
  ------------------
 9401|   109k|            SCN_VISIT(char);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9402|   109k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 109k]
  ------------------
 9403|   109k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9404|   109k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 109k]
  ------------------
 9405|   109k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9406|   109k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 109k]
  ------------------
 9407|   109k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9408|   109k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 109k]
  ------------------
 9409|   109k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9410|   109k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 109k]
  ------------------
 9411|   109k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9412|   109k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 109k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   109k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 109k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 109k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 109k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 109k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 109k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 109k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 109k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 109k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 109k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 109k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   109k|            SCN_CLANG_POP
 9473|   109k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|  25.4k|{
 9494|  25.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  25.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  25.4k|{
 9353|  25.4k|#define SCN_VISIT(Type)                                                \
 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  25.4k|    }                                                                  \
 9357|  25.4k|    else {                                                             \
 9358|  25.4k|        return vis(monostate_val);                                     \
 9359|  25.4k|    }
 9360|       |
 9361|  25.4k|    monostate monostate_val{};
 9362|       |
 9363|  25.4k|    switch (get_arg_type(arg)) {
 9364|  4.23k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 4.23k, False: 21.2k]
  ------------------
 9365|  4.23k|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  4.23k|    }                                                                  \
  |  | 9357|  4.23k|    else {                                                             \
  |  | 9358|  4.23k|        return vis(monostate_val);                                     \
  |  | 9359|  4.23k|    }
  ------------------
 9366|  4.23k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 25.4k]
  ------------------
 9367|  4.23k|            SCN_VISIT(short);
  ------------------
  |  | 9354|  4.23k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  4.23k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  4.23k|    }                                                                  \
  |  | 9357|  4.23k|    else {                                                             \
  |  | 9358|  4.23k|        return vis(monostate_val);                                     \
  |  | 9359|  4.23k|    }
  ------------------
 9368|  8.48k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 4.25k, False: 21.2k]
  ------------------
 9369|  8.48k|            SCN_VISIT(int);
  ------------------
  |  | 9354|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  8.48k|    }                                                                  \
  |  | 9357|  8.48k|    else {                                                             \
  |  | 9358|  8.48k|        return vis(monostate_val);                                     \
  |  | 9359|  8.48k|    }
  ------------------
 9370|  8.48k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 25.4k]
  ------------------
 9371|  8.48k|            SCN_VISIT(long);
  ------------------
  |  | 9354|  8.48k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  8.48k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  8.48k|    }                                                                  \
  |  | 9357|  8.48k|    else {                                                             \
  |  | 9358|  8.48k|        return vis(monostate_val);                                     \
  |  | 9359|  8.48k|    }
  ------------------
 9372|  12.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 4.28k, False: 21.1k]
  ------------------
 9373|  12.7k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  12.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  12.7k|    }                                                                  \
  |  | 9357|  12.7k|    else {                                                             \
  |  | 9358|  12.7k|        return vis(monostate_val);                                     \
  |  | 9359|  12.7k|    }
  ------------------
 9374|  12.7k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 25.4k]
  ------------------
 9375|  12.7k|#if SCN_HAS_INT128
 9376|  12.7k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  12.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  12.7k|    }                                                                  \
  |  | 9357|  12.7k|    else {                                                             \
  |  | 9358|  12.7k|        return vis(monostate_val);                                     \
  |  | 9359|  12.7k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|  16.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 4.20k, False: 21.2k]
  ------------------
 9381|  16.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  16.9k|    }                                                                  \
  |  | 9357|  16.9k|    else {                                                             \
  |  | 9358|  16.9k|        return vis(monostate_val);                                     \
  |  | 9359|  16.9k|    }
  ------------------
 9382|  16.9k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 25.4k]
  ------------------
 9383|  16.9k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|  16.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  16.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  16.9k|    }                                                                  \
  |  | 9357|  16.9k|    else {                                                             \
  |  | 9358|  16.9k|        return vis(monostate_val);                                     \
  |  | 9359|  16.9k|    }
  ------------------
 9384|  21.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 4.22k, False: 21.2k]
  ------------------
 9385|  21.2k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  21.2k|    }                                                                  \
  |  | 9357|  21.2k|    else {                                                             \
  |  | 9358|  21.2k|        return vis(monostate_val);                                     \
  |  | 9359|  21.2k|    }
  ------------------
 9386|  21.2k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 25.4k]
  ------------------
 9387|  21.2k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  21.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  21.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  21.2k|    }                                                                  \
  |  | 9357|  21.2k|    else {                                                             \
  |  | 9358|  21.2k|        return vis(monostate_val);                                     \
  |  | 9359|  21.2k|    }
  ------------------
 9388|  25.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 4.25k, False: 21.2k]
  ------------------
 9389|  25.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9390|  25.4k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 25.4k]
  ------------------
 9391|  25.4k|#if SCN_HAS_INT128
 9392|  25.4k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  25.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 25.4k]
  ------------------
 9397|  25.4k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9398|  25.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 25.4k]
  ------------------
 9399|  25.4k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9400|  25.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 25.4k]
  ------------------
 9401|  25.4k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9402|  25.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 25.4k]
  ------------------
 9403|  25.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9404|  25.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 25.4k]
  ------------------
 9405|  25.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9406|  25.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 25.4k]
  ------------------
 9407|  25.4k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9408|  25.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 25.4k]
  ------------------
 9409|  25.4k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9410|  25.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 25.4k]
  ------------------
 9411|  25.4k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  25.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  25.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  25.4k|    }                                                                  \
  |  | 9357|  25.4k|    else {                                                             \
  |  | 9358|  25.4k|        return vis(monostate_val);                                     \
  |  | 9359|  25.4k|    }
  ------------------
 9412|  25.4k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 25.4k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  25.4k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 25.4k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 25.4k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 25.4k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 25.4k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 25.4k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 25.4k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 25.4k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 25.4k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 25.4k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 25.4k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  25.4k|            SCN_CLANG_POP
 9473|  25.4k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6361|   159k|        : m_format{format},
 6362|   159k|          m_next_arg_id{next_arg_id},
 6363|   159k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   159k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   159k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   159k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   159k|    {
 6369|   159k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   159k|{
 7878|   159k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   159k|    handler.check_args_exhausted();
 7880|   159k|    return handler.get_error();
 7881|   159k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   159k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   159k|    auto begin = format.data();
 7846|   159k|    auto it = begin;
 7847|   159k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   169k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 159k, False: 10.6k]
  ------------------
 7850|   159k|        const auto ch = *it++;
 7851|   159k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 159k, False: 0]
  ------------------
 7852|   159k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   159k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   159k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 148k, False: 10.6k]
  ------------------
 7856|   148k|                return;
 7857|   148k|            }
 7858|   159k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   159k|    }
 7869|       |
 7870|  10.6k|    handler.on_literal_text(begin, end);
 7871|  10.6k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9057|  10.6k|    {
 9058|  10.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  10.6k|    static_cast<    \
  |  | 1109|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|  10.6k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7774|   159k|{
 7775|   159k|    struct id_adapter {
 7776|   159k|        constexpr void operator()()
 7777|   159k|        {
 7778|   159k|            arg_id = handler.on_arg_id();
 7779|   159k|        }
 7780|   159k|        constexpr void operator()(std::size_t id)
 7781|   159k|        {
 7782|   159k|            arg_id = handler.on_arg_id(id);
 7783|   159k|        }
 7784|       |
 7785|   159k|        constexpr void on_error(const char* msg)
 7786|   159k|        {
 7787|   159k|            SCN_UNLIKELY_ATTR
 7788|   159k|            handler.on_error(msg);
 7789|   159k|        }
 7790|       |
 7791|   159k|        Handler& handler;
 7792|   159k|        std::size_t arg_id;
 7793|   159k|    };
 7794|       |
 7795|   159k|    ++begin;
 7796|   159k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   159k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 159k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   159k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 159k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   159k|    else {
 7808|   159k|        auto adapter = id_adapter{handler, 0};
 7809|   159k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   159k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   159k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 159k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   159k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 159k, False: 0]
  ------------------
 7820|   159k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   159k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   159k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 49.5k, False: 109k]
  |  |  |  Branch (1039:45): [True: 0, False: 159k]
  |  |  |  Branch (1039:45): [True: 49.5k, False: 109k]
  |  |  ------------------
  ------------------
 7826|  49.5k|                handler.on_error("Unknown format specifier");
 7827|  49.5k|                return begin;
 7828|  49.5k|            }
 7829|   159k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   159k|    }
 7836|   109k|    return begin + 1;
 7837|   159k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   159k|{
 7276|   159k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   159k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 159k, False: 0]
  |  Branch (7277:26): [True: 0, False: 159k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   159k|    handler();
 7282|   159k|    return begin;
 7283|   159k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   159k|        {
 7778|   159k|            arg_id = handler.on_arg_id();
 7779|   159k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   159k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   159k|    {
 7962|   159k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   159k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7690|   159k|{
 7691|   159k|    auto do_presentation = [&]() -> const CharT* {
 7692|   159k|        if (*begin == CharT{'['}) {
 7693|   159k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   159k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   159k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   159k|                return begin;
 7699|   159k|            }
 7700|   159k|            handler.on_character_set_string(set);
 7701|   159k|            return begin;
 7702|   159k|        }
 7703|   159k|        if (*begin == CharT{'/'}) {
 7704|   159k|            return parse_presentation_regex(begin, end, handler);
 7705|   159k|        }
 7706|   159k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   159k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   159k|            handler.on_error("Invalid type specifier in format string");
 7709|   159k|            return begin;
 7710|   159k|        }
 7711|   159k|        handler.on_type(type);
 7712|   159k|        return begin;
 7713|   159k|    };
 7714|       |
 7715|   159k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 159k, False: 0]
  |  Branch (7715:28): [True: 126k, False: 33.0k]
  ------------------
 7716|   159k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 109k, False: 16.5k]
  |  Branch (7716:36): [True: 84.4k, False: 25.2k]
  ------------------
 7717|  84.4k|        return do_presentation();
 7718|  84.4k|    }
 7719|       |
 7720|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  74.7k|    begin = parse_align(begin, end, handler);
 7726|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  74.7k|    begin = parse_width(begin, end, handler);
 7732|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  74.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 74.7k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  74.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 25.2k, False: 49.5k]
  ------------------
 7751|  25.2k|        handler.on_localized();
 7752|  25.2k|        ++begin;
 7753|  25.2k|    }
 7754|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  74.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 74.7k, False: 0]
  |  Branch (7759:25): [True: 49.5k, False: 25.2k]
  ------------------
 7760|  49.5k|        do_presentation();
 7761|  49.5k|    }
 7762|  74.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  74.7k|    return begin;
 7768|  74.7k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   134k|    auto do_presentation = [&]() -> const CharT* {
 7692|   134k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 134k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   134k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 134k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   134k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   134k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 33.0k, False: 100k]
  |  |  ------------------
  ------------------
 7708|  33.0k|            handler.on_error("Invalid type specifier in format string");
 7709|  33.0k|            return begin;
 7710|  33.0k|        }
 7711|   100k|        handler.on_type(type);
 7712|   100k|        return begin;
 7713|   134k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7364|  74.7k|{
 7365|  74.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  74.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  74.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  74.7k|    auto check_align = [](wchar_t ch) {
 7368|  74.7k|        switch (ch) {
 7369|  74.7k|            case L'<':
 7370|  74.7k|                return align_type::left;
 7371|  74.7k|            case L'>':
 7372|  74.7k|                return align_type::right;
 7373|  74.7k|            case L'^':
 7374|  74.7k|                return align_type::center;
 7375|  74.7k|            default:
 7376|  74.7k|                return align_type::none;
 7377|  74.7k|        }
 7378|  74.7k|    };
 7379|       |
 7380|  74.7k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  74.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  |  Branch (1039:45): [True: 0, False: 74.7k]
  |  |  |  Branch (1039:45): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7382|  74.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  74.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  74.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  74.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  74.7k|    const auto begin_before_fill = begin;
 7392|  74.7k|    begin += potential_fill_len;
 7393|       |
 7394|  74.7k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 74.7k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  74.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  74.7k|    const auto begin_after_fill = begin;
 7400|  74.7k|    ++begin;
 7401|       |
 7402|  74.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 74.7k, False: 0]
  ------------------
 7403|  74.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  74.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 74.7k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|  74.7k|    }
 7411|       |
 7412|  74.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 74.7k, False: 0]
  ------------------
 7413|  74.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 74.7k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  74.7k|        return begin_before_fill;
 7418|  74.7k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  74.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|   149k|    auto check_align = [](wchar_t ch) {
 7368|   149k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 149k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 149k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 149k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   149k|            default:
  ------------------
  |  Branch (7375:13): [True: 149k, False: 0]
  ------------------
 7376|   149k|                return align_type::none;
 7377|   149k|        }
 7378|   149k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7429|  74.7k|{
 7430|  74.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  74.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  74.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  74.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 41.7k, False: 33.0k]
  |  Branch (7432:33): [True: 0, False: 41.7k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|  74.7k|    return begin;
 7443|  74.7k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7966|  25.2k|    {
 7967|  25.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  25.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 12.5k, False: 12.6k]
  ------------------
 7969|  25.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 0, False: 12.5k]
  ------------------
 7970|  25.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 0]
  ------------------
 7971|  25.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|  25.2k|        Handler::on_localized();
 7979|  25.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   109k|{
 9494|   109k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   109k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   109k|{
 9353|   109k|#define SCN_VISIT(Type)                                                \
 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   109k|    }                                                                  \
 9357|   109k|    else {                                                             \
 9358|   109k|        return vis(monostate_val);                                     \
 9359|   109k|    }
 9360|       |
 9361|   109k|    monostate monostate_val{};
 9362|       |
 9363|   109k|    switch (get_arg_type(arg)) {
 9364|  18.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 18.2k, False: 91.4k]
  ------------------
 9365|  18.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|  18.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  18.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  18.2k|    }                                                                  \
  |  | 9357|  18.2k|    else {                                                             \
  |  | 9358|  18.2k|        return vis(monostate_val);                                     \
  |  | 9359|  18.2k|    }
  ------------------
 9366|  18.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 109k]
  ------------------
 9367|  18.2k|            SCN_VISIT(short);
  ------------------
  |  | 9354|  18.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  18.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  18.2k|    }                                                                  \
  |  | 9357|  18.2k|    else {                                                             \
  |  | 9358|  18.2k|        return vis(monostate_val);                                     \
  |  | 9359|  18.2k|    }
  ------------------
 9368|  36.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 18.3k, False: 91.4k]
  ------------------
 9369|  36.5k|            SCN_VISIT(int);
  ------------------
  |  | 9354|  36.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  36.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  36.5k|    }                                                                  \
  |  | 9357|  36.5k|    else {                                                             \
  |  | 9358|  36.5k|        return vis(monostate_val);                                     \
  |  | 9359|  36.5k|    }
  ------------------
 9370|  36.5k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 109k]
  ------------------
 9371|  36.5k|            SCN_VISIT(long);
  ------------------
  |  | 9354|  36.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  36.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  36.5k|    }                                                                  \
  |  | 9357|  36.5k|    else {                                                             \
  |  | 9358|  36.5k|        return vis(monostate_val);                                     \
  |  | 9359|  36.5k|    }
  ------------------
 9372|  54.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 18.4k, False: 91.3k]
  ------------------
 9373|  54.9k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  54.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  54.9k|    }                                                                  \
  |  | 9357|  54.9k|    else {                                                             \
  |  | 9358|  54.9k|        return vis(monostate_val);                                     \
  |  | 9359|  54.9k|    }
  ------------------
 9374|  54.9k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 109k]
  ------------------
 9375|  54.9k|#if SCN_HAS_INT128
 9376|  54.9k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  54.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  54.9k|    }                                                                  \
  |  | 9357|  54.9k|    else {                                                             \
  |  | 9358|  54.9k|        return vis(monostate_val);                                     \
  |  | 9359|  54.9k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|  73.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 18.1k, False: 91.5k]
  ------------------
 9381|  73.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|  73.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  73.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  73.1k|    }                                                                  \
  |  | 9357|  73.1k|    else {                                                             \
  |  | 9358|  73.1k|        return vis(monostate_val);                                     \
  |  | 9359|  73.1k|    }
  ------------------
 9382|  73.1k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 109k]
  ------------------
 9383|  73.1k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|  73.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  73.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  73.1k|    }                                                                  \
  |  | 9357|  73.1k|    else {                                                             \
  |  | 9358|  73.1k|        return vis(monostate_val);                                     \
  |  | 9359|  73.1k|    }
  ------------------
 9384|  91.4k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 18.2k, False: 91.4k]
  ------------------
 9385|  91.4k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  91.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  91.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  91.4k|    }                                                                  \
  |  | 9357|  91.4k|    else {                                                             \
  |  | 9358|  91.4k|        return vis(monostate_val);                                     \
  |  | 9359|  91.4k|    }
  ------------------
 9386|  91.4k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 109k]
  ------------------
 9387|  91.4k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  91.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  91.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  91.4k|    }                                                                  \
  |  | 9357|  91.4k|    else {                                                             \
  |  | 9358|  91.4k|        return vis(monostate_val);                                     \
  |  | 9359|  91.4k|    }
  ------------------
 9388|   109k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 18.3k, False: 91.4k]
  ------------------
 9389|   109k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9390|   109k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 109k]
  ------------------
 9391|   109k|#if SCN_HAS_INT128
 9392|   109k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|   109k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 109k]
  ------------------
 9397|   109k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9398|   109k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 109k]
  ------------------
 9399|   109k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9400|   109k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 109k]
  ------------------
 9401|   109k|            SCN_VISIT(char);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9402|   109k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 109k]
  ------------------
 9403|   109k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9404|   109k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 109k]
  ------------------
 9405|   109k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9406|   109k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 109k]
  ------------------
 9407|   109k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9408|   109k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 109k]
  ------------------
 9409|   109k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9410|   109k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 109k]
  ------------------
 9411|   109k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   109k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   109k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   109k|    }                                                                  \
  |  | 9357|   109k|    else {                                                             \
  |  | 9358|   109k|        return vis(monostate_val);                                     \
  |  | 9359|   109k|    }
  ------------------
 9412|   109k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 109k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   109k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 109k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 109k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 109k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 109k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 109k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 109k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 109k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 109k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 109k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 109k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   109k|            SCN_CLANG_POP
 9473|   109k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4369|   173k|    {
 4370|   173k|        return sync(0);
 4371|   173k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6216|  63.1k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6216|  16.9k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  88.1k|{
   44|  88.1k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  88.1k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  88.1k|{
   60|  88.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  88.1k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  8.48k|{
   72|  8.48k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.48k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  88.1k|{
   44|  88.1k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  88.1k|}
_ZN3scn2v44scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  88.1k|{
   60|  88.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  88.1k|}
_ZN3scn2v410scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  8.48k|{
   72|  8.48k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.48k|}
_ZN3scn2v44scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}
_ZN3scn2v44scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto result = make_scan_result<Source, Args...>();
   90|  14.6k|    fill_scan_result(result,
   91|  14.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.6k|    return result;
   94|  14.6k|}
_ZN3scn2v44scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.6k|{
  131|  14.6k|    auto result = make_scan_result<Source, Args...>();
  132|  14.6k|    fill_scan_result(result,
  133|  14.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.6k|    return result;
  136|  14.6k|}
_ZN3scn2v410scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.40k|{
  171|  1.40k|    auto result = make_scan_result<Source, T>();
  172|  1.40k|    fill_scan_result(
  173|  1.40k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.40k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.40k|    return result;
  176|  1.40k|}
_ZN3scn2v44scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.42k|{
  171|  1.42k|    auto result = make_scan_result<Source, T>();
  172|  1.42k|    fill_scan_result(
  173|  1.42k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.42k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.42k|    return result;
  176|  1.42k|}
_ZN3scn2v44scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.7k|{
   89|  14.7k|    auto result = make_scan_result<Source, Args...>();
   90|  14.7k|    fill_scan_result(result,
   91|  14.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  14.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  14.7k|    return result;
   94|  14.7k|}
_ZN3scn2v44scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  14.7k|{
  131|  14.7k|    auto result = make_scan_result<Source, Args...>();
  132|  14.7k|    fill_scan_result(result,
  133|  14.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  14.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  14.7k|    return result;
  136|  14.7k|}
_ZN3scn2v410scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  1.41k|{
  171|  1.41k|    auto result = make_scan_result<Source, T>();
  172|  1.41k|    fill_scan_result(
  173|  1.41k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.41k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.41k|    return result;
  176|  1.41k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   594k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   594k|{
  309|   594k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   594k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   162k|{
  315|   162k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   162k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 81.4k, False: 81.4k]
  ------------------
  317|   162k|                    : std::locale{};
  318|   162k|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|   117k|{
 2185|   117k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|   117k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|   117k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|   117k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|   117k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 5.09k, False: 112k]
  ------------------
 2191|  5.09k|        SCN_UNLIKELY_ATTR
 2192|  5.09k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  5.09k|                                             "Invalid integer value");
 2194|  5.09k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|   112k|    auto start = source.data();
 2198|   112k|    const auto end = source.data() + source.size();
 2199|   112k|    {
 2200|   302k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 284k, False: 18.4k]
  ------------------
 2201|   284k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 94.0k, False: 190k]
  ------------------
 2202|  94.0k|                break;
 2203|  94.0k|            }
 2204|   284k|        }
 2205|   112k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 30.5k, False: 81.9k]
  |  |  |  Branch (1039:45): [True: 18.4k, False: 94.0k]
  |  |  |  Branch (1039:45): [True: 12.1k, False: 81.9k]
  |  |  ------------------
  ------------------
 2206|  30.5k|            value = 0;
 2207|  30.5k|            return ranges::next(source.begin(),
 2208|  30.5k|                                ranges::distance(source.data(), start));
 2209|  30.5k|        }
 2210|   112k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|  81.9k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|  81.9k|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 61.3k, False: 20.5k]
  ------------------
 2215|  61.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|  61.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3.44k, False: 57.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  3.44k|    }                                                  \
  |  |  |  | 3957|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  57.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|  57.9k|                             detail::make_string_view_from_pointers(start, end),
 2217|  57.9k|                             value, sign == sign_type::minus_sign));
 2218|  57.9k|            return ranges::next(source.begin(),
 2219|  57.9k|                                ranges::distance(source.data(), ptr));
 2220|  61.3k|        }
 2221|  81.9k|    }
 2222|       |
 2223|  80.0k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|  81.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  81.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  81.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  81.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.94k, False: 80.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.94k|    }                                                  \
  |  |  |  | 3957|  81.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  80.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|  80.0k|                     detail::make_string_view_from_pointers(start, end), value,
 2225|  80.0k|                     base, sign == sign_type::minus_sign));
 2226|  80.0k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|  81.9k|}
_ZN3scn2v44impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  21.3k|{
 2185|  21.3k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  21.3k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  21.3k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  21.3k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  21.3k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 17.4k, False: 3.91k]
  ------------------
 2191|  17.4k|        SCN_UNLIKELY_ATTR
 2192|  17.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  17.4k|                                             "Invalid integer value");
 2194|  17.4k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|  3.91k|    auto start = source.data();
 2198|  3.91k|    const auto end = source.data() + source.size();
 2199|  3.91k|    {
 2200|  7.06k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 4.12k, False: 2.94k]
  ------------------
 2201|  4.12k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 976, False: 3.15k]
  ------------------
 2202|    976|                break;
 2203|    976|            }
 2204|  4.12k|        }
 2205|  3.91k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|  4.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.06k, False: 856]
  |  |  |  Branch (1039:45): [True: 2.94k, False: 976]
  |  |  |  Branch (1039:45): [True: 120, False: 856]
  |  |  ------------------
  ------------------
 2206|  3.06k|            value = 0;
 2207|  3.06k|            return ranges::next(source.begin(),
 2208|  3.06k|                                ranges::distance(source.data(), start));
 2209|  3.06k|        }
 2210|  3.91k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|    856|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|    856|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    856|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    856|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    856|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 310, False: 546]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    310|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    310|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    310|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    310|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    310|    }                                                  \
  |  |  |  | 3957|    856|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    546|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|    546|                     detail::make_string_view_from_pointers(start, end), value,
 2225|    546|                     base, sign == sign_type::minus_sign));
 2226|    546|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|    856|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|   139k|{
 2185|   139k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|   139k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|   139k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|   139k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|   139k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 5.71k, False: 133k]
  ------------------
 2191|  5.71k|        SCN_UNLIKELY_ATTR
 2192|  5.71k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  5.71k|                                             "Invalid integer value");
 2194|  5.71k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|   133k|    auto start = source.data();
 2198|   133k|    const auto end = source.data() + source.size();
 2199|   133k|    {
 2200|   337k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 317k, False: 20.4k]
  ------------------
 2201|   317k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 113k, False: 204k]
  ------------------
 2202|   113k|                break;
 2203|   113k|            }
 2204|   317k|        }
 2205|   133k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34.1k, False: 99.3k]
  |  |  |  Branch (1039:45): [True: 20.4k, False: 113k]
  |  |  |  Branch (1039:45): [True: 13.6k, False: 99.3k]
  |  |  ------------------
  ------------------
 2206|  34.1k|            value = 0;
 2207|  34.1k|            return ranges::next(source.begin(),
 2208|  34.1k|                                ranges::distance(source.data(), start));
 2209|  34.1k|        }
 2210|   133k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|  99.3k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|  99.3k|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 71.4k, False: 27.9k]
  ------------------
 2215|  71.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|  71.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  71.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  71.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  71.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.69k, False: 69.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.69k|    }                                                  \
  |  |  |  | 3957|  71.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  69.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|  69.7k|                             detail::make_string_view_from_pointers(start, end),
 2217|  69.7k|                             value, sign == sign_type::minus_sign));
 2218|  69.7k|            return ranges::next(source.begin(),
 2219|  69.7k|                                ranges::distance(source.data(), ptr));
 2220|  71.4k|        }
 2221|  99.3k|    }
 2222|       |
 2223|  98.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|  99.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  99.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  99.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  99.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 898, False: 98.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    898|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    898|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    898|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    898|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    898|    }                                                  \
  |  |  |  | 3957|  99.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|  98.4k|                     detail::make_string_view_from_pointers(start, end), value,
 2225|  98.4k|                     base, sign == sign_type::minus_sign));
 2226|  98.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|  99.3k|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  21.4k|{
 2185|  21.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  21.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  21.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  21.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  21.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 17.5k, False: 3.94k]
  ------------------
 2191|  17.5k|        SCN_UNLIKELY_ATTR
 2192|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  17.5k|                                             "Invalid integer value");
 2194|  17.5k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|  3.94k|    auto start = source.data();
 2198|  3.94k|    const auto end = source.data() + source.size();
 2199|  3.94k|    {
 2200|  7.09k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 4.15k, False: 2.94k]
  ------------------
 2201|  4.15k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 1.00k, False: 3.15k]
  ------------------
 2202|  1.00k|                break;
 2203|  1.00k|            }
 2204|  4.15k|        }
 2205|  3.94k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|  4.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.06k, False: 882]
  |  |  |  Branch (1039:45): [True: 2.94k, False: 1.00k]
  |  |  |  Branch (1039:45): [True: 120, False: 882]
  |  |  ------------------
  ------------------
 2206|  3.06k|            value = 0;
 2207|  3.06k|            return ranges::next(source.begin(),
 2208|  3.06k|                                ranges::distance(source.data(), start));
 2209|  3.06k|        }
 2210|  3.94k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|    882|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|    882|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    882|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    882|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 148, False: 734]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    148|    }                                                  \
  |  |  |  | 3957|    882|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    734|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|    734|                     detail::make_string_view_from_pointers(start, end), value,
 2225|    734|                     base, sign == sign_type::minus_sign));
 2226|    734|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|    882|}
_ZN3scn2v44impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|   141k|{
 2185|   141k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|   141k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|   141k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|   141k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|   141k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 5.98k, False: 135k]
  ------------------
 2191|  5.98k|        SCN_UNLIKELY_ATTR
 2192|  5.98k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  5.98k|                                             "Invalid integer value");
 2194|  5.98k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|   135k|    auto start = source.data();
 2198|   135k|    const auto end = source.data() + source.size();
 2199|   135k|    {
 2200|   340k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 319k, False: 20.7k]
  ------------------
 2201|   319k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 114k, False: 204k]
  ------------------
 2202|   114k|                break;
 2203|   114k|            }
 2204|   319k|        }
 2205|   135k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34.4k, False: 100k]
  |  |  |  Branch (1039:45): [True: 20.7k, False: 114k]
  |  |  |  Branch (1039:45): [True: 13.7k, False: 100k]
  |  |  ------------------
  ------------------
 2206|  34.4k|            value = 0;
 2207|  34.4k|            return ranges::next(source.begin(),
 2208|  34.4k|                                ranges::distance(source.data(), start));
 2209|  34.4k|        }
 2210|   135k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|   100k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|   100k|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 72.4k, False: 28.2k]
  ------------------
 2215|  72.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|  72.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  72.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  72.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 916, False: 71.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    916|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    916|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    916|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    916|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    916|    }                                                  \
  |  |  |  | 3957|  72.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  71.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|  71.4k|                             detail::make_string_view_from_pointers(start, end),
 2217|  71.4k|                             value, sign == sign_type::minus_sign));
 2218|  71.4k|            return ranges::next(source.begin(),
 2219|  71.4k|                                ranges::distance(source.data(), ptr));
 2220|  72.4k|        }
 2221|   100k|    }
 2222|       |
 2223|   100k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 462, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    462|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    462|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    462|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    462|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    462|    }                                                  \
  |  |  |  | 3957|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|   100k|                     detail::make_string_view_from_pointers(start, end), value,
 2225|   100k|                     base, sign == sign_type::minus_sign));
 2226|   100k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|   100k|}
_ZN3scn2v44impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  21.6k|{
 2185|  21.6k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  21.6k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  21.6k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  21.6k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  21.6k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 17.5k, False: 4.03k]
  ------------------
 2191|  17.5k|        SCN_UNLIKELY_ATTR
 2192|  17.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  17.5k|                                             "Invalid integer value");
 2194|  17.5k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|  4.03k|    auto start = source.data();
 2198|  4.03k|    const auto end = source.data() + source.size();
 2199|  4.03k|    {
 2200|  7.24k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 4.26k, False: 2.97k]
  ------------------
 2201|  4.26k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 1.06k, False: 3.20k]
  ------------------
 2202|  1.06k|                break;
 2203|  1.06k|            }
 2204|  4.26k|        }
 2205|  4.03k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|  5.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.11k, False: 922]
  |  |  |  Branch (1039:45): [True: 2.97k, False: 1.06k]
  |  |  |  Branch (1039:45): [True: 141, False: 922]
  |  |  ------------------
  ------------------
 2206|  3.11k|            value = 0;
 2207|  3.11k|            return ranges::next(source.begin(),
 2208|  3.11k|                                ranges::distance(source.data(), start));
 2209|  3.11k|        }
 2210|  4.03k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|    922|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|    922|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    922|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    922|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 20, False: 902]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     20|    }                                                  \
  |  |  |  | 3957|    922|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    902|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|    902|                     detail::make_string_view_from_pointers(start, end), value,
 2225|    902|                     base, sign == sign_type::minus_sign));
 2226|    902|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|    922|}
_ZN3scn2v44impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  96.2k|{
 2185|  96.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  96.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  96.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  96.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  96.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 3.53k, False: 92.7k]
  ------------------
 2191|  3.53k|        SCN_UNLIKELY_ATTR
 2192|  3.53k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  3.53k|                                             "Invalid integer value");
 2194|  3.53k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|  92.7k|    auto start = source.data();
 2198|  92.7k|    const auto end = source.data() + source.size();
 2199|  92.7k|    {
 2200|   274k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 256k, False: 17.3k]
  ------------------
 2201|   256k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 75.3k, False: 181k]
  ------------------
 2202|  75.3k|                break;
 2203|  75.3k|            }
 2204|   256k|        }
 2205|  92.7k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.9k, False: 63.7k]
  |  |  |  Branch (1039:45): [True: 17.3k, False: 75.3k]
  |  |  |  Branch (1039:45): [True: 11.5k, False: 63.7k]
  |  |  ------------------
  ------------------
 2206|  28.9k|            value = 0;
 2207|  28.9k|            return ranges::next(source.begin(),
 2208|  28.9k|                                ranges::distance(source.data(), start));
 2209|  28.9k|        }
 2210|  92.7k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|  63.7k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|  63.7k|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 46.3k, False: 17.4k]
  ------------------
 2215|  46.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|  46.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  46.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  46.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.72k, False: 44.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.72k|    }                                                  \
  |  |  |  | 3957|  46.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|  44.6k|                             detail::make_string_view_from_pointers(start, end),
 2217|  44.6k|                             value, sign == sign_type::minus_sign));
 2218|  44.6k|            return ranges::next(source.begin(),
 2219|  44.6k|                                ranges::distance(source.data(), ptr));
 2220|  46.3k|        }
 2221|  63.7k|    }
 2222|       |
 2223|  62.7k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|  63.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  63.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  63.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  63.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.01k, False: 62.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.01k|    }                                                  \
  |  |  |  | 3957|  63.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  62.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|  62.7k|                     detail::make_string_view_from_pointers(start, end), value,
 2225|  62.7k|                     base, sign == sign_type::minus_sign));
 2226|  62.7k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|  63.7k|}
_ZN3scn2v44impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  21.0k|{
 2185|  21.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  21.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  21.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  21.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  21.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 17.3k, False: 3.71k]
  ------------------
 2191|  17.3k|        SCN_UNLIKELY_ATTR
 2192|  17.3k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  17.3k|                                             "Invalid integer value");
 2194|  17.3k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|  3.71k|    auto start = source.data();
 2198|  3.71k|    const auto end = source.data() + source.size();
 2199|  3.71k|    {
 2200|  6.84k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 3.91k, False: 2.93k]
  ------------------
 2201|  3.91k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 781, False: 3.13k]
  ------------------
 2202|    781|                break;
 2203|    781|            }
 2204|  3.91k|        }
 2205|  3.71k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|  4.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.04k, False: 668]
  |  |  |  Branch (1039:45): [True: 2.93k, False: 781]
  |  |  |  Branch (1039:45): [True: 113, False: 668]
  |  |  ------------------
  ------------------
 2206|  3.04k|            value = 0;
 2207|  3.04k|            return ranges::next(source.begin(),
 2208|  3.04k|                                ranges::distance(source.data(), start));
 2209|  3.04k|        }
 2210|  3.71k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|    668|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|    668|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    668|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    668|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    668|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 250, False: 418]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    250|    }                                                  \
  |  |  |  | 3957|    668|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    418|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|    418|                     detail::make_string_view_from_pointers(start, end), value,
 2225|    418|                     base, sign == sign_type::minus_sign));
 2226|    418|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|    668|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|   105k|{
 2185|   105k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|   105k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|   105k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|   105k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|   105k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 3.77k, False: 101k]
  ------------------
 2191|  3.77k|        SCN_UNLIKELY_ATTR
 2192|  3.77k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  3.77k|                                             "Invalid integer value");
 2194|  3.77k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|   101k|    auto start = source.data();
 2198|   101k|    const auto end = source.data() + source.size();
 2199|   101k|    {
 2200|   289k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 270k, False: 18.5k]
  ------------------
 2201|   270k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 83.4k, False: 187k]
  ------------------
 2202|  83.4k|                break;
 2203|  83.4k|            }
 2204|   270k|        }
 2205|   101k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 30.9k, False: 70.9k]
  |  |  |  Branch (1039:45): [True: 18.5k, False: 83.4k]
  |  |  |  Branch (1039:45): [True: 12.4k, False: 70.9k]
  |  |  ------------------
  ------------------
 2206|  30.9k|            value = 0;
 2207|  30.9k|            return ranges::next(source.begin(),
 2208|  30.9k|                                ranges::distance(source.data(), start));
 2209|  30.9k|        }
 2210|   101k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|  70.9k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|  70.9k|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 51.5k, False: 19.4k]
  ------------------
 2215|  51.5k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 906, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    906|    }                                                  \
  |  |  |  | 3957|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|  50.6k|                             detail::make_string_view_from_pointers(start, end),
 2217|  50.6k|                             value, sign == sign_type::minus_sign));
 2218|  50.6k|            return ranges::next(source.begin(),
 2219|  50.6k|                                ranges::distance(source.data(), ptr));
 2220|  51.5k|        }
 2221|  70.9k|    }
 2222|       |
 2223|  70.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|  70.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  70.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  70.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 478, False: 70.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    478|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    478|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    478|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    478|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    478|    }                                                  \
  |  |  |  | 3957|  70.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  70.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|  70.4k|                     detail::make_string_view_from_pointers(start, end), value,
 2225|  70.4k|                     base, sign == sign_type::minus_sign));
 2226|  70.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|  70.9k|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  21.1k|{
 2185|  21.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  21.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  21.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  21.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  21.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 17.3k, False: 3.73k]
  ------------------
 2191|  17.3k|        SCN_UNLIKELY_ATTR
 2192|  17.3k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  17.3k|                                             "Invalid integer value");
 2194|  17.3k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|  3.73k|    auto start = source.data();
 2198|  3.73k|    const auto end = source.data() + source.size();
 2199|  3.73k|    {
 2200|  6.86k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 3.93k, False: 2.93k]
  ------------------
 2201|  3.93k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 803, False: 3.13k]
  ------------------
 2202|    803|                break;
 2203|    803|            }
 2204|  3.93k|        }
 2205|  3.73k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|  4.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.04k, False: 690]
  |  |  |  Branch (1039:45): [True: 2.93k, False: 803]
  |  |  |  Branch (1039:45): [True: 113, False: 690]
  |  |  ------------------
  ------------------
 2206|  3.04k|            value = 0;
 2207|  3.04k|            return ranges::next(source.begin(),
 2208|  3.04k|                                ranges::distance(source.data(), start));
 2209|  3.04k|        }
 2210|  3.73k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|    690|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|    690|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    690|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    690|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 144, False: 546]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    144|    }                                                  \
  |  |  |  | 3957|    690|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    546|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|    546|                     detail::make_string_view_from_pointers(start, end), value,
 2225|    546|                     base, sign == sign_type::minus_sign));
 2226|    546|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|    690|}
_ZN3scn2v44impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|   106k|{
 2185|   106k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|   106k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|   106k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|   106k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|   106k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 3.84k, False: 102k]
  ------------------
 2191|  3.84k|        SCN_UNLIKELY_ATTR
 2192|  3.84k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  3.84k|                                             "Invalid integer value");
 2194|  3.84k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|   102k|    auto start = source.data();
 2198|   102k|    const auto end = source.data() + source.size();
 2199|   102k|    {
 2200|   290k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 271k, False: 18.5k]
  ------------------
 2201|   271k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 84.2k, False: 187k]
  ------------------
 2202|  84.2k|                break;
 2203|  84.2k|            }
 2204|   271k|        }
 2205|   102k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.0k, False: 71.7k]
  |  |  |  Branch (1039:45): [True: 18.5k, False: 84.2k]
  |  |  |  Branch (1039:45): [True: 12.4k, False: 71.7k]
  |  |  ------------------
  ------------------
 2206|  31.0k|            value = 0;
 2207|  31.0k|            return ranges::next(source.begin(),
 2208|  31.0k|                                ranges::distance(source.data(), start));
 2209|  31.0k|        }
 2210|   102k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|  71.7k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|  71.7k|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 52.1k, False: 19.6k]
  ------------------
 2215|  52.1k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|  52.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 456, False: 51.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    456|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    456|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    456|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    456|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    456|    }                                                  \
  |  |  |  | 3957|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|  51.6k|                             detail::make_string_view_from_pointers(start, end),
 2217|  51.6k|                             value, sign == sign_type::minus_sign));
 2218|  51.6k|            return ranges::next(source.begin(),
 2219|  51.6k|                                ranges::distance(source.data(), ptr));
 2220|  52.1k|        }
 2221|  71.7k|    }
 2222|       |
 2223|  71.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|  71.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  71.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  71.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 258, False: 71.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    258|    }                                                  \
  |  |  |  | 3957|  71.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  71.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|  71.4k|                     detail::make_string_view_from_pointers(start, end), value,
 2225|  71.4k|                     base, sign == sign_type::minus_sign));
 2226|  71.4k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|  71.7k|}
_ZN3scn2v44impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  21.1k|{
 2185|  21.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  21.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  21.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  21.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  21.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 17.4k, False: 3.77k]
  ------------------
 2191|  17.4k|        SCN_UNLIKELY_ATTR
 2192|  17.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  17.4k|                                             "Invalid integer value");
 2194|  17.4k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|  3.77k|    auto start = source.data();
 2198|  3.77k|    const auto end = source.data() + source.size();
 2199|  3.77k|    {
 2200|  6.91k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 3.97k, False: 2.93k]
  ------------------
 2201|  3.97k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 847, False: 3.13k]
  ------------------
 2202|    847|                break;
 2203|    847|            }
 2204|  3.97k|        }
 2205|  3.77k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.04k, False: 734]
  |  |  |  Branch (1039:45): [True: 2.93k, False: 847]
  |  |  |  Branch (1039:45): [True: 113, False: 734]
  |  |  ------------------
  ------------------
 2206|  3.04k|            value = 0;
 2207|  3.04k|            return ranges::next(source.begin(),
 2208|  3.04k|                                ranges::distance(source.data(), start));
 2209|  3.04k|        }
 2210|  3.77k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|    734|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|    734|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    734|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    734|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    734|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 8, False: 726]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      8|    }                                                  \
  |  |  |  | 3957|    734|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    726|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|    726|                     detail::make_string_view_from_pointers(start, end), value,
 2225|    726|                     base, sign == sign_type::minus_sign));
 2226|    726|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|    734|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2951|   209k|{
 2952|   209k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2953|   209k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2959|   209k|{
 2960|   209k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2961|   209k|    return sync_after_vscan(source, n);
 2962|   209k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2969|  88.1k|{
 2970|  88.1k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2971|  88.1k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2977|  88.1k|{
 2978|  88.1k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2979|  88.1k|    return sync_after_vscan(source, n);
 2980|  88.1k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   846k|{
  215|   846k|    return find_classic_impl(
  216|   846k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   846k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   846k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2920|   209k|{
 2921|   209k|    return vscan_internal(source, format, args);
 2922|   209k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2926|   209k|{
 2927|   209k|    auto n = vscan_internal(source, format, args);
 2928|   209k|    return sync_after_vscan(source, n);
 2929|   209k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2934|  88.1k|{
 2935|  88.1k|    return vscan_internal(source, format, args);
 2936|  88.1k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2940|  88.1k|{
 2941|  88.1k|    auto n = vscan_internal(source, format, args);
 2942|  88.1k|    return sync_after_vscan(source, n);
 2943|  88.1k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3006|  31.8k|{
 3007|  31.8k|    return vscan_value_internal(source, arg);
 3008|  31.8k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3011|  31.3k|{
 3012|  31.3k|    auto n = vscan_value_internal(source, arg);
 3013|  31.3k|    return sync_after_vscan(source, n);
 3014|  31.3k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3019|  8.48k|{
 3020|  8.48k|    return vscan_value_internal(source, arg);
 3021|  8.48k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3025|  8.48k|{
 3026|  8.48k|    auto n = vscan_value_internal(source, arg);
 3027|  8.48k|    return sync_after_vscan(source, n);
 3028|  8.48k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 2013|  82.8k|{
 2014|  82.8k|    auto max_digits = maxdigits_u64(base);
 2015|  82.8k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2015:9): [True: 954, False: 81.8k]
  ------------------
 2016|    954|        return true;
 2017|    954|    }
 2018|  81.8k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2018:9): [True: 318, False: 81.5k]
  |  Branch (2018:39): [True: 106, False: 212]
  ------------------
 2019|    106|        return true;
 2020|    106|    }
 2021|  81.7k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2022|  81.7k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2022:13): [True: 4.63k, False: 77.1k]
  ------------------
 2023|  81.7k|                      static_cast<uint64_t>(is_negative)) {
 2024|  4.63k|            SCN_UNLIKELY_ATTR
 2025|  4.63k|            return true;
 2026|  4.63k|        }
 2027|  81.7k|    }
 2028|       |
 2029|  77.1k|    return false;
 2030|  81.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1959|   493k|{
 1960|   493k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1104|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1961|   493k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1962|   493k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 2003|  1.79k|{
 2004|  1.79k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1104|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2005|  1.79k|    return min_safe_u64_table[static_cast<size_t>(base)];
 2006|  1.79k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIamEET_T0_b:
 2034|  77.1k|{
 2035|  77.1k|    if (is_negative) {
  ------------------
  |  Branch (2035:9): [True: 15.0k, False: 62.0k]
  ------------------
 2036|  15.0k|        SCN_MSVC_PUSH
 2037|  15.0k|        SCN_MSVC_IGNORE(4146)
 2038|  15.0k|        return static_cast<T>(
 2039|  15.0k|            -std::numeric_limits<T>::max() -
 2040|  15.0k|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2041|  15.0k|        SCN_MSVC_POP
 2042|  15.0k|    }
 2043|       |
 2044|  62.0k|    return static_cast<T>(acc);
 2045|  77.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 2013|   100k|{
 2014|   100k|    auto max_digits = maxdigits_u64(base);
 2015|   100k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2015:9): [True: 1.02k, False: 99.2k]
  ------------------
 2016|  1.02k|        return true;
 2017|  1.02k|    }
 2018|  99.2k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2018:9): [True: 326, False: 98.8k]
  |  Branch (2018:39): [True: 106, False: 220]
  ------------------
 2019|    106|        return true;
 2020|    106|    }
 2021|  99.1k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2022|  99.1k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2022:13): [True: 1.61k, False: 97.4k]
  ------------------
 2023|  99.1k|                      static_cast<uint64_t>(is_negative)) {
 2024|  1.61k|            SCN_UNLIKELY_ATTR
 2025|  1.61k|            return true;
 2026|  1.61k|        }
 2027|  99.1k|    }
 2028|       |
 2029|  97.4k|    return false;
 2030|  99.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIimEET_T0_b:
 2034|  97.4k|{
 2035|  97.4k|    if (is_negative) {
  ------------------
  |  Branch (2035:9): [True: 16.3k, False: 81.1k]
  ------------------
 2036|  16.3k|        SCN_MSVC_PUSH
 2037|  16.3k|        SCN_MSVC_IGNORE(4146)
 2038|  16.3k|        return static_cast<T>(
 2039|  16.3k|            -std::numeric_limits<T>::max() -
 2040|  16.3k|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2041|  16.3k|        SCN_MSVC_POP
 2042|  16.3k|    }
 2043|       |
 2044|  81.1k|    return static_cast<T>(acc);
 2045|  97.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 2013|   101k|{
 2014|   101k|    auto max_digits = maxdigits_u64(base);
 2015|   101k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2015:9): [True: 1.10k, False: 100k]
  ------------------
 2016|  1.10k|        return true;
 2017|  1.10k|    }
 2018|   100k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2018:9): [True: 362, False: 100k]
  |  Branch (2018:39): [True: 106, False: 256]
  ------------------
 2019|    106|        return true;
 2020|    106|    }
 2021|   100k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2022|   100k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2022:13): [True: 184, False: 100k]
  ------------------
 2023|   100k|                      static_cast<uint64_t>(is_negative)) {
 2024|    184|            SCN_UNLIKELY_ATTR
 2025|    184|            return true;
 2026|    184|        }
 2027|   100k|    }
 2028|       |
 2029|   100k|    return false;
 2030|   100k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIxmEET_T0_b:
 2034|   100k|{
 2035|   100k|    if (is_negative) {
  ------------------
  |  Branch (2035:9): [True: 17.1k, False: 83.0k]
  ------------------
 2036|  17.1k|        SCN_MSVC_PUSH
 2037|  17.1k|        SCN_MSVC_IGNORE(4146)
 2038|  17.1k|        return static_cast<T>(
 2039|  17.1k|            -std::numeric_limits<T>::max() -
 2040|  17.1k|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2041|  17.1k|        SCN_MSVC_POP
 2042|  17.1k|    }
 2043|       |
 2044|  83.0k|    return static_cast<T>(acc);
 2045|   100k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 2013|  64.4k|{
 2014|  64.4k|    auto max_digits = maxdigits_u64(base);
 2015|  64.4k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2015:9): [True: 650, False: 63.8k]
  ------------------
 2016|    650|        return true;
 2017|    650|    }
 2018|  63.8k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2018:9): [True: 224, False: 63.5k]
  |  Branch (2018:39): [True: 58, False: 166]
  ------------------
 2019|     58|        return true;
 2020|     58|    }
 2021|  63.7k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2022|  63.7k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2022:13): [True: 2.28k, False: 61.4k]
  ------------------
 2023|  63.7k|                      static_cast<uint64_t>(is_negative)) {
 2024|  2.28k|            SCN_UNLIKELY_ATTR
 2025|  2.28k|            return true;
 2026|  2.28k|        }
 2027|  63.7k|    }
 2028|       |
 2029|  61.4k|    return false;
 2030|  63.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIhmEET_T0_b:
 2034|  61.4k|{
 2035|  61.4k|    if (is_negative) {
  ------------------
  |  Branch (2035:9): [True: 0, False: 61.4k]
  ------------------
 2036|      0|        SCN_MSVC_PUSH
 2037|      0|        SCN_MSVC_IGNORE(4146)
 2038|      0|        return static_cast<T>(
 2039|      0|            -std::numeric_limits<T>::max() -
 2040|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2041|      0|        SCN_MSVC_POP
 2042|      0|    }
 2043|       |
 2044|  61.4k|    return static_cast<T>(acc);
 2045|  61.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 2013|  71.6k|{
 2014|  71.6k|    auto max_digits = maxdigits_u64(base);
 2015|  71.6k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2015:9): [True: 650, False: 71.0k]
  ------------------
 2016|    650|        return true;
 2017|    650|    }
 2018|  71.0k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2018:9): [True: 228, False: 70.7k]
  |  Branch (2018:39): [True: 58, False: 170]
  ------------------
 2019|     58|        return true;
 2020|     58|    }
 2021|  70.9k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2022|  70.9k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2022:13): [True: 820, False: 70.1k]
  ------------------
 2023|  70.9k|                      static_cast<uint64_t>(is_negative)) {
 2024|    820|            SCN_UNLIKELY_ATTR
 2025|    820|            return true;
 2026|    820|        }
 2027|  70.9k|    }
 2028|       |
 2029|  70.1k|    return false;
 2030|  71.0k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIjmEET_T0_b:
 2034|  70.1k|{
 2035|  70.1k|    if (is_negative) {
  ------------------
  |  Branch (2035:9): [True: 0, False: 70.1k]
  ------------------
 2036|      0|        SCN_MSVC_PUSH
 2037|      0|        SCN_MSVC_IGNORE(4146)
 2038|      0|        return static_cast<T>(
 2039|      0|            -std::numeric_limits<T>::max() -
 2040|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2041|      0|        SCN_MSVC_POP
 2042|      0|    }
 2043|       |
 2044|  70.1k|    return static_cast<T>(acc);
 2045|  70.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 2013|  72.4k|{
 2014|  72.4k|    auto max_digits = maxdigits_u64(base);
 2015|  72.4k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2015:9): [True: 664, False: 71.8k]
  ------------------
 2016|    664|        return true;
 2017|    664|    }
 2018|  71.8k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2018:9): [True: 336, False: 71.4k]
  |  Branch (2018:39): [True: 58, False: 278]
  ------------------
 2019|     58|        return true;
 2020|     58|    }
 2021|  71.7k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 2022|  71.7k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (2022:13): [True: 0, False: 71.7k]
  ------------------
 2023|  71.7k|                      static_cast<uint64_t>(is_negative)) {
 2024|      0|            SCN_UNLIKELY_ATTR
 2025|      0|            return true;
 2026|      0|        }
 2027|  71.7k|    }
 2028|       |
 2029|  71.7k|    return false;
 2030|  71.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultIymEET_T0_b:
 2034|  71.7k|{
 2035|  71.7k|    if (is_negative) {
  ------------------
  |  Branch (2035:9): [True: 0, False: 71.7k]
  ------------------
 2036|      0|        SCN_MSVC_PUSH
 2037|      0|        SCN_MSVC_IGNORE(4146)
 2038|      0|        return static_cast<T>(
 2039|      0|            -std::numeric_limits<T>::max() -
 2040|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2041|      0|        SCN_MSVC_POP
 2042|      0|    }
 2043|       |
 2044|  71.7k|    return static_cast<T>(acc);
 2045|  71.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1897|   187k|{
 1898|   187k|    uint64_t val{};
 1899|   187k|    std::memcpy(&val, input, sizeof(uint64_t));
 1900|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1901|       |        val = byteswap(val);
 1902|       |    }
 1903|   187k|    return val;
 1904|   187k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1907|  33.7k|{
 1908|  33.7k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1909|  33.7k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1910|  33.7k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1911|  33.7k|    word -= 0x3030303030303030;
 1912|  33.7k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1913|  33.7k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1914|  33.7k|    return static_cast<uint32_t>(word);
 1915|  33.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1918|   153k|{
 1919|   153k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1920|   153k|              0x8080808080808080));
 1921|   153k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   516k|{
  118|   516k|    static_assert(sizeof(*source.data()) == 1);
  119|   516k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1104|   516k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   516k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   516k|    uint64_t word{};
  121|   516k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   516k|    return has_byte_greater(word, 127) != 0;
  124|   516k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   846k|{
  131|   846k|    auto it = source.begin();
  132|       |
  133|   925k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 516k, False: 408k]
  ------------------
  134|   516k|        auto sv =
  135|   516k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   516k|                .substr(0, 8);
  137|       |
  138|   516k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 492k, False: 24.1k]
  ------------------
  139|   492k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   492k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   492k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 415k, False: 76.8k]
  ------------------
  142|   415k|                break;
  143|   415k|            }
  144|  76.8k|            continue;
  145|   492k|        }
  146|       |
  147|  33.3k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 31.3k, False: 2.05k]
  ------------------
  148|  31.3k|            auto tmp =
  149|  31.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  31.3k|            auto res = get_next_code_point(tmp);
  151|  31.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 22.0k, False: 9.25k]
  ------------------
  152|  22.0k|                return it;
  153|  22.0k|            }
  154|  9.25k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  9.25k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  9.25k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  9.25k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  9.25k|        }
  158|  24.1k|    }
  159|       |
  160|   824k|    return detail::make_string_view_iterator(source, it);
  161|   846k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   860k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  31.3k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2051|  61.3k|{
 2052|  61.3k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2053|       |
 2054|  61.3k|    uint64_t u64val{};
 2055|  61.3k|    auto ptr = parse_decimal_integer_fast_impl(
 2056|  61.3k|        input.data(), input.data() + input.size(), u64val);
 2057|       |
 2058|  61.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2059|  61.3k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.44k, False: 57.9k]
  |  |  ------------------
  ------------------
 2060|  61.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2061|  3.44k|        return detail::unexpected_scan_error(
 2062|  3.44k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2062:13): [True: 1.07k, False: 2.37k]
  ------------------
 2063|  3.44k|                        : scan_error::value_positive_overflow,
 2064|  3.44k|            "Integer overflow");
 2065|  3.44k|    }
 2066|       |
 2067|  57.9k|    val = store_result<T>(u64val, is_negative);
 2068|  57.9k|    return ptr;
 2069|  61.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1939|   355k|{
 1940|   355k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1941|       |
 1942|   799k|    while (begin != end) {
  ------------------
  |  Branch (1942:12): [True: 578k, False: 220k]
  ------------------
 1943|   578k|        const auto digit = char_to_int(*begin);
 1944|   578k|        if (digit >= 10) {
  ------------------
  |  Branch (1944:13): [True: 134k, False: 443k]
  ------------------
 1945|   134k|            break;
 1946|   134k|        }
 1947|   443k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1948|   443k|        ++begin;
 1949|   443k|    }
 1950|       |
 1951|   355k|    return begin;
 1952|   355k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1926|   355k|{
 1927|   355k|    while (
 1928|   388k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1928:9): [True: 153k, False: 235k]
  ------------------
 1929|   388k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1929:9): [True: 33.7k, False: 120k]
  ------------------
 1930|  33.7k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1931|  33.7k|                                      get_eight_digits_word(p));
 1932|  33.7k|        p += 8;
 1933|  33.7k|    }
 1934|   355k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|  20.5k|{
 2077|  20.5k|    uint64_t u64val{};
 2078|  20.5k|    const CharT* begin = input.data();
 2079|  20.5k|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  72.9k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 62.2k, False: 10.7k]
  ------------------
 2082|  62.2k|        const auto digit = char_to_int(*begin);
 2083|  62.2k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 9.84k, False: 52.3k]
  ------------------
 2084|  9.84k|            break;
 2085|  9.84k|        }
 2086|  52.3k|        u64val =
 2087|  52.3k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  52.3k|        ++begin;
 2089|  52.3k|    }
 2090|       |
 2091|  20.5k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|  20.5k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.94k, False: 18.6k]
  |  |  ------------------
  ------------------
 2093|  20.5k|                                               is_negative))) {
 2094|  1.94k|        return detail::unexpected_scan_error(
 2095|  1.94k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 608, False: 1.33k]
  ------------------
 2096|  1.94k|                        : scan_error::value_positive_overflow,
 2097|  1.94k|            "Integer overflow");
 2098|  1.94k|    }
 2099|       |
 2100|  18.6k|    val = store_result<T>(u64val, is_negative);
 2101|  18.6k|    return begin;
 2102|  20.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|    856|{
 2077|    856|    uint64_t u64val{};
 2078|    856|    const CharT* begin = input.data();
 2079|    856|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  4.49k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 3.90k, False: 590]
  ------------------
 2082|  3.90k|        const auto digit = char_to_int(*begin);
 2083|  3.90k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 266, False: 3.64k]
  ------------------
 2084|    266|            break;
 2085|    266|        }
 2086|  3.64k|        u64val =
 2087|  3.64k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  3.64k|        ++begin;
 2089|  3.64k|    }
 2090|       |
 2091|    856|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|    856|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|    856|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 310, False: 546]
  |  |  ------------------
  ------------------
 2093|    856|                                               is_negative))) {
 2094|    310|        return detail::unexpected_scan_error(
 2095|    310|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 34, False: 276]
  ------------------
 2096|    310|                        : scan_error::value_positive_overflow,
 2097|    310|            "Integer overflow");
 2098|    310|    }
 2099|       |
 2100|    546|    val = store_result<T>(u64val, is_negative);
 2101|    546|    return begin;
 2102|    856|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2051|  71.4k|{
 2052|  71.4k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2053|       |
 2054|  71.4k|    uint64_t u64val{};
 2055|  71.4k|    auto ptr = parse_decimal_integer_fast_impl(
 2056|  71.4k|        input.data(), input.data() + input.size(), u64val);
 2057|       |
 2058|  71.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2059|  71.4k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  71.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 69.7k]
  |  |  ------------------
  ------------------
 2060|  71.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2061|  1.69k|        return detail::unexpected_scan_error(
 2062|  1.69k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2062:13): [True: 624, False: 1.07k]
  ------------------
 2063|  1.69k|                        : scan_error::value_positive_overflow,
 2064|  1.69k|            "Integer overflow");
 2065|  1.69k|    }
 2066|       |
 2067|  69.7k|    val = store_result<T>(u64val, is_negative);
 2068|  69.7k|    return ptr;
 2069|  71.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|  27.9k|{
 2077|  27.9k|    uint64_t u64val{};
 2078|  27.9k|    const CharT* begin = input.data();
 2079|  27.9k|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  91.6k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 77.1k, False: 14.4k]
  ------------------
 2082|  77.1k|        const auto digit = char_to_int(*begin);
 2083|  77.1k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 13.4k, False: 63.6k]
  ------------------
 2084|  13.4k|            break;
 2085|  13.4k|        }
 2086|  63.6k|        u64val =
 2087|  63.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  63.6k|        ++begin;
 2089|  63.6k|    }
 2090|       |
 2091|  27.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|  27.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|  27.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 898, False: 27.0k]
  |  |  ------------------
  ------------------
 2093|  27.9k|                                               is_negative))) {
 2094|    898|        return detail::unexpected_scan_error(
 2095|    898|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 336, False: 562]
  ------------------
 2096|    898|                        : scan_error::value_positive_overflow,
 2097|    898|            "Integer overflow");
 2098|    898|    }
 2099|       |
 2100|  27.0k|    val = store_result<T>(u64val, is_negative);
 2101|  27.0k|    return begin;
 2102|  27.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|    882|{
 2077|    882|    uint64_t u64val{};
 2078|    882|    const CharT* begin = input.data();
 2079|    882|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  4.54k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 3.94k, False: 605]
  ------------------
 2082|  3.94k|        const auto digit = char_to_int(*begin);
 2083|  3.94k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 277, False: 3.66k]
  ------------------
 2084|    277|            break;
 2085|    277|        }
 2086|  3.66k|        u64val =
 2087|  3.66k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  3.66k|        ++begin;
 2089|  3.66k|    }
 2090|       |
 2091|    882|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|    882|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|    882|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 148, False: 734]
  |  |  ------------------
  ------------------
 2093|    882|                                               is_negative))) {
 2094|    148|        return detail::unexpected_scan_error(
 2095|    148|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 0, False: 148]
  ------------------
 2096|    148|                        : scan_error::value_positive_overflow,
 2097|    148|            "Integer overflow");
 2098|    148|    }
 2099|       |
 2100|    734|    val = store_result<T>(u64val, is_negative);
 2101|    734|    return begin;
 2102|    882|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2051|  72.4k|{
 2052|  72.4k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2053|       |
 2054|  72.4k|    uint64_t u64val{};
 2055|  72.4k|    auto ptr = parse_decimal_integer_fast_impl(
 2056|  72.4k|        input.data(), input.data() + input.size(), u64val);
 2057|       |
 2058|  72.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2059|  72.4k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 916, False: 71.4k]
  |  |  ------------------
  ------------------
 2060|  72.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2061|    916|        return detail::unexpected_scan_error(
 2062|    916|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2062:13): [True: 284, False: 632]
  ------------------
 2063|    916|                        : scan_error::value_positive_overflow,
 2064|    916|            "Integer overflow");
 2065|    916|    }
 2066|       |
 2067|  71.4k|    val = store_result<T>(u64val, is_negative);
 2068|  71.4k|    return ptr;
 2069|  72.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|  28.2k|{
 2077|  28.2k|    uint64_t u64val{};
 2078|  28.2k|    const CharT* begin = input.data();
 2079|  28.2k|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  94.2k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 79.6k, False: 14.6k]
  ------------------
 2082|  79.6k|        const auto digit = char_to_int(*begin);
 2083|  79.6k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 13.6k, False: 65.9k]
  ------------------
 2084|  13.6k|            break;
 2085|  13.6k|        }
 2086|  65.9k|        u64val =
 2087|  65.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  65.9k|        ++begin;
 2089|  65.9k|    }
 2090|       |
 2091|  28.2k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|  28.2k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 462, False: 27.8k]
  |  |  ------------------
  ------------------
 2093|  28.2k|                                               is_negative))) {
 2094|    462|        return detail::unexpected_scan_error(
 2095|    462|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 96, False: 366]
  ------------------
 2096|    462|                        : scan_error::value_positive_overflow,
 2097|    462|            "Integer overflow");
 2098|    462|    }
 2099|       |
 2100|  27.8k|    val = store_result<T>(u64val, is_negative);
 2101|  27.8k|    return begin;
 2102|  28.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|    922|{
 2077|    922|    uint64_t u64val{};
 2078|    922|    const CharT* begin = input.data();
 2079|    922|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  4.62k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 3.99k, False: 629]
  ------------------
 2082|  3.99k|        const auto digit = char_to_int(*begin);
 2083|  3.99k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 293, False: 3.70k]
  ------------------
 2084|    293|            break;
 2085|    293|        }
 2086|  3.70k|        u64val =
 2087|  3.70k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  3.70k|        ++begin;
 2089|  3.70k|    }
 2090|       |
 2091|    922|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|    922|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20, False: 902]
  |  |  ------------------
  ------------------
 2093|    922|                                               is_negative))) {
 2094|     20|        return detail::unexpected_scan_error(
 2095|     20|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 0, False: 20]
  ------------------
 2096|     20|                        : scan_error::value_positive_overflow,
 2097|     20|            "Integer overflow");
 2098|     20|    }
 2099|       |
 2100|    902|    val = store_result<T>(u64val, is_negative);
 2101|    902|    return begin;
 2102|    922|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2051|  46.3k|{
 2052|  46.3k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2053|       |
 2054|  46.3k|    uint64_t u64val{};
 2055|  46.3k|    auto ptr = parse_decimal_integer_fast_impl(
 2056|  46.3k|        input.data(), input.data() + input.size(), u64val);
 2057|       |
 2058|  46.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2059|  46.3k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.72k, False: 44.6k]
  |  |  ------------------
  ------------------
 2060|  46.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2061|  1.72k|        return detail::unexpected_scan_error(
 2062|  1.72k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2062:13): [True: 0, False: 1.72k]
  ------------------
 2063|  1.72k|                        : scan_error::value_positive_overflow,
 2064|  1.72k|            "Integer overflow");
 2065|  1.72k|    }
 2066|       |
 2067|  44.6k|    val = store_result<T>(u64val, is_negative);
 2068|  44.6k|    return ptr;
 2069|  46.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|  17.4k|{
 2077|  17.4k|    uint64_t u64val{};
 2078|  17.4k|    const CharT* begin = input.data();
 2079|  17.4k|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  56.1k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 47.1k, False: 9.06k]
  ------------------
 2082|  47.1k|        const auto digit = char_to_int(*begin);
 2083|  47.1k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 8.38k, False: 38.7k]
  ------------------
 2084|  8.38k|            break;
 2085|  8.38k|        }
 2086|  38.7k|        u64val =
 2087|  38.7k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  38.7k|        ++begin;
 2089|  38.7k|    }
 2090|       |
 2091|  17.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|  17.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.01k, False: 16.4k]
  |  |  ------------------
  ------------------
 2093|  17.4k|                                               is_negative))) {
 2094|  1.01k|        return detail::unexpected_scan_error(
 2095|  1.01k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 0, False: 1.01k]
  ------------------
 2096|  1.01k|                        : scan_error::value_positive_overflow,
 2097|  1.01k|            "Integer overflow");
 2098|  1.01k|    }
 2099|       |
 2100|  16.4k|    val = store_result<T>(u64val, is_negative);
 2101|  16.4k|    return begin;
 2102|  17.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|    668|{
 2077|    668|    uint64_t u64val{};
 2078|    668|    const CharT* begin = input.data();
 2079|    668|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  4.00k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 3.56k, False: 438]
  ------------------
 2082|  3.56k|        const auto digit = char_to_int(*begin);
 2083|  3.56k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 230, False: 3.33k]
  ------------------
 2084|    230|            break;
 2085|    230|        }
 2086|  3.33k|        u64val =
 2087|  3.33k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  3.33k|        ++begin;
 2089|  3.33k|    }
 2090|       |
 2091|    668|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|    668|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|    668|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 250, False: 418]
  |  |  ------------------
  ------------------
 2093|    668|                                               is_negative))) {
 2094|    250|        return detail::unexpected_scan_error(
 2095|    250|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 0, False: 250]
  ------------------
 2096|    250|                        : scan_error::value_positive_overflow,
 2097|    250|            "Integer overflow");
 2098|    250|    }
 2099|       |
 2100|    418|    val = store_result<T>(u64val, is_negative);
 2101|    418|    return begin;
 2102|    668|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2051|  51.5k|{
 2052|  51.5k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2053|       |
 2054|  51.5k|    uint64_t u64val{};
 2055|  51.5k|    auto ptr = parse_decimal_integer_fast_impl(
 2056|  51.5k|        input.data(), input.data() + input.size(), u64val);
 2057|       |
 2058|  51.5k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2059|  51.5k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 906, False: 50.6k]
  |  |  ------------------
  ------------------
 2060|  51.5k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2061|    906|        return detail::unexpected_scan_error(
 2062|    906|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2062:13): [True: 0, False: 906]
  ------------------
 2063|    906|                        : scan_error::value_positive_overflow,
 2064|    906|            "Integer overflow");
 2065|    906|    }
 2066|       |
 2067|  50.6k|    val = store_result<T>(u64val, is_negative);
 2068|  50.6k|    return ptr;
 2069|  51.5k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|  19.4k|{
 2077|  19.4k|    uint64_t u64val{};
 2078|  19.4k|    const CharT* begin = input.data();
 2079|  19.4k|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  61.4k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 51.3k, False: 10.0k]
  ------------------
 2082|  51.3k|        const auto digit = char_to_int(*begin);
 2083|  51.3k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 9.35k, False: 41.9k]
  ------------------
 2084|  9.35k|            break;
 2085|  9.35k|        }
 2086|  41.9k|        u64val =
 2087|  41.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  41.9k|        ++begin;
 2089|  41.9k|    }
 2090|       |
 2091|  19.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|  19.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|  19.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 478, False: 18.9k]
  |  |  ------------------
  ------------------
 2093|  19.4k|                                               is_negative))) {
 2094|    478|        return detail::unexpected_scan_error(
 2095|    478|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 0, False: 478]
  ------------------
 2096|    478|                        : scan_error::value_positive_overflow,
 2097|    478|            "Integer overflow");
 2098|    478|    }
 2099|       |
 2100|  18.9k|    val = store_result<T>(u64val, is_negative);
 2101|  18.9k|    return begin;
 2102|  19.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|    690|{
 2077|    690|    uint64_t u64val{};
 2078|    690|    const CharT* begin = input.data();
 2079|    690|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  4.04k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 3.59k, False: 451]
  ------------------
 2082|  3.59k|        const auto digit = char_to_int(*begin);
 2083|  3.59k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 239, False: 3.35k]
  ------------------
 2084|    239|            break;
 2085|    239|        }
 2086|  3.35k|        u64val =
 2087|  3.35k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  3.35k|        ++begin;
 2089|  3.35k|    }
 2090|       |
 2091|    690|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|    690|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 144, False: 546]
  |  |  ------------------
  ------------------
 2093|    690|                                               is_negative))) {
 2094|    144|        return detail::unexpected_scan_error(
 2095|    144|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 0, False: 144]
  ------------------
 2096|    144|                        : scan_error::value_positive_overflow,
 2097|    144|            "Integer overflow");
 2098|    144|    }
 2099|       |
 2100|    546|    val = store_result<T>(u64val, is_negative);
 2101|    546|    return begin;
 2102|    690|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2051|  52.1k|{
 2052|  52.1k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2053|       |
 2054|  52.1k|    uint64_t u64val{};
 2055|  52.1k|    auto ptr = parse_decimal_integer_fast_impl(
 2056|  52.1k|        input.data(), input.data() + input.size(), u64val);
 2057|       |
 2058|  52.1k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2059|  52.1k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 456, False: 51.6k]
  |  |  ------------------
  ------------------
 2060|  52.1k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2061|    456|        return detail::unexpected_scan_error(
 2062|    456|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2062:13): [True: 0, False: 456]
  ------------------
 2063|    456|                        : scan_error::value_positive_overflow,
 2064|    456|            "Integer overflow");
 2065|    456|    }
 2066|       |
 2067|  51.6k|    val = store_result<T>(u64val, is_negative);
 2068|  51.6k|    return ptr;
 2069|  52.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|  19.6k|{
 2077|  19.6k|    uint64_t u64val{};
 2078|  19.6k|    const CharT* begin = input.data();
 2079|  19.6k|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  62.8k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 52.6k, False: 10.1k]
  ------------------
 2082|  52.6k|        const auto digit = char_to_int(*begin);
 2083|  52.6k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 9.43k, False: 43.2k]
  ------------------
 2084|  9.43k|            break;
 2085|  9.43k|        }
 2086|  43.2k|        u64val =
 2087|  43.2k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  43.2k|        ++begin;
 2089|  43.2k|    }
 2090|       |
 2091|  19.6k|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|  19.6k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 258, False: 19.3k]
  |  |  ------------------
  ------------------
 2093|  19.6k|                                               is_negative))) {
 2094|    258|        return detail::unexpected_scan_error(
 2095|    258|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 0, False: 258]
  ------------------
 2096|    258|                        : scan_error::value_positive_overflow,
 2097|    258|            "Integer overflow");
 2098|    258|    }
 2099|       |
 2100|  19.3k|    val = store_result<T>(u64val, is_negative);
 2101|  19.3k|    return begin;
 2102|  19.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 2076|    734|{
 2077|    734|    uint64_t u64val{};
 2078|    734|    const CharT* begin = input.data();
 2079|    734|    const CharT* const end = input.data() + input.size();
 2080|       |
 2081|  4.13k|    while (begin != end) {
  ------------------
  |  Branch (2081:12): [True: 3.65k, False: 477]
  ------------------
 2082|  3.65k|        const auto digit = char_to_int(*begin);
 2083|  3.65k|        if (digit >= base) {
  ------------------
  |  Branch (2083:13): [True: 257, False: 3.40k]
  ------------------
 2084|    257|            break;
 2085|    257|        }
 2086|  3.40k|        u64val =
 2087|  3.40k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 2088|  3.40k|        ++begin;
 2089|  3.40k|    }
 2090|       |
 2091|    734|    auto digits_count = static_cast<size_t>(begin - input.data());
 2092|    734|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  | 1039|    734|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 726]
  |  |  ------------------
  ------------------
 2093|    734|                                               is_negative))) {
 2094|      8|        return detail::unexpected_scan_error(
 2095|      8|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2095:13): [True: 0, False: 8]
  ------------------
 2096|      8|                        : scan_error::value_positive_overflow,
 2097|      8|            "Integer overflow");
 2098|      8|    }
 2099|       |
 2100|    726|    val = store_result<T>(u64val, is_negative);
 2101|    726|    return begin;
 2102|    734|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2817|   418k|{
 2818|   418k|    const auto argcount = args.size();
 2819|   418k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2819:9): [True: 62.7k, False: 355k]
  |  Branch (2819:60): [True: 62.7k, False: 0]
  ------------------
 2820|  62.7k|        auto arg = args.get(0);
 2821|  62.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  62.7k|    static_cast<    \
  |  | 1109|  62.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2822|  62.7k|    }
 2823|       |
 2824|   355k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2824:9): [True: 0, False: 355k]
  ------------------
 2825|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2826|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2827|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2828|      0|        return vscan_parse_format_string(format, handler);
 2829|      0|    }
 2830|       |
 2831|   355k|    SCN_UNLIKELY_ATTR
 2832|   355k|    {
 2833|   355k|        auto handler = format_handler<false, CharT>{
 2834|   355k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   355k|    static_cast<    \
  |  | 1109|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   355k|    static_cast<    \
  |  | 1109|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2835|   355k|        return vscan_parse_format_string(format, handler);
 2836|   355k|    }
 2837|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|   836k|{
 2366|   836k|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 710k, False: 126k]
  ------------------
 2367|   710k|        return false;
 2368|   710k|    }
 2369|   126k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 126k, False: 0]
  |  Branch (2369:39): [True: 126k, False: 0]
  ------------------
 2370|   836k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2398|  94.1k|{
 2399|  94.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 94.1k]
  |  |  ------------------
  ------------------
 2400|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2401|      0|                                             "Argument #0 not found");
 2402|      0|    }
 2403|       |
 2404|  94.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|  94.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 94.1k]
  |  |  ------------------
  ------------------
 2405|      0|        auto reader = impl::default_arg_reader<
 2406|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2407|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2408|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2409|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2410|      0|    }
 2411|       |
 2412|  94.1k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2413|  94.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  94.1k|    static_cast<    \
  |  | 1109|  94.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2414|  94.1k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  94.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  94.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  94.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12.3k, False: 81.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  12.3k|    }                                                  \
  |  |  |  | 3957|  94.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  81.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2415|  81.7k|    return it.position();
 2416|  94.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2641|   354k|        : format_handler_base{argcount},
 2642|   354k|          parse_ctx{source_tag<Source&&>, format},
 2643|   354k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   354k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   354k|    static_cast<    \
  |  | 1109|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   354k|    static_cast<    \
  |  | 1109|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   354k|    {
 2645|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2459|  1.02M|    format_handler_base(size_t argcount) : args_count(argcount)
 2460|  1.02M|    {
 2461|  1.02M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1039|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 2462|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2463|      0|        }
 2464|  1.02M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2592|   354k|        : contiguous_ctx(source, args, loc)
 2593|   354k|    {
 2594|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   354k|{
 2783|   354k|    const auto beg = handler.get_ctx().begin();
 2784|   354k|    detail::parse_format_string<false>(format, handler);
 2785|   354k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 74.3k, False: 280k]
  |  |  ------------------
  ------------------
 2786|  74.3k|        return unexpected(err.error());
 2787|  74.3k|    }
 2788|   280k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   354k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2766|  2.28M|    {
 2767|  2.28M|        return ctx.get();
 2768|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2597|  2.28M|    {
 2598|  2.28M|        return contiguous_ctx;
 2599|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2648|   635k|    {
 2649|   635k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 635k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   635k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2508|   396k|    {
 2509|   396k|        error = unexpected(err);
 2510|   396k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2420|   354k|{
 2421|   354k|    auto arg = ctx.arg(id);
 2422|   354k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   354k|    return arg;
 2426|   354k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2534|  1.02M|    {
 2535|  1.02M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 2536|      0|            on_error({scan_error::invalid_format_string,
 2537|      0|                      "Argument ID out-of-range"});
 2538|      0|            return;
 2539|      0|        }
 2540|       |
 2541|  1.02M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1039|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 2542|      0|            on_error({scan_error::invalid_format_string,
 2543|      0|                      "Argument with this ID has already been scanned"});
 2544|      0|        }
 2545|       |
 2546|  1.02M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.02M, False: 0]
  |  |  ------------------
  ------------------
 2547|  1.02M|            visited_args_lower64 |= (1ull << id);
 2548|  1.02M|            return;
 2549|  1.02M|        }
 2550|       |
 2551|      0|        id -= 64;
 2552|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 2553|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2518|  1.02M|    {
 2519|  1.02M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
 2520|      0|            on_error({scan_error::invalid_format_string,
 2521|      0|                      "Argument ID out-of-range"});
 2522|      0|            return false;
 2523|      0|        }
 2524|       |
 2525|  1.02M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.02M, False: 0]
  |  |  ------------------
  ------------------
 2526|  1.02M|            return (visited_args_lower64 >> id) & 1ull;
 2527|  1.02M|        }
 2528|       |
 2529|      0|        id -= 64;
 2530|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2531|  1.02M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2688|   354k|    {
 2689|   354k|        return parse_ctx.next_arg_id();
 2690|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2728|   354k|    {
 2729|   354k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   354k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   354k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 354k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   354k|        auto specs = detail::format_specs{};
 2742|   354k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   354k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   354k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   354k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   354k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 354k]
  |  Branch (2747:29): [True: 16.5k, False: 338k]
  ------------------
 2748|  16.5k|            SCN_UNLIKELY_ATTR
 2749|  16.5k|            on_error({scan_error::invalid_format_string,
 2750|  16.5k|                      "Missing '}' in format string"});
 2751|  16.5k|            return parse_ctx.begin();
 2752|  16.5k|        }
 2753|   338k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.25k, False: 330k]
  |  |  ------------------
  ------------------
 2754|  8.25k|            return parse_ctx.begin();
 2755|  8.25k|        }
 2756|   330k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   330k|        on_visit_scan_arg(
 2759|   330k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   330k|                                           get_ctx().locale()},
 2761|   330k|            arg);
 2762|   330k|        return parse_ctx.begin();
 2763|   338k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2438|   354k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   354k|    {
 2440|   354k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2699|   330k|    {
 2700|   330k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 330k]
  |  Branch (2700:13): [True: 0, False: 330k]
  |  Branch (2700:29): [True: 0, False: 330k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   330k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   330k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 49.5k, False: 280k]
  |  |  ------------------
  ------------------
 2707|  49.5k|            on_error(r.error());
 2708|  49.5k|        }
 2709|   280k|        else {
 2710|   280k|            get_ctx().advance_to(*r);
 2711|   280k|        }
 2712|   330k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 2502|   148k|    {
 2503|   148k|        SCN_UNLIKELY_ATTR
 2504|   148k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 2505|   148k|                                              msg);
 2506|   148k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2467|  1.02M|    {
 2468|  1.02M|        {
 2469|  1.02M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2469:45): [True: 0, False: 1.02M]
  ------------------
 2470|  1.02M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2470:35): [True: 0, False: 1.02M]
  ------------------
 2471|  1.02M|                                      ? std::numeric_limits<uint64_t>::max()
 2472|  1.02M|                                      : (1ull << args_count_lower64) - 1;
 2473|       |
 2474|  1.02M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2474:17): [True: 0, False: 1.02M]
  ------------------
 2475|      0|                return on_error({scan_error::invalid_format_string,
 2476|      0|                                 "Argument list not exhausted"});
 2477|      0|            }
 2478|  1.02M|        }
 2479|       |
 2480|  1.02M|        if (args_count < 64) {
  ------------------
  |  Branch (2480:13): [True: 1.02M, False: 0]
  ------------------
 2481|  1.02M|            return;
 2482|  1.02M|        }
 2483|       |
 2484|      0|        auto last_args_count = args_count - 64;
 2485|      0|        for (auto it = visited_args_upper.begin();
 2486|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2486:14): [True: 0, False: 0]
  ------------------
 2487|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2487:17): [True: 0, False: 0]
  ------------------
 2488|      0|                return on_error({scan_error::invalid_format_string,
 2489|      0|                                 "Argument list not exhausted"});
 2490|      0|            }
 2491|      0|            last_args_count -= 8;
 2492|      0|        }
 2493|       |
 2494|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2495|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2495:13): [True: 0, False: 0]
  ------------------
 2496|      0|            return on_error({scan_error::invalid_format_string,
 2497|      0|                             "Argument list not exhausted"});
 2498|      0|        }
 2499|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2513|  3.96M|    {
 2514|  3.96M|        return error;
 2515|  3.96M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2641|   355k|        : format_handler_base{argcount},
 2642|   355k|          parse_ctx{source_tag<Source&&>, format},
 2643|   355k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   355k|    static_cast<    \
  |  | 1109|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   355k|    static_cast<    \
  |  | 1109|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   355k|    {
 2645|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2568|   355k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   355k|    static_cast<    \
  |  | 1109|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2569|   355k|    {
 2570|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   355k|{
 2783|   355k|    const auto beg = handler.get_ctx().begin();
 2784|   355k|    detail::parse_format_string<false>(format, handler);
 2785|   355k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 74.3k, False: 281k]
  |  |  ------------------
  ------------------
 2786|  74.3k|        return unexpected(err.error());
 2787|  74.3k|    }
 2788|   281k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2766|  2.28M|    {
 2767|  2.28M|        return ctx.get();
 2768|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2573|  2.28M|    {
 2574|  2.28M|        return ctx;
 2575|  2.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2648|   636k|    {
 2649|   636k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 636k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   636k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2420|   355k|{
 2421|   355k|    auto arg = ctx.arg(id);
 2422|   355k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   355k|    return arg;
 2426|   355k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2688|   355k|    {
 2689|   355k|        return parse_ctx.next_arg_id();
 2690|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2728|   355k|    {
 2729|   355k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   355k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   355k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 355k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   355k|        auto specs = detail::format_specs{};
 2742|   355k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   355k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   355k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   355k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   355k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 355k]
  |  Branch (2747:29): [True: 16.5k, False: 338k]
  ------------------
 2748|  16.5k|            SCN_UNLIKELY_ATTR
 2749|  16.5k|            on_error({scan_error::invalid_format_string,
 2750|  16.5k|                      "Missing '}' in format string"});
 2751|  16.5k|            return parse_ctx.begin();
 2752|  16.5k|        }
 2753|   338k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.25k, False: 330k]
  |  |  ------------------
  ------------------
 2754|  8.25k|            return parse_ctx.begin();
 2755|  8.25k|        }
 2756|   330k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   330k|        on_visit_scan_arg(
 2759|   330k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   330k|                                           get_ctx().locale()},
 2761|   330k|            arg);
 2762|   330k|        return parse_ctx.begin();
 2763|   338k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2438|   355k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   355k|    {
 2440|   355k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|   330k|    {
 2700|   330k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 330k]
  |  Branch (2700:13): [True: 0, False: 330k]
  |  Branch (2700:29): [True: 0, False: 330k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   330k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   330k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 49.5k, False: 281k]
  |  |  ------------------
  ------------------
 2707|  49.5k|            on_error(r.error());
 2708|  49.5k|        }
 2709|   281k|        else {
 2710|   281k|            get_ctx().advance_to(*r);
 2711|   281k|        }
 2712|   330k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|   418k|{
 2798|   418k|    const auto argcount = args.size();
 2799|   418k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 63.6k, False: 354k]
  |  Branch (2799:60): [True: 63.6k, False: 0]
  ------------------
 2800|  63.6k|        auto arg = args.get(0);
 2801|  63.6k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  63.6k|    static_cast<    \
  |  | 1109|  63.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|  63.6k|    }
 2803|       |
 2804|   354k|    auto handler = format_handler<true, CharT>{
 2805|   354k|        ranges::subrange<const CharT*>{source.data(),
 2806|   354k|                                       source.data() + source.size()},
 2807|   354k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   354k|    static_cast<    \
  |  | 1109|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   354k|    static_cast<    \
  |  | 1109|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|   354k|    return vscan_parse_format_string(format, handler);
 2809|   418k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|  95.4k|{
 2379|  95.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 95.4k]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|  95.4k|    auto reader =
 2385|  95.4k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|  95.4k|            ranges::subrange<const CharT*>{source.data(),
 2387|  95.4k|                                           source.data() + source.size()},
 2388|  95.4k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  95.4k|    static_cast<    \
  |  | 1109|  95.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|  95.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  95.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  95.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  95.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12.3k, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  12.3k|    }                                                  \
  |  |  |  | 3957|  95.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|  83.0k|    return ranges::distance(source.data(), it);
 2391|  95.4k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2897|   449k|{
 2898|   449k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   449k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 362k, False: 86.6k]
  |  |  ------------------
  ------------------
 2899|   362k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 2900|      0|            return detail::unexpected_scan_error(
 2901|      0|                scan_error::invalid_source_state,
 2902|      0|                "Failed to sync with underlying source");
 2903|      0|        }
 2904|   362k|    }
 2905|  86.6k|    else {
 2906|  86.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 86.6k]
  |  |  ------------------
  ------------------
 2907|      0|            return detail::unexpected_scan_error(
 2908|      0|                scan_error::invalid_source_state,
 2909|      0|                "Failed to sync with underlying source");
 2910|      0|        }
 2911|  86.6k|    }
 2912|   449k|    return result;
 2913|   449k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|   176k|{
 2798|   176k|    const auto argcount = args.size();
 2799|   176k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 16.9k, False: 159k]
  |  Branch (2799:60): [True: 16.9k, False: 0]
  ------------------
 2800|  16.9k|        auto arg = args.get(0);
 2801|  16.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  16.9k|    static_cast<    \
  |  | 1109|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|  16.9k|    }
 2803|       |
 2804|   159k|    auto handler = format_handler<true, CharT>{
 2805|   159k|        ranges::subrange<const CharT*>{source.data(),
 2806|   159k|                                       source.data() + source.size()},
 2807|   159k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   159k|    static_cast<    \
  |  | 1109|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   159k|    static_cast<    \
  |  | 1109|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|   159k|    return vscan_parse_format_string(format, handler);
 2809|   176k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|   352k|{
 2366|   352k|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 318k, False: 33.9k]
  ------------------
 2367|   318k|        return false;
 2368|   318k|    }
 2369|  33.9k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 33.9k, False: 0]
  |  Branch (2369:39): [True: 33.9k, False: 0]
  ------------------
 2370|   352k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|  25.4k|{
 2379|  25.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|  25.4k|    auto reader =
 2385|  25.4k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|  25.4k|            ranges::subrange<const CharT*>{source.data(),
 2387|  25.4k|                                           source.data() + source.size()},
 2388|  25.4k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  25.4k|    static_cast<    \
  |  | 1109|  25.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|  25.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 24.7k, False: 690]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  24.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  24.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  24.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  24.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  24.7k|    }                                                  \
  |  |  |  | 3957|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    690|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|    690|    return ranges::distance(source.data(), it);
 2391|  25.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2641|   159k|        : format_handler_base{argcount},
 2642|   159k|          parse_ctx{source_tag<Source&&>, format},
 2643|   159k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   159k|    static_cast<    \
  |  | 1109|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   159k|    static_cast<    \
  |  | 1109|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   159k|    {
 2645|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2592|   159k|        : contiguous_ctx(source, args, loc)
 2593|   159k|    {
 2594|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   159k|{
 2783|   159k|    const auto beg = handler.get_ctx().begin();
 2784|   159k|    detail::parse_format_string<false>(format, handler);
 2785|   159k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 148k, False: 10.6k]
  |  |  ------------------
  ------------------
 2786|   148k|        return unexpected(err.error());
 2787|   148k|    }
 2788|  10.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2766|   718k|    {
 2767|   718k|        return ctx.get();
 2768|   718k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2597|   718k|    {
 2598|   718k|        return contiguous_ctx;
 2599|   718k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2648|   169k|    {
 2649|   169k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 169k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   169k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2420|   159k|{
 2421|   159k|    auto arg = ctx.arg(id);
 2422|   159k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   159k|    return arg;
 2426|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2688|   159k|    {
 2689|   159k|        return parse_ctx.next_arg_id();
 2690|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2728|   159k|    {
 2729|   159k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   159k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   159k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 159k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   159k|        auto specs = detail::format_specs{};
 2742|   159k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   159k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   159k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   159k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   159k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 159k]
  |  Branch (2747:29): [True: 33.0k, False: 126k]
  ------------------
 2748|  33.0k|            SCN_UNLIKELY_ATTR
 2749|  33.0k|            on_error({scan_error::invalid_format_string,
 2750|  33.0k|                      "Missing '}' in format string"});
 2751|  33.0k|            return parse_ctx.begin();
 2752|  33.0k|        }
 2753|   126k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.5k, False: 109k]
  |  |  ------------------
  ------------------
 2754|  16.5k|            return parse_ctx.begin();
 2755|  16.5k|        }
 2756|   109k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   109k|        on_visit_scan_arg(
 2759|   109k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   109k|                                           get_ctx().locale()},
 2761|   109k|            arg);
 2762|   109k|        return parse_ctx.begin();
 2763|   126k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2438|   159k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   159k|    {
 2440|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2699|   109k|    {
 2700|   109k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 109k]
  |  Branch (2700:13): [True: 0, False: 109k]
  |  Branch (2700:29): [True: 0, False: 109k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   109k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   109k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 99.0k, False: 10.6k]
  |  |  ------------------
  ------------------
 2707|  99.0k|            on_error(r.error());
 2708|  99.0k|        }
 2709|  10.6k|        else {
 2710|  10.6k|            get_ctx().advance_to(*r);
 2711|  10.6k|        }
 2712|   109k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2817|   176k|{
 2818|   176k|    const auto argcount = args.size();
 2819|   176k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2819:9): [True: 16.9k, False: 159k]
  |  Branch (2819:60): [True: 16.9k, False: 0]
  ------------------
 2820|  16.9k|        auto arg = args.get(0);
 2821|  16.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  16.9k|    static_cast<    \
  |  | 1109|  16.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2822|  16.9k|    }
 2823|       |
 2824|   159k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2824:9): [True: 0, False: 159k]
  ------------------
 2825|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2826|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2827|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2828|      0|        return vscan_parse_format_string(format, handler);
 2829|      0|    }
 2830|       |
 2831|   159k|    SCN_UNLIKELY_ATTR
 2832|   159k|    {
 2833|   159k|        auto handler = format_handler<false, CharT>{
 2834|   159k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   159k|    static_cast<    \
  |  | 1109|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   159k|    static_cast<    \
  |  | 1109|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2835|   159k|        return vscan_parse_format_string(format, handler);
 2836|   159k|    }
 2837|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2398|  25.4k|{
 2399|  25.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 2400|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2401|      0|                                             "Argument #0 not found");
 2402|      0|    }
 2403|       |
 2404|  25.4k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|  25.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 25.4k]
  |  |  ------------------
  ------------------
 2405|      0|        auto reader = impl::default_arg_reader<
 2406|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2407|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2408|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2409|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2410|      0|    }
 2411|       |
 2412|  25.4k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2413|  25.4k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  25.4k|    static_cast<    \
  |  | 1109|  25.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2414|  25.4k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 24.7k, False: 690]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  24.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  24.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  24.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  24.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  24.7k|    }                                                  \
  |  |  |  | 3957|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    690|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2415|    690|    return it.position();
 2416|  25.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2641|   159k|        : format_handler_base{argcount},
 2642|   159k|          parse_ctx{source_tag<Source&&>, format},
 2643|   159k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   159k|    static_cast<    \
  |  | 1109|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   159k|    static_cast<    \
  |  | 1109|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   159k|    {
 2645|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2568|   159k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   159k|    static_cast<    \
  |  | 1109|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2569|   159k|    {
 2570|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   159k|{
 2783|   159k|    const auto beg = handler.get_ctx().begin();
 2784|   159k|    detail::parse_format_string<false>(format, handler);
 2785|   159k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 148k, False: 10.6k]
  |  |  ------------------
  ------------------
 2786|   148k|        return unexpected(err.error());
 2787|   148k|    }
 2788|  10.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2766|   718k|    {
 2767|   718k|        return ctx.get();
 2768|   718k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2573|   718k|    {
 2574|   718k|        return ctx;
 2575|   718k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2648|   169k|    {
 2649|   169k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 169k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   169k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2420|   159k|{
 2421|   159k|    auto arg = ctx.arg(id);
 2422|   159k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 159k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   159k|    return arg;
 2426|   159k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2688|   159k|    {
 2689|   159k|        return parse_ctx.next_arg_id();
 2690|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2728|   159k|    {
 2729|   159k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   159k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   159k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 159k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   159k|        auto specs = detail::format_specs{};
 2742|   159k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   159k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   159k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   159k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   159k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 159k]
  |  Branch (2747:29): [True: 33.0k, False: 126k]
  ------------------
 2748|  33.0k|            SCN_UNLIKELY_ATTR
 2749|  33.0k|            on_error({scan_error::invalid_format_string,
 2750|  33.0k|                      "Missing '}' in format string"});
 2751|  33.0k|            return parse_ctx.begin();
 2752|  33.0k|        }
 2753|   126k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.5k, False: 109k]
  |  |  ------------------
  ------------------
 2754|  16.5k|            return parse_ctx.begin();
 2755|  16.5k|        }
 2756|   109k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   109k|        on_visit_scan_arg(
 2759|   109k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   109k|                                           get_ctx().locale()},
 2761|   109k|            arg);
 2762|   109k|        return parse_ctx.begin();
 2763|   126k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2438|   159k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   159k|    {
 2440|   159k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|   109k|    {
 2700|   109k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 109k]
  |  Branch (2700:13): [True: 0, False: 109k]
  |  Branch (2700:29): [True: 0, False: 109k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   109k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   109k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 99.0k, False: 10.6k]
  |  |  ------------------
  ------------------
 2707|  99.0k|            on_error(r.error());
 2708|  99.0k|        }
 2709|  10.6k|        else {
 2710|  10.6k|            get_ctx().advance_to(*r);
 2711|  10.6k|        }
 2712|   109k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2897|   184k|{
 2898|   184k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   184k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 11.3k, False: 173k]
  |  |  ------------------
  ------------------
 2899|  11.3k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 2900|      0|            return detail::unexpected_scan_error(
 2901|      0|                scan_error::invalid_source_state,
 2902|      0|                "Failed to sync with underlying source");
 2903|      0|        }
 2904|  11.3k|    }
 2905|   173k|    else {
 2906|   173k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 2907|      0|            return detail::unexpected_scan_error(
 2908|      0|                scan_error::invalid_source_state,
 2909|      0|                "Failed to sync with underlying source");
 2910|      0|        }
 2911|   173k|    }
 2912|   184k|    return result;
 2913|   184k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2843|  31.8k|{
 2844|  31.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  31.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2843|  31.3k|{
 2844|  31.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  31.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2843|  8.48k|{
 2844|  8.48k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  8.48k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2843|  8.48k|{
 2844|  8.48k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  8.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  8.48k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    688|{
 1462|    688|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    688|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    688|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    688|            return transcode_to_string_impl_to32(src, dest);
 1473|    688|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    688|    SCN_EXPECT(false);
  ------------------
  |  | 1104|    688|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    688|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    688|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    688|{
 1355|    688|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    688|    auto it = src.begin();
 1358|  46.2k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 45.5k, False: 688]
  ------------------
 1359|  45.5k|        auto res = get_next_code_point(
 1360|  45.5k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|  45.5k|                                                                 src.end()));
 1362|  45.5k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1039|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 486, False: 45.0k]
  |  |  ------------------
  ------------------
 1363|    486|            dest.push_back(DestCharT{0xfffd});
 1364|    486|        }
 1365|  45.0k|        else {
 1366|  45.0k|            dest.push_back(res.value);
 1367|  45.0k|        }
 1368|  45.5k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|  45.5k|    }
 1370|    688|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|  76.8k|{
 1279|  76.8k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|  76.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  76.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|  76.8k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|  76.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.50k, False: 74.3k]
  |  |  ------------------
  ------------------
 1283|  2.50k|        return {get_start_for_next_code_point(input),
 1284|  2.50k|                detail::invalid_code_point};
 1285|  2.50k|    }
 1286|  74.3k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.06k, False: 72.3k]
  |  |  ------------------
  ------------------
 1287|  2.06k|        return {input.end(), detail::invalid_code_point};
 1288|  2.06k|    }
 1289|       |
 1290|  72.3k|    return {input.begin() + len,
 1291|  72.3k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|  74.3k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  2.50k|{
 1265|  2.50k|    auto it = input.begin();
 1266|  10.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 9.05k, False: 1.23k]
  ------------------
 1267|  9.05k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.27k, False: 7.78k]
  ------------------
 1268|  1.27k|            break;
 1269|  1.27k|        }
 1270|  9.05k|    }
 1271|  2.50k|    return it;
 1272|  2.50k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  3.72M|    constexpr parse_error(code c) : m_code(c)
  808|  3.72M|    {
  809|  3.72M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|  3.72M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  3.72M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  1.36M|    {
  823|  1.36M|        return a.m_code == b.m_code;
  824|  1.36M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|   133k|    {
  827|   133k|        return !(a == b);
  828|   133k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3082|   880k|    {
 3083|   880k|        return m_msg == nullptr;
 3084|   880k|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   860k|{
  458|   860k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   860k|        static_cast<unsigned char>(ch))];
  460|   860k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   516k|{
  539|   516k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   516k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  3.15M|{
  784|  3.15M|    return e != eof_error::good;
  785|  3.15M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  26.7k|{
  798|  26.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  26.7k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  26.7k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  61.7k|{
  845|  61.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  61.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  61.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  61.7k|    return parse_error::eof;
  847|  61.7k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   133k|{
  854|   133k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 133k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   133k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 133k]
  ------------------
  859|      0|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|      0|    }
  861|       |
  862|   133k|    return detail::unexpected_scan_error(code, msg);
  863|   133k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|   417k|{
  868|   417k|    return [code, msg](parse_error err) {
  869|   417k|        assert(err != parse_error::good);
  870|   417k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   417k|    };
  872|   417k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2352|   325k|{
 2353|   325k|    unsigned char running_diff{0};
 2354|   977k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2354:24): [True: 651k, False: 325k]
  ------------------
 2355|   651k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2356|   651k|    }
 2357|   325k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2357:12): [True: 2.13k, False: 323k]
  |  Branch (2357:33): [True: 462, False: 323k]
  ------------------
 2358|   325k|}
_ZN3scn2v44impl11char_to_intEc:
 3271|  5.15M|{
 3272|  5.15M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3273|  5.15M|}
_ZN3scn2v44impl11char_to_intEw:
 3275|   600k|{
 3276|   600k|#if WCHAR_MIN < 0
 3277|   600k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3277:9): [True: 575k, False: 25.0k]
  |  Branch (3277:20): [True: 371k, False: 203k]
  ------------------
 3278|       |#else
 3279|       |    if (ch <= 255) {
 3280|       |#endif
 3281|   371k|        return char_to_int(static_cast<char>(ch));
 3282|   371k|    }
 3283|   228k|    return 255;
 3284|   600k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6115|   582k|{
 6116|   582k|    if (specs.width != 0) {
  ------------------
  |  Branch (6116:9): [True: 0, False: 582k]
  ------------------
 6117|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6117:13): [True: 0, False: 0]
  ------------------
 6118|      0|            return detail::unexpected_scan_error(
 6119|      0|                scan_error::length_too_short,
 6120|      0|                "Scanned value too narrow, width did not exceed what "
 6121|      0|                "was specified in the format string");
 6122|      0|        }
 6123|      0|    }
 6124|   582k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6124:9): [True: 0, False: 582k]
  ------------------
 6125|       |        // Ensured by take_width_view
 6126|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6127|      0|                   specs.precision);
 6128|      0|    }
 6129|   582k|    return {};
 6130|   582k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.42M|    {
  304|  1.42M|        ranges::advance(x, n);
  305|  1.42M|        return x;
  306|  1.42M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.42M|    {
  268|  1.42M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.42M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.42M|    {
  151|  1.42M|        i += n;
  152|  1.42M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.18M|    {
  108|  2.18M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.18M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.18M|    {
   87|  2.18M|        return s - i;
   88|  2.18M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   114k|    {
  304|   114k|        ranges::advance(x, n);
  305|   114k|        return x;
  306|   114k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   114k|    {
  268|   114k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   114k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   114k|    {
  151|   114k|        i += n;
  152|   114k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  33.8M|    {
  108|  33.8M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  33.8M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  33.8M|    {
   87|  33.8M|        return s - i;
   88|  33.8M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3024|   965k|    {
 3025|   965k|        return m_current;
 3026|   965k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3024|   279k|    {
 3025|   279k|        return m_current;
 3026|   279k|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   424k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   424k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   424k|        auto beg = r.begin();
  991|   424k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 424k, False: 0]
  ------------------
  992|   424k|            return false;
  993|   424k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   424k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   336k|{
 1956|   336k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   336k|    else {
 1967|   336k|        auto it = range.begin();
 1968|   336k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 301k, False: 35.8k]
  ------------------
 1969|   301k|            return ranges::next(it, count);
 1970|   301k|        }
 1971|       |
 1972|  94.9k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 70.5k, False: 24.4k]
  ------------------
 1973|  70.5k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 11.4k, False: 59.1k]
  ------------------
 1974|  11.4k|                return unexpected(eof_error::eof);
 1975|  11.4k|            }
 1976|  70.5k|        }
 1977|       |
 1978|  24.4k|        return it;
 1979|  35.8k|    }
 1980|   336k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   336k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   336k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   336k|        else {
 1107|   336k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 336k, False: 0]
  ------------------
 1108|   336k|                return static_cast<size_t>(
 1109|   336k|                    r.begin().parent()->chars_available() -
 1110|   336k|                    r.begin().position());
 1111|   336k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   336k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   336k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  2.30M|    {
  763|  2.30M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  2.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.30M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   309k|        : m_fptr([](storage fn,
  743|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   309k|              cvref<T> obj = *get<T>(fn);
  745|   309k|              if constexpr (std::is_void_v<R>) {
  746|   309k|                  obj(static_cast<decltype(args)>(args)...);
  747|   309k|              }
  748|   309k|              else {
  749|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   309k|              }
  751|   309k|          }),
  752|   309k|          m_storage(std::addressof(f))
  753|   309k|    {
  754|   309k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15M|              else {
  749|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15M|              }
  751|  1.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  1.15M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.15M|        else if constexpr (std::is_object_v<T>) {
  688|  1.15M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   309k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   309k|        {
  662|   309k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  2.08M|    {
  763|  2.08M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.08M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   669k|        : m_fptr([](storage fn,
  743|   669k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   669k|              cvref<T> obj = *get<T>(fn);
  745|   669k|              if constexpr (std::is_void_v<R>) {
  746|   669k|                  obj(static_cast<decltype(args)>(args)...);
  747|   669k|              }
  748|   669k|              else {
  749|   669k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   669k|              }
  751|   669k|          }),
  752|   669k|          m_storage(std::addressof(f))
  753|   669k|    {
  754|   669k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  1.04M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.04M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.04M|              else {
  749|  1.04M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.04M|              }
  751|  1.04M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.04M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.04M|        else if constexpr (std::is_object_v<T>) {
  688|  1.04M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.04M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   669k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   669k|        {
  662|   669k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6143|   330k|    {
 6144|   330k|        const bool need_skipped_width =
 6145|   330k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 330k]
  |  Branch (6145:33): [True: 0, False: 330k]
  ------------------
 6146|   330k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   330k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 330k]
  ------------------
 6150|   330k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 330k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   330k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 330k, False: 0]
  |  Branch (6154:56): [True: 330k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   330k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 330k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   651k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 9.70k, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  9.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  9.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  9.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  9.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  9.70k|    }                                                  \
  |  |  |  | 3957|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   651k|                            make_eof_scan_error));
 6165|       |
 6166|   651k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 320k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   320k|            return result_type{it, 0};
 6174|   651k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   330k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|   309k|{
 2108|   309k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   309k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   309k|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|   309k|    else {
 2079|   309k|        auto first = range.begin();
 2080|  1.16M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 1.15M, False: 9.05k]
  ------------------
 2081|  1.15M|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 300k, False: 852k]
  ------------------
 2082|   300k|                return first;
 2083|   300k|            }
 2084|  1.15M|        }
 2085|  9.05k|        return first;
 2086|   309k|    }
 2087|   309k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   312k|    {
  108|   312k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   312k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   312k|    {
   94|   312k|        iter_difference_t<I> counter{0};
   95|  4.03M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 3.72M, False: 312k]
  ------------------
   96|  3.72M|            ++i;
   97|  3.72M|            ++counter;
   98|  3.72M|        }
   99|   312k|        return counter;
  100|   312k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   133k|    return [code, msg](parse_error err) {
  869|   133k|        assert(err != parse_error::good);
  870|   133k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|   133k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   121k|    {
 1879|   121k|        auto stdloc = loc.get<std::locale>();
 1880|   121k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   121k|        grouping = numpunct.grouping();
 1882|   121k|        thousands_sep =
 1883|   121k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 121k]
  ------------------
 1884|   121k|        decimal_point = numpunct.decimal_point();
 1885|   121k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   121k|{
 1816|   121k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 121k, False: 0]
  ------------------
 1817|   121k|        return std::use_facet<Facet>(stdloc);
 1818|   121k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   121k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   520k|{
 1945|   520k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 360, False: 520k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   520k|    return ranges::next(range.begin());
 1950|   520k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.03M|{
  951|  1.03M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.3k, False: 1.02M]
  |  |  ------------------
  ------------------
  952|  12.3k|        return eof_error::eof;
  953|  12.3k|    }
  954|  1.02M|    return eof_error::good;
  955|  1.03M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.81M|{
  945|  1.81M|    return is_range_eof(r.begin(), r.end());
  946|  1.81M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.81M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.81M|    {
  938|  1.81M|        return begin == end;
  939|  1.81M|    }
  940|  1.81M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   520k|    {
  296|   520k|        ++x;
  297|   520k|        return x;
  298|   520k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  51.7k|    {
 3630|  51.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  51.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  51.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  51.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  51.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  51.7k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  51.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 7.65k, False: 44.0k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  7.65k|            else {
 3641|  7.65k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 7.65k]
  ------------------
 3642|  7.65k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  7.65k|            }
 3648|  7.65k|        }
 3649|       |
 3650|  51.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 5.21k, False: 46.5k]
  ------------------
 3651|  5.21k|            value = T{0};
 3652|  5.21k|            return std::next(prefix_result.iterator);
 3653|  5.21k|        }
 3654|       |
 3655|  46.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  46.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 36.1k, False: 10.3k]
  |  |  ------------------
  ------------------
 3656|  36.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.05k, False: 32.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.05k|    }                                                  \
  |  |  |  | 3957|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  32.1k|                    parse_integer_digits_without_thsep(
 3658|  32.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  32.1k|                        prefix_result.parsed_base));
 3660|       |
 3661|  32.1k|            auto buf = make_contiguous_buffer(
 3662|  32.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  32.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  32.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  32.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  32.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.68k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.68k|    }                                                  \
  |  |  |  | 3957|  32.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  30.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  30.4k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  30.4k|            return ranges::next(
 3668|  30.4k|                prefix_result.iterator,
 3669|  30.4k|                ranges::distance(buf.view().begin(), result_it));
 3670|  32.1k|        }
 3671|       |
 3672|  10.3k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  10.3k|            localized_number_formatting_options<CharT>{loc};
 3677|  10.3k|#endif
 3678|       |
 3679|  10.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 588, False: 9.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    588|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    588|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    588|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    588|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    588|    }                                                  \
  |  |  |  | 3957|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  9.77k|                parse_integer_digits_with_thsep(
 3681|  9.77k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  9.77k|                    prefix_result.parsed_base, locale_options));
 3683|  9.77k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  9.77k|            parse_digits_result;
 3685|       |
 3686|  9.77k|        auto nothsep_source_view =
 3687|  9.77k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  9.77k|        SCN_TRY(
  ------------------
  |  | 3958|  9.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  9.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  9.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  9.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 434, False: 9.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    434|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    434|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    434|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    434|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    434|    }                                                  \
  |  |  |  | 3957|  9.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  9.33k|            nothsep_source_it,
 3690|  9.33k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  9.33k|                                prefix_result.parsed_base));
 3692|       |
 3693|  9.33k|        return ranges::next(
 3694|  9.33k|            prefix_result.iterator,
 3695|  9.33k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  9.33k|                ranges::ssize(thsep_indices));
 3697|  9.77k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3408|   412k|{
 3409|   412k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|   412k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   412k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   412k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 412k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   412k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   412k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|   412k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|   412k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|   412k|        parse_integer_base_prefix(
 3414|   412k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|   412k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 41.8k, False: 370k]
  ------------------
 3417|  41.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 478, False: 41.3k]
  ------------------
 3418|  41.8k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 30.7k, False: 10.6k]
  ------------------
 3419|  31.2k|            digits_begin_it = base_prefix_begin_it;
 3420|  31.2k|        }
 3421|  10.6k|        else {
 3422|  10.6k|            parsed_zero = false;
 3423|  10.6k|        }
 3424|  41.8k|    }
 3425|   370k|    else {
 3426|   370k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 2.15k, False: 368k]
  ------------------
 3427|   370k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 33.8k, False: 334k]
  ------------------
 3428|  35.9k|            digits_begin_it = base_prefix_begin_it;
 3429|  35.9k|        }
 3430|   370k|    }
 3431|       |
 3432|   412k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 358k, False: 54.5k]
  ------------------
 3433|   358k|        sign = sign_type::plus_sign;
 3434|   358k|    }
 3435|   412k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|   412k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|   412k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3289|   412k|{
 3290|   412k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   412k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 358k, False: 54.5k]
  ------------------
 3292|   358k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 358k, False: 0]
  ------------------
 3293|   358k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   358k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|   358k|    }
 3297|       |
 3298|  54.5k|    auto& it = *r;
 3299|  54.5k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 42.0k, False: 12.4k]
  ------------------
 3300|  42.0k|        return std::pair{it, sign_type::minus_sign};
 3301|  42.0k|    }
 3302|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3303|  54.5k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2404|   412k|{
 2405|   412k|    auto it = read_code_unit(range);
 2406|   412k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 412k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|   812k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 812k, False: 358k]
  ------------------
 2411|   812k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 54.5k, False: 758k]
  ------------------
 2412|  54.5k|            return *it;
 2413|  54.5k|        }
 2414|   812k|    }
 2415|       |
 2416|   358k|    return unexpected(parse_error::error);
 2417|   412k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3375|   412k|{
 3376|   412k|    switch (base) {
 3377|  21.7k|        case 2:
  ------------------
  |  Branch (3377:9): [True: 21.7k, False: 390k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|  21.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|  21.7k|                    false};
 3381|       |
 3382|  38.7k|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 38.7k, False: 373k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|  38.7k|            bool zero_parsed = false;
 3385|  38.7k|            auto it = apply_opt(
 3386|  38.7k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|  38.7k|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|  65.3k|        case 16:
  ------------------
  |  Branch (3390:9): [True: 65.3k, False: 347k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|  65.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|  65.3k|                    false};
 3394|       |
 3395|  70.8k|        case 0:
  ------------------
  |  Branch (3395:9): [True: 70.8k, False: 341k]
  ------------------
 3396|       |            // detect base
 3397|  70.8k|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|   216k|        default:
  ------------------
  |  Branch (3399:9): [True: 216k, False: 196k]
  ------------------
 3400|       |            // no base prefix allowed
 3401|   216k|            return {range.begin(), base, false};
 3402|   412k|    }
 3403|   412k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2423|   125k|{
 2424|   125k|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 108k, False: 17.4k]
  ------------------
 2425|   108k|        return range.begin();
 2426|   108k|    }
 2427|  17.4k|    return *result;
 2428|   125k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3326|  92.0k|{
 3327|  92.0k|    return read_matching_string_classic_nocase(range, "0b");
 3328|  92.0k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2363|   336k|{
 2364|   336k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|   336k|    else {
 2377|   336k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|   336k|            if (ch < 'A' || ch > 'Z') {
 2379|   336k|                return ch;
 2380|   336k|            }
 2381|   336k|            return static_cast<char_type>(ch +
 2382|   336k|                                          static_cast<char_type>('a' - 'A'));
 2383|   336k|        };
 2384|       |
 2385|   336k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 11.4k, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  11.4k|    }                                                  \
  |  |  |  | 3957|   336k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|   325k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|   325k|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|   325k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 322k, False: 2.59k]
  |  |  ------------------
  ------------------
 2390|   325k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|   325k|                    return ascii_tolower(a) ==
 2392|   325k|                           static_cast<detail::char_t<Range>>(b);
 2393|   325k|                }))) {
 2394|   322k|            return unexpected(parse_error::error);
 2395|   322k|        }
 2396|       |
 2397|  2.59k|        return it;
 2398|   325k|    }
 2399|   336k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2377|   461k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|   461k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 447k, False: 13.6k]
  |  Branch (2378:29): [True: 7.59k, False: 6.10k]
  ------------------
 2379|   455k|                return ch;
 2380|   455k|            }
 2381|  6.10k|            return static_cast<char_type>(ch +
 2382|  6.10k|                                          static_cast<char_type>('a' - 'A'));
 2383|   461k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3340|   108k|{
 3341|   108k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 952, False: 107k]
  ------------------
 3342|    952|        return *r;
 3343|    952|    }
 3344|       |
 3345|   107k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 41.8k, False: 65.8k]
  ------------------
 3346|  41.8k|        zero_parsed = true;
 3347|  41.8k|        return *r;
 3348|  41.8k|    }
 3349|       |
 3350|  65.8k|    return unexpected(parse_error::error);
 3351|   107k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2278|   107k|{
 2279|   107k|    auto it = read_code_unit(range);
 2280|   107k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 360, False: 107k]
  |  |  ------------------
  ------------------
 2281|    360|        return unexpected(make_eof_parse_error(it.error()));
 2282|    360|    }
 2283|       |
 2284|   107k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 65.5k, False: 41.8k]
  |  |  ------------------
  ------------------
 2285|   107k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|  65.5k|        return unexpected(parse_error::error);
 2287|  65.5k|    }
 2288|       |
 2289|  41.8k|    return *it;
 2290|   107k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3333|   136k|{
 3334|   136k|    return read_matching_string_classic_nocase(range, "0x");
 3335|   136k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3356|  70.8k|{
 3357|  70.8k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 532, False: 70.3k]
  ------------------
 3358|    532|        return {*r, 16, false};
 3359|    532|    }
 3360|  70.3k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 318, False: 69.9k]
  ------------------
 3361|    318|        return {*r, 2, false};
 3362|    318|    }
 3363|  69.9k|    {
 3364|  69.9k|        bool zero_parsed{false};
 3365|  69.9k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 26.2k, False: 43.7k]
  ------------------
 3366|  26.2k|            return {*r, 8, zero_parsed};
 3367|  26.2k|        }
 3368|  69.9k|    }
 3369|  43.7k|    return {range.begin(), 10, false};
 3370|  69.9k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3442|   309k|{
 3443|   309k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|       |    if constexpr (ranges::contiguous_range<Range>) {
 3446|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3447|       |            return detail::unexpected_scan_error(
 3448|       |                scan_error::invalid_scanned_value,
 3449|       |                "Failed to parse integer: No digits found");
 3450|       |        }
 3451|       |        return range.end();
 3452|       |    }
 3453|   309k|    else {
 3454|   309k|        return read_while1_code_unit(range,
 3455|   309k|                                     [&](char_type ch) noexcept {
 3456|   309k|                                         return char_to_int(ch) < base;
 3457|   309k|                                     })
 3458|   309k|            .transform_error(map_parse_error_to_scan_error(
 3459|   309k|                scan_error::invalid_scanned_value,
 3460|   309k|                "Failed to parse integer: No digits found"));
 3461|   309k|    }
 3462|   309k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2127|   309k|{
 2128|   309k|    auto it = read_while_code_unit(range, pred);
 2129|   309k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 28.2k, False: 281k]
  ------------------
 2130|  28.2k|        return unexpected(parse_error::error);
 2131|  28.2k|    }
 2132|   281k|    return it;
 2133|   309k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   309k|        : m_fptr([](storage fn,
  743|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   309k|              cvref<T> obj = *get<T>(fn);
  745|   309k|              if constexpr (std::is_void_v<R>) {
  746|   309k|                  obj(static_cast<decltype(args)>(args)...);
  747|   309k|              }
  748|   309k|              else {
  749|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   309k|              }
  751|   309k|          }),
  752|   309k|          m_storage(std::addressof(f))
  753|   309k|    {
  754|   309k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15M|              else {
  749|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15M|              }
  751|  1.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  1.15M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.15M|        else if constexpr (std::is_object_v<T>) {
  688|  1.15M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15M|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3455|  1.15M|                                     [&](char_type ch) noexcept {
 3456|  1.15M|                                         return char_to_int(ch) < base;
 3457|  1.15M|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   309k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   309k|        {
  662|   309k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3472|  60.6k|{
 3473|  60.6k|    std::basic_string<CharT> output;
 3474|  60.6k|    std::string thsep_indices;
 3475|  60.6k|    auto it = range.begin();
 3476|  60.6k|    bool digit_matched = false;
 3477|   326k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 324k, False: 2.20k]
  ------------------
 3478|   324k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 31.5k, False: 292k]
  ------------------
 3479|  31.5k|            thsep_indices.push_back(
 3480|  31.5k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|  31.5k|        }
 3482|   292k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 58.4k, False: 234k]
  ------------------
 3483|  58.4k|            break;
 3484|  58.4k|        }
 3485|   234k|        else {
 3486|   234k|            output.push_back(*it);
 3487|   234k|            digit_matched = true;
 3488|   234k|        }
 3489|   324k|    }
 3490|  60.6k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.25k, False: 57.4k]
  |  |  ------------------
  ------------------
 3491|  3.25k|        return detail::unexpected_scan_error(
 3492|  3.25k|            scan_error::invalid_scanned_value,
 3493|  3.25k|            "Failed to parse integer: No digits found");
 3494|  3.25k|    }
 3495|  57.4k|    return std::tuple{it, output, thsep_indices};
 3496|  60.6k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   281k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   281k|    else {
 1788|   281k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1110|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   281k|    }
 1790|   281k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   281k|    {
 1636|   281k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   281k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   281k|    {
 1720|   281k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   281k|                           ranges::common_range<Range>) {
 1737|   281k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   281k|            auto end_seg = range.end().contiguous_segment();
 1739|   281k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 177k, False: 103k]
  |  |  ------------------
  ------------------
 1740|   281k|                             detail::to_address(end_seg.end()))) {
 1741|   177k|                auto& str = m_storage.emplace();
 1742|   177k|                str.reserve(range.end().position() - range.begin().position());
 1743|   177k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   177k|                m_view = string_view_type{str};
 1745|   177k|                return;
 1746|   177k|            }
 1747|       |
 1748|   103k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   103k|                                                            end_seg.data());
 1750|   103k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   281k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   557k|    {
 1681|   557k|        return m_view;
 1682|   557k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   281k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6185|   274k|    {
 6186|   274k|        const bool need_skipped_width =
 6187|   274k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 274k]
  |  Branch (6187:33): [True: 0, False: 274k]
  ------------------
 6188|   274k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   274k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 274k]
  ------------------
 6191|   274k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 274k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   274k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 274k, False: 0]
  ------------------
 6200|   274k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 274k]
  ------------------
 6201|   274k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   274k|        return result_type{rng.begin(), 0};
 6225|   274k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   522k|{
 1945|   522k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   522k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 360, False: 522k]
  |  |  ------------------
  ------------------
 1946|    360|        return unexpected(e);
 1947|    360|    }
 1948|       |
 1949|   522k|    return ranges::next(range.begin());
 1950|   522k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  1.35M|{
  951|  1.35M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.4k, False: 1.34M]
  |  |  ------------------
  ------------------
  952|  12.4k|        return eof_error::eof;
  953|  12.4k|    }
  954|  1.34M|    return eof_error::good;
  955|  1.35M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  1.35M|{
  945|  1.35M|    return is_range_eof(r.begin(), r.end());
  946|  1.35M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  1.35M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.35M|    {
  938|  1.35M|        return begin == end;
  939|  1.35M|    }
  940|  1.35M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   522k|    {
  296|   522k|        ++x;
  297|   522k|        return x;
  298|   522k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  51.8k|    {
 3630|  51.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  51.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  51.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  51.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 51.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  51.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  51.8k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  51.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 7.64k, False: 44.2k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  7.64k|            else {
 3641|  7.64k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 7.64k]
  ------------------
 3642|  7.64k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  7.64k|            }
 3648|  7.64k|        }
 3649|       |
 3650|  51.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 5.21k, False: 46.6k]
  ------------------
 3651|  5.21k|            value = T{0};
 3652|  5.21k|            return std::next(prefix_result.iterator);
 3653|  5.21k|        }
 3654|       |
 3655|  46.6k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  46.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 36.2k, False: 10.3k]
  |  |  ------------------
  ------------------
 3656|  36.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  36.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  36.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  36.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 128, False: 36.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    128|    }                                                  \
  |  |  |  | 3957|  36.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  36.1k|                    parse_integer_digits_without_thsep(
 3658|  36.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  36.1k|                        prefix_result.parsed_base));
 3660|       |
 3661|  36.1k|            auto buf = make_contiguous_buffer(
 3662|  36.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  36.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.72k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.72k|    }                                                  \
  |  |  |  | 3957|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  30.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  30.4k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  30.4k|            return ranges::next(
 3668|  30.4k|                prefix_result.iterator,
 3669|  30.4k|                ranges::distance(buf.view().begin(), result_it));
 3670|  36.1k|        }
 3671|       |
 3672|  10.3k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  10.3k|            localized_number_formatting_options<CharT>{loc};
 3677|  10.3k|#endif
 3678|       |
 3679|  10.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  10.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 624, False: 9.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    624|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    624|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    624|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    624|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    624|    }                                                  \
  |  |  |  | 3957|  10.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  9.75k|                parse_integer_digits_with_thsep(
 3681|  9.75k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  9.75k|                    prefix_result.parsed_base, locale_options));
 3683|  9.75k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  9.75k|            parse_digits_result;
 3685|       |
 3686|  9.75k|        auto nothsep_source_view =
 3687|  9.75k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  9.75k|        SCN_TRY(
  ------------------
  |  | 3958|  9.75k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  9.75k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  9.75k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  9.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 430, False: 9.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    430|    }                                                  \
  |  |  |  | 3957|  9.75k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  9.32k|            nothsep_source_it,
 3690|  9.32k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  9.32k|                                prefix_result.parsed_base));
 3692|       |
 3693|  9.32k|        return ranges::next(
 3694|  9.32k|            prefix_result.iterator,
 3695|  9.32k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  9.32k|                ranges::ssize(thsep_indices));
 3697|  9.75k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3408|   414k|{
 3409|   414k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|   414k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   414k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   414k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 414k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   414k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|   414k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|   414k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|   414k|        parse_integer_base_prefix(
 3414|   414k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|   414k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 41.8k, False: 372k]
  ------------------
 3417|  41.8k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 478, False: 41.3k]
  ------------------
 3418|  41.8k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 30.7k, False: 10.6k]
  ------------------
 3419|  31.2k|            digits_begin_it = base_prefix_begin_it;
 3420|  31.2k|        }
 3421|  10.6k|        else {
 3422|  10.6k|            parsed_zero = false;
 3423|  10.6k|        }
 3424|  41.8k|    }
 3425|   372k|    else {
 3426|   372k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 2.15k, False: 370k]
  ------------------
 3427|   372k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 34.6k, False: 335k]
  ------------------
 3428|  36.7k|            digits_begin_it = base_prefix_begin_it;
 3429|  36.7k|        }
 3430|   372k|    }
 3431|       |
 3432|   414k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 359k, False: 54.5k]
  ------------------
 3433|   359k|        sign = sign_type::plus_sign;
 3434|   359k|    }
 3435|   414k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|   414k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|   414k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|   414k|{
 3290|   414k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   414k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 359k, False: 54.5k]
  ------------------
 3292|   359k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 359k, False: 0]
  ------------------
 3293|   359k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   359k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|   359k|    }
 3297|       |
 3298|  54.5k|    auto& it = *r;
 3299|  54.5k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 42.1k, False: 12.4k]
  ------------------
 3300|  42.1k|        return std::pair{it, sign_type::minus_sign};
 3301|  42.1k|    }
 3302|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3303|  54.5k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|   414k|{
 2405|   414k|    auto it = read_code_unit(range);
 2406|   414k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 414k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|   816k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 816k, False: 359k]
  ------------------
 2411|   816k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 54.5k, False: 761k]
  ------------------
 2412|  54.5k|            return *it;
 2413|  54.5k|        }
 2414|   816k|    }
 2415|       |
 2416|   359k|    return unexpected(parse_error::error);
 2417|   414k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3375|   414k|{
 3376|   414k|    switch (base) {
 3377|  21.8k|        case 2:
  ------------------
  |  Branch (3377:9): [True: 21.8k, False: 392k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|  21.8k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|  21.8k|                    false};
 3381|       |
 3382|  38.8k|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 38.8k, False: 375k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|  38.8k|            bool zero_parsed = false;
 3385|  38.8k|            auto it = apply_opt(
 3386|  38.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|  38.8k|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|  65.3k|        case 16:
  ------------------
  |  Branch (3390:9): [True: 65.3k, False: 349k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|  65.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|  65.3k|                    false};
 3394|       |
 3395|  70.9k|        case 0:
  ------------------
  |  Branch (3395:9): [True: 70.9k, False: 343k]
  ------------------
 3396|       |            // detect base
 3397|  70.9k|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|   217k|        default:
  ------------------
  |  Branch (3399:9): [True: 217k, False: 196k]
  ------------------
 3400|       |            // no base prefix allowed
 3401|   217k|            return {range.begin(), base, false};
 3402|   414k|    }
 3403|   414k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2423|   125k|{
 2424|   125k|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 108k, False: 17.4k]
  ------------------
 2425|   108k|        return range.begin();
 2426|   108k|    }
 2427|  17.4k|    return *result;
 2428|   125k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3326|  92.2k|{
 3327|  92.2k|    return read_matching_string_classic_nocase(range, "0b");
 3328|  92.2k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|   337k|{
 2364|   337k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|   337k|                  std::is_same_v<char_type, char>) {
 2368|   337k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2368:13): [True: 11.6k, False: 325k]
  ------------------
 2369|  11.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|  11.6k|        }
 2371|   325k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2371:13): [True: 323k, False: 2.59k]
  ------------------
 2372|   323k|            return unexpected(parse_error::error);
 2373|   323k|        }
 2374|  2.59k|        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|       |    else {
 2377|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|       |            if (ch < 'A' || ch > 'Z') {
 2379|       |                return ch;
 2380|       |            }
 2381|       |            return static_cast<char_type>(ch +
 2382|       |                                          static_cast<char_type>('a' - 'A'));
 2383|       |        };
 2384|       |
 2385|       |        SCN_TRY(it, read_exactly_n_code_units(
 2386|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|       |                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|       |        if (SCN_UNLIKELY(!std::equal(
 2390|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|       |                    return ascii_tolower(a) ==
 2392|       |                           static_cast<detail::char_t<Range>>(b);
 2393|       |                }))) {
 2394|       |            return unexpected(parse_error::error);
 2395|       |        }
 2396|       |
 2397|       |        return it;
 2398|       |    }
 2399|   337k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3340|   108k|{
 3341|   108k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 952, False: 107k]
  ------------------
 3342|    952|        return *r;
 3343|    952|    }
 3344|       |
 3345|   107k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 41.8k, False: 66.0k]
  ------------------
 3346|  41.8k|        zero_parsed = true;
 3347|  41.8k|        return *r;
 3348|  41.8k|    }
 3349|       |
 3350|  66.0k|    return unexpected(parse_error::error);
 3351|   107k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|   107k|{
 2279|   107k|    auto it = read_code_unit(range);
 2280|   107k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 360, False: 107k]
  |  |  ------------------
  ------------------
 2281|    360|        return unexpected(make_eof_parse_error(it.error()));
 2282|    360|    }
 2283|       |
 2284|   107k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 65.7k, False: 41.8k]
  |  |  ------------------
  ------------------
 2285|   107k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|  65.7k|        return unexpected(parse_error::error);
 2287|  65.7k|    }
 2288|       |
 2289|  41.8k|    return *it;
 2290|   107k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3333|   136k|{
 3334|   136k|    return read_matching_string_classic_nocase(range, "0x");
 3335|   136k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3356|  70.9k|{
 3357|  70.9k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 532, False: 70.4k]
  ------------------
 3358|    532|        return {*r, 16, false};
 3359|    532|    }
 3360|  70.4k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 318, False: 70.0k]
  ------------------
 3361|    318|        return {*r, 2, false};
 3362|    318|    }
 3363|  70.0k|    {
 3364|  70.0k|        bool zero_parsed{false};
 3365|  70.0k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 26.1k, False: 43.8k]
  ------------------
 3366|  26.1k|            return {*r, 8, zero_parsed};
 3367|  26.1k|        }
 3368|  70.0k|    }
 3369|  43.8k|    return {range.begin(), 10, false};
 3370|  70.0k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3442|   311k|{
 3443|   311k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|   311k|    if constexpr (ranges::contiguous_range<Range>) {
 3446|   311k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 891, False: 310k]
  |  |  ------------------
  ------------------
 3447|    891|            return detail::unexpected_scan_error(
 3448|    891|                scan_error::invalid_scanned_value,
 3449|    891|                "Failed to parse integer: No digits found");
 3450|    891|        }
 3451|   310k|        return range.end();
 3452|       |    }
 3453|       |    else {
 3454|       |        return read_while1_code_unit(range,
 3455|       |                                     [&](char_type ch) noexcept {
 3456|       |                                         return char_to_int(ch) < base;
 3457|       |                                     })
 3458|       |            .transform_error(map_parse_error_to_scan_error(
 3459|       |                scan_error::invalid_scanned_value,
 3460|       |                "Failed to parse integer: No digits found"));
 3461|       |    }
 3462|   311k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3472|  60.8k|{
 3473|  60.8k|    std::basic_string<CharT> output;
 3474|  60.8k|    std::string thsep_indices;
 3475|  60.8k|    auto it = range.begin();
 3476|  60.8k|    bool digit_matched = false;
 3477|   326k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 324k, False: 2.16k]
  ------------------
 3478|   324k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 31.4k, False: 292k]
  ------------------
 3479|  31.4k|            thsep_indices.push_back(
 3480|  31.4k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|  31.4k|        }
 3482|   292k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 58.6k, False: 233k]
  ------------------
 3483|  58.6k|            break;
 3484|  58.6k|        }
 3485|   233k|        else {
 3486|   233k|            output.push_back(*it);
 3487|   233k|            digit_matched = true;
 3488|   233k|        }
 3489|   324k|    }
 3490|  60.8k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.49k, False: 57.3k]
  |  |  ------------------
  ------------------
 3491|  3.49k|        return detail::unexpected_scan_error(
 3492|  3.49k|            scan_error::invalid_scanned_value,
 3493|  3.49k|            "Failed to parse integer: No digits found");
 3494|  3.49k|    }
 3495|  57.3k|    return std::tuple{it, output, thsep_indices};
 3496|  60.8k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   310k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   310k|                  ranges::sized_range<Range>) {
 1785|   310k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   310k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   310k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   310k|    {
 1589|   310k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.43M|    {
 1602|  1.43M|        return sv;
 1603|  1.43M|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   423k|{
 3098|   423k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 423k, False: 0]
  ------------------
 3099|   423k|        auto it = read_while_classic_space(range);
 3100|   423k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   423k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.32k, False: 414k]
  |  |  ------------------
  ------------------
 3102|  9.32k|            return unexpected(e);
 3103|  9.32k|        }
 3104|       |
 3105|   414k|        return it;
 3106|   423k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   423k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   423k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|   423k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|   423k|        auto buf = make_contiguous_buffer(range);
 2253|   423k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|   423k|        return ranges::next(range.begin(),
 2255|   423k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|   423k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   423k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   423k|                  ranges::sized_range<Range>) {
 1785|   423k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   423k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   423k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   423k|    {
 1589|   423k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   656k|    {
  304|   656k|        ranges::advance(x, n);
  305|   656k|        return x;
  306|   656k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.05M|    {
  268|  1.05M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.05M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.05M|    {
  181|  2.59M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.54M, False: 1.05M]
  ------------------
  182|  1.54M|            ++i;
  183|  1.54M|        }
  184|  1.05M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|  53.2k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  53.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  53.2k|            auto rd = make_reader<T, char_type>();
 6306|  53.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  53.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 53.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  53.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 53.2k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  53.2k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  53.2k|                return impl(rd, range, value);
 6311|  53.2k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  53.2k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|   660k|    {
 3188|   660k|        reader_error_handler eh{};
 3189|   660k|        get_derived().check_specs_impl(specs, eh);
 3190|   660k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 660k]
  |  |  ------------------
  ------------------
 3191|      0|            return detail::unexpected_scan_error(
 3192|      0|                scan_error::invalid_format_string, eh.m_msg);
 3193|      0|        }
 3194|   660k|        return {};
 3195|   660k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3199|   660k|    {
 3200|   660k|        return static_cast<Derived&>(*this);
 3201|   660k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3575|   660k|    {
 3576|   660k|        detail::check_int_type_specs(specs, eh);
 3577|   660k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  53.2k|    {
 6231|  53.2k|        const bool need_skipped_width =
 6232|  53.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 53.2k]
  |  Branch (6232:33): [True: 0, False: 53.2k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  53.2k|        auto it = rng.begin();
 6236|  53.2k|        std::ptrdiff_t prefix_width = 0;
 6237|  53.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 53.2k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  53.2k|        else {
 6245|  53.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.49k, False: 51.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.49k|    }                                                  \
  |  |  |  | 3957|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  51.7k|            std::tie(it, prefix_width) = prefix_result;
 6247|  51.7k|        }
 6248|  51.7k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  51.7k|        std::ptrdiff_t value_width = 0;
 6252|  51.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 51.7k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  51.7k|        else {
 6268|  51.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  51.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  51.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.76k, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.76k|    }                                                  \
  |  | 3957|  51.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  51.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  44.9k|                                             specs, value, loc));
 6270|       |
 6271|  44.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 44.9k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  44.9k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  44.9k|        std::ptrdiff_t postfix_width = 0;
 6280|  44.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 43.9k, False: 1.01k]
  ------------------
 6281|  43.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  43.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  43.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  43.9k|                                 value_width));
 6285|  43.9k|            std::tie(it, postfix_width) = postfix_result;
 6286|  43.9k|        }
 6287|       |
 6288|  44.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  44.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  44.9k|            specs, prefix_width, value_width, postfix_width));
 6290|  44.9k|        return it;
 6291|  44.9k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3182|  1.39M|    {
 3183|  1.39M|        return true;
 3184|  1.39M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|  63.2k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  63.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  63.2k|            auto rd = make_reader<T, char_type>();
 6306|  63.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  63.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 63.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  63.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 63.2k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  63.2k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  63.2k|                return impl(rd, range, value);
 6311|  63.2k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  63.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  63.2k|    {
 6231|  63.2k|        const bool need_skipped_width =
 6232|  63.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 63.2k]
  |  Branch (6232:33): [True: 0, False: 63.2k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  63.2k|        auto it = rng.begin();
 6236|  63.2k|        std::ptrdiff_t prefix_width = 0;
 6237|  63.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 63.2k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  63.2k|        else {
 6245|  63.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  63.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  63.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  63.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.97k, False: 61.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.97k|    }                                                  \
  |  |  |  | 3957|  63.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  61.2k|            std::tie(it, prefix_width) = prefix_result;
 6247|  61.2k|        }
 6248|  61.2k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  61.2k|        std::ptrdiff_t value_width = 0;
 6252|  61.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 61.2k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  61.2k|        else {
 6268|  61.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.28k, False: 55.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.28k|    }                                                  \
  |  | 3957|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  55.0k|                                             specs, value, loc));
 6270|       |
 6271|  55.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 55.0k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  55.0k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  55.0k|        std::ptrdiff_t postfix_width = 0;
 6280|  55.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 53.6k, False: 1.36k]
  ------------------
 6281|  53.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  53.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  53.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  53.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 53.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  53.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  53.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  53.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  53.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  53.6k|                                 value_width));
 6285|  53.6k|            std::tie(it, postfix_width) = postfix_result;
 6286|  53.6k|        }
 6287|       |
 6288|  55.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  55.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 55.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  55.0k|            specs, prefix_width, value_width, postfix_width));
 6290|  55.0k|        return it;
 6291|  55.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  61.2k|    {
 3630|  61.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  61.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 61.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  61.2k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  61.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 8.01k, False: 53.2k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  8.01k|            else {
 3641|  8.01k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 8.01k]
  ------------------
 3642|  8.01k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  8.01k|            }
 3648|  8.01k|        }
 3649|       |
 3650|  61.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 5.49k, False: 55.7k]
  ------------------
 3651|  5.49k|            value = T{0};
 3652|  5.49k|            return std::next(prefix_result.iterator);
 3653|  5.49k|        }
 3654|       |
 3655|  55.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  55.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 43.8k, False: 11.9k]
  |  |  ------------------
  ------------------
 3656|  43.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  43.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  43.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  43.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.56k, False: 39.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.56k|    }                                                  \
  |  |  |  | 3957|  43.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  39.2k|                    parse_integer_digits_without_thsep(
 3658|  39.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  39.2k|                        prefix_result.parsed_base));
 3660|       |
 3661|  39.2k|            auto buf = make_contiguous_buffer(
 3662|  39.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  39.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  39.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  39.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  39.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 790, False: 38.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    790|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    790|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    790|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    790|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    790|    }                                                  \
  |  |  |  | 3957|  39.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  38.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  38.4k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  38.4k|            return ranges::next(
 3668|  38.4k|                prefix_result.iterator,
 3669|  38.4k|                ranges::distance(buf.view().begin(), result_it));
 3670|  39.2k|        }
 3671|       |
 3672|  11.9k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3677|  11.9k|#endif
 3678|       |
 3679|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 704, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    704|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    704|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    704|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    704|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    704|    }                                                  \
  |  |  |  | 3957|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  11.2k|                parse_integer_digits_with_thsep(
 3681|  11.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  11.2k|                    prefix_result.parsed_base, locale_options));
 3683|  11.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  11.2k|            parse_digits_result;
 3685|       |
 3686|  11.2k|        auto nothsep_source_view =
 3687|  11.2k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  11.2k|        SCN_TRY(
  ------------------
  |  | 3958|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 218, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    218|    }                                                  \
  |  |  |  | 3957|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  11.0k|            nothsep_source_it,
 3690|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  11.0k|                                prefix_result.parsed_base));
 3692|       |
 3693|  11.0k|        return ranges::next(
 3694|  11.0k|            prefix_result.iterator,
 3695|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  11.0k|                ranges::ssize(thsep_indices));
 3697|  11.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  61.3k|    {
 3630|  61.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  61.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 61.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  61.3k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  61.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 8.00k, False: 53.3k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  8.00k|            else {
 3641|  8.00k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 8.00k]
  ------------------
 3642|  8.00k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  8.00k|            }
 3648|  8.00k|        }
 3649|       |
 3650|  61.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 5.49k, False: 55.8k]
  ------------------
 3651|  5.49k|            value = T{0};
 3652|  5.49k|            return std::next(prefix_result.iterator);
 3653|  5.49k|        }
 3654|       |
 3655|  55.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  55.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 43.8k, False: 11.9k]
  |  |  ------------------
  ------------------
 3656|  43.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  43.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  43.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  43.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 192, False: 43.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    192|    }                                                  \
  |  |  |  | 3957|  43.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  43.7k|                    parse_integer_digits_without_thsep(
 3658|  43.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  43.7k|                        prefix_result.parsed_base));
 3660|       |
 3661|  43.7k|            auto buf = make_contiguous_buffer(
 3662|  43.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  43.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  43.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  43.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  43.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.31k, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.31k|    }                                                  \
  |  |  |  | 3957|  43.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  38.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  38.3k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  38.3k|            return ranges::next(
 3668|  38.3k|                prefix_result.iterator,
 3669|  38.3k|                ranges::distance(buf.view().begin(), result_it));
 3670|  43.7k|        }
 3671|       |
 3672|  11.9k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3677|  11.9k|#endif
 3678|       |
 3679|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 748, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    748|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    748|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    748|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    748|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    748|    }                                                  \
  |  |  |  | 3957|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  11.2k|                parse_integer_digits_with_thsep(
 3681|  11.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  11.2k|                    prefix_result.parsed_base, locale_options));
 3683|  11.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  11.2k|            parse_digits_result;
 3685|       |
 3686|  11.2k|        auto nothsep_source_view =
 3687|  11.2k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  11.2k|        SCN_TRY(
  ------------------
  |  | 3958|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 216, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    216|    }                                                  \
  |  |  |  | 3957|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  11.0k|            nothsep_source_it,
 3690|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  11.0k|                                prefix_result.parsed_base));
 3692|       |
 3693|  11.0k|        return ranges::next(
 3694|  11.0k|            prefix_result.iterator,
 3695|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  11.0k|                ranges::ssize(thsep_indices));
 3697|  11.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|  64.4k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  64.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  64.4k|            auto rd = make_reader<T, char_type>();
 6306|  64.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  64.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 64.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  64.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 64.4k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  64.4k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  64.4k|                return impl(rd, range, value);
 6311|  64.4k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  64.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  64.4k|    {
 6231|  64.4k|        const bool need_skipped_width =
 6232|  64.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 64.4k]
  |  Branch (6232:33): [True: 0, False: 64.4k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  64.4k|        auto it = rng.begin();
 6236|  64.4k|        std::ptrdiff_t prefix_width = 0;
 6237|  64.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 64.4k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  64.4k|        else {
 6245|  64.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  64.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  64.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  64.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  64.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.18k, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.18k|    }                                                  \
  |  |  |  | 3957|  64.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  62.2k|            std::tie(it, prefix_width) = prefix_result;
 6247|  62.2k|        }
 6248|  62.2k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  62.2k|        std::ptrdiff_t value_width = 0;
 6252|  62.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 62.2k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  62.2k|        else {
 6268|  62.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.07k, False: 56.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.07k|    }                                                  \
  |  | 3957|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  56.1k|                                             specs, value, loc));
 6270|       |
 6271|  56.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 56.1k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  56.1k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  56.1k|        std::ptrdiff_t postfix_width = 0;
 6280|  56.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 54.6k, False: 1.52k]
  ------------------
 6281|  54.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 54.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  54.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  54.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  54.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  54.6k|                                 value_width));
 6285|  54.6k|            std::tie(it, postfix_width) = postfix_result;
 6286|  54.6k|        }
 6287|       |
 6288|  56.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  56.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  56.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 56.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  56.1k|            specs, prefix_width, value_width, postfix_width));
 6290|  56.1k|        return it;
 6291|  56.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  62.2k|    {
 3630|  62.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  62.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 62.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  62.2k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  62.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 8.20k, False: 54.0k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  8.20k|            else {
 3641|  8.20k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 8.20k]
  ------------------
 3642|  8.20k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  8.20k|            }
 3648|  8.20k|        }
 3649|       |
 3650|  62.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 5.53k, False: 56.7k]
  ------------------
 3651|  5.53k|            value = T{0};
 3652|  5.53k|            return std::next(prefix_result.iterator);
 3653|  5.53k|        }
 3654|       |
 3655|  56.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  56.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 44.5k, False: 12.1k]
  |  |  ------------------
  ------------------
 3656|  44.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  44.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  44.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  44.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.79k, False: 39.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.79k|    }                                                  \
  |  |  |  | 3957|  44.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  39.7k|                    parse_integer_digits_without_thsep(
 3658|  39.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  39.7k|                        prefix_result.parsed_base));
 3660|       |
 3661|  39.7k|            auto buf = make_contiguous_buffer(
 3662|  39.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  39.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  39.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  39.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  39.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 406, False: 39.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    406|    }                                                  \
  |  |  |  | 3957|  39.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  39.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  39.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  39.3k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  39.3k|            return ranges::next(
 3668|  39.3k|                prefix_result.iterator,
 3669|  39.3k|                ranges::distance(buf.view().begin(), result_it));
 3670|  39.7k|        }
 3671|       |
 3672|  12.1k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3677|  12.1k|#endif
 3678|       |
 3679|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 760, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    760|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    760|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    760|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    760|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    760|    }                                                  \
  |  |  |  | 3957|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  11.4k|                parse_integer_digits_with_thsep(
 3681|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  11.4k|                    prefix_result.parsed_base, locale_options));
 3683|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  11.4k|            parse_digits_result;
 3685|       |
 3686|  11.4k|        auto nothsep_source_view =
 3687|  11.4k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  11.4k|        SCN_TRY(
  ------------------
  |  | 3958|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 116, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    116|    }                                                  \
  |  |  |  | 3957|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  11.2k|            nothsep_source_it,
 3690|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  11.2k|                                prefix_result.parsed_base));
 3692|       |
 3693|  11.2k|        return ranges::next(
 3694|  11.2k|            prefix_result.iterator,
 3695|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  11.2k|                ranges::ssize(thsep_indices));
 3697|  11.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  62.3k|    {
 3630|  62.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  62.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  62.3k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  62.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 8.19k, False: 54.1k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  8.19k|            else {
 3641|  8.19k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 8.19k]
  ------------------
 3642|  8.19k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  8.19k|            }
 3648|  8.19k|        }
 3649|       |
 3650|  62.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 5.53k, False: 56.7k]
  ------------------
 3651|  5.53k|            value = T{0};
 3652|  5.53k|            return std::next(prefix_result.iterator);
 3653|  5.53k|        }
 3654|       |
 3655|  56.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  56.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 44.6k, False: 12.1k]
  |  |  ------------------
  ------------------
 3656|  44.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  44.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  44.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  44.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 222, False: 44.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    222|    }                                                  \
  |  |  |  | 3957|  44.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  44.3k|                    parse_integer_digits_without_thsep(
 3658|  44.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  44.3k|                        prefix_result.parsed_base));
 3660|       |
 3661|  44.3k|            auto buf = make_contiguous_buffer(
 3662|  44.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  44.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  44.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  44.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  44.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.12k, False: 39.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.12k|    }                                                  \
  |  |  |  | 3957|  44.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  39.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  39.2k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  39.2k|            return ranges::next(
 3668|  39.2k|                prefix_result.iterator,
 3669|  39.2k|                ranges::distance(buf.view().begin(), result_it));
 3670|  44.3k|        }
 3671|       |
 3672|  12.1k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3677|  12.1k|#endif
 3678|       |
 3679|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 806, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    806|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    806|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    806|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    806|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    806|    }                                                  \
  |  |  |  | 3957|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  11.3k|                parse_integer_digits_with_thsep(
 3681|  11.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  11.3k|                    prefix_result.parsed_base, locale_options));
 3683|  11.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  11.3k|            parse_digits_result;
 3685|       |
 3686|  11.3k|        auto nothsep_source_view =
 3687|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  11.3k|        SCN_TRY(
  ------------------
  |  | 3958|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 114, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    114|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    114|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    114|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    114|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    114|    }                                                  \
  |  |  |  | 3957|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  11.2k|            nothsep_source_it,
 3690|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  11.2k|                                prefix_result.parsed_base));
 3692|       |
 3693|  11.2k|        return ranges::next(
 3694|  11.2k|            prefix_result.iterator,
 3695|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  11.2k|                ranges::ssize(thsep_indices));
 3697|  11.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|  46.8k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  46.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  46.8k|            auto rd = make_reader<T, char_type>();
 6306|  46.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  46.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 46.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  46.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 46.8k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  46.8k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  46.8k|                return impl(rd, range, value);
 6311|  46.8k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  46.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  46.8k|    {
 6231|  46.8k|        const bool need_skipped_width =
 6232|  46.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 46.8k]
  |  Branch (6232:33): [True: 0, False: 46.8k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  46.8k|        auto it = rng.begin();
 6236|  46.8k|        std::ptrdiff_t prefix_width = 0;
 6237|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 46.8k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  46.8k|        else {
 6245|  46.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.14k, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.14k|    }                                                  \
  |  |  |  | 3957|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  45.7k|            std::tie(it, prefix_width) = prefix_result;
 6247|  45.7k|        }
 6248|  45.7k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  45.7k|        std::ptrdiff_t value_width = 0;
 6252|  45.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 45.7k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  45.7k|        else {
 6268|  45.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  45.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  45.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 7.11k, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  7.11k|    }                                                  \
  |  | 3957|  45.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  38.6k|                                             specs, value, loc));
 6270|       |
 6271|  38.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 38.6k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  38.6k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  38.6k|        std::ptrdiff_t postfix_width = 0;
 6280|  38.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 37.8k, False: 772]
  ------------------
 6281|  37.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 37.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  37.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  37.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  37.8k|                                 value_width));
 6285|  37.8k|            std::tie(it, postfix_width) = postfix_result;
 6286|  37.8k|        }
 6287|       |
 6288|  38.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  38.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  38.6k|            specs, prefix_width, value_width, postfix_width));
 6290|  38.6k|        return it;
 6291|  38.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  45.7k|    {
 3630|  45.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  45.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  45.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  45.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  45.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 45.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  45.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  45.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  45.7k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  45.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 2.90k, False: 42.8k]
  ------------------
 3634|  2.90k|            if constexpr (!std::is_signed_v<T>) {
 3635|  2.90k|                return detail::unexpected_scan_error(
 3636|  2.90k|                    scan_error::invalid_scanned_value,
 3637|  2.90k|                    "Unexpected '-' sign when parsing an "
 3638|  2.90k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  2.90k|        }
 3649|       |
 3650|  45.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 4.80k, False: 40.9k]
  ------------------
 3651|  4.80k|            value = T{0};
 3652|  4.80k|            return std::next(prefix_result.iterator);
 3653|  4.80k|        }
 3654|       |
 3655|  40.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  40.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 29.8k, False: 11.0k]
  |  |  ------------------
  ------------------
 3656|  29.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  29.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  29.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  29.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.74k, False: 27.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.74k|    }                                                  \
  |  |  |  | 3957|  29.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  27.1k|                    parse_integer_digits_without_thsep(
 3658|  27.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  27.1k|                        prefix_result.parsed_base));
 3660|       |
 3661|  27.1k|            auto buf = make_contiguous_buffer(
 3662|  27.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  27.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  27.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  27.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  27.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 860, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    860|    }                                                  \
  |  |  |  | 3957|  27.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  26.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  26.2k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  26.2k|            return ranges::next(
 3668|  26.2k|                prefix_result.iterator,
 3669|  26.2k|                ranges::distance(buf.view().begin(), result_it));
 3670|  27.1k|        }
 3671|       |
 3672|  11.0k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  11.0k|            localized_number_formatting_options<CharT>{loc};
 3677|  11.0k|#endif
 3678|       |
 3679|  11.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 374, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    374|    }                                                  \
  |  |  |  | 3957|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  10.6k|                parse_integer_digits_with_thsep(
 3681|  10.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  10.6k|                    prefix_result.parsed_base, locale_options));
 3683|  10.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  10.6k|            parse_digits_result;
 3685|       |
 3686|  10.6k|        auto nothsep_source_view =
 3687|  10.6k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  10.6k|        SCN_TRY(
  ------------------
  |  | 3958|  10.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 232, False: 10.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    232|    }                                                  \
  |  |  |  | 3957|  10.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  10.4k|            nothsep_source_it,
 3690|  10.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  10.4k|                                prefix_result.parsed_base));
 3692|       |
 3693|  10.4k|        return ranges::next(
 3694|  10.4k|            prefix_result.iterator,
 3695|  10.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  10.4k|                ranges::ssize(thsep_indices));
 3697|  10.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  45.8k|    {
 3630|  45.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  45.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  45.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  45.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 45.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  45.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  45.8k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  45.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 2.89k, False: 42.9k]
  ------------------
 3634|  2.89k|            if constexpr (!std::is_signed_v<T>) {
 3635|  2.89k|                return detail::unexpected_scan_error(
 3636|  2.89k|                    scan_error::invalid_scanned_value,
 3637|  2.89k|                    "Unexpected '-' sign when parsing an "
 3638|  2.89k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  2.89k|        }
 3649|       |
 3650|  45.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 4.80k, False: 41.0k]
  ------------------
 3651|  4.80k|            value = T{0};
 3652|  4.80k|            return std::next(prefix_result.iterator);
 3653|  4.80k|        }
 3654|       |
 3655|  41.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  41.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 29.9k, False: 11.0k]
  |  |  ------------------
  ------------------
 3656|  29.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  29.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  29.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  29.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 38, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     38|    }                                                  \
  |  |  |  | 3957|  29.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  29.9k|                    parse_integer_digits_without_thsep(
 3658|  29.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  29.9k|                        prefix_result.parsed_base));
 3660|       |
 3661|  29.9k|            auto buf = make_contiguous_buffer(
 3662|  29.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  29.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  29.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  29.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  29.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3.66k, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  3.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  3.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  3.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  3.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  3.66k|    }                                                  \
  |  |  |  | 3957|  29.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  26.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  26.2k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  26.2k|            return ranges::next(
 3668|  26.2k|                prefix_result.iterator,
 3669|  26.2k|                ranges::distance(buf.view().begin(), result_it));
 3670|  29.9k|        }
 3671|       |
 3672|  11.0k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  11.0k|            localized_number_formatting_options<CharT>{loc};
 3677|  11.0k|#endif
 3678|       |
 3679|  11.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 408, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    408|    }                                                  \
  |  |  |  | 3957|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  10.6k|                parse_integer_digits_with_thsep(
 3681|  10.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  10.6k|                    prefix_result.parsed_base, locale_options));
 3683|  10.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  10.6k|            parse_digits_result;
 3685|       |
 3686|  10.6k|        auto nothsep_source_view =
 3687|  10.6k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  10.6k|        SCN_TRY(
  ------------------
  |  | 3958|  10.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 228, False: 10.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    228|    }                                                  \
  |  |  |  | 3957|  10.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  10.4k|            nothsep_source_it,
 3690|  10.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  10.4k|                                prefix_result.parsed_base));
 3692|       |
 3693|  10.4k|        return ranges::next(
 3694|  10.4k|            prefix_result.iterator,
 3695|  10.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  10.4k|                ranges::ssize(thsep_indices));
 3697|  10.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|  51.1k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  51.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  51.1k|            auto rd = make_reader<T, char_type>();
 6306|  51.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  51.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 51.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  51.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 51.1k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  51.1k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  51.1k|                return impl(rd, range, value);
 6311|  51.1k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  51.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  51.1k|    {
 6231|  51.1k|        const bool need_skipped_width =
 6232|  51.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 51.1k]
  |  Branch (6232:33): [True: 0, False: 51.1k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  51.1k|        auto it = rng.begin();
 6236|  51.1k|        std::ptrdiff_t prefix_width = 0;
 6237|  51.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 51.1k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  51.1k|        else {
 6245|  51.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  51.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  51.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  51.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.39k, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.39k|    }                                                  \
  |  |  |  | 3957|  51.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  49.7k|            std::tie(it, prefix_width) = prefix_result;
 6247|  49.7k|        }
 6248|  49.7k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  49.7k|        std::ptrdiff_t value_width = 0;
 6252|  49.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 49.7k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  49.7k|        else {
 6268|  49.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.85k, False: 42.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.85k|    }                                                  \
  |  | 3957|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  42.8k|                                             specs, value, loc));
 6270|       |
 6271|  42.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 42.8k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  42.8k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  42.8k|        std::ptrdiff_t postfix_width = 0;
 6280|  42.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 41.9k, False: 946]
  ------------------
 6281|  41.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  41.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  41.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  41.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  41.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 41.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  41.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  41.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  41.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  41.9k|                                 value_width));
 6285|  41.9k|            std::tie(it, postfix_width) = postfix_result;
 6286|  41.9k|        }
 6287|       |
 6288|  42.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  42.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  42.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 42.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  42.8k|            specs, prefix_width, value_width, postfix_width));
 6290|  42.8k|        return it;
 6291|  42.8k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  49.7k|    {
 3630|  49.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  49.7k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  49.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 2.99k, False: 46.7k]
  ------------------
 3634|  2.99k|            if constexpr (!std::is_signed_v<T>) {
 3635|  2.99k|                return detail::unexpected_scan_error(
 3636|  2.99k|                    scan_error::invalid_scanned_value,
 3637|  2.99k|                    "Unexpected '-' sign when parsing an "
 3638|  2.99k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  2.99k|        }
 3649|       |
 3650|  49.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 4.98k, False: 44.7k]
  ------------------
 3651|  4.98k|            value = T{0};
 3652|  4.98k|            return std::next(prefix_result.iterator);
 3653|  4.98k|        }
 3654|       |
 3655|  44.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  44.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 32.7k, False: 11.9k]
  |  |  ------------------
  ------------------
 3656|  32.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.92k, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.92k|    }                                                  \
  |  |  |  | 3957|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  29.8k|                    parse_integer_digits_without_thsep(
 3658|  29.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  29.8k|                        prefix_result.parsed_base));
 3660|       |
 3661|  29.8k|            auto buf = make_contiguous_buffer(
 3662|  29.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  29.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  29.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  29.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  29.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 416, False: 29.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    416|    }                                                  \
  |  |  |  | 3957|  29.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  29.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  29.4k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  29.4k|            return ranges::next(
 3668|  29.4k|                prefix_result.iterator,
 3669|  29.4k|                ranges::distance(buf.view().begin(), result_it));
 3670|  29.8k|        }
 3671|       |
 3672|  11.9k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3677|  11.9k|#endif
 3678|       |
 3679|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 406, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    406|    }                                                  \
  |  |  |  | 3957|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  11.5k|                parse_integer_digits_with_thsep(
 3681|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  11.5k|                    prefix_result.parsed_base, locale_options));
 3683|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  11.5k|            parse_digits_result;
 3685|       |
 3686|  11.5k|        auto nothsep_source_view =
 3687|  11.5k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  11.5k|        SCN_TRY(
  ------------------
  |  | 3958|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 124, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    124|    }                                                  \
  |  |  |  | 3957|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  11.4k|            nothsep_source_it,
 3690|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  11.4k|                                prefix_result.parsed_base));
 3692|       |
 3693|  11.4k|        return ranges::next(
 3694|  11.4k|            prefix_result.iterator,
 3695|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  11.4k|                ranges::ssize(thsep_indices));
 3697|  11.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  49.7k|    {
 3630|  49.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  49.7k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  49.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 2.98k, False: 46.7k]
  ------------------
 3634|  2.98k|            if constexpr (!std::is_signed_v<T>) {
 3635|  2.98k|                return detail::unexpected_scan_error(
 3636|  2.98k|                    scan_error::invalid_scanned_value,
 3637|  2.98k|                    "Unexpected '-' sign when parsing an "
 3638|  2.98k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  2.98k|        }
 3649|       |
 3650|  49.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 4.98k, False: 44.7k]
  ------------------
 3651|  4.98k|            value = T{0};
 3652|  4.98k|            return std::next(prefix_result.iterator);
 3653|  4.98k|        }
 3654|       |
 3655|  44.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  44.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 32.7k, False: 11.9k]
  |  |  ------------------
  ------------------
 3656|  32.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 40, False: 32.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     40|    }                                                  \
  |  |  |  | 3957|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  32.7k|                    parse_integer_digits_without_thsep(
 3658|  32.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  32.7k|                        prefix_result.parsed_base));
 3660|       |
 3661|  32.7k|            auto buf = make_contiguous_buffer(
 3662|  32.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  32.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3.41k, False: 29.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  3.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  3.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  3.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  3.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  3.41k|    }                                                  \
  |  |  |  | 3957|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  29.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  29.3k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  29.3k|            return ranges::next(
 3668|  29.3k|                prefix_result.iterator,
 3669|  29.3k|                ranges::distance(buf.view().begin(), result_it));
 3670|  32.7k|        }
 3671|       |
 3672|  11.9k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  11.9k|            localized_number_formatting_options<CharT>{loc};
 3677|  11.9k|#endif
 3678|       |
 3679|  11.9k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 444, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    444|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    444|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    444|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    444|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    444|    }                                                  \
  |  |  |  | 3957|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  11.5k|                parse_integer_digits_with_thsep(
 3681|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  11.5k|                    prefix_result.parsed_base, locale_options));
 3683|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  11.5k|            parse_digits_result;
 3685|       |
 3686|  11.5k|        auto nothsep_source_view =
 3687|  11.5k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  11.5k|        SCN_TRY(
  ------------------
  |  | 3958|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 122, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    122|    }                                                  \
  |  |  |  | 3957|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  11.4k|            nothsep_source_it,
 3690|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  11.4k|                                prefix_result.parsed_base));
 3692|       |
 3693|  11.4k|        return ranges::next(
 3694|  11.4k|            prefix_result.iterator,
 3695|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  11.4k|                ranges::ssize(thsep_indices));
 3697|  11.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|  51.6k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  51.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  51.6k|            auto rd = make_reader<T, char_type>();
 6306|  51.6k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  51.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 51.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  51.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 51.6k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  51.6k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  51.6k|                return impl(rd, range, value);
 6311|  51.6k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  51.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  51.6k|    {
 6231|  51.6k|        const bool need_skipped_width =
 6232|  51.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 51.6k]
  |  Branch (6232:33): [True: 0, False: 51.6k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  51.6k|        auto it = rng.begin();
 6236|  51.6k|        std::ptrdiff_t prefix_width = 0;
 6237|  51.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 51.6k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  51.6k|        else {
 6245|  51.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  51.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  51.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  51.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.50k, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.50k|    }                                                  \
  |  |  |  | 3957|  51.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  50.1k|            std::tie(it, prefix_width) = prefix_result;
 6247|  50.1k|        }
 6248|  50.1k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  50.1k|        std::ptrdiff_t value_width = 0;
 6252|  50.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 50.1k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  50.1k|        else {
 6268|  50.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.74k, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.74k|    }                                                  \
  |  | 3957|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  43.4k|                                             specs, value, loc));
 6270|       |
 6271|  43.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 43.4k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  43.4k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  43.4k|        std::ptrdiff_t postfix_width = 0;
 6280|  43.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 42.3k, False: 1.05k]
  ------------------
 6281|  42.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  42.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  42.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  42.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  42.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  42.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  42.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  42.3k|                                 value_width));
 6285|  42.3k|            std::tie(it, postfix_width) = postfix_result;
 6286|  42.3k|        }
 6287|       |
 6288|  43.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  43.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  43.4k|            specs, prefix_width, value_width, postfix_width));
 6290|  43.4k|        return it;
 6291|  43.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  50.1k|    {
 3630|  50.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  50.1k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  50.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 3.07k, False: 47.0k]
  ------------------
 3634|  3.07k|            if constexpr (!std::is_signed_v<T>) {
 3635|  3.07k|                return detail::unexpected_scan_error(
 3636|  3.07k|                    scan_error::invalid_scanned_value,
 3637|  3.07k|                    "Unexpected '-' sign when parsing an "
 3638|  3.07k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  3.07k|        }
 3649|       |
 3650|  50.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 4.99k, False: 45.1k]
  ------------------
 3651|  4.99k|            value = T{0};
 3652|  4.99k|            return std::next(prefix_result.iterator);
 3653|  4.99k|        }
 3654|       |
 3655|  45.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  45.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 33.0k, False: 12.1k]
  |  |  ------------------
  ------------------
 3656|  33.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.97k, False: 30.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.97k|    }                                                  \
  |  |  |  | 3957|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  30.0k|                    parse_integer_digits_without_thsep(
 3658|  30.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  30.0k|                        prefix_result.parsed_base));
 3660|       |
 3661|  30.0k|            auto buf = make_contiguous_buffer(
 3662|  30.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  30.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  30.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  30.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  30.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  30.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 214, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    214|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    214|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    214|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    214|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    214|    }                                                  \
  |  |  |  | 3957|  30.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  29.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  29.8k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  29.8k|            return ranges::next(
 3668|  29.8k|                prefix_result.iterator,
 3669|  29.8k|                ranges::distance(buf.view().begin(), result_it));
 3670|  30.0k|        }
 3671|       |
 3672|  12.1k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3677|  12.1k|#endif
 3678|       |
 3679|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 426, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    426|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    426|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    426|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    426|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    426|    }                                                  \
  |  |  |  | 3957|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  11.7k|                parse_integer_digits_with_thsep(
 3681|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  11.7k|                    prefix_result.parsed_base, locale_options));
 3683|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  11.7k|            parse_digits_result;
 3685|       |
 3686|  11.7k|        auto nothsep_source_view =
 3687|  11.7k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  11.7k|        SCN_TRY(
  ------------------
  |  | 3958|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 60, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     60|    }                                                  \
  |  |  |  | 3957|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  11.6k|            nothsep_source_it,
 3690|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  11.6k|                                prefix_result.parsed_base));
 3692|       |
 3693|  11.6k|        return ranges::next(
 3694|  11.6k|            prefix_result.iterator,
 3695|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  11.6k|                ranges::ssize(thsep_indices));
 3697|  11.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  50.2k|    {
 3630|  50.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  50.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  50.2k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  50.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 3.07k, False: 47.1k]
  ------------------
 3634|  3.07k|            if constexpr (!std::is_signed_v<T>) {
 3635|  3.07k|                return detail::unexpected_scan_error(
 3636|  3.07k|                    scan_error::invalid_scanned_value,
 3637|  3.07k|                    "Unexpected '-' sign when parsing an "
 3638|  3.07k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  3.07k|        }
 3649|       |
 3650|  50.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 4.99k, False: 45.2k]
  ------------------
 3651|  4.99k|            value = T{0};
 3652|  4.99k|            return std::next(prefix_result.iterator);
 3653|  4.99k|        }
 3654|       |
 3655|  45.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  45.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 33.0k, False: 12.1k]
  |  |  ------------------
  ------------------
 3656|  33.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 40, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     40|    }                                                  \
  |  |  |  | 3957|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  33.0k|                    parse_integer_digits_without_thsep(
 3658|  33.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  33.0k|                        prefix_result.parsed_base));
 3660|       |
 3661|  33.0k|            auto buf = make_contiguous_buffer(
 3662|  33.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  33.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3.27k, False: 29.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  3.27k|    }                                                  \
  |  |  |  | 3957|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|  29.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|  29.7k|                                        prefix_result.parsed_base));
 3666|       |
 3667|  29.7k|            return ranges::next(
 3668|  29.7k|                prefix_result.iterator,
 3669|  29.7k|                ranges::distance(buf.view().begin(), result_it));
 3670|  33.0k|        }
 3671|       |
 3672|  12.1k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3677|  12.1k|#endif
 3678|       |
 3679|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 466, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    466|    }                                                  \
  |  |  |  | 3957|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  11.7k|                parse_integer_digits_with_thsep(
 3681|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  11.7k|                    prefix_result.parsed_base, locale_options));
 3683|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  11.7k|            parse_digits_result;
 3685|       |
 3686|  11.7k|        auto nothsep_source_view =
 3687|  11.7k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  11.7k|        SCN_TRY(
  ------------------
  |  | 3958|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 58, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     58|    }                                                  \
  |  |  |  | 3957|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  11.6k|            nothsep_source_it,
 3690|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  11.6k|                                prefix_result.parsed_base));
 3692|       |
 3693|  11.6k|        return ranges::next(
 3694|  11.6k|            prefix_result.iterator,
 3695|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  11.6k|                ranges::ssize(thsep_indices));
 3697|  11.7k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   422k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   422k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   422k|        else {
 1055|   422k|            return r.begin().contiguous_segment();
 1056|   422k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   422k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   399k|{
 2193|   399k|    auto it = range.begin();
 2194|   784k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 774k, False: 10.1k]
  ------------------
 2195|   774k|        const auto val =
 2196|   774k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   774k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   774k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 772k, False: 1.70k]
  |  |  ------------------
  ------------------
 2198|   772k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   772k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   772k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 389k, False: 383k]
  ------------------
 2201|   389k|                return it;
 2202|   389k|            }
 2203|   772k|        }
 2204|   385k|        it = val.iterator;
 2205|   385k|    }
 2206|       |
 2207|  10.1k|    return it;
 2208|   399k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   774k|{
 1998|   774k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   774k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   774k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   774k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   774k|    auto it = range.begin();
 2002|   774k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   774k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   774k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.70k, False: 772k]
  |  |  ------------------
  ------------------
 2005|  1.70k|        ++it;
 2006|  1.70k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.70k|        return {it, {}};
 2008|  1.70k|    }
 2009|       |
 2010|   772k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 767k, False: 4.89k]
  ------------------
 2011|   767k|        ++it;
 2012|   767k|        return {it, string_type(1, *range.begin())};
 2013|   767k|    }
 2014|       |
 2015|  4.89k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  4.89k|    return {it, string_type{range.begin(), it}};
 2017|   772k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  1.70k|{
 1265|  1.70k|    auto it = input.begin();
 1266|  2.86k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 2.03k, False: 825]
  ------------------
 1267|  2.03k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 882, False: 1.15k]
  ------------------
 1268|    882|            break;
 1269|    882|        }
 1270|  2.03k|    }
 1271|  1.70k|    return it;
 1272|  1.70k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  4.89k|    {
  283|  4.89k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.89k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  4.89k|    {
  252|  4.89k|        constexpr iter_difference_t<I> zero{0};
  253|  4.89k|        iter_difference_t<I> counter{0};
  254|       |
  255|  16.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 12.6k, False: 3.77k]
  |  Branch (255:30): [True: 11.5k, False: 1.11k]
  ------------------
  256|  11.5k|            ++i;
  257|  11.5k|            ++counter;
  258|  11.5k|        }
  259|       |
  260|  4.89k|        return counter;
  261|  4.89k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   774k|    {
 1989|   774k|        return !codepoint.empty();
 1990|   774k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   399k|{
 2214|   399k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   399k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   422k|{
 3098|   422k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 422k, False: 0]
  ------------------
 3099|   422k|        auto it = read_while_classic_space(range);
 3100|   422k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   422k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.1k, False: 412k]
  |  |  ------------------
  ------------------
 3102|  10.1k|            return unexpected(e);
 3103|  10.1k|        }
 3104|       |
 3105|   412k|        return it;
 3106|   422k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   422k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   422k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   422k|    else {
 2258|   422k|        auto it = range.begin();
 2259|       |
 2260|   422k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|   422k|            auto seg = get_contiguous_beginning(range);
 2262|   422k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|   422k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 23.2k, False: 399k]
  ------------------
 2264|  23.2k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|  23.2k|            }
 2266|   399k|            ranges::advance(it, seg.size());
 2267|   399k|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   422k|            return detail::is_cp_space(cp);
 2271|   422k|        });
 2272|   422k|    }
 2273|   422k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   399k|        : m_fptr([](storage fn,
  743|   399k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   399k|              cvref<T> obj = *get<T>(fn);
  745|   399k|              if constexpr (std::is_void_v<R>) {
  746|   399k|                  obj(static_cast<decltype(args)>(args)...);
  747|   399k|              }
  748|   399k|              else {
  749|   399k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   399k|              }
  751|   399k|          }),
  752|   399k|          m_storage(std::addressof(f))
  753|   399k|    {
  754|   399k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   772k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   772k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   772k|              else {
  749|   772k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   772k|              }
  751|   772k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   772k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   772k|        else if constexpr (std::is_object_v<T>) {
  688|   772k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   772k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   772k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   772k|            return detail::is_cp_space(cp);
 2271|   772k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   399k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   399k|        {
  662|   399k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   135k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   135k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   135k|        auto beg = r.begin();
  991|   135k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 135k, False: 0]
  ------------------
  992|   135k|            return false;
  993|   135k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   135k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|   100k|{
 1956|   100k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|   100k|    else {
 1967|   100k|        auto it = range.begin();
 1968|   100k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 80.6k, False: 19.5k]
  ------------------
 1969|  80.6k|            return ranges::next(it, count);
 1970|  80.6k|        }
 1971|       |
 1972|  39.4k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 38.8k, False: 652]
  ------------------
 1973|  38.8k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 18.8k, False: 19.9k]
  ------------------
 1974|  18.8k|                return unexpected(eof_error::eof);
 1975|  18.8k|            }
 1976|  38.8k|        }
 1977|       |
 1978|    652|        return it;
 1979|  19.5k|    }
 1980|   100k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|   100k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|   100k|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|   100k|        else {
 1107|   100k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 100k, False: 0]
  ------------------
 1108|   100k|                return static_cast<size_t>(
 1109|   100k|                    r.begin().parent()->chars_available() -
 1110|   100k|                    r.begin().position());
 1111|   100k|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|   100k|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|   100k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|   233k|    {
  763|   233k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   233k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6143|   109k|    {
 6144|   109k|        const bool need_skipped_width =
 6145|   109k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 109k]
  |  Branch (6145:33): [True: 0, False: 109k]
  ------------------
 6146|   109k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   109k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 109k]
  ------------------
 6150|   109k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 109k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   109k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 109k, False: 0]
  |  Branch (6154:56): [True: 109k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   109k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 109k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   218k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.42k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.42k|    }                                                  \
  |  |  |  | 3957|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   218k|                            make_eof_scan_error));
 6165|       |
 6166|   218k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 108k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   108k|            return result_type{it, 0};
 6174|   218k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   109k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|   107k|{
 2108|   107k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   107k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   107k|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|   107k|    else {
 2079|   107k|        auto first = range.begin();
 2080|   117k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 116k, False: 630]
  ------------------
 2081|   116k|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 106k, False: 9.68k]
  ------------------
 2082|   106k|                return first;
 2083|   106k|            }
 2084|   116k|        }
 2085|    630|        return first;
 2086|   107k|    }
 2087|   107k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  33.8M|    {
  108|  33.8M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  33.8M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  33.8M|    {
   94|  33.8M|        iter_difference_t<I> counter{0};
   95|  69.3G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 69.2G, False: 33.8M]
  ------------------
   96|  69.2G|            ++i;
   97|  69.2G|            ++counter;
   98|  69.2G|        }
   99|  33.8M|        return counter;
  100|  33.8M|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|  41.4k|    {
 1879|  41.4k|        auto stdloc = loc.get<std::locale>();
 1880|  41.4k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|  41.4k|        grouping = numpunct.grouping();
 1882|  41.4k|        thousands_sep =
 1883|  41.4k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 41.4k]
  ------------------
 1884|  41.4k|        decimal_point = numpunct.decimal_point();
 1885|  41.4k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|  41.4k|{
 1816|  41.4k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 41.4k, False: 0]
  ------------------
 1817|  41.4k|        return std::use_facet<Facet>(stdloc);
 1818|  41.4k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|  41.4k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|   166k|{
 1945|   166k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 72, False: 166k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   166k|    return ranges::next(range.begin());
 1950|   166k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   327k|{
  951|   327k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.83k, False: 325k]
  |  |  ------------------
  ------------------
  952|  1.83k|        return eof_error::eof;
  953|  1.83k|    }
  954|   325k|    return eof_error::good;
  955|   327k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   463k|{
  945|   463k|    return is_range_eof(r.begin(), r.end());
  946|   463k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   463k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   463k|    {
  938|   463k|        return begin == end;
  939|   463k|    }
  940|   463k|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   166k|    {
  296|   166k|        ++x;
  297|   166k|        return x;
  298|   166k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  18.0k|    {
 3630|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  18.0k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.58k, False: 16.4k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  1.58k|            else {
 3641|  1.58k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 1.58k]
  ------------------
 3642|  1.58k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  1.58k|            }
 3648|  1.58k|        }
 3649|       |
 3650|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 38, False: 18.0k]
  ------------------
 3651|     38|            value = T{0};
 3652|     38|            return std::next(prefix_result.iterator);
 3653|     38|        }
 3654|       |
 3655|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.8k, False: 4.15k]
  |  |  ------------------
  ------------------
 3656|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.5k, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.5k|    }                                                  \
  |  |  |  | 3957|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    352|                    parse_integer_digits_without_thsep(
 3658|    352|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    352|                        prefix_result.parsed_base));
 3660|       |
 3661|    352|            auto buf = make_contiguous_buffer(
 3662|    352|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    352|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 44, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     44|    }                                                  \
  |  |  |  | 3957|    352|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    308|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    308|                                        prefix_result.parsed_base));
 3666|       |
 3667|    308|            return ranges::next(
 3668|    308|                prefix_result.iterator,
 3669|    308|                ranges::distance(buf.view().begin(), result_it));
 3670|    352|        }
 3671|       |
 3672|  4.15k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.15k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.15k|#endif
 3678|       |
 3679|  4.15k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.68k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.68k|    }                                                  \
  |  |  |  | 3957|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  1.47k|                parse_integer_digits_with_thsep(
 3681|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  1.47k|                    prefix_result.parsed_base, locale_options));
 3683|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  1.47k|            parse_digits_result;
 3685|       |
 3686|  1.47k|        auto nothsep_source_view =
 3687|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  1.47k|        SCN_TRY(
  ------------------
  |  | 3958|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 1.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  1.46k|            nothsep_source_it,
 3690|  1.46k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  1.46k|                                prefix_result.parsed_base));
 3692|       |
 3693|  1.46k|        return ranges::next(
 3694|  1.46k|            prefix_result.iterator,
 3695|  1.46k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  1.46k|                ranges::ssize(thsep_indices));
 3697|  1.47k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3408|   133k|{
 3409|   133k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|   133k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|   133k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|   133k|        parse_integer_base_prefix(
 3414|   133k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|   133k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 328, False: 133k]
  ------------------
 3417|    328|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 24, False: 304]
  ------------------
 3418|    328|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 208, False: 96]
  ------------------
 3419|    232|            digits_begin_it = base_prefix_begin_it;
 3420|    232|        }
 3421|     96|        else {
 3422|     96|            parsed_zero = false;
 3423|     96|        }
 3424|    328|    }
 3425|   133k|    else {
 3426|   133k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 282, False: 132k]
  ------------------
 3427|   133k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 129k, False: 3.49k]
  ------------------
 3428|   129k|            digits_begin_it = base_prefix_begin_it;
 3429|   129k|        }
 3430|   133k|    }
 3431|       |
 3432|   133k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 123k, False: 10.0k]
  ------------------
 3433|   123k|        sign = sign_type::plus_sign;
 3434|   123k|    }
 3435|   133k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|   133k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|   133k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3289|   133k|{
 3290|   133k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   133k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 123k, False: 10.0k]
  ------------------
 3292|   123k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 123k, False: 0]
  ------------------
 3293|   123k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   123k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|   123k|    }
 3297|       |
 3298|  10.0k|    auto& it = *r;
 3299|  10.0k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 9.82k, False: 179]
  ------------------
 3300|  9.82k|        return std::pair{it, sign_type::minus_sign};
 3301|  9.82k|    }
 3302|    179|    return std::pair{it, sign_type::plus_sign};
 3303|  10.0k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2404|   133k|{
 2405|   133k|    auto it = read_code_unit(range);
 2406|   133k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|   266k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 266k, False: 123k]
  ------------------
 2411|   266k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 10.0k, False: 256k]
  ------------------
 2412|  10.0k|            return *it;
 2413|  10.0k|        }
 2414|   266k|    }
 2415|       |
 2416|   123k|    return unexpected(parse_error::error);
 2417|   133k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3375|   133k|{
 3376|   133k|    switch (base) {
 3377|  16.5k|        case 2:
  ------------------
  |  Branch (3377:9): [True: 16.5k, False: 116k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|  16.5k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|  16.5k|                    false};
 3381|       |
 3382|  16.5k|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 16.5k, False: 116k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|  16.5k|            bool zero_parsed = false;
 3385|  16.5k|            auto it = apply_opt(
 3386|  16.5k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|  16.5k|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|  16.7k|        case 16:
  ------------------
  |  Branch (3390:9): [True: 16.7k, False: 116k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|  16.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|  16.7k|                    false};
 3394|       |
 3395|  16.7k|        case 0:
  ------------------
  |  Branch (3395:9): [True: 16.7k, False: 116k]
  ------------------
 3396|       |            // detect base
 3397|  16.7k|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|  66.7k|        default:
  ------------------
  |  Branch (3399:9): [True: 66.7k, False: 66.6k]
  ------------------
 3400|       |            // no base prefix allowed
 3401|  66.7k|            return {range.begin(), base, false};
 3402|   133k|    }
 3403|   133k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2423|  49.8k|{
 2424|  49.8k|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 49.7k, False: 156]
  ------------------
 2425|  49.7k|        return range.begin();
 2426|  49.7k|    }
 2427|    156|    return *result;
 2428|  49.8k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3326|  33.3k|{
 3327|  33.3k|    return read_matching_string_classic_nocase(range, "0b");
 3328|  33.3k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2363|   100k|{
 2364|   100k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|   100k|    else {
 2377|   100k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|   100k|            if (ch < 'A' || ch > 'Z') {
 2379|   100k|                return ch;
 2380|   100k|            }
 2381|   100k|            return static_cast<char_type>(ch +
 2382|   100k|                                          static_cast<char_type>('a' - 'A'));
 2383|   100k|        };
 2384|       |
 2385|   100k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 18.8k, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  18.8k|    }                                                  \
  |  |  |  | 3957|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  81.2k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  81.2k|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  81.2k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  81.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 81.2k, False: 0]
  |  |  ------------------
  ------------------
 2390|  81.2k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  81.2k|                    return ascii_tolower(a) ==
 2392|  81.2k|                           static_cast<detail::char_t<Range>>(b);
 2393|  81.2k|                }))) {
 2394|  81.2k|            return unexpected(parse_error::error);
 2395|  81.2k|        }
 2396|       |
 2397|      0|        return it;
 2398|  81.2k|    }
 2399|   100k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  82.2k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  82.2k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 54.7k, False: 27.4k]
  |  Branch (2378:29): [True: 27.1k, False: 288]
  ------------------
 2379|  81.9k|                return ch;
 2380|  81.9k|            }
 2381|    288|            return static_cast<char_type>(ch +
 2382|    288|                                          static_cast<char_type>('a' - 'A'));
 2383|  82.2k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3340|  33.3k|{
 3341|  33.3k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 0, False: 33.3k]
  ------------------
 3342|      0|        return *r;
 3343|      0|    }
 3344|       |
 3345|  33.3k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 328, False: 33.0k]
  ------------------
 3346|    328|        zero_parsed = true;
 3347|    328|        return *r;
 3348|    328|    }
 3349|       |
 3350|  33.0k|    return unexpected(parse_error::error);
 3351|  33.3k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2278|  33.3k|{
 2279|  33.3k|    auto it = read_code_unit(range);
 2280|  33.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 72, False: 33.2k]
  |  |  ------------------
  ------------------
 2281|     72|        return unexpected(make_eof_parse_error(it.error()));
 2282|     72|    }
 2283|       |
 2284|  33.2k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 32.9k, False: 328]
  |  |  ------------------
  ------------------
 2285|  33.2k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|  32.9k|        return unexpected(parse_error::error);
 2287|  32.9k|    }
 2288|       |
 2289|    328|    return *it;
 2290|  33.2k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3333|  33.4k|{
 3334|  33.4k|    return read_matching_string_classic_nocase(range, "0x");
 3335|  33.4k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3356|  16.7k|{
 3357|  16.7k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 0, False: 16.7k]
  ------------------
 3358|      0|        return {*r, 16, false};
 3359|      0|    }
 3360|  16.7k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 0, False: 16.7k]
  ------------------
 3361|      0|        return {*r, 2, false};
 3362|      0|    }
 3363|  16.7k|    {
 3364|  16.7k|        bool zero_parsed{false};
 3365|  16.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 172, False: 16.5k]
  ------------------
 3366|    172|            return {*r, 8, zero_parsed};
 3367|    172|        }
 3368|  16.7k|    }
 3369|  16.5k|    return {range.begin(), 10, false};
 3370|  16.7k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3442|   107k|{
 3443|   107k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|       |    if constexpr (ranges::contiguous_range<Range>) {
 3446|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3447|       |            return detail::unexpected_scan_error(
 3448|       |                scan_error::invalid_scanned_value,
 3449|       |                "Failed to parse integer: No digits found");
 3450|       |        }
 3451|       |        return range.end();
 3452|       |    }
 3453|   107k|    else {
 3454|   107k|        return read_while1_code_unit(range,
 3455|   107k|                                     [&](char_type ch) noexcept {
 3456|   107k|                                         return char_to_int(ch) < base;
 3457|   107k|                                     })
 3458|   107k|            .transform_error(map_parse_error_to_scan_error(
 3459|   107k|                scan_error::invalid_scanned_value,
 3460|   107k|                "Failed to parse integer: No digits found"));
 3461|   107k|    }
 3462|   107k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2127|   107k|{
 2128|   107k|    auto it = read_while_code_unit(range, pred);
 2129|   107k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 104k, False: 2.75k]
  ------------------
 2130|   104k|        return unexpected(parse_error::error);
 2131|   104k|    }
 2132|  2.75k|    return it;
 2133|   107k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3455|   116k|                                     [&](char_type ch) noexcept {
 3456|   116k|                                         return char_to_int(ch) < base;
 3457|   116k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3472|  20.7k|{
 3473|  20.7k|    std::basic_string<CharT> output;
 3474|  20.7k|    std::string thsep_indices;
 3475|  20.7k|    auto it = range.begin();
 3476|  20.7k|    bool digit_matched = false;
 3477|  33.8M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 33.8M, False: 306]
  ------------------
 3478|  33.8M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 33.8M, False: 30.7k]
  ------------------
 3479|  33.8M|            thsep_indices.push_back(
 3480|  33.8M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|  33.8M|        }
 3482|  30.7k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 20.3k, False: 10.3k]
  ------------------
 3483|  20.3k|            break;
 3484|  20.3k|        }
 3485|  10.3k|        else {
 3486|  10.3k|            output.push_back(*it);
 3487|  10.3k|            digit_matched = true;
 3488|  10.3k|        }
 3489|  33.8M|    }
 3490|  20.7k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.8k, False: 8.80k]
  |  |  ------------------
  ------------------
 3491|  11.8k|        return detail::unexpected_scan_error(
 3492|  11.8k|            scan_error::invalid_scanned_value,
 3493|  11.8k|            "Failed to parse integer: No digits found");
 3494|  11.8k|    }
 3495|  8.80k|    return std::tuple{it, output, thsep_indices};
 3496|  20.7k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|  2.75k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  2.75k|    else {
 1788|  2.75k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1110|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  2.75k|    }
 1790|  2.75k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|  2.75k|    {
 1636|  2.75k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  2.75k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|  2.75k|    {
 1720|  2.75k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|  2.75k|                           ranges::common_range<Range>) {
 1737|  2.75k|            auto beg_seg = range.begin().contiguous_segment();
 1738|  2.75k|            auto end_seg = range.end().contiguous_segment();
 1739|  2.75k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.03k, False: 719]
  |  |  ------------------
  ------------------
 1740|  2.75k|                             detail::to_address(end_seg.end()))) {
 1741|  2.03k|                auto& str = m_storage.emplace();
 1742|  2.03k|                str.reserve(range.end().position() - range.begin().position());
 1743|  2.03k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  2.03k|                m_view = string_view_type{str};
 1745|  2.03k|                return;
 1746|  2.03k|            }
 1747|       |
 1748|    719|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|    719|                                                            end_seg.data());
 1750|    719|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  2.75k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  5.14k|    {
 1681|  5.14k|        return m_view;
 1682|  5.14k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.75k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6185|  10.1k|    {
 6186|  10.1k|        const bool need_skipped_width =
 6187|  10.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 10.1k]
  |  Branch (6187:33): [True: 0, False: 10.1k]
  ------------------
 6188|  10.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|  10.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 10.1k]
  ------------------
 6191|  10.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 10.1k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|  10.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 10.1k, False: 0]
  ------------------
 6200|  10.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 10.1k]
  ------------------
 6201|  10.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|  10.1k|        return result_type{rng.begin(), 0};
 6225|  10.1k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|   100k|{
 1956|   100k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|   100k|    if constexpr (ranges::sized_range<Range>) {
 1959|   100k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|   100k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 18.8k, False: 81.2k]
  ------------------
 1961|  18.8k|            return unexpected(eof_error::eof);
 1962|  18.8k|        }
 1963|       |
 1964|  81.2k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|   100k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   135k|{
 1998|   135k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   135k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   135k|    auto it = range.begin();
 2002|   135k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   135k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   135k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 135k, False: 0]
  ------------------
 2011|   135k|        ++it;
 2012|   135k|        return {it, string_type(1, *range.begin())};
 2013|   135k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   135k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   570k|{
  945|   570k|    return is_range_eof(r.begin(), r.end());
  946|   570k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   570k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   570k|    {
  938|   570k|        return begin == end;
  939|   570k|    }
  940|   570k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   135k|    {
 1989|   135k|        return !codepoint.empty();
 1990|   135k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|   434k|{
  951|   434k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.98k, False: 432k]
  |  |  ------------------
  ------------------
  952|  1.98k|        return eof_error::eof;
  953|  1.98k|    }
  954|   432k|    return eof_error::good;
  955|   434k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   166k|{
 1945|   166k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 72, False: 166k]
  |  |  ------------------
  ------------------
 1946|     72|        return unexpected(e);
 1947|     72|    }
 1948|       |
 1949|   166k|    return ranges::next(range.begin());
 1950|   166k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   166k|    {
  296|   166k|        ++x;
  297|   166k|        return x;
  298|   166k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  18.0k|    {
 3630|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  18.0k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.58k, False: 16.4k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  1.58k|            else {
 3641|  1.58k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 1.58k]
  ------------------
 3642|  1.58k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  1.58k|            }
 3648|  1.58k|        }
 3649|       |
 3650|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 38, False: 18.0k]
  ------------------
 3651|     38|            value = T{0};
 3652|     38|            return std::next(prefix_result.iterator);
 3653|     38|        }
 3654|       |
 3655|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.8k, False: 4.15k]
  |  |  ------------------
  ------------------
 3656|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 30, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     30|    }                                                  \
  |  |  |  | 3957|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  13.8k|                    parse_integer_digits_without_thsep(
 3658|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  13.8k|                        prefix_result.parsed_base));
 3660|       |
 3661|  13.8k|            auto buf = make_contiguous_buffer(
 3662|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.5k, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.5k|    }                                                  \
  |  |  |  | 3957|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    308|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    308|                                        prefix_result.parsed_base));
 3666|       |
 3667|    308|            return ranges::next(
 3668|    308|                prefix_result.iterator,
 3669|    308|                ranges::distance(buf.view().begin(), result_it));
 3670|  13.8k|        }
 3671|       |
 3672|  4.15k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.15k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.15k|#endif
 3678|       |
 3679|  4.15k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.68k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.68k|    }                                                  \
  |  |  |  | 3957|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  1.47k|                parse_integer_digits_with_thsep(
 3681|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  1.47k|                    prefix_result.parsed_base, locale_options));
 3683|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  1.47k|            parse_digits_result;
 3685|       |
 3686|  1.47k|        auto nothsep_source_view =
 3687|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  1.47k|        SCN_TRY(
  ------------------
  |  | 3958|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 1.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  1.46k|            nothsep_source_it,
 3690|  1.46k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  1.46k|                                prefix_result.parsed_base));
 3692|       |
 3693|  1.46k|        return ranges::next(
 3694|  1.46k|            prefix_result.iterator,
 3695|  1.46k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  1.46k|                ranges::ssize(thsep_indices));
 3697|  1.47k|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3408|   133k|{
 3409|   133k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|   133k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|   133k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|   133k|        parse_integer_base_prefix(
 3414|   133k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|   133k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 328, False: 133k]
  ------------------
 3417|    328|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 24, False: 304]
  ------------------
 3418|    328|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 208, False: 96]
  ------------------
 3419|    232|            digits_begin_it = base_prefix_begin_it;
 3420|    232|        }
 3421|     96|        else {
 3422|     96|            parsed_zero = false;
 3423|     96|        }
 3424|    328|    }
 3425|   133k|    else {
 3426|   133k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 282, False: 132k]
  ------------------
 3427|   133k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 129k, False: 3.49k]
  ------------------
 3428|   129k|            digits_begin_it = base_prefix_begin_it;
 3429|   129k|        }
 3430|   133k|    }
 3431|       |
 3432|   133k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 123k, False: 10.0k]
  ------------------
 3433|   123k|        sign = sign_type::plus_sign;
 3434|   123k|    }
 3435|   133k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|   133k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|   133k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|   133k|{
 3290|   133k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   133k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 123k, False: 10.0k]
  ------------------
 3292|   123k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 123k, False: 0]
  ------------------
 3293|   123k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   123k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|   123k|    }
 3297|       |
 3298|  10.0k|    auto& it = *r;
 3299|  10.0k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 9.82k, False: 179]
  ------------------
 3300|  9.82k|        return std::pair{it, sign_type::minus_sign};
 3301|  9.82k|    }
 3302|    179|    return std::pair{it, sign_type::plus_sign};
 3303|  10.0k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|   133k|{
 2405|   133k|    auto it = read_code_unit(range);
 2406|   133k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|   266k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 266k, False: 123k]
  ------------------
 2411|   266k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 10.0k, False: 256k]
  ------------------
 2412|  10.0k|            return *it;
 2413|  10.0k|        }
 2414|   266k|    }
 2415|       |
 2416|   123k|    return unexpected(parse_error::error);
 2417|   133k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3375|   133k|{
 3376|   133k|    switch (base) {
 3377|  16.5k|        case 2:
  ------------------
  |  Branch (3377:9): [True: 16.5k, False: 116k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|  16.5k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|  16.5k|                    false};
 3381|       |
 3382|  16.5k|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 16.5k, False: 116k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|  16.5k|            bool zero_parsed = false;
 3385|  16.5k|            auto it = apply_opt(
 3386|  16.5k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|  16.5k|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|  16.7k|        case 16:
  ------------------
  |  Branch (3390:9): [True: 16.7k, False: 116k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|  16.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|  16.7k|                    false};
 3394|       |
 3395|  16.7k|        case 0:
  ------------------
  |  Branch (3395:9): [True: 16.7k, False: 116k]
  ------------------
 3396|       |            // detect base
 3397|  16.7k|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|  66.7k|        default:
  ------------------
  |  Branch (3399:9): [True: 66.7k, False: 66.6k]
  ------------------
 3400|       |            // no base prefix allowed
 3401|  66.7k|            return {range.begin(), base, false};
 3402|   133k|    }
 3403|   133k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2423|  49.8k|{
 2424|  49.8k|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 49.7k, False: 156]
  ------------------
 2425|  49.7k|        return range.begin();
 2426|  49.7k|    }
 2427|    156|    return *result;
 2428|  49.8k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3326|  33.3k|{
 3327|  33.3k|    return read_matching_string_classic_nocase(range, "0b");
 3328|  33.3k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|   100k|{
 2364|   100k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|   100k|    else {
 2377|   100k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|   100k|            if (ch < 'A' || ch > 'Z') {
 2379|   100k|                return ch;
 2380|   100k|            }
 2381|   100k|            return static_cast<char_type>(ch +
 2382|   100k|                                          static_cast<char_type>('a' - 'A'));
 2383|   100k|        };
 2384|       |
 2385|   100k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 18.8k, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  18.8k|    }                                                  \
  |  |  |  | 3957|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  81.2k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  81.2k|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  81.2k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  81.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 81.2k, False: 0]
  |  |  ------------------
  ------------------
 2390|  81.2k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  81.2k|                    return ascii_tolower(a) ==
 2392|  81.2k|                           static_cast<detail::char_t<Range>>(b);
 2393|  81.2k|                }))) {
 2394|  81.2k|            return unexpected(parse_error::error);
 2395|  81.2k|        }
 2396|       |
 2397|      0|        return it;
 2398|  81.2k|    }
 2399|   100k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  82.2k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  82.2k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 54.7k, False: 27.4k]
  |  Branch (2378:29): [True: 27.1k, False: 288]
  ------------------
 2379|  81.9k|                return ch;
 2380|  81.9k|            }
 2381|    288|            return static_cast<char_type>(ch +
 2382|    288|                                          static_cast<char_type>('a' - 'A'));
 2383|  82.2k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3340|  33.3k|{
 3341|  33.3k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 0, False: 33.3k]
  ------------------
 3342|      0|        return *r;
 3343|      0|    }
 3344|       |
 3345|  33.3k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 328, False: 33.0k]
  ------------------
 3346|    328|        zero_parsed = true;
 3347|    328|        return *r;
 3348|    328|    }
 3349|       |
 3350|  33.0k|    return unexpected(parse_error::error);
 3351|  33.3k|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|  33.3k|{
 2279|  33.3k|    auto it = read_code_unit(range);
 2280|  33.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 72, False: 33.2k]
  |  |  ------------------
  ------------------
 2281|     72|        return unexpected(make_eof_parse_error(it.error()));
 2282|     72|    }
 2283|       |
 2284|  33.2k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 32.9k, False: 328]
  |  |  ------------------
  ------------------
 2285|  33.2k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|  32.9k|        return unexpected(parse_error::error);
 2287|  32.9k|    }
 2288|       |
 2289|    328|    return *it;
 2290|  33.2k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3333|  33.4k|{
 3334|  33.4k|    return read_matching_string_classic_nocase(range, "0x");
 3335|  33.4k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3356|  16.7k|{
 3357|  16.7k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 0, False: 16.7k]
  ------------------
 3358|      0|        return {*r, 16, false};
 3359|      0|    }
 3360|  16.7k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 0, False: 16.7k]
  ------------------
 3361|      0|        return {*r, 2, false};
 3362|      0|    }
 3363|  16.7k|    {
 3364|  16.7k|        bool zero_parsed{false};
 3365|  16.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 172, False: 16.5k]
  ------------------
 3366|    172|            return {*r, 8, zero_parsed};
 3367|    172|        }
 3368|  16.7k|    }
 3369|  16.5k|    return {range.begin(), 10, false};
 3370|  16.7k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3442|   107k|{
 3443|   107k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|   107k|    if constexpr (ranges::contiguous_range<Range>) {
 3446|   107k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 156, False: 107k]
  |  |  ------------------
  ------------------
 3447|    156|            return detail::unexpected_scan_error(
 3448|    156|                scan_error::invalid_scanned_value,
 3449|    156|                "Failed to parse integer: No digits found");
 3450|    156|        }
 3451|   107k|        return range.end();
 3452|       |    }
 3453|       |    else {
 3454|       |        return read_while1_code_unit(range,
 3455|       |                                     [&](char_type ch) noexcept {
 3456|       |                                         return char_to_int(ch) < base;
 3457|       |                                     })
 3458|       |            .transform_error(map_parse_error_to_scan_error(
 3459|       |                scan_error::invalid_scanned_value,
 3460|       |                "Failed to parse integer: No digits found"));
 3461|       |    }
 3462|   107k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3472|  20.7k|{
 3473|  20.7k|    std::basic_string<CharT> output;
 3474|  20.7k|    std::string thsep_indices;
 3475|  20.7k|    auto it = range.begin();
 3476|  20.7k|    bool digit_matched = false;
 3477|  33.8M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 33.8M, False: 306]
  ------------------
 3478|  33.8M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 33.8M, False: 30.7k]
  ------------------
 3479|  33.8M|            thsep_indices.push_back(
 3480|  33.8M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|  33.8M|        }
 3482|  30.7k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 20.3k, False: 10.3k]
  ------------------
 3483|  20.3k|            break;
 3484|  20.3k|        }
 3485|  10.3k|        else {
 3486|  10.3k|            output.push_back(*it);
 3487|  10.3k|            digit_matched = true;
 3488|  10.3k|        }
 3489|  33.8M|    }
 3490|  20.7k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.8k, False: 8.80k]
  |  |  ------------------
  ------------------
 3491|  11.8k|        return detail::unexpected_scan_error(
 3492|  11.8k|            scan_error::invalid_scanned_value,
 3493|  11.8k|            "Failed to parse integer: No digits found");
 3494|  11.8k|    }
 3495|  8.80k|    return std::tuple{it, output, thsep_indices};
 3496|  20.7k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|   107k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   107k|                  ranges::sized_range<Range>) {
 1785|   107k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   107k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   107k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   107k|    {
 1589|   107k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|   109k|    {
 1602|   109k|        return sv;
 1603|   109k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   135k|{
 3098|   135k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 135k, False: 0]
  ------------------
 3099|   135k|        auto it = read_while_classic_space(range);
 3100|   135k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   135k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.63k, False: 133k]
  |  |  ------------------
  ------------------
 3102|  1.63k|            return unexpected(e);
 3103|  1.63k|        }
 3104|       |
 3105|   133k|        return it;
 3106|   135k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   135k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   135k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   135k|    else {
 2258|   135k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   135k|            return detail::is_cp_space(cp);
 2271|   135k|        });
 2272|   135k|    }
 2273|   135k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|   135k|{
 2214|   135k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   135k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|   135k|{
 2193|   135k|    auto it = range.begin();
 2194|   137k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 135k, False: 1.63k]
  ------------------
 2195|   135k|        const auto val =
 2196|   135k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   135k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 135k, False: 0]
  |  |  ------------------
  ------------------
 2198|   135k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   135k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   135k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 133k, False: 2.37k]
  ------------------
 2201|   133k|                return it;
 2202|   133k|            }
 2203|   135k|        }
 2204|  2.37k|        it = val.iterator;
 2205|  2.37k|    }
 2206|       |
 2207|  1.63k|    return it;
 2208|   135k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   135k|        : m_fptr([](storage fn,
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|   135k|              if constexpr (std::is_void_v<R>) {
  746|   135k|                  obj(static_cast<decltype(args)>(args)...);
  747|   135k|              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
  752|   135k|          m_storage(std::addressof(f))
  753|   135k|    {
  754|   135k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   135k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   135k|        else if constexpr (std::is_object_v<T>) {
  688|   135k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   135k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2269|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   135k|            return detail::is_cp_space(cp);
 2271|   135k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   135k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   135k|        {
  662|   135k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  91.7k|    {
  304|  91.7k|        ranges::advance(x, n);
  305|  91.7k|        return x;
  306|  91.7k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  91.7k|    {
  268|  91.7k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  91.7k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  91.7k|    {
  181|  34.0M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 33.9M, False: 91.7k]
  ------------------
  182|  33.9M|            ++i;
  183|  33.9M|        }
  184|  91.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|  18.2k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  18.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  18.2k|            auto rd = make_reader<T, char_type>();
 6306|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  18.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 18.2k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  18.2k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  18.2k|                return impl(rd, range, value);
 6311|  18.2k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.2k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|   219k|    {
 3188|   219k|        reader_error_handler eh{};
 3189|   219k|        get_derived().check_specs_impl(specs, eh);
 3190|   219k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 219k]
  |  |  ------------------
  ------------------
 3191|      0|            return detail::unexpected_scan_error(
 3192|      0|                scan_error::invalid_format_string, eh.m_msg);
 3193|      0|        }
 3194|   219k|        return {};
 3195|   219k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3199|   219k|    {
 3200|   219k|        return static_cast<Derived&>(*this);
 3201|   219k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3575|   219k|    {
 3576|   219k|        detail::check_int_type_specs(specs, eh);
 3577|   219k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  18.2k|    {
 6231|  18.2k|        const bool need_skipped_width =
 6232|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.2k]
  |  Branch (6232:33): [True: 0, False: 18.2k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.2k|        auto it = rng.begin();
 6236|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.2k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.2k|        else {
 6245|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 246, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    246|    }                                                  \
  |  |  |  | 3957|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6247|  18.0k|        }
 6248|  18.0k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  18.0k|        std::ptrdiff_t value_width = 0;
 6252|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 18.0k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  18.0k|        else {
 6268|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.74k|                                             specs, value, loc));
 6270|       |
 6271|  1.74k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.74k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.74k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.74k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.74k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.64k, False: 98]
  ------------------
 6281|  1.64k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.64k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.64k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.64k|                                 value_width));
 6285|  1.64k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.64k|        }
 6287|       |
 6288|  1.74k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.74k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.74k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.74k|        return it;
 6291|  1.74k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3182|   290k|    {
 3183|   290k|        return true;
 3184|   290k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  18.0k|    {
 3630|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  18.0k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.58k, False: 16.4k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  1.58k|            else {
 3641|  1.58k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 1.58k]
  ------------------
 3642|  1.58k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  1.58k|            }
 3648|  1.58k|        }
 3649|       |
 3650|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 38, False: 17.9k]
  ------------------
 3651|     38|            value = T{0};
 3652|     38|            return std::next(prefix_result.iterator);
 3653|     38|        }
 3654|       |
 3655|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.8k, False: 4.14k]
  |  |  ------------------
  ------------------
 3656|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.4k, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.4k|    }                                                  \
  |  |  |  | 3957|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    344|                    parse_integer_digits_without_thsep(
 3658|    344|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    344|                        prefix_result.parsed_base));
 3660|       |
 3661|    344|            auto buf = make_contiguous_buffer(
 3662|    344|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    344|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 90, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     90|    }                                                  \
  |  |  |  | 3957|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    254|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    254|                                        prefix_result.parsed_base));
 3666|       |
 3667|    254|            return ranges::next(
 3668|    254|                prefix_result.iterator,
 3669|    254|                ranges::distance(buf.view().begin(), result_it));
 3670|    344|        }
 3671|       |
 3672|  4.14k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.14k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.14k|#endif
 3678|       |
 3679|  4.14k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.67k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.67k|    }                                                  \
  |  |  |  | 3957|  4.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  1.47k|                parse_integer_digits_with_thsep(
 3681|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  1.47k|                    prefix_result.parsed_base, locale_options));
 3683|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  1.47k|            parse_digits_result;
 3685|       |
 3686|  1.47k|        auto nothsep_source_view =
 3687|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  1.47k|        SCN_TRY(
  ------------------
  |  | 3958|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 26, False: 1.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     26|    }                                                  \
  |  |  |  | 3957|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  1.44k|            nothsep_source_it,
 3690|  1.44k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  1.44k|                                prefix_result.parsed_base));
 3692|       |
 3693|  1.44k|        return ranges::next(
 3694|  1.44k|            prefix_result.iterator,
 3695|  1.44k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  1.44k|                ranges::ssize(thsep_indices));
 3697|  1.47k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  18.0k|    {
 3630|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  18.0k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.58k, False: 16.4k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  1.58k|            else {
 3641|  1.58k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 1.58k]
  ------------------
 3642|  1.58k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  1.58k|            }
 3648|  1.58k|        }
 3649|       |
 3650|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 38, False: 17.9k]
  ------------------
 3651|     38|            value = T{0};
 3652|     38|            return std::next(prefix_result.iterator);
 3653|     38|        }
 3654|       |
 3655|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.8k, False: 4.14k]
  |  |  ------------------
  ------------------
 3656|  13.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 30, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     30|    }                                                  \
  |  |  |  | 3957|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  13.7k|                    parse_integer_digits_without_thsep(
 3658|  13.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  13.7k|                        prefix_result.parsed_base));
 3660|       |
 3661|  13.7k|            auto buf = make_contiguous_buffer(
 3662|  13.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  13.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.5k, False: 254]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.5k|    }                                                  \
  |  |  |  | 3957|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    254|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    254|                                        prefix_result.parsed_base));
 3666|       |
 3667|    254|            return ranges::next(
 3668|    254|                prefix_result.iterator,
 3669|    254|                ranges::distance(buf.view().begin(), result_it));
 3670|  13.7k|        }
 3671|       |
 3672|  4.14k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.14k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.14k|#endif
 3678|       |
 3679|  4.14k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.67k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.67k|    }                                                  \
  |  |  |  | 3957|  4.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  1.47k|                parse_integer_digits_with_thsep(
 3681|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  1.47k|                    prefix_result.parsed_base, locale_options));
 3683|  1.47k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  1.47k|            parse_digits_result;
 3685|       |
 3686|  1.47k|        auto nothsep_source_view =
 3687|  1.47k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  1.47k|        SCN_TRY(
  ------------------
  |  | 3958|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 26, False: 1.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     26|    }                                                  \
  |  |  |  | 3957|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  1.44k|            nothsep_source_it,
 3690|  1.44k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  1.44k|                                prefix_result.parsed_base));
 3692|       |
 3693|  1.44k|        return ranges::next(
 3694|  1.44k|            prefix_result.iterator,
 3695|  1.44k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  1.44k|                ranges::ssize(thsep_indices));
 3697|  1.47k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|  18.3k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  18.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  18.3k|            auto rd = make_reader<T, char_type>();
 6306|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  18.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 18.3k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  18.3k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  18.3k|                return impl(rd, range, value);
 6311|  18.3k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  18.3k|    {
 6231|  18.3k|        const bool need_skipped_width =
 6232|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.3k]
  |  Branch (6232:33): [True: 0, False: 18.3k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.3k|        auto it = rng.begin();
 6236|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.3k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.3k|        else {
 6245|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 258, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    258|    }                                                  \
  |  |  |  | 3957|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6247|  18.0k|        }
 6248|  18.0k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  18.0k|        std::ptrdiff_t value_width = 0;
 6252|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 18.0k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  18.0k|        else {
 6268|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.81k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.81k|                                             specs, value, loc));
 6270|       |
 6271|  1.81k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.81k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.81k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.81k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.81k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.70k, False: 110]
  ------------------
 6281|  1.70k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.70k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.70k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.70k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.70k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.70k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.70k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.70k|                                 value_width));
 6285|  1.70k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.70k|        }
 6287|       |
 6288|  1.81k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.81k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.81k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.81k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.81k|        return it;
 6291|  1.81k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|  18.4k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  18.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  18.4k|            auto rd = make_reader<T, char_type>();
 6306|  18.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  18.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 18.4k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  18.4k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  18.4k|                return impl(rd, range, value);
 6311|  18.4k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  18.4k|    {
 6231|  18.4k|        const bool need_skipped_width =
 6232|  18.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.4k]
  |  Branch (6232:33): [True: 0, False: 18.4k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.4k|        auto it = rng.begin();
 6236|  18.4k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.4k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.4k|        else {
 6245|  18.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 258, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    258|    }                                                  \
  |  |  |  | 3957|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  18.1k|            std::tie(it, prefix_width) = prefix_result;
 6247|  18.1k|        }
 6248|  18.1k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  18.1k|        std::ptrdiff_t value_width = 0;
 6252|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 18.1k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  18.1k|        else {
 6268|  18.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.89k|                                             specs, value, loc));
 6270|       |
 6271|  1.89k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.89k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.89k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.89k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.89k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.78k, False: 110]
  ------------------
 6281|  1.78k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.78k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.78k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.78k|                                 value_width));
 6285|  1.78k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.78k|        }
 6287|       |
 6288|  1.89k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.89k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.89k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.89k|        return it;
 6291|  1.89k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  18.1k|    {
 3630|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  18.1k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  18.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.59k, False: 16.5k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  1.59k|            else {
 3641|  1.59k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 1.59k]
  ------------------
 3642|  1.59k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  1.59k|            }
 3648|  1.59k|        }
 3649|       |
 3650|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 44, False: 18.1k]
  ------------------
 3651|     44|            value = T{0};
 3652|     44|            return std::next(prefix_result.iterator);
 3653|     44|        }
 3654|       |
 3655|  18.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  18.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.9k, False: 4.18k]
  |  |  ------------------
  ------------------
 3656|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.5k, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.5k|    }                                                  \
  |  |  |  | 3957|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    374|                    parse_integer_digits_without_thsep(
 3658|    374|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    374|                        prefix_result.parsed_base));
 3660|       |
 3661|    374|            auto buf = make_contiguous_buffer(
 3662|    374|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    374|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    364|                                        prefix_result.parsed_base));
 3666|       |
 3667|    364|            return ranges::next(
 3668|    364|                prefix_result.iterator,
 3669|    364|                ranges::distance(buf.view().begin(), result_it));
 3670|    374|        }
 3671|       |
 3672|  4.18k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.18k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.18k|#endif
 3678|       |
 3679|  4.18k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.69k, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.69k|    }                                                  \
  |  |  |  | 3957|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  1.48k|                parse_integer_digits_with_thsep(
 3681|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  1.48k|                    prefix_result.parsed_base, locale_options));
 3683|  1.48k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  1.48k|            parse_digits_result;
 3685|       |
 3686|  1.48k|        auto nothsep_source_view =
 3687|  1.48k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  1.48k|        SCN_TRY(
  ------------------
  |  | 3958|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  1.48k|            nothsep_source_it,
 3690|  1.48k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  1.48k|                                prefix_result.parsed_base));
 3692|       |
 3693|  1.48k|        return ranges::next(
 3694|  1.48k|            prefix_result.iterator,
 3695|  1.48k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  1.48k|                ranges::ssize(thsep_indices));
 3697|  1.48k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  18.1k|    {
 3630|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  18.1k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  18.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.59k, False: 16.5k]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|  1.59k|            else {
 3641|  1.59k|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 1.59k]
  ------------------
 3642|  1.59k|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|  1.59k|            }
 3648|  1.59k|        }
 3649|       |
 3650|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 44, False: 18.1k]
  ------------------
 3651|     44|            value = T{0};
 3652|     44|            return std::next(prefix_result.iterator);
 3653|     44|        }
 3654|       |
 3655|  18.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  18.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.9k, False: 4.18k]
  |  |  ------------------
  ------------------
 3656|  13.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 30, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     30|    }                                                  \
  |  |  |  | 3957|  13.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  13.8k|                    parse_integer_digits_without_thsep(
 3658|  13.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  13.8k|                        prefix_result.parsed_base));
 3660|       |
 3661|  13.8k|            auto buf = make_contiguous_buffer(
 3662|  13.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  13.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  13.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.5k, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.5k|    }                                                  \
  |  |  |  | 3957|  13.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    364|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    364|                                        prefix_result.parsed_base));
 3666|       |
 3667|    364|            return ranges::next(
 3668|    364|                prefix_result.iterator,
 3669|    364|                ranges::distance(buf.view().begin(), result_it));
 3670|  13.8k|        }
 3671|       |
 3672|  4.18k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.18k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.18k|#endif
 3678|       |
 3679|  4.18k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.69k, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.69k|    }                                                  \
  |  |  |  | 3957|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  1.48k|                parse_integer_digits_with_thsep(
 3681|  1.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  1.48k|                    prefix_result.parsed_base, locale_options));
 3683|  1.48k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  1.48k|            parse_digits_result;
 3685|       |
 3686|  1.48k|        auto nothsep_source_view =
 3687|  1.48k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  1.48k|        SCN_TRY(
  ------------------
  |  | 3958|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  1.48k|            nothsep_source_it,
 3690|  1.48k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  1.48k|                                prefix_result.parsed_base));
 3692|       |
 3693|  1.48k|        return ranges::next(
 3694|  1.48k|            prefix_result.iterator,
 3695|  1.48k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  1.48k|                ranges::ssize(thsep_indices));
 3697|  1.48k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|  18.1k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  18.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  18.1k|            auto rd = make_reader<T, char_type>();
 6306|  18.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  18.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 18.1k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  18.1k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  18.1k|                return impl(rd, range, value);
 6311|  18.1k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  18.1k|    {
 6231|  18.1k|        const bool need_skipped_width =
 6232|  18.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.1k]
  |  Branch (6232:33): [True: 0, False: 18.1k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.1k|        auto it = rng.begin();
 6236|  18.1k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.1k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.1k|        else {
 6245|  18.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 220, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    220|    }                                                  \
  |  |  |  | 3957|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  17.9k|            std::tie(it, prefix_width) = prefix_result;
 6247|  17.9k|        }
 6248|  17.9k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  17.9k|        std::ptrdiff_t value_width = 0;
 6252|  17.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 17.9k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  17.9k|        else {
 6268|  17.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.68k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.68k|                                             specs, value, loc));
 6270|       |
 6271|  1.68k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.68k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.68k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.68k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.68k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.61k, False: 72]
  ------------------
 6281|  1.61k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.61k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.61k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.61k|                                 value_width));
 6285|  1.61k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.61k|        }
 6287|       |
 6288|  1.68k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.68k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.68k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.68k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.68k|        return it;
 6291|  1.68k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  17.9k|    {
 3630|  17.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  17.9k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  17.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.57k, False: 16.4k]
  ------------------
 3634|  1.57k|            if constexpr (!std::is_signed_v<T>) {
 3635|  1.57k|                return detail::unexpected_scan_error(
 3636|  1.57k|                    scan_error::invalid_scanned_value,
 3637|  1.57k|                    "Unexpected '-' sign when parsing an "
 3638|  1.57k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  1.57k|        }
 3649|       |
 3650|  17.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 36, False: 17.9k]
  ------------------
 3651|     36|            value = T{0};
 3652|     36|            return std::next(prefix_result.iterator);
 3653|     36|        }
 3654|       |
 3655|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.6k, False: 4.30k]
  |  |  ------------------
  ------------------
 3656|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.3k, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.3k|    }                                                  \
  |  |  |  | 3957|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    288|                    parse_integer_digits_without_thsep(
 3658|    288|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    288|                        prefix_result.parsed_base));
 3660|       |
 3661|    288|            auto buf = make_contiguous_buffer(
 3662|    288|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    288|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 70, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     70|    }                                                  \
  |  |  |  | 3957|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    218|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    218|                                        prefix_result.parsed_base));
 3666|       |
 3667|    218|            return ranges::next(
 3668|    218|                prefix_result.iterator,
 3669|    218|                ranges::distance(buf.view().begin(), result_it));
 3670|    288|        }
 3671|       |
 3672|  4.30k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.30k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.30k|#endif
 3678|       |
 3679|  4.30k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.27k, False: 3.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.27k|    }                                                  \
  |  |  |  | 3957|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  3.02k|                parse_integer_digits_with_thsep(
 3681|  3.02k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  3.02k|                    prefix_result.parsed_base, locale_options));
 3683|  3.02k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  3.02k|            parse_digits_result;
 3685|       |
 3686|  3.02k|        auto nothsep_source_view =
 3687|  3.02k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  3.02k|        SCN_TRY(
  ------------------
  |  | 3958|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 3.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  3.00k|            nothsep_source_it,
 3690|  3.00k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  3.00k|                                prefix_result.parsed_base));
 3692|       |
 3693|  3.00k|        return ranges::next(
 3694|  3.00k|            prefix_result.iterator,
 3695|  3.00k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  3.00k|                ranges::ssize(thsep_indices));
 3697|  3.02k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  17.9k|    {
 3630|  17.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  17.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  17.9k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  17.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.57k, False: 16.4k]
  ------------------
 3634|  1.57k|            if constexpr (!std::is_signed_v<T>) {
 3635|  1.57k|                return detail::unexpected_scan_error(
 3636|  1.57k|                    scan_error::invalid_scanned_value,
 3637|  1.57k|                    "Unexpected '-' sign when parsing an "
 3638|  1.57k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  1.57k|        }
 3649|       |
 3650|  17.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 36, False: 17.9k]
  ------------------
 3651|     36|            value = T{0};
 3652|     36|            return std::next(prefix_result.iterator);
 3653|     36|        }
 3654|       |
 3655|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.6k, False: 4.30k]
  |  |  ------------------
  ------------------
 3656|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  13.6k|                    parse_integer_digits_without_thsep(
 3658|  13.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  13.6k|                        prefix_result.parsed_base));
 3660|       |
 3661|  13.6k|            auto buf = make_contiguous_buffer(
 3662|  13.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  13.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.4k, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.4k|    }                                                  \
  |  |  |  | 3957|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    218|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    218|                                        prefix_result.parsed_base));
 3666|       |
 3667|    218|            return ranges::next(
 3668|    218|                prefix_result.iterator,
 3669|    218|                ranges::distance(buf.view().begin(), result_it));
 3670|  13.6k|        }
 3671|       |
 3672|  4.30k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.30k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.30k|#endif
 3678|       |
 3679|  4.30k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.27k, False: 3.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.27k|    }                                                  \
  |  |  |  | 3957|  4.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  3.02k|                parse_integer_digits_with_thsep(
 3681|  3.02k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  3.02k|                    prefix_result.parsed_base, locale_options));
 3683|  3.02k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  3.02k|            parse_digits_result;
 3685|       |
 3686|  3.02k|        auto nothsep_source_view =
 3687|  3.02k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  3.02k|        SCN_TRY(
  ------------------
  |  | 3958|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 3.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  3.00k|            nothsep_source_it,
 3690|  3.00k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  3.00k|                                prefix_result.parsed_base));
 3692|       |
 3693|  3.00k|        return ranges::next(
 3694|  3.00k|            prefix_result.iterator,
 3695|  3.00k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  3.00k|                ranges::ssize(thsep_indices));
 3697|  3.02k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|  18.2k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  18.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  18.2k|            auto rd = make_reader<T, char_type>();
 6306|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  18.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 18.2k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  18.2k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  18.2k|                return impl(rd, range, value);
 6311|  18.2k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  18.2k|    {
 6231|  18.2k|        const bool need_skipped_width =
 6232|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.2k]
  |  Branch (6232:33): [True: 0, False: 18.2k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.2k|        auto it = rng.begin();
 6236|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.2k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.2k|        else {
 6245|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 220, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    220|    }                                                  \
  |  |  |  | 3957|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6247|  18.0k|        }
 6248|  18.0k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  18.0k|        std::ptrdiff_t value_width = 0;
 6252|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 18.0k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  18.0k|        else {
 6268|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.73k|                                             specs, value, loc));
 6270|       |
 6271|  1.73k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.73k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.73k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.73k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.73k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.66k, False: 72]
  ------------------
 6281|  1.66k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.66k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.66k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.66k|                                 value_width));
 6285|  1.66k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.66k|        }
 6287|       |
 6288|  1.73k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.73k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.73k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.73k|        return it;
 6291|  1.73k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  18.0k|    {
 3630|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  18.0k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.57k, False: 16.4k]
  ------------------
 3634|  1.57k|            if constexpr (!std::is_signed_v<T>) {
 3635|  1.57k|                return detail::unexpected_scan_error(
 3636|  1.57k|                    scan_error::invalid_scanned_value,
 3637|  1.57k|                    "Unexpected '-' sign when parsing an "
 3638|  1.57k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  1.57k|        }
 3649|       |
 3650|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 36, False: 17.9k]
  ------------------
 3651|     36|            value = T{0};
 3652|     36|            return std::next(prefix_result.iterator);
 3653|     36|        }
 3654|       |
 3655|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.6k, False: 4.31k]
  |  |  ------------------
  ------------------
 3656|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.3k, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.3k|    }                                                  \
  |  |  |  | 3957|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    294|                    parse_integer_digits_without_thsep(
 3658|    294|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    294|                        prefix_result.parsed_base));
 3660|       |
 3661|    294|            auto buf = make_contiguous_buffer(
 3662|    294|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    294|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 42, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     42|    }                                                  \
  |  |  |  | 3957|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    252|                                        prefix_result.parsed_base));
 3666|       |
 3667|    252|            return ranges::next(
 3668|    252|                prefix_result.iterator,
 3669|    252|                ranges::distance(buf.view().begin(), result_it));
 3670|    294|        }
 3671|       |
 3672|  4.31k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.31k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.31k|#endif
 3678|       |
 3679|  4.31k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.28k, False: 3.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.28k|    }                                                  \
  |  |  |  | 3957|  4.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  3.03k|                parse_integer_digits_with_thsep(
 3681|  3.03k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  3.03k|                    prefix_result.parsed_base, locale_options));
 3683|  3.03k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  3.03k|            parse_digits_result;
 3685|       |
 3686|  3.03k|        auto nothsep_source_view =
 3687|  3.03k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  3.03k|        SCN_TRY(
  ------------------
  |  | 3958|  3.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  3.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  3.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 3.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|  3.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  3.01k|            nothsep_source_it,
 3690|  3.01k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  3.01k|                                prefix_result.parsed_base));
 3692|       |
 3693|  3.01k|        return ranges::next(
 3694|  3.01k|            prefix_result.iterator,
 3695|  3.01k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  3.01k|                ranges::ssize(thsep_indices));
 3697|  3.03k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  18.0k|    {
 3630|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  18.0k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.57k, False: 16.4k]
  ------------------
 3634|  1.57k|            if constexpr (!std::is_signed_v<T>) {
 3635|  1.57k|                return detail::unexpected_scan_error(
 3636|  1.57k|                    scan_error::invalid_scanned_value,
 3637|  1.57k|                    "Unexpected '-' sign when parsing an "
 3638|  1.57k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  1.57k|        }
 3649|       |
 3650|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 36, False: 17.9k]
  ------------------
 3651|     36|            value = T{0};
 3652|     36|            return std::next(prefix_result.iterator);
 3653|     36|        }
 3654|       |
 3655|  17.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.6k, False: 4.31k]
  |  |  ------------------
  ------------------
 3656|  13.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  13.6k|                    parse_integer_digits_without_thsep(
 3658|  13.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  13.6k|                        prefix_result.parsed_base));
 3660|       |
 3661|  13.6k|            auto buf = make_contiguous_buffer(
 3662|  13.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  13.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.4k, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.4k|    }                                                  \
  |  |  |  | 3957|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    252|                                        prefix_result.parsed_base));
 3666|       |
 3667|    252|            return ranges::next(
 3668|    252|                prefix_result.iterator,
 3669|    252|                ranges::distance(buf.view().begin(), result_it));
 3670|  13.6k|        }
 3671|       |
 3672|  4.31k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.31k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.31k|#endif
 3678|       |
 3679|  4.31k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.28k, False: 3.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.28k|    }                                                  \
  |  |  |  | 3957|  4.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  3.03k|                parse_integer_digits_with_thsep(
 3681|  3.03k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  3.03k|                    prefix_result.parsed_base, locale_options));
 3683|  3.03k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  3.03k|            parse_digits_result;
 3685|       |
 3686|  3.03k|        auto nothsep_source_view =
 3687|  3.03k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  3.03k|        SCN_TRY(
  ------------------
  |  | 3958|  3.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  3.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  3.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  3.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 3.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|  3.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  3.01k|            nothsep_source_it,
 3690|  3.01k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  3.01k|                                prefix_result.parsed_base));
 3692|       |
 3693|  3.01k|        return ranges::next(
 3694|  3.01k|            prefix_result.iterator,
 3695|  3.01k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  3.01k|                ranges::ssize(thsep_indices));
 3697|  3.03k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|  18.3k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  18.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  18.3k|            auto rd = make_reader<T, char_type>();
 6306|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|  18.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 18.3k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  18.3k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  18.3k|                return impl(rd, range, value);
 6311|  18.3k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|  18.3k|    {
 6231|  18.3k|        const bool need_skipped_width =
 6232|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.3k]
  |  Branch (6232:33): [True: 0, False: 18.3k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.3k|        auto it = rng.begin();
 6236|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.3k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.3k|        else {
 6245|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 220, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    220|    }                                                  \
  |  |  |  | 3957|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6247|  18.0k|        }
 6248|  18.0k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  18.0k|        std::ptrdiff_t value_width = 0;
 6252|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 18.0k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  18.0k|        else {
 6268|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.79k|                                             specs, value, loc));
 6270|       |
 6271|  1.79k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.79k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.79k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.79k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.79k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.72k, False: 72]
  ------------------
 6281|  1.72k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.72k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.72k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.72k|                                 value_width));
 6285|  1.72k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.72k|        }
 6287|       |
 6288|  1.79k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.79k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.79k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.79k|        return it;
 6291|  1.79k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3629|  18.0k|    {
 3630|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  18.0k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.59k, False: 16.5k]
  ------------------
 3634|  1.59k|            if constexpr (!std::is_signed_v<T>) {
 3635|  1.59k|                return detail::unexpected_scan_error(
 3636|  1.59k|                    scan_error::invalid_scanned_value,
 3637|  1.59k|                    "Unexpected '-' sign when parsing an "
 3638|  1.59k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  1.59k|        }
 3649|       |
 3650|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 36, False: 18.0k]
  ------------------
 3651|     36|            value = T{0};
 3652|     36|            return std::next(prefix_result.iterator);
 3653|     36|        }
 3654|       |
 3655|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.7k, False: 4.34k]
  |  |  ------------------
  ------------------
 3656|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.4k, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.4k|    }                                                  \
  |  |  |  | 3957|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    306|                    parse_integer_digits_without_thsep(
 3658|    306|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    306|                        prefix_result.parsed_base));
 3660|       |
 3661|    306|            auto buf = make_contiguous_buffer(
 3662|    306|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    306|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      4|    }                                                  \
  |  |  |  | 3957|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    302|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    302|                                        prefix_result.parsed_base));
 3666|       |
 3667|    302|            return ranges::next(
 3668|    302|                prefix_result.iterator,
 3669|    302|                ranges::distance(buf.view().begin(), result_it));
 3670|    306|        }
 3671|       |
 3672|  4.34k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.34k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.34k|#endif
 3678|       |
 3679|  4.34k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.29k, False: 3.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.29k|    }                                                  \
  |  |  |  | 3957|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  3.05k|                parse_integer_digits_with_thsep(
 3681|  3.05k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  3.05k|                    prefix_result.parsed_base, locale_options));
 3683|  3.05k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  3.05k|            parse_digits_result;
 3685|       |
 3686|  3.05k|        auto nothsep_source_view =
 3687|  3.05k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  3.05k|        SCN_TRY(
  ------------------
  |  | 3958|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 3.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  3.05k|            nothsep_source_it,
 3690|  3.05k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  3.05k|                                prefix_result.parsed_base));
 3692|       |
 3693|  3.05k|        return ranges::next(
 3694|  3.05k|            prefix_result.iterator,
 3695|  3.05k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  3.05k|                ranges::ssize(thsep_indices));
 3697|  3.05k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|  18.0k|    {
 3630|  18.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|  18.0k|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|  18.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 1.59k, False: 16.5k]
  ------------------
 3634|  1.59k|            if constexpr (!std::is_signed_v<T>) {
 3635|  1.59k|                return detail::unexpected_scan_error(
 3636|  1.59k|                    scan_error::invalid_scanned_value,
 3637|  1.59k|                    "Unexpected '-' sign when parsing an "
 3638|  1.59k|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|  1.59k|        }
 3649|       |
 3650|  18.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 36, False: 18.0k]
  ------------------
 3651|     36|            value = T{0};
 3652|     36|            return std::next(prefix_result.iterator);
 3653|     36|        }
 3654|       |
 3655|  18.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|  18.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 13.7k, False: 4.34k]
  |  |  ------------------
  ------------------
 3656|  13.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|  13.7k|                    parse_integer_digits_without_thsep(
 3658|  13.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|  13.7k|                        prefix_result.parsed_base));
 3660|       |
 3661|  13.7k|            auto buf = make_contiguous_buffer(
 3662|  13.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|  13.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3958|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.4k, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.4k|    }                                                  \
  |  |  |  | 3957|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|    302|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|    302|                                        prefix_result.parsed_base));
 3666|       |
 3667|    302|            return ranges::next(
 3668|    302|                prefix_result.iterator,
 3669|    302|                ranges::distance(buf.view().begin(), result_it));
 3670|  13.7k|        }
 3671|       |
 3672|  4.34k|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|  4.34k|            localized_number_formatting_options<CharT>{loc};
 3677|  4.34k|#endif
 3678|       |
 3679|  4.34k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.29k, False: 3.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.29k|    }                                                  \
  |  |  |  | 3957|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|  3.05k|                parse_integer_digits_with_thsep(
 3681|  3.05k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|  3.05k|                    prefix_result.parsed_base, locale_options));
 3683|  3.05k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|  3.05k|            parse_digits_result;
 3685|       |
 3686|  3.05k|        auto nothsep_source_view =
 3687|  3.05k|            std::basic_string_view<CharT>{nothsep_source};
 3688|  3.05k|        SCN_TRY(
  ------------------
  |  | 3958|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 3.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|  3.05k|            nothsep_source_it,
 3690|  3.05k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|  3.05k|                                prefix_result.parsed_base));
 3692|       |
 3693|  3.05k|        return ranges::next(
 3694|  3.05k|            prefix_result.iterator,
 3695|  3.05k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|  3.05k|                ranges::ssize(thsep_indices));
 3697|  3.05k|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   135k|{
 2193|   135k|    auto it = range.begin();
 2194|   137k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 135k, False: 1.63k]
  ------------------
 2195|   135k|        const auto val =
 2196|   135k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   135k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 135k, False: 0]
  |  |  ------------------
  ------------------
 2198|   135k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   135k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   135k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 133k, False: 2.37k]
  ------------------
 2201|   133k|                return it;
 2202|   133k|            }
 2203|   135k|        }
 2204|  2.37k|        it = val.iterator;
 2205|  2.37k|    }
 2206|       |
 2207|  1.63k|    return it;
 2208|   135k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   135k|{
 1998|   135k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   135k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   135k|    auto it = range.begin();
 2002|   135k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   135k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   135k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 135k, False: 0]
  ------------------
 2011|   135k|        ++it;
 2012|   135k|        return {it, string_type(1, *range.begin())};
 2013|   135k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   135k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   135k|    {
 1989|   135k|        return !codepoint.empty();
 1990|   135k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   135k|{
 2214|   135k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   135k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   135k|{
 3098|   135k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 135k, False: 0]
  ------------------
 3099|   135k|        auto it = read_while_classic_space(range);
 3100|   135k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   135k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.63k, False: 133k]
  |  |  ------------------
  ------------------
 3102|  1.63k|            return unexpected(e);
 3103|  1.63k|        }
 3104|       |
 3105|   133k|        return it;
 3106|   135k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   135k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   135k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   135k|    else {
 2258|   135k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   135k|            return detail::is_cp_space(cp);
 2271|   135k|        });
 2272|   135k|    }
 2273|   135k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   135k|        : m_fptr([](storage fn,
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|   135k|              if constexpr (std::is_void_v<R>) {
  746|   135k|                  obj(static_cast<decltype(args)>(args)...);
  747|   135k|              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
  752|   135k|          m_storage(std::addressof(f))
  753|   135k|    {
  754|   135k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   135k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   135k|        else if constexpr (std::is_object_v<T>) {
  688|   135k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   135k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   135k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   135k|            return detail::is_cp_space(cp);
 2271|   135k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   135k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   135k|        {
  662|   135k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5979|  15.8k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  15.8k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  15.8k|            auto rd = make_reader<T, char_type>();
 5985|  15.8k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  15.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  15.8k|    {
 5972|  15.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 390, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    390|    }                                                  \
  |  |  |  | 3957|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  15.4k|                        .transform_error(make_eof_scan_error));
 5974|  15.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  15.8k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5891|  95.4k|{
 5892|  95.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  95.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.86k, False: 93.6k]
  |  |  ------------------
  ------------------
 5893|  1.86k|        return unexpected(e);
 5894|  1.86k|    }
 5895|       |
 5896|  93.6k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 93.6k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|  93.6k|    return skip_classic_whitespace(range);
 5901|  93.6k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  15.4k|    {
 3619|  15.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  15.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  15.4k|        return read_default_with_base(range, value, 10);
 3621|  15.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5979|  18.3k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  18.3k|            auto rd = make_reader<T, char_type>();
 5985|  18.3k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  18.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  18.3k|    {
 5972|  18.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 504, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    504|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    504|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    504|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    504|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    504|    }                                                  \
  |  |  |  | 3957|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  17.8k|                        .transform_error(make_eof_scan_error));
 5974|  17.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  18.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  17.8k|    {
 3619|  17.8k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  17.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  17.8k|        return read_default_with_base(range, value, 10);
 3621|  17.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5979|  18.6k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  18.6k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  18.6k|            auto rd = make_reader<T, char_type>();
 5985|  18.6k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  18.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  18.6k|    {
 5972|  18.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  18.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 552, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    552|    }                                                  \
  |  |  |  | 3957|  18.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  18.1k|                        .transform_error(make_eof_scan_error));
 5974|  18.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  18.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  18.1k|    {
 3619|  18.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  18.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  18.1k|        return read_default_with_base(range, value, 10);
 3621|  18.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5979|  13.2k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  13.2k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  13.2k|            auto rd = make_reader<T, char_type>();
 5985|  13.2k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  13.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  13.2k|    {
 5972|  13.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 279, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    279|    }                                                  \
  |  |  |  | 3957|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  12.9k|                        .transform_error(make_eof_scan_error));
 5974|  12.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  13.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  12.9k|    {
 3619|  12.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  12.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  12.9k|        return read_default_with_base(range, value, 10);
 3621|  12.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5979|  14.5k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  14.5k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  14.5k|            auto rd = make_reader<T, char_type>();
 5985|  14.5k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  14.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  14.5k|    {
 5972|  14.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 342, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    342|    }                                                  \
  |  |  |  | 3957|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  14.2k|                        .transform_error(make_eof_scan_error));
 5974|  14.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  14.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  14.2k|    {
 3619|  14.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  14.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  14.2k|        return read_default_with_base(range, value, 10);
 3621|  14.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5979|  14.7k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  14.7k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  14.7k|            auto rd = make_reader<T, char_type>();
 5985|  14.7k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  14.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  14.7k|    {
 5972|  14.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 369, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    369|    }                                                  \
  |  |  |  | 3957|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  14.3k|                        .transform_error(make_eof_scan_error));
 5974|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  14.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  14.3k|    {
 3619|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  14.3k|        return read_default_with_base(range, value, 10);
 3621|  14.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  15.8k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  15.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  15.8k|            auto rd = make_reader<T, char_type>();
 5989|  15.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 15.8k, False: 0]
  ------------------
 5990|  15.8k|                return impl(rd, range, value);
 5991|  15.8k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  15.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  15.8k|    {
 5972|  15.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 372, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    372|    }                                                  \
  |  |  |  | 3957|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  15.4k|                        .transform_error(make_eof_scan_error));
 5974|  15.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  15.8k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5891|  94.1k|{
 5892|  94.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.85k, False: 92.2k]
  |  |  ------------------
  ------------------
 5893|  1.85k|        return unexpected(e);
 5894|  1.85k|    }
 5895|       |
 5896|  92.2k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 92.2k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|  92.2k|    return skip_classic_whitespace(range);
 5901|  92.2k|}
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  15.4k|    {
 3619|  15.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  15.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  15.4k|        return read_default_with_base(range, value, 10);
 3621|  15.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  15.4k|    {
 3583|  15.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  15.4k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  15.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 15.4k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  29.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.11k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.11k|    }                                                  \
  |  |  |  | 3957|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  29.8k|                parse_integer_digits_without_thsep(
 3602|  29.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  29.8k|                    prefix_result.parsed_base));
 3604|       |
 3605|  29.8k|        auto buf = make_contiguous_buffer(
 3606|  29.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  29.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 576, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    576|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    576|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    576|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    576|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    576|    }                                                  \
  |  |  |  | 3957|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  13.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  13.8k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  13.8k|        return ranges::next(prefix_result.iterator,
 3612|  13.8k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  29.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  17.7k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  17.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  17.7k|            auto rd = make_reader<T, char_type>();
 5989|  17.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 17.7k, False: 0]
  ------------------
 5990|  17.7k|                return impl(rd, range, value);
 5991|  17.7k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  17.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  17.7k|    {
 5972|  17.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 477, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    477|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    477|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    477|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    477|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    477|    }                                                  \
  |  |  |  | 3957|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  17.2k|                        .transform_error(make_eof_scan_error));
 5974|  17.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  17.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  17.2k|    {
 3619|  17.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  17.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  17.2k|        return read_default_with_base(range, value, 10);
 3621|  17.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  17.2k|    {
 3583|  17.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  17.2k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  17.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 17.2k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  33.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.29k, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.29k|    }                                                  \
  |  |  |  | 3957|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  33.2k|                parse_integer_digits_without_thsep(
 3602|  33.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  33.2k|                    prefix_result.parsed_base));
 3604|       |
 3605|  33.2k|        auto buf = make_contiguous_buffer(
 3606|  33.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  33.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 288, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    288|    }                                                  \
  |  |  |  | 3957|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  15.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  15.7k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  15.7k|        return ranges::next(prefix_result.iterator,
 3612|  15.7k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  33.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  18.0k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  18.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  18.0k|            auto rd = make_reader<T, char_type>();
 5989|  18.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 18.0k, False: 0]
  ------------------
 5990|  18.0k|                return impl(rd, range, value);
 5991|  18.0k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  18.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  18.0k|    {
 5972|  18.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 522, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    522|    }                                                  \
  |  |  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  17.5k|                        .transform_error(make_eof_scan_error));
 5974|  17.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  18.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  17.5k|    {
 3619|  17.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  17.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  17.5k|        return read_default_with_base(range, value, 10);
 3621|  17.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  17.5k|    {
 3583|  17.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  17.5k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  17.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 17.5k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  33.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.37k, False: 16.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.37k|    }                                                  \
  |  |  |  | 3957|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  33.7k|                parse_integer_digits_without_thsep(
 3602|  33.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  33.7k|                    prefix_result.parsed_base));
 3604|       |
 3605|  33.7k|        auto buf = make_contiguous_buffer(
 3606|  33.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  33.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 171, False: 16.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    171|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    171|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    171|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    171|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    171|    }                                                  \
  |  |  |  | 3957|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  16.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  16.0k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  16.0k|        return ranges::next(prefix_result.iterator,
 3612|  16.0k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  33.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  13.2k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  13.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  13.2k|            auto rd = make_reader<T, char_type>();
 5989|  13.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 13.2k, False: 0]
  ------------------
 5990|  13.2k|                return impl(rd, range, value);
 5991|  13.2k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  13.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  13.2k|    {
 5972|  13.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 267, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    267|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    267|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    267|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    267|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    267|    }                                                  \
  |  |  |  | 3957|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  12.9k|                        .transform_error(make_eof_scan_error));
 5974|  12.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  13.2k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  12.9k|    {
 3619|  12.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  12.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  12.9k|        return read_default_with_base(range, value, 10);
 3621|  12.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  12.9k|    {
 3583|  12.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  12.9k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  12.9k|        if constexpr (!std::is_signed_v<T>) {
 3587|  12.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 756, False: 12.1k]
  ------------------
 3588|    756|                return detail::unexpected_scan_error(
 3589|    756|                    scan_error::invalid_scanned_value,
 3590|    756|                    "Unexpected '-' sign when parsing an "
 3591|    756|                    "unsigned value");
 3592|    756|            }
 3593|  12.9k|        }
 3594|       |
 3595|  12.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 12.9k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  25.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 759, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    759|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    759|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    759|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    759|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    759|    }                                                  \
  |  |  |  | 3957|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  25.1k|                parse_integer_digits_without_thsep(
 3602|  25.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  25.1k|                    prefix_result.parsed_base));
 3604|       |
 3605|  25.1k|        auto buf = make_contiguous_buffer(
 3606|  25.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  25.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 282, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    282|    }                                                  \
  |  |  |  | 3957|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  11.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  11.9k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  11.9k|        return ranges::next(prefix_result.iterator,
 3612|  11.9k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  25.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  14.5k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  14.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  14.5k|            auto rd = make_reader<T, char_type>();
 5989|  14.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 14.5k, False: 0]
  ------------------
 5990|  14.5k|                return impl(rd, range, value);
 5991|  14.5k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  14.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  14.5k|    {
 5972|  14.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 324, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    324|    }                                                  \
  |  |  |  | 3957|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  14.1k|                        .transform_error(make_eof_scan_error));
 5974|  14.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  14.5k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  14.1k|    {
 3619|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  14.1k|        return read_default_with_base(range, value, 10);
 3621|  14.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  14.1k|    {
 3583|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  14.1k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  14.1k|        if constexpr (!std::is_signed_v<T>) {
 3587|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 774, False: 13.4k]
  ------------------
 3588|    774|                return detail::unexpected_scan_error(
 3589|    774|                    scan_error::invalid_scanned_value,
 3590|    774|                    "Unexpected '-' sign when parsing an "
 3591|    774|                    "unsigned value");
 3592|    774|            }
 3593|  14.1k|        }
 3594|       |
 3595|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 14.1k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  27.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 813, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    813|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    813|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    813|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    813|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    813|    }                                                  \
  |  |  |  | 3957|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  27.5k|                parse_integer_digits_without_thsep(
 3602|  27.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  27.5k|                    prefix_result.parsed_base));
 3604|       |
 3605|  27.5k|        auto buf = make_contiguous_buffer(
 3606|  27.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  27.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 153, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    153|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    153|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    153|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    153|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    153|    }                                                  \
  |  |  |  | 3957|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  13.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  13.2k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  13.2k|        return ranges::next(prefix_result.iterator,
 3612|  13.2k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  27.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  14.6k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  14.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  14.6k|            auto rd = make_reader<T, char_type>();
 5989|  14.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 14.6k, False: 0]
  ------------------
 5990|  14.6k|                return impl(rd, range, value);
 5991|  14.6k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  14.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  14.6k|    {
 5972|  14.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 351, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    351|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    351|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    351|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    351|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    351|    }                                                  \
  |  |  |  | 3957|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  14.3k|                        .transform_error(make_eof_scan_error));
 5974|  14.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  14.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  14.3k|    {
 3619|  14.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  14.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  14.3k|        return read_default_with_base(range, value, 10);
 3621|  14.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  14.3k|    {
 3583|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  14.3k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3587|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 798, False: 13.5k]
  ------------------
 3588|    798|                return detail::unexpected_scan_error(
 3589|    798|                    scan_error::invalid_scanned_value,
 3590|    798|                    "Unexpected '-' sign when parsing an "
 3591|    798|                    "unsigned value");
 3592|    798|            }
 3593|  14.3k|        }
 3594|       |
 3595|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 14.3k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  27.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 828, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    828|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    828|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    828|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    828|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    828|    }                                                  \
  |  |  |  | 3957|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  27.8k|                parse_integer_digits_without_thsep(
 3602|  27.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  27.8k|                    prefix_result.parsed_base));
 3604|       |
 3605|  27.8k|        auto buf = make_contiguous_buffer(
 3606|  27.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  27.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  13.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  13.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  13.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 87, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     87|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     87|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     87|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     87|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     87|    }                                                  \
  |  |  |  | 3957|  13.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  13.4k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  13.4k|        return ranges::next(prefix_result.iterator,
 3612|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  27.8k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3017|   354k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   354k|    static_cast<    \
  |  | 1109|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   354k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   354k|          m_current(m_range.begin())
 3020|   354k|    {
 3021|   354k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3029|   610k|    {
 3030|   610k|        return m_range.end();
 3031|   610k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3044|   280k|    {
 3045|   280k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   280k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   280k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   280k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   280k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 280k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   280k|        }
 3051|   280k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   280k|    static_cast<    \
  |  | 1109|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   280k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3034|   330k|    {
 3035|   330k|        return ranges::subrange{begin(), end()};
 3036|   330k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6295|  53.2k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  53.2k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  53.2k|            auto rd = make_reader<T, char_type>();
 6301|  53.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  53.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 53.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  53.2k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  53.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  53.2k|    {
 6231|  53.2k|        const bool need_skipped_width =
 6232|  53.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 53.2k]
  |  Branch (6232:33): [True: 0, False: 53.2k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  53.2k|        auto it = rng.begin();
 6236|  53.2k|        std::ptrdiff_t prefix_width = 0;
 6237|  53.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 53.2k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  53.2k|        else {
 6245|  53.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.34k, False: 51.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.34k|    }                                                  \
  |  |  |  | 3957|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  51.8k|            std::tie(it, prefix_width) = prefix_result;
 6247|  51.8k|        }
 6248|  51.8k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  51.8k|        std::ptrdiff_t value_width = 0;
 6252|  51.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 51.8k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  51.8k|        else {
 6268|  51.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  51.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  51.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.90k, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.90k|    }                                                  \
  |  | 3957|  51.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  51.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  44.9k|                                             specs, value, loc));
 6270|       |
 6271|  44.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 44.9k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  44.9k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  44.9k|        std::ptrdiff_t postfix_width = 0;
 6280|  44.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 43.9k, False: 1.00k]
  ------------------
 6281|  43.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  43.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  43.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  43.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  43.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  43.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  43.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  43.9k|                                 value_width));
 6285|  43.9k|            std::tie(it, postfix_width) = postfix_result;
 6286|  43.9k|        }
 6287|       |
 6288|  44.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  44.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 44.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  44.9k|            specs, prefix_width, value_width, postfix_width));
 6290|  44.9k|        return it;
 6291|  44.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6143|   330k|    {
 6144|   330k|        const bool need_skipped_width =
 6145|   330k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 330k]
  |  Branch (6145:33): [True: 0, False: 330k]
  ------------------
 6146|   330k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   330k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 330k]
  ------------------
 6150|   330k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 330k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   330k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 330k, False: 0]
  |  Branch (6154:56): [True: 330k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   330k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 330k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   651k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 8.74k, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  8.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  8.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  8.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  8.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  8.74k|    }                                                  \
  |  |  |  | 3957|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   651k|                            make_eof_scan_error));
 6165|       |
 6166|   651k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 321k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   321k|            return result_type{it, 0};
 6174|   651k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   330k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6185|   274k|    {
 6186|   274k|        const bool need_skipped_width =
 6187|   274k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 274k]
  |  Branch (6187:33): [True: 0, False: 274k]
  ------------------
 6188|   274k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   274k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 274k]
  ------------------
 6191|   274k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 274k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   274k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 274k, False: 0]
  ------------------
 6200|   274k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 274k]
  ------------------
 6201|   274k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   274k|        return result_type{rng.begin(), 0};
 6225|   274k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6295|  63.1k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  63.1k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  63.1k|            auto rd = make_reader<T, char_type>();
 6301|  63.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  63.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 63.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  63.1k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  63.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  63.1k|    {
 6231|  63.1k|        const bool need_skipped_width =
 6232|  63.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 63.1k]
  |  Branch (6232:33): [True: 0, False: 63.1k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  63.1k|        auto it = rng.begin();
 6236|  63.1k|        std::ptrdiff_t prefix_width = 0;
 6237|  63.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 63.1k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  63.1k|        else {
 6245|  63.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  63.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  63.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  63.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.78k, False: 61.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.78k|    }                                                  \
  |  |  |  | 3957|  63.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  61.3k|            std::tie(it, prefix_width) = prefix_result;
 6247|  61.3k|        }
 6248|  61.3k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  61.3k|        std::ptrdiff_t value_width = 0;
 6252|  61.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 61.3k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  61.3k|        else {
 6268|  61.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  61.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  61.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  61.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.46k, False: 54.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.46k|    }                                                  \
  |  | 3957|  61.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  54.8k|                                             specs, value, loc));
 6270|       |
 6271|  54.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 54.8k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  54.8k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  54.8k|        std::ptrdiff_t postfix_width = 0;
 6280|  54.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 53.5k, False: 1.34k]
  ------------------
 6281|  53.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  53.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  53.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  53.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 53.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  53.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  53.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  53.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  53.5k|                                 value_width));
 6285|  53.5k|            std::tie(it, postfix_width) = postfix_result;
 6286|  53.5k|        }
 6287|       |
 6288|  54.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  54.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 54.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  54.8k|            specs, prefix_width, value_width, postfix_width));
 6290|  54.8k|        return it;
 6291|  54.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6295|  64.3k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  64.3k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  64.3k|            auto rd = make_reader<T, char_type>();
 6301|  64.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  64.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 64.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  64.3k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  64.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  64.3k|    {
 6231|  64.3k|        const bool need_skipped_width =
 6232|  64.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 64.3k]
  |  Branch (6232:33): [True: 0, False: 64.3k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  64.3k|        auto it = rng.begin();
 6236|  64.3k|        std::ptrdiff_t prefix_width = 0;
 6237|  64.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 64.3k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  64.3k|        else {
 6245|  64.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  64.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  64.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  64.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.98k, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.98k|    }                                                  \
  |  |  |  | 3957|  64.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  62.3k|            std::tie(it, prefix_width) = prefix_result;
 6247|  62.3k|        }
 6248|  62.3k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  62.3k|        std::ptrdiff_t value_width = 0;
 6252|  62.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 62.3k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  62.3k|        else {
 6268|  62.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.27k, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.27k|    }                                                  \
  |  | 3957|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  56.0k|                                             specs, value, loc));
 6270|       |
 6271|  56.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 56.0k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  56.0k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  56.0k|        std::ptrdiff_t postfix_width = 0;
 6280|  56.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 54.5k, False: 1.50k]
  ------------------
 6281|  54.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  54.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  54.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  54.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  54.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  54.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  54.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  54.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  54.5k|                                 value_width));
 6285|  54.5k|            std::tie(it, postfix_width) = postfix_result;
 6286|  54.5k|        }
 6287|       |
 6288|  56.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  56.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  56.0k|            specs, prefix_width, value_width, postfix_width));
 6290|  56.0k|        return it;
 6291|  56.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6295|  46.8k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  46.8k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  46.8k|            auto rd = make_reader<T, char_type>();
 6301|  46.8k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  46.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 46.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  46.8k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  46.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  46.8k|    {
 6231|  46.8k|        const bool need_skipped_width =
 6232|  46.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 46.8k]
  |  Branch (6232:33): [True: 0, False: 46.8k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  46.8k|        auto it = rng.begin();
 6236|  46.8k|        std::ptrdiff_t prefix_width = 0;
 6237|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 46.8k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  46.8k|        else {
 6245|  46.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.02k, False: 45.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.02k|    }                                                  \
  |  |  |  | 3957|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  45.8k|            std::tie(it, prefix_width) = prefix_result;
 6247|  45.8k|        }
 6248|  45.8k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  45.8k|        std::ptrdiff_t value_width = 0;
 6252|  45.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 45.8k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  45.8k|        else {
 6268|  45.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  45.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  45.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  45.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 7.23k, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  7.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  7.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  7.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  7.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  7.23k|    }                                                  \
  |  | 3957|  45.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  45.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  38.6k|                                             specs, value, loc));
 6270|       |
 6271|  38.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 38.6k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  38.6k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  38.6k|        std::ptrdiff_t postfix_width = 0;
 6280|  38.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 37.8k, False: 762]
  ------------------
 6281|  37.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 37.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  37.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  37.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  37.8k|                                 value_width));
 6285|  37.8k|            std::tie(it, postfix_width) = postfix_result;
 6286|  37.8k|        }
 6287|       |
 6288|  38.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  38.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 38.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  38.6k|            specs, prefix_width, value_width, postfix_width));
 6290|  38.6k|        return it;
 6291|  38.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6295|  51.0k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  51.0k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  51.0k|            auto rd = make_reader<T, char_type>();
 6301|  51.0k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  51.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 51.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  51.0k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  51.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  51.0k|    {
 6231|  51.0k|        const bool need_skipped_width =
 6232|  51.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 51.0k]
  |  Branch (6232:33): [True: 0, False: 51.0k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  51.0k|        auto it = rng.begin();
 6236|  51.0k|        std::ptrdiff_t prefix_width = 0;
 6237|  51.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 51.0k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  51.0k|        else {
 6245|  51.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  51.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.24k, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.24k|    }                                                  \
  |  |  |  | 3957|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  49.7k|            std::tie(it, prefix_width) = prefix_result;
 6247|  49.7k|        }
 6248|  49.7k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  49.7k|        std::ptrdiff_t value_width = 0;
 6252|  49.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 49.7k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  49.7k|        else {
 6268|  49.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 7.00k, False: 42.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  7.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  7.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  7.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  7.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  7.00k|    }                                                  \
  |  | 3957|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  42.7k|                                             specs, value, loc));
 6270|       |
 6271|  42.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 42.7k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  42.7k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  42.7k|        std::ptrdiff_t postfix_width = 0;
 6280|  42.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 41.8k, False: 928]
  ------------------
 6281|  41.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  41.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  41.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  41.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 41.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  41.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  41.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  41.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  41.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  41.8k|                                 value_width));
 6285|  41.8k|            std::tie(it, postfix_width) = postfix_result;
 6286|  41.8k|        }
 6287|       |
 6288|  42.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  42.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 42.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  42.7k|            specs, prefix_width, value_width, postfix_width));
 6290|  42.7k|        return it;
 6291|  42.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6295|  51.5k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  51.5k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  51.5k|            auto rd = make_reader<T, char_type>();
 6301|  51.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  51.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 51.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  51.5k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  51.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  51.5k|    {
 6231|  51.5k|        const bool need_skipped_width =
 6232|  51.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 51.5k]
  |  Branch (6232:33): [True: 0, False: 51.5k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  51.5k|        auto it = rng.begin();
 6236|  51.5k|        std::ptrdiff_t prefix_width = 0;
 6237|  51.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 51.5k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  51.5k|        else {
 6245|  51.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.35k, False: 50.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.35k|    }                                                  \
  |  |  |  | 3957|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  50.2k|            std::tie(it, prefix_width) = prefix_result;
 6247|  50.2k|        }
 6248|  50.2k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  50.2k|        std::ptrdiff_t value_width = 0;
 6252|  50.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 50.2k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  50.2k|        else {
 6268|  50.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  50.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  50.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.90k, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.90k|    }                                                  \
  |  | 3957|  50.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  43.3k|                                             specs, value, loc));
 6270|       |
 6271|  43.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 43.3k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  43.3k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  43.3k|        std::ptrdiff_t postfix_width = 0;
 6280|  43.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 42.3k, False: 1.03k]
  ------------------
 6281|  42.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  42.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  42.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  42.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  42.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  42.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  42.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  42.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  42.3k|                                 value_width));
 6285|  42.3k|            std::tie(it, postfix_width) = postfix_result;
 6286|  42.3k|        }
 6287|       |
 6288|  43.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  43.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  43.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 43.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  43.3k|            specs, prefix_width, value_width, postfix_width));
 6290|  43.3k|        return it;
 6291|  43.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 5979|  4.23k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  4.23k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  4.23k|            auto rd = make_reader<T, char_type>();
 5985|  4.23k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.23k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  4.23k|    {
 5972|  4.23k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 60, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     60|    }                                                  \
  |  |  |  | 3957|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.17k|                        .transform_error(make_eof_scan_error));
 5974|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.23k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5891|  25.4k|{
 5892|  25.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 123, False: 25.3k]
  |  |  ------------------
  ------------------
 5893|    123|        return unexpected(e);
 5894|    123|    }
 5895|       |
 5896|  25.3k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 25.3k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|  25.3k|    return skip_classic_whitespace(range);
 5901|  25.3k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  4.17k|    {
 3619|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.17k|        return read_default_with_base(range, value, 10);
 3621|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  4.17k|    {
 3583|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.17k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.17k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  8.33k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 9, False: 4.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      9|    }                                                  \
  |  |  |  | 3957|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  8.33k|                parse_integer_digits_without_thsep(
 3602|  8.33k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  8.33k|                    prefix_result.parsed_base));
 3604|       |
 3605|  8.33k|        auto buf = make_contiguous_buffer(
 3606|  8.33k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  8.33k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  4.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.05k, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.05k|    }                                                  \
  |  |  |  | 3957|  4.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    102|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    102|                                    prefix_result.parsed_base));
 3610|       |
 3611|    102|        return ranges::next(prefix_result.iterator,
 3612|    102|                            ranges::distance(buf.view().begin(), result_it));
 3613|  8.33k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5979|  4.25k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  4.25k|            auto rd = make_reader<T, char_type>();
 5985|  4.25k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  4.25k|    {
 5972|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 63, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     63|    }                                                  \
  |  |  |  | 3957|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.19k|                        .transform_error(make_eof_scan_error));
 5974|  4.19k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  4.19k|    {
 3619|  4.19k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.19k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.19k|        return read_default_with_base(range, value, 10);
 3621|  4.19k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  4.19k|    {
 3583|  4.19k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.19k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  4.19k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.19k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  8.37k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 9, False: 4.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      9|    }                                                  \
  |  |  |  | 3957|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  8.37k|                parse_integer_digits_without_thsep(
 3602|  8.37k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  8.37k|                    prefix_result.parsed_base));
 3604|       |
 3605|  8.37k|        auto buf = make_contiguous_buffer(
 3606|  8.37k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  8.37k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.05k, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.05k|    }                                                  \
  |  |  |  | 3957|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    126|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    126|                                    prefix_result.parsed_base));
 3610|       |
 3611|    126|        return ranges::next(prefix_result.iterator,
 3612|    126|                            ranges::distance(buf.view().begin(), result_it));
 3613|  8.37k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 5979|  4.28k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  4.28k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  4.28k|            auto rd = make_reader<T, char_type>();
 5985|  4.28k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.28k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  4.28k|    {
 5972|  4.28k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 63, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     63|    }                                                  \
  |  |  |  | 3957|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.22k|                        .transform_error(make_eof_scan_error));
 5974|  4.22k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.28k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  4.22k|    {
 3619|  4.22k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.22k|        return read_default_with_base(range, value, 10);
 3621|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  4.22k|    {
 3583|  4.22k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.22k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  4.22k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.22k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  8.43k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 9, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      9|    }                                                  \
  |  |  |  | 3957|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  8.43k|                parse_integer_digits_without_thsep(
 3602|  8.43k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  8.43k|                    prefix_result.parsed_base));
 3604|       |
 3605|  8.43k|        auto buf = make_contiguous_buffer(
 3606|  8.43k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  8.43k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  4.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.05k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.05k|    }                                                  \
  |  |  |  | 3957|  4.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    159|                                    prefix_result.parsed_base));
 3610|       |
 3611|    159|        return ranges::next(prefix_result.iterator,
 3612|    159|                            ranges::distance(buf.view().begin(), result_it));
 3613|  8.43k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 5979|  4.20k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  4.20k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  4.20k|            auto rd = make_reader<T, char_type>();
 5985|  4.20k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.20k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  4.20k|    {
 5972|  4.20k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 51, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     51|    }                                                  \
  |  |  |  | 3957|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.15k|                        .transform_error(make_eof_scan_error));
 5974|  4.15k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  4.15k|    {
 3619|  4.15k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.15k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.15k|        return read_default_with_base(range, value, 10);
 3621|  4.15k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  4.15k|    {
 3583|  4.15k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.15k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  4.15k|        if constexpr (!std::is_signed_v<T>) {
 3587|  4.15k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 51, False: 4.10k]
  ------------------
 3588|     51|                return detail::unexpected_scan_error(
 3589|     51|                    scan_error::invalid_scanned_value,
 3590|     51|                    "Unexpected '-' sign when parsing an "
 3591|     51|                    "unsigned value");
 3592|     51|            }
 3593|  4.15k|        }
 3594|       |
 3595|  4.15k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.15k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  8.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      3|    }                                                  \
  |  |  |  | 3957|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  8.31k|                parse_integer_digits_without_thsep(
 3602|  8.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  8.31k|                    prefix_result.parsed_base));
 3604|       |
 3605|  8.31k|        auto buf = make_contiguous_buffer(
 3606|  8.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  8.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.02k, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.02k|    }                                                  \
  |  |  |  | 3957|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    132|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    132|                                    prefix_result.parsed_base));
 3610|       |
 3611|    132|        return ranges::next(prefix_result.iterator,
 3612|    132|                            ranges::distance(buf.view().begin(), result_it));
 3613|  8.31k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5979|  4.22k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  4.22k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  4.22k|            auto rd = make_reader<T, char_type>();
 5985|  4.22k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.22k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  4.22k|    {
 5972|  4.22k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 51, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     51|    }                                                  \
  |  |  |  | 3957|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.17k|                        .transform_error(make_eof_scan_error));
 5974|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  4.17k|    {
 3619|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.17k|        return read_default_with_base(range, value, 10);
 3621|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  4.17k|    {
 3583|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.17k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  4.17k|        if constexpr (!std::is_signed_v<T>) {
 3587|  4.17k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 51, False: 4.12k]
  ------------------
 3588|     51|                return detail::unexpected_scan_error(
 3589|     51|                    scan_error::invalid_scanned_value,
 3590|     51|                    "Unexpected '-' sign when parsing an "
 3591|     51|                    "unsigned value");
 3592|     51|            }
 3593|  4.17k|        }
 3594|       |
 3595|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.17k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  8.34k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      3|    }                                                  \
  |  |  |  | 3957|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  8.34k|                parse_integer_digits_without_thsep(
 3602|  8.34k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  8.34k|                    prefix_result.parsed_base));
 3604|       |
 3605|  8.34k|        auto buf = make_contiguous_buffer(
 3606|  8.34k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  8.34k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.02k, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.02k|    }                                                  \
  |  |  |  | 3957|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    150|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    150|                                    prefix_result.parsed_base));
 3610|       |
 3611|    150|        return ranges::next(prefix_result.iterator,
 3612|    150|                            ranges::distance(buf.view().begin(), result_it));
 3613|  8.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 5979|  4.25k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  4.25k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  4.25k|            auto rd = make_reader<T, char_type>();
 5985|  4.25k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  4.25k|    {
 5972|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 51, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     51|    }                                                  \
  |  |  |  | 3957|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.20k|                        .transform_error(make_eof_scan_error));
 5974|  4.20k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|  4.20k|    {
 3619|  4.20k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.20k|        return read_default_with_base(range, value, 10);
 3621|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  4.20k|    {
 3583|  4.20k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.20k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  4.20k|        if constexpr (!std::is_signed_v<T>) {
 3587|  4.20k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 57, False: 4.14k]
  ------------------
 3588|     57|                return detail::unexpected_scan_error(
 3589|     57|                    scan_error::invalid_scanned_value,
 3590|     57|                    "Unexpected '-' sign when parsing an "
 3591|     57|                    "unsigned value");
 3592|     57|            }
 3593|  4.20k|        }
 3594|       |
 3595|  4.20k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.20k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  8.39k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      3|    }                                                  \
  |  |  |  | 3957|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  8.39k|                parse_integer_digits_without_thsep(
 3602|  8.39k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  8.39k|                    prefix_result.parsed_base));
 3604|       |
 3605|  8.39k|        auto buf = make_contiguous_buffer(
 3606|  8.39k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  8.39k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.01k, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.01k|    }                                                  \
  |  |  |  | 3957|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    180|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    180|                                    prefix_result.parsed_base));
 3610|       |
 3611|    180|        return ranges::next(prefix_result.iterator,
 3612|    180|                            ranges::distance(buf.view().begin(), result_it));
 3613|  8.39k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3017|   159k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   159k|    static_cast<    \
  |  | 1109|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   159k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   159k|          m_current(m_range.begin())
 3020|   159k|    {
 3021|   159k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3029|   120k|    {
 3030|   120k|        return m_range.end();
 3031|   120k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3044|  10.6k|    {
 3045|  10.6k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|  10.6k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|  10.6k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 10.6k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|  10.6k|        }
 3051|  10.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  10.6k|    static_cast<    \
  |  | 1109|  10.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|  10.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3034|   109k|    {
 3035|   109k|        return ranges::subrange{begin(), end()};
 3036|   109k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIaEENS0_13scan_expectedIS9_EERT_:
 6295|  18.2k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  18.2k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  18.2k|            auto rd = make_reader<T, char_type>();
 6301|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  18.2k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_aEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  18.2k|    {
 6231|  18.2k|        const bool need_skipped_width =
 6232|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.2k]
  |  Branch (6232:33): [True: 0, False: 18.2k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.2k|        auto it = rng.begin();
 6236|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.2k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.2k|        else {
 6245|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 246, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    246|    }                                                  \
  |  |  |  | 3957|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6247|  18.0k|        }
 6248|  18.0k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  18.0k|        std::ptrdiff_t value_width = 0;
 6252|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 18.0k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  18.0k|        else {
 6268|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.74k|                                             specs, value, loc));
 6270|       |
 6271|  1.74k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.74k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.74k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.74k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.74k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.64k, False: 98]
  ------------------
 6281|  1.64k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.64k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.64k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.64k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.64k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.64k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.64k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.64k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.64k|                                 value_width));
 6285|  1.64k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.64k|        }
 6287|       |
 6288|  1.74k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.74k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.74k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.74k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.74k|        return it;
 6291|  1.74k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6143|   109k|    {
 6144|   109k|        const bool need_skipped_width =
 6145|   109k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 109k]
  |  Branch (6145:33): [True: 0, False: 109k]
  ------------------
 6146|   109k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   109k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 109k]
  ------------------
 6150|   109k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 109k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   109k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 109k, False: 0]
  |  Branch (6154:56): [True: 109k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   109k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 109k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   218k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.42k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.42k|    }                                                  \
  |  |  |  | 3957|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   218k|                            make_eof_scan_error));
 6165|       |
 6166|   218k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 108k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   108k|            return result_type{it, 0};
 6174|   218k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   109k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6185|  10.1k|    {
 6186|  10.1k|        const bool need_skipped_width =
 6187|  10.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 10.1k]
  |  Branch (6187:33): [True: 0, False: 10.1k]
  ------------------
 6188|  10.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|  10.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 10.1k]
  ------------------
 6191|  10.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 10.1k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|  10.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 10.1k, False: 0]
  ------------------
 6200|  10.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 10.1k]
  ------------------
 6201|  10.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|  10.1k|        return result_type{rng.begin(), 0};
 6225|  10.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6295|  18.3k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  18.3k|            auto rd = make_reader<T, char_type>();
 6301|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  18.3k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  18.3k|    {
 6231|  18.3k|        const bool need_skipped_width =
 6232|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.3k]
  |  Branch (6232:33): [True: 0, False: 18.3k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.3k|        auto it = rng.begin();
 6236|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.3k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.3k|        else {
 6245|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 258, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    258|    }                                                  \
  |  |  |  | 3957|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6247|  18.0k|        }
 6248|  18.0k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  18.0k|        std::ptrdiff_t value_width = 0;
 6252|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 18.0k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  18.0k|        else {
 6268|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.81k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.81k|                                             specs, value, loc));
 6270|       |
 6271|  1.81k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.81k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.81k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.81k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.81k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.70k, False: 110]
  ------------------
 6281|  1.70k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.70k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.70k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.70k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.70k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.70k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.70k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.70k|                                 value_width));
 6285|  1.70k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.70k|        }
 6287|       |
 6288|  1.81k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.81k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.81k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.81k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.81k|        return it;
 6291|  1.81k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIxEENS0_13scan_expectedIS9_EERT_:
 6295|  18.4k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  18.4k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  18.4k|            auto rd = make_reader<T, char_type>();
 6301|  18.4k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  18.4k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_xEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  18.4k|    {
 6231|  18.4k|        const bool need_skipped_width =
 6232|  18.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.4k]
  |  Branch (6232:33): [True: 0, False: 18.4k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.4k|        auto it = rng.begin();
 6236|  18.4k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.4k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.4k|        else {
 6245|  18.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 258, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    258|    }                                                  \
  |  |  |  | 3957|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  18.1k|            std::tie(it, prefix_width) = prefix_result;
 6247|  18.1k|        }
 6248|  18.1k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  18.1k|        std::ptrdiff_t value_width = 0;
 6252|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 18.1k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  18.1k|        else {
 6268|  18.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.89k|                                             specs, value, loc));
 6270|       |
 6271|  1.89k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.89k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.89k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.89k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.89k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.78k, False: 110]
  ------------------
 6281|  1.78k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.78k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.78k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.78k|                                 value_width));
 6285|  1.78k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.78k|        }
 6287|       |
 6288|  1.89k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.89k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.89k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.89k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.89k|        return it;
 6291|  1.89k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIhEENS0_13scan_expectedIS9_EERT_:
 6295|  18.1k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  18.1k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  18.1k|            auto rd = make_reader<T, char_type>();
 6301|  18.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  18.1k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_hEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  18.1k|    {
 6231|  18.1k|        const bool need_skipped_width =
 6232|  18.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.1k]
  |  Branch (6232:33): [True: 0, False: 18.1k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.1k|        auto it = rng.begin();
 6236|  18.1k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.1k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.1k|        else {
 6245|  18.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 220, False: 17.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    220|    }                                                  \
  |  |  |  | 3957|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  17.9k|            std::tie(it, prefix_width) = prefix_result;
 6247|  17.9k|        }
 6248|  17.9k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  17.9k|        std::ptrdiff_t value_width = 0;
 6252|  17.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 17.9k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  17.9k|        else {
 6268|  17.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  17.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  17.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.68k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  17.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.68k|                                             specs, value, loc));
 6270|       |
 6271|  1.68k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.68k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.68k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.68k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.68k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.61k, False: 72]
  ------------------
 6281|  1.61k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.61k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.61k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.61k|                                 value_width));
 6285|  1.61k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.61k|        }
 6287|       |
 6288|  1.68k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.68k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.68k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.68k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.68k|        return it;
 6291|  1.68k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6295|  18.2k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  18.2k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  18.2k|            auto rd = make_reader<T, char_type>();
 6301|  18.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  18.2k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  18.2k|    {
 6231|  18.2k|        const bool need_skipped_width =
 6232|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.2k]
  |  Branch (6232:33): [True: 0, False: 18.2k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.2k|        auto it = rng.begin();
 6236|  18.2k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.2k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.2k|        else {
 6245|  18.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 220, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    220|    }                                                  \
  |  |  |  | 3957|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6247|  18.0k|        }
 6248|  18.0k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  18.0k|        std::ptrdiff_t value_width = 0;
 6252|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 18.0k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  18.0k|        else {
 6268|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.73k|                                             specs, value, loc));
 6270|       |
 6271|  1.73k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.73k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.73k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.73k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.73k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.66k, False: 72]
  ------------------
 6281|  1.66k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.66k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.66k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.66k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.66k|                                 value_width));
 6285|  1.66k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.66k|        }
 6287|       |
 6288|  1.73k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.73k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.73k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.73k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.73k|        return it;
 6291|  1.73k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIyEENS0_13scan_expectedIS9_EERT_:
 6295|  18.3k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  18.3k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  18.3k|            auto rd = make_reader<T, char_type>();
 6301|  18.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  18.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|  18.3k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  18.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_yEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  18.3k|    {
 6231|  18.3k|        const bool need_skipped_width =
 6232|  18.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 18.3k]
  |  Branch (6232:33): [True: 0, False: 18.3k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  18.3k|        auto it = rng.begin();
 6236|  18.3k|        std::ptrdiff_t prefix_width = 0;
 6237|  18.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 18.3k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  18.3k|        else {
 6245|  18.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 220, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    220|    }                                                  \
  |  |  |  | 3957|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  18.0k|            std::tie(it, prefix_width) = prefix_result;
 6247|  18.0k|        }
 6248|  18.0k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  18.0k|        std::ptrdiff_t value_width = 0;
 6252|  18.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 18.0k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  18.0k|        else {
 6268|  18.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 16.2k, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  16.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  16.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  16.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  16.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  16.2k|    }                                                  \
  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.79k|                                             specs, value, loc));
 6270|       |
 6271|  1.79k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 1.79k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  1.79k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.79k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.79k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.72k, False: 72]
  ------------------
 6281|  1.72k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.72k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.72k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.72k|                                 value_width));
 6285|  1.72k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.72k|        }
 6287|       |
 6288|  1.79k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.79k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  1.79k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.79k|        return it;
 6291|  1.79k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIaEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  4.23k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  4.23k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  4.23k|            auto rd = make_reader<T, char_type>();
 5989|  4.23k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 4.23k, False: 0]
  ------------------
 5990|  4.23k|                return impl(rd, range, value);
 5991|  4.23k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.23k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  4.23k|    {
 5972|  4.23k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 60, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     60|    }                                                  \
  |  |  |  | 3957|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.17k|                        .transform_error(make_eof_scan_error));
 5974|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.23k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5891|  25.4k|{
 5892|  25.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 123, False: 25.3k]
  |  |  ------------------
  ------------------
 5893|    123|        return unexpected(e);
 5894|    123|    }
 5895|       |
 5896|  25.3k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 25.3k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|  25.3k|    return skip_classic_whitespace(range);
 5901|  25.3k|}
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  4.17k|    {
 3619|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.17k|        return read_default_with_base(range, value, 10);
 3621|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  4.17k|    {
 3583|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.17k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.17k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  4.31k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.02k, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.02k|    }                                                  \
  |  |  |  | 3957|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  4.31k|                parse_integer_digits_without_thsep(
 3602|  4.31k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  4.31k|                    prefix_result.parsed_base));
 3604|       |
 3605|  4.31k|        auto buf = make_contiguous_buffer(
 3606|  4.31k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  4.31k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    141|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    141|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    141|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    141|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 39, False: 102]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     39|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     39|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     39|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     39|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     39|    }                                                  \
  |  |  |  | 3957|    141|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    102|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    102|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    102|                                    prefix_result.parsed_base));
 3610|       |
 3611|    102|        return ranges::next(prefix_result.iterator,
 3612|    102|                            ranges::distance(buf.view().begin(), result_it));
 3613|  4.31k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIiEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  4.25k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  4.25k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  4.25k|            auto rd = make_reader<T, char_type>();
 5989|  4.25k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 4.25k, False: 0]
  ------------------
 5990|  4.25k|                return impl(rd, range, value);
 5991|  4.25k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  4.25k|    {
 5972|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 63, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     63|    }                                                  \
  |  |  |  | 3957|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.19k|                        .transform_error(make_eof_scan_error));
 5974|  4.19k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  4.19k|    {
 3619|  4.19k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.19k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.19k|        return read_default_with_base(range, value, 10);
 3621|  4.19k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  4.19k|    {
 3583|  4.19k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.19k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  4.19k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.19k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  4.33k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.04k, False: 144]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.04k|    }                                                  \
  |  |  |  | 3957|  4.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  4.33k|                parse_integer_digits_without_thsep(
 3602|  4.33k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  4.33k|                    prefix_result.parsed_base));
 3604|       |
 3605|  4.33k|        auto buf = make_contiguous_buffer(
 3606|  4.33k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  4.33k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    144|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    144|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    144|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    144|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 18, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     18|    }                                                  \
  |  |  |  | 3957|    144|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    126|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    126|                                    prefix_result.parsed_base));
 3610|       |
 3611|    126|        return ranges::next(prefix_result.iterator,
 3612|    126|                            ranges::distance(buf.view().begin(), result_it));
 3613|  4.33k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIxEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  4.28k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  4.28k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  4.28k|            auto rd = make_reader<T, char_type>();
 5989|  4.28k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 4.28k, False: 0]
  ------------------
 5990|  4.28k|                return impl(rd, range, value);
 5991|  4.28k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.28k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  4.28k|    {
 5972|  4.28k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 63, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     63|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     63|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     63|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     63|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     63|    }                                                  \
  |  |  |  | 3957|  4.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.22k|                        .transform_error(make_eof_scan_error));
 5974|  4.22k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.28k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  4.22k|    {
 3619|  4.22k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.22k|        return read_default_with_base(range, value, 10);
 3621|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  4.22k|    {
 3583|  4.22k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.22k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  4.22k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.22k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  4.38k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.06k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.06k|    }                                                  \
  |  |  |  | 3957|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  4.38k|                parse_integer_digits_without_thsep(
 3602|  4.38k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  4.38k|                    prefix_result.parsed_base));
 3604|       |
 3605|  4.38k|        auto buf = make_contiguous_buffer(
 3606|  4.38k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  4.38k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    159|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    159|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    159|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    159|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    159|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    159|                                    prefix_result.parsed_base));
 3610|       |
 3611|    159|        return ranges::next(prefix_result.iterator,
 3612|    159|                            ranges::distance(buf.view().begin(), result_it));
 3613|  4.38k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIhEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  4.20k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  4.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  4.20k|            auto rd = make_reader<T, char_type>();
 5989|  4.20k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 4.20k, False: 0]
  ------------------
 5990|  4.20k|                return impl(rd, range, value);
 5991|  4.20k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.20k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  4.20k|    {
 5972|  4.20k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 51, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     51|    }                                                  \
  |  |  |  | 3957|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.15k|                        .transform_error(make_eof_scan_error));
 5974|  4.15k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  4.15k|    {
 3619|  4.15k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.15k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.15k|        return read_default_with_base(range, value, 10);
 3621|  4.15k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  4.15k|    {
 3583|  4.15k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.15k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  4.15k|        if constexpr (!std::is_signed_v<T>) {
 3587|  4.15k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 51, False: 4.10k]
  ------------------
 3588|     51|                return detail::unexpected_scan_error(
 3589|     51|                    scan_error::invalid_scanned_value,
 3590|     51|                    "Unexpected '-' sign when parsing an "
 3591|     51|                    "unsigned value");
 3592|     51|            }
 3593|  4.15k|        }
 3594|       |
 3595|  4.15k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.15k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  4.32k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.15k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.15k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.15k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3.99k, False: 165]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  3.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  3.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  3.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  3.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  3.99k|    }                                                  \
  |  |  |  | 3957|  4.15k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    165|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  4.32k|                parse_integer_digits_without_thsep(
 3602|  4.32k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  4.32k|                    prefix_result.parsed_base));
 3604|       |
 3605|  4.32k|        auto buf = make_contiguous_buffer(
 3606|  4.32k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  4.32k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    165|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    165|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    165|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    165|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 33, False: 132]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     33|    }                                                  \
  |  |  |  | 3957|    165|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    132|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    132|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    132|                                    prefix_result.parsed_base));
 3610|       |
 3611|    132|        return ranges::next(prefix_result.iterator,
 3612|    132|                            ranges::distance(buf.view().begin(), result_it));
 3613|  4.32k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIjEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  4.22k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  4.22k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  4.22k|            auto rd = make_reader<T, char_type>();
 5989|  4.22k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 4.22k, False: 0]
  ------------------
 5990|  4.22k|                return impl(rd, range, value);
 5991|  4.22k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.22k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  4.22k|    {
 5972|  4.22k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 51, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     51|    }                                                  \
  |  |  |  | 3957|  4.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.17k|                        .transform_error(make_eof_scan_error));
 5974|  4.17k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.22k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  4.17k|    {
 3619|  4.17k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.17k|        return read_default_with_base(range, value, 10);
 3621|  4.17k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  4.17k|    {
 3583|  4.17k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.17k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  4.17k|        if constexpr (!std::is_signed_v<T>) {
 3587|  4.17k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 51, False: 4.12k]
  ------------------
 3588|     51|                return detail::unexpected_scan_error(
 3589|     51|                    scan_error::invalid_scanned_value,
 3590|     51|                    "Unexpected '-' sign when parsing an "
 3591|     51|                    "unsigned value");
 3592|     51|            }
 3593|  4.17k|        }
 3594|       |
 3595|  4.17k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.17k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  4.34k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.00k, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.00k|    }                                                  \
  |  |  |  | 3957|  4.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  4.34k|                parse_integer_digits_without_thsep(
 3602|  4.34k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  4.34k|                    prefix_result.parsed_base));
 3604|       |
 3605|  4.34k|        auto buf = make_contiguous_buffer(
 3606|  4.34k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  4.34k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 18, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     18|    }                                                  \
  |  |  |  | 3957|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    150|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    150|                                    prefix_result.parsed_base));
 3610|       |
 3611|    150|        return ranges::next(prefix_result.iterator,
 3612|    150|                            ranges::distance(buf.view().begin(), result_it));
 3613|  4.34k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIyEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  4.25k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  4.25k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  4.25k|            auto rd = make_reader<T, char_type>();
 5989|  4.25k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 4.25k, False: 0]
  ------------------
 5990|  4.25k|                return impl(rd, range, value);
 5991|  4.25k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  4.25k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  4.25k|    {
 5972|  4.25k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  4.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 51, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     51|    }                                                  \
  |  |  |  | 3957|  4.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  4.20k|                        .transform_error(make_eof_scan_error));
 5974|  4.20k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  4.25k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3618|  4.20k|    {
 3619|  4.20k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  4.20k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  4.20k|        return read_default_with_base(range, value, 10);
 3621|  4.20k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3582|  4.20k|    {
 3583|  4.20k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  4.20k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  4.20k|        if constexpr (!std::is_signed_v<T>) {
 3587|  4.20k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 57, False: 4.14k]
  ------------------
 3588|     57|                return detail::unexpected_scan_error(
 3589|     57|                    scan_error::invalid_scanned_value,
 3590|     57|                    "Unexpected '-' sign when parsing an "
 3591|     57|                    "unsigned value");
 3592|     57|            }
 3593|  4.20k|        }
 3594|       |
 3595|  4.20k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 4.20k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  4.38k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  4.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.02k, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.02k|    }                                                  \
  |  |  |  | 3957|  4.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  4.38k|                parse_integer_digits_without_thsep(
 3602|  4.38k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  4.38k|                    prefix_result.parsed_base));
 3604|       |
 3605|  4.38k|        auto buf = make_contiguous_buffer(
 3606|  4.38k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  4.38k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    180|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    180|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|    180|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|    180|                                    prefix_result.parsed_base));
 3610|       |
 3611|    180|        return ranges::next(prefix_result.iterator,
 3612|    180|                            ranges::distance(buf.view().begin(), result_it));
 3613|  4.38k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  15.4k|    {
 3583|  15.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  15.4k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  15.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 15.4k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  30.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 45, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     45|    }                                                  \
  |  |  |  | 3957|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  30.9k|                parse_integer_digits_without_thsep(
 3602|  30.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  30.9k|                    prefix_result.parsed_base));
 3604|       |
 3605|  30.9k|        auto buf = make_contiguous_buffer(
 3606|  30.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  30.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  15.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  15.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  15.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.62k, False: 13.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.62k|    }                                                  \
  |  |  |  | 3957|  15.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  13.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  13.8k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  13.8k|        return ranges::next(prefix_result.iterator,
 3612|  13.8k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  30.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  17.8k|    {
 3583|  17.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  17.8k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  17.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 17.8k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  35.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 69, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     69|    }                                                  \
  |  |  |  | 3957|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  35.6k|                parse_integer_digits_without_thsep(
 3602|  35.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  35.6k|                    prefix_result.parsed_base));
 3604|       |
 3605|  35.6k|        auto buf = make_contiguous_buffer(
 3606|  35.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  35.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.49k, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.49k|    }                                                  \
  |  |  |  | 3957|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  16.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  16.2k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  16.2k|        return ranges::next(prefix_result.iterator,
 3612|  16.2k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  35.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  18.1k|    {
 3583|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  18.1k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 18.1k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  36.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 81, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     81|    }                                                  \
  |  |  |  | 3957|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  36.1k|                parse_integer_digits_without_thsep(
 3602|  36.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  36.1k|                    prefix_result.parsed_base));
 3604|       |
 3605|  36.1k|        auto buf = make_contiguous_buffer(
 3606|  36.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  36.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.43k, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.43k|    }                                                  \
  |  |  |  | 3957|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  16.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  16.6k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  16.6k|        return ranges::next(prefix_result.iterator,
 3612|  16.6k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  36.1k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  12.9k|    {
 3583|  12.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  12.9k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  12.9k|        if constexpr (!std::is_signed_v<T>) {
 3587|  12.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 759, False: 12.2k]
  ------------------
 3588|    759|                return detail::unexpected_scan_error(
 3589|    759|                    scan_error::invalid_scanned_value,
 3590|    759|                    "Unexpected '-' sign when parsing an "
 3591|    759|                    "unsigned value");
 3592|    759|            }
 3593|  12.9k|        }
 3594|       |
 3595|  12.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 12.9k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  25.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  25.9k|                parse_integer_digits_without_thsep(
 3602|  25.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  25.9k|                    prefix_result.parsed_base));
 3604|       |
 3605|  25.9k|        auto buf = make_contiguous_buffer(
 3606|  25.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  25.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.01k, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.01k|    }                                                  \
  |  |  |  | 3957|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  11.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  11.9k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  11.9k|        return ranges::next(prefix_result.iterator,
 3612|  11.9k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  25.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  14.2k|    {
 3583|  14.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  14.2k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  14.2k|        if constexpr (!std::is_signed_v<T>) {
 3587|  14.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 786, False: 13.4k]
  ------------------
 3588|    786|                return detail::unexpected_scan_error(
 3589|    786|                    scan_error::invalid_scanned_value,
 3590|    786|                    "Unexpected '-' sign when parsing an "
 3591|    786|                    "unsigned value");
 3592|    786|            }
 3593|  14.2k|        }
 3594|       |
 3595|  14.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 14.2k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  28.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  28.4k|                parse_integer_digits_without_thsep(
 3602|  28.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  28.4k|                    prefix_result.parsed_base));
 3604|       |
 3605|  28.4k|        auto buf = make_contiguous_buffer(
 3606|  28.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  28.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 924, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    924|    }                                                  \
  |  |  |  | 3957|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  13.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  13.2k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  13.2k|        return ranges::next(prefix_result.iterator,
 3612|  13.2k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  28.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|  14.3k|    {
 3583|  14.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  14.3k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  14.3k|        if constexpr (!std::is_signed_v<T>) {
 3587|  14.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 816, False: 13.5k]
  ------------------
 3588|    816|                return detail::unexpected_scan_error(
 3589|    816|                    scan_error::invalid_scanned_value,
 3590|    816|                    "Unexpected '-' sign when parsing an "
 3591|    816|                    "unsigned value");
 3592|    816|            }
 3593|  14.3k|        }
 3594|       |
 3595|  14.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 14.3k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  28.7k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  28.7k|                parse_integer_digits_without_thsep(
 3602|  28.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  28.7k|                    prefix_result.parsed_base));
 3604|       |
 3605|  28.7k|        auto buf = make_contiguous_buffer(
 3606|  28.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  28.7k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 867, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    867|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    867|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    867|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    867|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    867|    }                                                  \
  |  |  |  | 3957|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  13.4k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  13.4k|        return ranges::next(prefix_result.iterator,
 3612|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  28.7k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    688|{
   53|    688|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1104|    688|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    688|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    688|    string_buffer.resize(size);
   57|    688|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    688|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    688|    const auto wsv_reinterpret_size =
   62|    688|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 103, False: 585]
  ------------------
   63|    688|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    688|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    688|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    688|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    688|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    688|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    688|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    688|{
  123|    688|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    688|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    688|    buf.resize(sizeof...(Args));
  126|    688|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    688|    return buf;
  128|    688|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    688|{
  109|    688|    if constexpr (std::is_same_v<CharT, char>) {
  110|    688|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    688|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    688|{
  186|    688|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    688|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    688|                                   format_strings);
  189|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  33.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  33.9k|            auto result = scn::scan<T>(
  140|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  33.9k|                scn::runtime_format(f));
  142|  33.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 27.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  27.0k|            it = result->begin();
  146|  27.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  33.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  33.9k|            auto result = scn::scan<T>(
  155|  33.9k|                global_locale,
  156|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.9k|                scn::runtime_format(f));
  158|  33.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 27.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  27.0k|            it = result->begin();
  162|  27.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.29k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.29k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  5.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.29k|            auto result = scn::scan_value<T>(
  171|  5.29k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.29k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.60k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.60k|            it = result->begin();
  176|  4.60k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  29.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  29.9k|            auto result = scn::scan<T>(
  140|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  29.9k|                scn::runtime_format(f));
  142|  29.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 23.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  23.0k|            it = result->begin();
  146|  23.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  29.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  29.9k|            auto result = scn::scan<T>(
  155|  29.9k|                global_locale,
  156|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  29.9k|                scn::runtime_format(f));
  158|  29.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 23.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  23.0k|            it = result->begin();
  162|  23.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  4.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.41k|            auto result = scn::scan_value<T>(
  171|  4.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 3.72k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  3.72k|            it = result->begin();
  176|  3.72k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  39.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  39.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  39.7k|            auto result = scn::scan<T>(
  140|  39.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  39.7k|                scn::runtime_format(f));
  142|  39.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 32.8k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  32.8k|            it = result->begin();
  146|  32.8k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  39.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  39.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  39.7k|            auto result = scn::scan<T>(
  155|  39.7k|                global_locale,
  156|  39.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.7k|                scn::runtime_format(f));
  158|  39.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 32.8k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  32.8k|            it = result->begin();
  162|  32.8k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.11k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.11k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  6.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.11k|            auto result = scn::scan_value<T>(
  171|  6.11k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.11k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.42k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.42k|            it = result->begin();
  176|  5.42k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.4k|            auto result = scn::scan<T>(
  140|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.4k|                scn::runtime_format(f));
  142|  32.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.5k|            it = result->begin();
  146|  25.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.4k|            auto result = scn::scan<T>(
  155|  32.4k|                global_locale,
  156|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.4k|                scn::runtime_format(f));
  158|  32.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.5k|            it = result->begin();
  162|  25.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.85k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.85k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  4.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.85k|            auto result = scn::scan_value<T>(
  171|  4.85k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.85k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.16k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.16k|            it = result->begin();
  176|  4.16k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  40.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.4k|            auto result = scn::scan<T>(
  140|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.4k|                scn::runtime_format(f));
  142|  40.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 33.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  33.5k|            it = result->begin();
  146|  33.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  40.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.4k|            auto result = scn::scan<T>(
  155|  40.4k|                global_locale,
  156|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.4k|                scn::runtime_format(f));
  158|  40.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 33.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  33.5k|            it = result->begin();
  162|  33.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.22k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.22k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  6.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.22k|            auto result = scn::scan_value<T>(
  171|  6.22k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.22k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.54k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.54k|            it = result->begin();
  176|  5.54k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.7k|            auto result = scn::scan<T>(
  140|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.7k|                scn::runtime_format(f));
  142|  32.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.8k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.8k|            it = result->begin();
  146|  25.8k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.7k|            auto result = scn::scan<T>(
  155|  32.7k|                global_locale,
  156|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.7k|                scn::runtime_format(f));
  158|  32.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.8k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.8k|            it = result->begin();
  162|  25.8k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.91k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.91k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  4.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.91k|            auto result = scn::scan_value<T>(
  171|  4.91k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.91k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.22k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.22k|            it = result->begin();
  176|  4.22k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  33.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  33.9k|            auto result = scn::scan<T>(
  140|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  33.9k|                scn::runtime_format(f));
  142|  33.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 27.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  27.0k|            it = result->begin();
  146|  27.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  33.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  33.9k|            auto result = scn::scan<T>(
  155|  33.9k|                global_locale,
  156|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  33.9k|                scn::runtime_format(f));
  158|  33.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 27.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  27.0k|            it = result->begin();
  162|  27.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.28k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.28k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  5.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.28k|            auto result = scn::scan_value<T>(
  171|  5.28k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.28k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.60k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.60k|            it = result->begin();
  176|  4.60k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  29.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  29.9k|            auto result = scn::scan<T>(
  140|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  29.9k|                scn::runtime_format(f));
  142|  29.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 23.0k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  23.0k|            it = result->begin();
  146|  23.0k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  29.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  29.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  29.9k|            auto result = scn::scan<T>(
  155|  29.9k|                global_locale,
  156|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  29.9k|                scn::runtime_format(f));
  158|  29.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 23.0k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  23.0k|            it = result->begin();
  162|  23.0k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  4.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.40k|            auto result = scn::scan_value<T>(
  171|  4.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 3.71k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  3.71k|            it = result->begin();
  176|  3.71k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  39.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  39.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  39.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  39.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  39.6k|            auto result = scn::scan<T>(
  140|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  39.6k|                scn::runtime_format(f));
  142|  39.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 32.7k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  32.7k|            it = result->begin();
  146|  32.7k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  39.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  39.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  39.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  39.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  39.6k|            auto result = scn::scan<T>(
  155|  39.6k|                global_locale,
  156|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  39.6k|                scn::runtime_format(f));
  158|  39.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 32.7k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  32.7k|            it = result->begin();
  162|  32.7k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  5.92k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  5.92k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  5.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  5.92k|            auto result = scn::scan_value<T>(
  171|  5.92k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  5.92k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.23k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.23k|            it = result->begin();
  176|  5.23k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.4k|            auto result = scn::scan<T>(
  140|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.4k|                scn::runtime_format(f));
  142|  32.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.5k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.5k|            it = result->begin();
  146|  25.5k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.4k|            auto result = scn::scan<T>(
  155|  32.4k|                global_locale,
  156|  32.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.4k|                scn::runtime_format(f));
  158|  32.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.5k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.5k|            it = result->begin();
  162|  25.5k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.83k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.83k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  4.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.83k|            auto result = scn::scan_value<T>(
  171|  4.83k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.83k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.14k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.14k|            it = result->begin();
  176|  4.14k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  40.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.3k|            auto result = scn::scan<T>(
  140|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.3k|                scn::runtime_format(f));
  142|  40.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 33.4k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  33.4k|            it = result->begin();
  146|  33.4k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  40.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.3k|            auto result = scn::scan<T>(
  155|  40.3k|                global_locale,
  156|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.3k|                scn::runtime_format(f));
  158|  40.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 33.4k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  33.4k|            it = result->begin();
  162|  33.4k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  6.02k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  6.02k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  6.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  6.02k|            auto result = scn::scan_value<T>(
  171|  6.02k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  6.02k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 5.33k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  5.33k|            it = result->begin();
  176|  5.33k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|    688|{
  134|       |    // Regular scan
  135|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 6.88k, False: 688]
  ------------------
  136|  6.88k|        auto it = scn::ranges::begin(source);
  137|  32.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  32.8k|            auto result = scn::scan<T>(
  140|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  32.8k|                scn::runtime_format(f));
  142|  32.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 6.88k, False: 25.9k]
  ------------------
  143|  6.88k|                break;
  144|  6.88k|            }
  145|  25.9k|            it = result->begin();
  146|  25.9k|        }
  147|  6.88k|    }
  148|       |
  149|       |    // scan localized
  150|  6.88k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 6.88k, False: 688]
  ------------------
  151|  6.88k|        auto it = scn::ranges::begin(source);
  152|  32.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  32.8k|            auto result = scn::scan<T>(
  155|  32.8k|                global_locale,
  156|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  32.8k|                scn::runtime_format(f));
  158|  32.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 6.88k, False: 25.9k]
  ------------------
  159|  6.88k|                break;
  160|  6.88k|            }
  161|  25.9k|            it = result->begin();
  162|  25.9k|        }
  163|  6.88k|    }
  164|       |
  165|       |    // scan_value
  166|    688|    {
  167|    688|        auto it = scn::ranges::begin(source);
  168|  4.89k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  4.89k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  4.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  4.89k|            auto result = scn::scan_value<T>(
  171|  4.89k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  4.89k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 688, False: 4.20k]
  ------------------
  173|    688|                break;
  174|    688|            }
  175|  4.20k|            it = result->begin();
  176|  4.20k|        }
  177|    688|    }
  178|    688|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    688|{
   91|    688|    using char_type = ranges::range_value_t<Source>;
   92|    688|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    688|    deque.clear();
   94|    688|    std::copy(ranges::begin(source), ranges::end(source),
   95|    688|              std::back_inserter(deque));
   96|    688|    return deque;
   97|    688|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    688|{
   80|    688|    if constexpr (std::is_same_v<CharT, char>) {
   81|    688|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    688|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    688|{
  123|    688|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    688|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    688|    buf.resize(sizeof...(Args));
  126|    688|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    688|    return buf;
  128|    688|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    688|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    688|    else {
  113|    688|        return wformat_string_view_buffer;
  114|    688|    }
  115|    688|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.37k|{
  186|  1.37k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.37k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.37k|                                   format_strings);
  189|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 904]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    904|            it = result->begin();
  146|    904|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 904]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    904|            it = result->begin();
  162|    904|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 34]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     34|            it = result->begin();
  176|     34|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 870]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    870|            it = result->begin();
  146|    870|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 870]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    870|            it = result->begin();
  162|    870|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 27]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     27|            it = result->begin();
  176|     27|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 947]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    947|            it = result->begin();
  146|    947|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 947]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    947|            it = result->begin();
  162|    947|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 42]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     42|            it = result->begin();
  176|     42|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 899]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    899|            it = result->begin();
  146|    899|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 899]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    899|            it = result->begin();
  162|    899|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 33]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     33|            it = result->begin();
  176|     33|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 1.00k]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|  1.00k|            it = result->begin();
  146|  1.00k|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 1.00k]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|  1.00k|            it = result->begin();
  162|  1.00k|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 53]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     53|            it = result->begin();
  176|     53|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 940]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    940|            it = result->begin();
  146|    940|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 940]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    940|            it = result->begin();
  162|    940|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 41]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     41|            it = result->begin();
  176|     41|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 904]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    904|            it = result->begin();
  146|    904|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 904]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    904|            it = result->begin();
  162|    904|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 34]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     34|            it = result->begin();
  176|     34|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 870]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    870|            it = result->begin();
  146|    870|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 870]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    870|            it = result->begin();
  162|    870|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 27]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     27|            it = result->begin();
  176|     27|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 947]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    947|            it = result->begin();
  146|    947|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 947]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    947|            it = result->begin();
  162|    947|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 42]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     42|            it = result->begin();
  176|     42|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.6k|            auto result = scn::scan<T>(
  140|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.6k|                scn::runtime_format(f));
  142|  14.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 899]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    899|            it = result->begin();
  146|    899|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.6k|            auto result = scn::scan<T>(
  155|  14.6k|                global_locale,
  156|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.6k|                scn::runtime_format(f));
  158|  14.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 899]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    899|            it = result->begin();
  162|    899|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.40k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.40k|            auto result = scn::scan_value<T>(
  171|  1.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.40k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 33]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     33|            it = result->begin();
  176|     33|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 1.00k]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|  1.00k|            it = result->begin();
  146|  1.00k|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 1.00k]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|  1.00k|            it = result->begin();
  162|  1.00k|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.42k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.42k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.42k|            auto result = scn::scan_value<T>(
  171|  1.42k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.42k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 53]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     53|            it = result->begin();
  176|     53|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.37k|{
  134|       |    // Regular scan
  135|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.7k, False: 1.37k]
  ------------------
  136|  13.7k|        auto it = scn::ranges::begin(source);
  137|  14.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.7k|            auto result = scn::scan<T>(
  140|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  14.7k|                scn::runtime_format(f));
  142|  14.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.7k, False: 940]
  ------------------
  143|  13.7k|                break;
  144|  13.7k|            }
  145|    940|            it = result->begin();
  146|    940|        }
  147|  13.7k|    }
  148|       |
  149|       |    // scan localized
  150|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.7k, False: 1.37k]
  ------------------
  151|  13.7k|        auto it = scn::ranges::begin(source);
  152|  14.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  14.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  14.7k|            auto result = scn::scan<T>(
  155|  14.7k|                global_locale,
  156|  14.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  14.7k|                scn::runtime_format(f));
  158|  14.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.7k, False: 940]
  ------------------
  159|  13.7k|                break;
  160|  13.7k|            }
  161|    940|            it = result->begin();
  162|    940|        }
  163|  13.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.37k|    {
  167|  1.37k|        auto it = scn::ranges::begin(source);
  168|  1.41k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.41k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.41k|            auto result = scn::scan_value<T>(
  171|  1.41k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.41k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.37k, False: 41]
  ------------------
  173|  1.37k|                break;
  174|  1.37k|            }
  175|     41|            it = result->begin();
  176|     41|        }
  177|  1.37k|    }
  178|  1.37k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.37k|{
   91|  1.37k|    using char_type = ranges::range_value_t<Source>;
   92|  1.37k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.37k|    deque.clear();
   94|  1.37k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.37k|              std::back_inserter(deque));
   96|  1.37k|    return deque;
   97|  1.37k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.37k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.37k|    else {
   84|  1.37k|        return wnoncontiguous_buffer;
   85|  1.37k|    }
   86|  1.37k|}

LLVMFuzzerTestOneInput:
   59|    688|{
   60|    688|    scn::fuzz::run(data, size);
   61|    688|    return 0;
   62|    688|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    688|{
   36|    688|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 688]
  |  Branch (36:35): [True: 0, False: 688]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|    688|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    688|    const auto& f =
   43|    688|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|    688|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|    688|    do_basic_run(sv, f);
   46|       |
   47|    688|    const auto& wf = get_format_strings<wchar_t>(
   48|    688|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|    688|        L"{:'}", L"{:'L}");
   50|    688|    do_basic_run(wsv_reinterpret, wf);
   51|    688|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 688, False: 0]
  ------------------
   52|    688|        do_basic_run(wsv_transcode, wf);
   53|    688|    }
   54|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    688|{
   25|    688|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    688|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    688|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    688|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    688|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    688|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    688|{
   25|    688|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    688|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    688|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    688|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    688|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    688|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    688|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.37k|{
   25|  1.37k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.37k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.37k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.37k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.37k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.37k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.37k|{
   25|  1.37k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.37k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.37k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.37k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.37k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.37k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.37k|}

