_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  85.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  85.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|   881k|{
 3803|   881k|    if constexpr (sizeof(U) == 1) {
 3804|   881k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|   881k|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|   881k|{
 3767|   881k|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|   881k|    SCN_GCC_COMPAT_PUSH
 3770|   881k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|   881k|    constexpr char lengths[] =
 3772|   881k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|   881k|        "\1\1\1\1\1\1\1\1"
 3774|   881k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|   881k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|   881k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|   881k|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|   881k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|   881k|    SCN_GCC_COMPAT_POP
 3781|   881k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   863k|{
 4009|   863k|    if constexpr (sizeof(CharT) == 1) {
 4010|   863k|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|   863k|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|   863k|{
 3822|   863k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   863k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   863k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|   863k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   863k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   863k|    };
 3827|       |
 3828|   863k|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 853k, False: 9.36k]
  ------------------
 3829|   853k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 1.07k, False: 852k]
  ------------------
 3830|  1.07k|            SCN_UNLIKELY_ATTR
 3831|  1.07k|            return invalid_code_point;
 3832|  1.07k|        }
 3833|   852k|        return static_cast<char32_t>(input[0]);
 3834|   853k|    }
 3835|       |
 3836|  9.36k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 4.06k, False: 5.29k]
  ------------------
 3837|  4.06k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 44, False: 4.02k]
  ------------------
 3838|     44|            SCN_UNLIKELY_ATTR
 3839|     44|            return invalid_code_point;
 3840|     44|        }
 3841|  4.02k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 782, False: 3.23k]
  ------------------
 3842|    782|            SCN_UNLIKELY_ATTR
 3843|    782|            return invalid_code_point;
 3844|    782|        }
 3845|       |
 3846|  3.23k|        char32_t cp{};
 3847|  3.23k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  3.23k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  3.23k|        return cp;
 3850|  4.02k|    }
 3851|       |
 3852|  5.29k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 4.14k, False: 1.15k]
  ------------------
 3853|  4.14k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 53, False: 4.08k]
  ------------------
 3854|     53|            SCN_UNLIKELY_ATTR
 3855|     53|            return invalid_code_point;
 3856|     53|        }
 3857|  4.08k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 613, False: 3.47k]
  ------------------
 3858|  4.08k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 260, False: 3.21k]
  ------------------
 3859|    873|            SCN_UNLIKELY_ATTR
 3860|    873|            return invalid_code_point;
 3861|    873|        }
 3862|       |
 3863|  3.21k|        char32_t cp{};
 3864|  3.21k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  3.21k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  3.21k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  3.21k|        return cp;
 3868|  4.08k|    }
 3869|       |
 3870|  1.15k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 1.15k, False: 0]
  ------------------
 3871|  1.15k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 1.15k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  1.15k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 263, False: 893]
  ------------------
 3876|    263|            SCN_UNLIKELY_ATTR
 3877|    263|            return invalid_code_point;
 3878|    263|        }
 3879|    893|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 391, False: 502]
  ------------------
 3880|    893|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 13, False: 489]
  ------------------
 3881|    893|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 2, False: 487]
  ------------------
 3882|    406|            SCN_UNLIKELY_ATTR
 3883|    406|            return invalid_code_point;
 3884|    406|        }
 3885|       |
 3886|    487|        char32_t cp{};
 3887|    487|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|    487|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|    487|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|    487|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|    487|        return cp;
 3892|    893|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  13.4k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  13.4k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  13.4k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|   608k|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|   608k|    else {
 3701|   608k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|   608k|                                       to_address(first), to_address(last)))};
 3703|   608k|    }
 3704|   608k|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.83M|{
  326|  1.83M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.83M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  3.95M|{
  304|  3.95M|    return p;
  305|  3.95M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  1.40M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  1.40M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  1.40M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  1.40M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  1.40M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  90.9k|    {
 2724|  90.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  90.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  90.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  90.9k|    {
 2705|  90.9k|        return decay_copy(t.begin());
 2706|  90.9k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  3.65M|{
 1949|  3.65M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.65M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   919k|    {
 2781|   919k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   919k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   919k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   919k|    {
 2763|   919k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   919k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   919k|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  34.6k|{
 8878|  34.6k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  34.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  34.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.6k|    static_cast<    \
  |  |  929|  34.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.6k|    static_cast<    \
  |  |  929|  34.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  34.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDav:
 5405|   138k|{
 5406|   138k|    detail::check_scan_arg_types<Args...>();
 5407|   138k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   138k|}
_ZN3scn2v36detail20check_scan_arg_typesIJaEEEvv:
 5144|   210k|{
 5145|   210k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   210k|                  "Scan argument types must be default constructible");
 5147|   210k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   210k|                  "Scan argument types must be Destructible");
 5149|   210k|    static_assert(
 5150|   210k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   210k|        "Scan argument types must not be references");
 5152|   210k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2Ev:
 5357|   138k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   138k|    {
 5359|   138k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   138k|    {
 5370|   138k|        return {detail::make_arg<
 5371|   138k|            kind, Context,
 5372|   138k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   138k|                                 typename Context::char_type>::value>(args)...};
 5374|   138k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEEPvRT2_:
 5179|   138k|{
 5180|   138k|    return make_value<Context>(value).ref_value;
 5181|   138k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
 5129|   149k|{
 5130|   149k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   149k|                                  needs_context_tag>) {
 5134|   149k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   149k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERa:
 4968|   149k|    {                                                                        \
 4969|   149k|        return val;                                                          \
 4970|   149k|    }
_ZN3scn2v36detail15make_value_implIRaEEDaOT_:
 5098|   210k|{
 5099|   210k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   210k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   210k|    constexpr bool scannable_char =
 5103|   210k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   210k|    static_assert(scannable_char,
 5105|   210k|                  "Cannot scan an argument of an unsupported character "
 5106|   210k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   210k|    constexpr bool scannable_const =
 5109|   210k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   210k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   210k|    constexpr bool scannable_disabled =
 5113|   210k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   210k|    static_assert(scannable_disabled,
 5115|   210k|                  "Cannot scan an argument that has been disabled by "
 5116|   210k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   210k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   210k|    static_assert(
 5120|   210k|        scannable,
 5121|   210k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   210k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   210k|    return arg_value{arg};
 5125|   210k|}
_ZN3scn2v36detail9arg_valueC2IaEERT_:
 4909|   210k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   210k|    {
 4911|   210k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   213k|{
 8665|   213k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   213k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   213k|{
 8602|   213k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   213k|    auto result = vscan_impl(buffer, format, args);
 8605|   213k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.9k, False: 170k]
  |  |  ------------------
  ------------------
 8606|  42.9k|        return unexpected(result.error());
 8607|  42.9k|    }
 8608|   170k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   213k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|   459k|{
 4729|   459k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   459k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   459k|                  "\n"
 4733|   459k|                  "Unsupported range type given as input to a scanning "
 4734|   459k|                  "function.\n"
 4735|   459k|                  "A range needs to have a character type (value type) "
 4736|   459k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   459k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   459k|                  "to be included.\n"
 4739|   459k|                  "See the scnlib documentation for more details.");
 4740|   459k|    static_assert(
 4741|   459k|        !std::is_same_v<T, custom_char_traits>,
 4742|   459k|        "\n"
 4743|   459k|        "Unsupported range type given as input to a scanning "
 4744|   459k|        "function.\n"
 4745|   459k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   459k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   459k|        "not supported.");
 4748|   459k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   459k|                  "\n"
 4750|   459k|                  "Unsupported range type given as input to a scanning "
 4751|   459k|                  "function.\n"
 4752|   459k|                  "file_marker_found cannot be used as an "
 4753|   459k|                  "source range type to scn::scan.\n"
 4754|   459k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   459k|                  "and do not provide an explicit source range, "
 4756|   459k|                  "or use scn::scan with a FILE* directly.");
 4757|   459k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   459k|                  "\n"
 4759|   459k|                  "Unsupported range type given as input to a scanning "
 4760|   459k|                  "function.\n"
 4761|   459k|                  "In order to be scannable, a range needs to satisfy "
 4762|   459k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   459k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   459k|                  "\n"
 4765|   459k|                  "Unsupported range type given as input to a scanning "
 4766|   459k|                  "function.\n"
 4767|   459k|                  "A range needs to model forward_range and have a valid "
 4768|   459k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   459k|                  "Examples of scannable ranges are std::string, "
 4770|   459k|                  "std::string_view, "
 4771|   459k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   459k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   459k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   459k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   459k|{
 4668|   459k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   459k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   459k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   459k|    {
 2855|   459k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   459k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   459k|    {
 2836|   459k|        return t.data();
 2837|   459k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|   459k|    {
 3229|   459k|        return detail::to_address(ranges::begin(derived()));
 3230|   459k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.11M|{
  326|  2.11M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.11M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   828k|    {
 2724|   828k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   828k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   828k|    {
 2705|   828k|        return decay_copy(t.begin());
 2706|   828k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  7.44M|    {
 3326|  7.44M|        return m_iterator;
 3327|  7.44M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   459k|    {
 3185|   459k|        return static_cast<const D&>(*this);
 3186|   459k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   459k|    {
 2930|   459k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   459k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   459k|    {
 2896|   459k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   459k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|   756k|{
 1949|   756k|    return SCN_FWD(t);
  ------------------
  |  |  930|   756k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   756k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  1.55M|    {
 3342|  1.55M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  1.55M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  1.92M|    {
 1598|  1.92M|        return has_value();
 1599|  1.92M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  3.58M|    {
  485|  3.58M|        return m_has_value;
  486|  3.58M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   541k|    {
 1604|   541k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   541k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   541k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   541k|        return this->get_unexpected().error();
 1606|   541k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   541k|    {
  468|   541k|        return m_unexpected;
  469|   541k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  4.64M|    {
  361|  4.64M|        return m_unexpected;
  362|  4.64M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  2.31M|        : m_unexpected(std::forward<Err>(e))
  346|  2.31M|    {
  347|  2.31M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.31M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.31M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  90.2k|        : base(unexpect, std::move(e.error())),
 1474|  90.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  90.2k|    {
 1476|  90.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  90.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  90.2k|          m_has_value(false)
  446|  90.2k|    {
  447|  90.2k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  2.67M|        : m_unexpected(std::forward<Args>(args)...)
  355|  2.67M|    {
  356|  2.67M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.67M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.67M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   459k|    {
 1177|   459k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   369k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   369k|                      ranges::iterator_t<SourceRange>>) {
 5935|   369k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   369k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.45M|    {
 2724|  1.45M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.45M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.45M|    {
 2705|  1.45M|        return decay_copy(t.begin());
 2706|  1.45M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   369k|{
 5920|   369k|    return ranges::end(source);
 5921|   369k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   369k|    {
 2781|   369k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   369k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   369k|    {
 2763|   369k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   369k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  5.68M|    {
 3330|  5.68M|        return m_sentinel;
 3331|  5.68M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  1.11M|    {
 1653|  1.11M|        return value();
 1654|  1.11M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  1.11M|    {
 1627|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.11M|        return this->get_value();
 1629|  1.11M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.11M|    {
  451|  1.11M|        return m_value;
  452|  1.11M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   369k|        : base(std::in_place, std::forward<U>(val)),
 1428|   369k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   369k|    {
 1430|   369k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   369k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   369k|    {
  437|   369k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  69.3k|    {
 7986|  69.3k|        return m_str;
 7987|  69.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   138k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   138k|    {
 5436|   138k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12arg_pointersEv:
 5388|   138k|    {
 5389|   138k|        return m_argptrs;
 5390|   138k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   853k|        : m_desc(desc), m_builtin_values(data)
 5487|   853k|    {
 5488|   853k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  69.3k|{
 8831|  69.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  69.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 55.0k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  55.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.0k|    static_cast<    \
  |  |  929|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.0k|    static_cast<    \
  |  |  929|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  69.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   459k|    {
 1598|   459k|        return has_value();
 1599|   459k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   919k|    {
  485|   919k|        return m_has_value;
  486|   919k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  90.2k|    {
 1604|  90.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  90.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  90.2k|        return this->get_unexpected().error();
 1606|  90.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  90.2k|    {
  468|  90.2k|        return m_unexpected;
  469|  90.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   341k|    {
 1653|   341k|        return value();
 1654|   341k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   369k|    {
 1627|   369k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   369k|        return this->get_value();
 1629|   369k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   369k|    {
  451|   369k|        return m_value;
  452|   369k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5838|  59.7k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  59.7k|    {
 5840|  59.7k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   369k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   369k|    static_cast<    \
  |  |  929|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   369k|    {
 5691|   369k|    }
_ZN3scn2v36detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
 5624|   120k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   120k|    {
 5626|   120k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  59.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  59.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  59.7k|    {
 1430|  59.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  59.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  59.7k|    {
  437|  59.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
 5383|   138k|    {
 5384|   138k|        return m_args;
 5385|   138k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  3.87M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.87M|    static_cast<    \
  |  |  929|  3.87M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.87M|    static_cast<    \
  |  |  929|  3.87M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.87M|    {
 3312|  3.87M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|   853k|{
 7702|   853k|    return s;
 7703|   853k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|   853k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  69.3k|        : m_str(r.str)
 7981|  69.3k|    {
 7982|  69.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  74.7k|    {
 1598|  74.7k|        return has_value();
 1599|  74.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   134k|    {
  485|   134k|        return m_has_value;
  486|   134k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1672|  59.7k|    {
 1673|  59.7k|        return &value();
 1674|  59.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  59.7k|    {
 1627|  59.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  59.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  59.7k|        return this->get_value();
 1629|  59.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  59.7k|    {
  451|  59.7k|        return m_value;
  452|  59.7k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   369k|    {
 5708|   369k|        return ranges::begin(m_range);
 5709|   369k|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  34.6k|{
 8945|  34.6k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  34.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  34.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.6k|    static_cast<    \
  |  |  929|  34.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.6k|    static_cast<    \
  |  |  929|  34.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  34.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   213k|{
 8683|   213k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   213k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   213k|{
 8618|   213k|#if !SCN_DISABLE_LOCALE
 8619|   213k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   213k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   213k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   213k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   213k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.9k, False: 170k]
  |  |  ------------------
  ------------------
 8626|  42.9k|        return unexpected(result.error());
 8627|  42.9k|    }
 8628|   170k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   213k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  5.40k|{
 8984|  5.40k|    T value;
 8985|  5.40k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 4.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  5.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.68k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.68k|    static_cast<    \
  |  |  929|  4.68k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.68k|    static_cast<    \
  |  |  929|  4.68k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.40k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
 5164|  10.7k|{
 5165|  10.7k|    check_scan_arg_types<T>();
 5166|       |
 5167|  10.7k|    basic_scan_arg<Context> arg;
 5168|  10.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  10.7k|    arg.m_value = make_value<Context>(value);
 5170|  10.7k|    return arg;
 5171|  10.7k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   918k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  1.28M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  32.4k|{
 8696|  32.4k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  32.4k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  32.4k|{
 8642|  32.4k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  32.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  32.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.29k, False: 28.1k]
  |  |  ------------------
  ------------------
 8646|  4.29k|        return unexpected(result.error());
 8647|  4.29k|    }
 8648|  28.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  32.4k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  28.1k|    {
 1663|  28.1k|        return std::move(value());
 1664|  28.1k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  30.6k|{
 8878|  30.6k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  30.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  30.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.6k|    static_cast<    \
  |  |  929|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.6k|    static_cast<    \
  |  |  929|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  30.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDav:
 5405|   122k|{
 5406|   122k|    detail::check_scan_arg_types<Args...>();
 5407|   122k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   122k|}
_ZN3scn2v36detail20check_scan_arg_typesIJhEEEvv:
 5144|   192k|{
 5145|   192k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   192k|                  "Scan argument types must be default constructible");
 5147|   192k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   192k|                  "Scan argument types must be Destructible");
 5149|   192k|    static_assert(
 5150|   192k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   192k|        "Scan argument types must not be references");
 5152|   192k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2Ev:
 5357|   122k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   122k|    {
 5359|   122k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   122k|    {
 5370|   122k|        return {detail::make_arg<
 5371|   122k|            kind, Context,
 5372|   122k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   122k|                                 typename Context::char_type>::value>(args)...};
 5374|   122k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEEPvRT2_:
 5179|   122k|{
 5180|   122k|    return make_value<Context>(value).ref_value;
 5181|   122k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
 5129|   131k|{
 5130|   131k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   131k|                                  needs_context_tag>) {
 5134|   131k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   131k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERh:
 4968|   131k|    {                                                                        \
 4969|   131k|        return val;                                                          \
 4970|   131k|    }
_ZN3scn2v36detail15make_value_implIRhEEDaOT_:
 5098|   192k|{
 5099|   192k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   192k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   192k|    constexpr bool scannable_char =
 5103|   192k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   192k|    static_assert(scannable_char,
 5105|   192k|                  "Cannot scan an argument of an unsupported character "
 5106|   192k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   192k|    constexpr bool scannable_const =
 5109|   192k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   192k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   192k|    constexpr bool scannable_disabled =
 5113|   192k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   192k|    static_assert(scannable_disabled,
 5115|   192k|                  "Cannot scan an argument that has been disabled by "
 5116|   192k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   192k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   192k|    static_assert(
 5120|   192k|        scannable,
 5121|   192k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   192k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   192k|    return arg_value{arg};
 5125|   192k|}
_ZN3scn2v36detail9arg_valueC2IhEERT_:
 4909|   192k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   192k|    {
 4911|   192k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  61.2k|    {
 7986|  61.2k|        return m_str;
 7987|  61.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   122k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   122k|    {
 5436|   122k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12arg_pointersEv:
 5388|   122k|    {
 5389|   122k|        return m_argptrs;
 5390|   122k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  61.2k|{
 8831|  61.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 46.8k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  46.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  46.8k|    static_cast<    \
  |  |  929|  46.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  46.8k|    static_cast<    \
  |  |  929|  46.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  61.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  65.7k|    {
 1177|  65.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5838|  50.6k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  50.6k|    {
 5840|  50.6k|    }
_ZN3scn2v36detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
 5624|   102k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   102k|    {
 5626|   102k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  50.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  50.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  50.6k|    {
 1430|  50.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  50.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  50.6k|    {
  437|  50.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
 5383|   122k|    {
 5384|   122k|        return m_args;
 5385|   122k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  61.2k|        : m_str(r.str)
 7981|  61.2k|    {
 7982|  61.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  65.7k|    {
 1598|  65.7k|        return has_value();
 1599|  65.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   116k|    {
  485|   116k|        return m_has_value;
  486|   116k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1672|  50.6k|    {
 1673|  50.6k|        return &value();
 1674|  50.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  50.6k|    {
 1627|  50.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  50.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  50.6k|        return this->get_value();
 1629|  50.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  50.6k|    {
  451|  50.6k|        return m_value;
  452|  50.6k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  30.6k|{
 8945|  30.6k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  30.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  30.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.6k|    static_cast<    \
  |  |  929|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.6k|    static_cast<    \
  |  |  929|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  30.6k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  4.51k|{
 8984|  4.51k|    T value;
 8985|  4.51k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.51k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 3.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  4.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  3.79k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.79k|    static_cast<    \
  |  |  929|  3.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.79k|    static_cast<    \
  |  |  929|  3.79k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.51k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
 5164|  9.01k|{
 5165|  9.01k|    check_scan_arg_types<T>();
 5166|       |
 5167|  9.01k|    basic_scan_arg<Context> arg;
 5168|  9.01k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  9.01k|    arg.m_value = make_value<Context>(value);
 5170|  9.01k|    return arg;
 5171|  9.01k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  40.4k|{
 8878|  40.4k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  40.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  40.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.4k|    static_cast<    \
  |  |  929|  40.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.4k|    static_cast<    \
  |  |  929|  40.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  40.4k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5405|   161k|{
 5406|   161k|    detail::check_scan_arg_types<Args...>();
 5407|   161k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   161k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5144|   235k|{
 5145|   235k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   235k|                  "Scan argument types must be default constructible");
 5147|   235k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   235k|                  "Scan argument types must be Destructible");
 5149|   235k|    static_assert(
 5150|   235k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   235k|        "Scan argument types must not be references");
 5152|   235k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5357|   161k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   161k|    {
 5359|   161k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   161k|    {
 5370|   161k|        return {detail::make_arg<
 5371|   161k|            kind, Context,
 5372|   161k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   161k|                                 typename Context::char_type>::value>(args)...};
 5374|   161k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|   161k|{
 5180|   161k|    return make_value<Context>(value).ref_value;
 5181|   161k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5129|   173k|{
 5130|   173k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   173k|                                  needs_context_tag>) {
 5134|   173k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   173k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4968|   173k|    {                                                                        \
 4969|   173k|        return val;                                                          \
 4970|   173k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5098|   235k|{
 5099|   235k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   235k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   235k|    constexpr bool scannable_char =
 5103|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   235k|    static_assert(scannable_char,
 5105|   235k|                  "Cannot scan an argument of an unsupported character "
 5106|   235k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   235k|    constexpr bool scannable_const =
 5109|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   235k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   235k|    constexpr bool scannable_disabled =
 5113|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   235k|    static_assert(scannable_disabled,
 5115|   235k|                  "Cannot scan an argument that has been disabled by "
 5116|   235k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   235k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   235k|    static_assert(
 5120|   235k|        scannable,
 5121|   235k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   235k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   235k|    return arg_value{arg};
 5125|   235k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4909|   235k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   235k|    {
 4911|   235k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  80.9k|    {
 7986|  80.9k|        return m_str;
 7987|  80.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   161k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   161k|    {
 5436|   161k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5388|   161k|    {
 5389|   161k|        return m_argptrs;
 5390|   161k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  80.9k|{
 8831|  80.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 66.6k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  66.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  66.6k|    static_cast<    \
  |  |  929|  66.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  66.6k|    static_cast<    \
  |  |  929|  66.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  80.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  87.1k|    {
 1177|  87.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5838|  72.1k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  72.1k|    static_cast<    \
  |  |  929|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  72.1k|    static_cast<    \
  |  |  929|  72.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  72.1k|    {
 5840|  72.1k|    }
_ZN3scn2v36detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
 5624|   145k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   145k|    {
 5626|   145k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  72.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  72.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  72.1k|    {
 1430|  72.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  72.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  72.1k|    {
  437|  72.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5383|   161k|    {
 5384|   161k|        return m_args;
 5385|   161k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  80.9k|        : m_str(r.str)
 7981|  80.9k|    {
 7982|  80.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  87.1k|    {
 1598|  87.1k|        return has_value();
 1599|  87.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   159k|    {
  485|   159k|        return m_has_value;
  486|   159k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1672|  72.1k|    {
 1673|  72.1k|        return &value();
 1674|  72.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  72.1k|    {
 1627|  72.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  72.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  72.1k|        return this->get_value();
 1629|  72.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  72.1k|    {
  451|  72.1k|        return m_value;
  452|  72.1k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  40.4k|{
 8945|  40.4k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  40.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  40.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.4k|    static_cast<    \
  |  |  929|  40.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.4k|    static_cast<    \
  |  |  929|  40.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  40.4k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  6.23k|{
 8984|  6.23k|    T value;
 8985|  6.23k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.23k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 5.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  6.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.51k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.51k|    static_cast<    \
  |  |  929|  5.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.51k|    static_cast<    \
  |  |  929|  5.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.23k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
 5164|  12.2k|{
 5165|  12.2k|    check_scan_arg_types<T>();
 5166|       |
 5167|  12.2k|    basic_scan_arg<Context> arg;
 5168|  12.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  12.2k|    arg.m_value = make_value<Context>(value);
 5170|  12.2k|    return arg;
 5171|  12.2k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  33.1k|{
 8878|  33.1k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.1k|    static_cast<    \
  |  |  929|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.1k|    static_cast<    \
  |  |  929|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.1k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5405|   132k|{
 5406|   132k|    detail::check_scan_arg_types<Args...>();
 5407|   132k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   132k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5144|   203k|{
 5145|   203k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   203k|                  "Scan argument types must be default constructible");
 5147|   203k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   203k|                  "Scan argument types must be Destructible");
 5149|   203k|    static_assert(
 5150|   203k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   203k|        "Scan argument types must not be references");
 5152|   203k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5357|   132k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   132k|    {
 5359|   132k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   132k|    {
 5370|   132k|        return {detail::make_arg<
 5371|   132k|            kind, Context,
 5372|   132k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   132k|                                 typename Context::char_type>::value>(args)...};
 5374|   132k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|   132k|{
 5180|   132k|    return make_value<Context>(value).ref_value;
 5181|   132k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5129|   142k|{
 5130|   142k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   142k|                                  needs_context_tag>) {
 5134|   142k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   142k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4968|   142k|    {                                                                        \
 4969|   142k|        return val;                                                          \
 4970|   142k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5098|   203k|{
 5099|   203k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   203k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   203k|    constexpr bool scannable_char =
 5103|   203k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   203k|    static_assert(scannable_char,
 5105|   203k|                  "Cannot scan an argument of an unsupported character "
 5106|   203k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   203k|    constexpr bool scannable_const =
 5109|   203k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   203k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   203k|    constexpr bool scannable_disabled =
 5113|   203k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   203k|    static_assert(scannable_disabled,
 5115|   203k|                  "Cannot scan an argument that has been disabled by "
 5116|   203k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   203k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   203k|    static_assert(
 5120|   203k|        scannable,
 5121|   203k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   203k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   203k|    return arg_value{arg};
 5125|   203k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4909|   203k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   203k|    {
 4911|   203k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  66.2k|    {
 7986|  66.2k|        return m_str;
 7987|  66.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   132k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   132k|    {
 5436|   132k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5388|   132k|    {
 5389|   132k|        return m_argptrs;
 5390|   132k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  66.2k|{
 8831|  66.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 51.9k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  51.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  66.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  71.1k|    {
 1177|  71.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5838|  56.1k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  56.1k|    {
 5840|  56.1k|    }
_ZN3scn2v36detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
 5624|   113k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   113k|    static_cast<    \
  |  |  929|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   113k|    {
 5626|   113k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  56.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  56.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  56.1k|    {
 1430|  56.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  56.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  56.1k|    {
  437|  56.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5383|   132k|    {
 5384|   132k|        return m_args;
 5385|   132k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  66.2k|        : m_str(r.str)
 7981|  66.2k|    {
 7982|  66.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  71.1k|    {
 1598|  71.1k|        return has_value();
 1599|  71.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   127k|    {
  485|   127k|        return m_has_value;
  486|   127k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1672|  56.1k|    {
 1673|  56.1k|        return &value();
 1674|  56.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  56.1k|    {
 1627|  56.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  56.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  56.1k|        return this->get_value();
 1629|  56.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  56.1k|    {
  451|  56.1k|        return m_value;
  452|  56.1k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  33.1k|{
 8945|  33.1k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.1k|    static_cast<    \
  |  |  929|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.1k|    static_cast<    \
  |  |  929|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.1k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  4.95k|{
 8984|  4.95k|    T value;
 8985|  4.95k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.95k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.95k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.95k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.95k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 4.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  4.95k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.24k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.24k|    static_cast<    \
  |  |  929|  4.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.24k|    static_cast<    \
  |  |  929|  4.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.95k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
 5164|  9.89k|{
 5165|  9.89k|    check_scan_arg_types<T>();
 5166|       |
 5167|  9.89k|    basic_scan_arg<Context> arg;
 5168|  9.89k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  9.89k|    arg.m_value = make_value<Context>(value);
 5170|  9.89k|    return arg;
 5171|  9.89k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  41.1k|{
 8878|  41.1k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  41.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  41.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.1k|    static_cast<    \
  |  |  929|  41.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.1k|    static_cast<    \
  |  |  929|  41.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  41.1k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDav:
 5405|   164k|{
 5406|   164k|    detail::check_scan_arg_types<Args...>();
 5407|   164k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   164k|}
_ZN3scn2v36detail20check_scan_arg_typesIJxEEEvv:
 5144|   238k|{
 5145|   238k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   238k|                  "Scan argument types must be default constructible");
 5147|   238k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   238k|                  "Scan argument types must be Destructible");
 5149|   238k|    static_assert(
 5150|   238k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   238k|        "Scan argument types must not be references");
 5152|   238k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2Ev:
 5357|   164k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   164k|    {
 5359|   164k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   164k|    {
 5370|   164k|        return {detail::make_arg<
 5371|   164k|            kind, Context,
 5372|   164k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   164k|                                 typename Context::char_type>::value>(args)...};
 5374|   164k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5179|   164k|{
 5180|   164k|    return make_value<Context>(value).ref_value;
 5181|   164k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
 5129|   176k|{
 5130|   176k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   176k|                                  needs_context_tag>) {
 5134|   176k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   176k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERx:
 4968|   176k|    {                                                                        \
 4969|   176k|        return val;                                                          \
 4970|   176k|    }
_ZN3scn2v36detail15make_value_implIRxEEDaOT_:
 5098|   238k|{
 5099|   238k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   238k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   238k|    constexpr bool scannable_char =
 5103|   238k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   238k|    static_assert(scannable_char,
 5105|   238k|                  "Cannot scan an argument of an unsupported character "
 5106|   238k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   238k|    constexpr bool scannable_const =
 5109|   238k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   238k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   238k|    constexpr bool scannable_disabled =
 5113|   238k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   238k|    static_assert(scannable_disabled,
 5115|   238k|                  "Cannot scan an argument that has been disabled by "
 5116|   238k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   238k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   238k|    static_assert(
 5120|   238k|        scannable,
 5121|   238k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   238k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   238k|    return arg_value{arg};
 5125|   238k|}
_ZN3scn2v36detail9arg_valueC2IxEERT_:
 4909|   238k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   238k|    {
 4911|   238k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  82.3k|    {
 7986|  82.3k|        return m_str;
 7987|  82.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   164k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   164k|    {
 5436|   164k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12arg_pointersEv:
 5388|   164k|    {
 5389|   164k|        return m_argptrs;
 5390|   164k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  82.3k|{
 8831|  82.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  82.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 68.0k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  68.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  68.0k|    static_cast<    \
  |  |  929|  68.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  68.0k|    static_cast<    \
  |  |  929|  68.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  82.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.7k|    {
 1177|  88.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5838|  73.6k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  73.6k|    static_cast<    \
  |  |  929|  73.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  73.6k|    static_cast<    \
  |  |  929|  73.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  73.6k|    {
 5840|  73.6k|    }
_ZN3scn2v36detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
 5624|   148k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   148k|    static_cast<    \
  |  |  929|   148k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   148k|    {
 5626|   148k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  73.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  73.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  73.6k|    {
 1430|  73.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  73.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  73.6k|    {
  437|  73.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
 5383|   164k|    {
 5384|   164k|        return m_args;
 5385|   164k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  82.3k|        : m_str(r.str)
 7981|  82.3k|    {
 7982|  82.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  88.7k|    {
 1598|  88.7k|        return has_value();
 1599|  88.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   162k|    {
  485|   162k|        return m_has_value;
  486|   162k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1672|  73.6k|    {
 1673|  73.6k|        return &value();
 1674|  73.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  73.6k|    {
 1627|  73.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  73.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  73.6k|        return this->get_value();
 1629|  73.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  73.6k|    {
  451|  73.6k|        return m_value;
  452|  73.6k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  41.1k|{
 8945|  41.1k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  41.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  41.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.1k|    static_cast<    \
  |  |  929|  41.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.1k|    static_cast<    \
  |  |  929|  41.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  41.1k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  6.34k|{
 8984|  6.34k|    T value;
 8985|  6.34k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.34k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 5.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  6.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.63k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.63k|    static_cast<    \
  |  |  929|  5.63k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.63k|    static_cast<    \
  |  |  929|  5.63k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.34k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
 5164|  12.4k|{
 5165|  12.4k|    check_scan_arg_types<T>();
 5166|       |
 5167|  12.4k|    basic_scan_arg<Context> arg;
 5168|  12.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  12.4k|    arg.m_value = make_value<Context>(value);
 5170|  12.4k|    return arg;
 5171|  12.4k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  33.4k|{
 8878|  33.4k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.4k|    static_cast<    \
  |  |  929|  33.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.4k|    static_cast<    \
  |  |  929|  33.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.4k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDav:
 5405|   133k|{
 5406|   133k|    detail::check_scan_arg_types<Args...>();
 5407|   133k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   133k|}
_ZN3scn2v36detail20check_scan_arg_typesIJyEEEvv:
 5144|   205k|{
 5145|   205k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   205k|                  "Scan argument types must be default constructible");
 5147|   205k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   205k|                  "Scan argument types must be Destructible");
 5149|   205k|    static_assert(
 5150|   205k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   205k|        "Scan argument types must not be references");
 5152|   205k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2Ev:
 5357|   133k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   133k|    {
 5359|   133k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   133k|    {
 5370|   133k|        return {detail::make_arg<
 5371|   133k|            kind, Context,
 5372|   133k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   133k|                                 typename Context::char_type>::value>(args)...};
 5374|   133k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEEPvRT2_:
 5179|   133k|{
 5180|   133k|    return make_value<Context>(value).ref_value;
 5181|   133k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
 5129|   143k|{
 5130|   143k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   143k|                                  needs_context_tag>) {
 5134|   143k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   143k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERy:
 4968|   143k|    {                                                                        \
 4969|   143k|        return val;                                                          \
 4970|   143k|    }
_ZN3scn2v36detail15make_value_implIRyEEDaOT_:
 5098|   205k|{
 5099|   205k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   205k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   205k|    constexpr bool scannable_char =
 5103|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   205k|    static_assert(scannable_char,
 5105|   205k|                  "Cannot scan an argument of an unsupported character "
 5106|   205k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   205k|    constexpr bool scannable_const =
 5109|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   205k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   205k|    constexpr bool scannable_disabled =
 5113|   205k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   205k|    static_assert(scannable_disabled,
 5115|   205k|                  "Cannot scan an argument that has been disabled by "
 5116|   205k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   205k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   205k|    static_assert(
 5120|   205k|        scannable,
 5121|   205k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   205k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   205k|    return arg_value{arg};
 5125|   205k|}
_ZN3scn2v36detail9arg_valueC2IyEERT_:
 4909|   205k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   205k|    {
 4911|   205k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  66.9k|    {
 7986|  66.9k|        return m_str;
 7987|  66.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   133k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   133k|    {
 5436|   133k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12arg_pointersEv:
 5388|   133k|    {
 5389|   133k|        return m_argptrs;
 5390|   133k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  66.9k|{
 8831|  66.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 52.6k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  52.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.6k|    static_cast<    \
  |  |  929|  52.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.6k|    static_cast<    \
  |  |  929|  52.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  66.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  71.9k|    {
 1177|  71.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5838|  56.9k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.9k|    static_cast<    \
  |  |  929|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.9k|    static_cast<    \
  |  |  929|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  56.9k|    {
 5840|  56.9k|    }
_ZN3scn2v36detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
 5624|   114k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   114k|    {
 5626|   114k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  56.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  56.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  56.9k|    {
 1430|  56.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  56.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  56.9k|    {
  437|  56.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
 5383|   133k|    {
 5384|   133k|        return m_args;
 5385|   133k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  66.9k|        : m_str(r.str)
 7981|  66.9k|    {
 7982|  66.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  71.9k|    {
 1598|  71.9k|        return has_value();
 1599|  71.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   128k|    {
  485|   128k|        return m_has_value;
  486|   128k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1672|  56.9k|    {
 1673|  56.9k|        return &value();
 1674|  56.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  56.9k|    {
 1627|  56.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  56.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  56.9k|        return this->get_value();
 1629|  56.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  56.9k|    {
  451|  56.9k|        return m_value;
  452|  56.9k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  33.4k|{
 8945|  33.4k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.4k|    static_cast<    \
  |  |  929|  33.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.4k|    static_cast<    \
  |  |  929|  33.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.4k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  5.02k|{
 8984|  5.02k|    T value;
 8985|  5.02k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.02k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 4.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  5.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.30k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.30k|    static_cast<    \
  |  |  929|  4.30k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.30k|    static_cast<    \
  |  |  929|  4.30k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.02k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
 5164|  10.0k|{
 5165|  10.0k|    check_scan_arg_types<T>();
 5166|       |
 5167|  10.0k|    basic_scan_arg<Context> arg;
 5168|  10.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  10.0k|    arg.m_value = make_value<Context>(value);
 5170|  10.0k|    return arg;
 5171|  10.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  90.2k|    {
 2724|  90.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  90.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  90.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  90.2k|    {
 2705|  90.2k|        return decay_copy(t.begin());
 2706|  90.2k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  9.47M|{
 1949|  9.47M|    return SCN_FWD(t);
  ------------------
  |  |  930|  9.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  9.47M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   917k|    {
 2781|   917k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   917k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   917k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   917k|    {
 2763|   917k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   917k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   917k|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  34.7k|{
 8878|  34.7k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  34.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  34.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  34.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.7k|    static_cast<    \
  |  |  929|  34.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.7k|    static_cast<    \
  |  |  929|  34.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  34.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   213k|{
 8665|   213k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   213k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   213k|{
 8602|   213k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   213k|    auto result = vscan_impl(buffer, format, args);
 8605|   213k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.9k, False: 170k]
  |  |  ------------------
  ------------------
 8606|  42.9k|        return unexpected(result.error());
 8607|  42.9k|    }
 8608|   170k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   213k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|   458k|{
 4729|   458k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   458k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   458k|                  "\n"
 4733|   458k|                  "Unsupported range type given as input to a scanning "
 4734|   458k|                  "function.\n"
 4735|   458k|                  "A range needs to have a character type (value type) "
 4736|   458k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   458k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   458k|                  "to be included.\n"
 4739|   458k|                  "See the scnlib documentation for more details.");
 4740|   458k|    static_assert(
 4741|   458k|        !std::is_same_v<T, custom_char_traits>,
 4742|   458k|        "\n"
 4743|   458k|        "Unsupported range type given as input to a scanning "
 4744|   458k|        "function.\n"
 4745|   458k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   458k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   458k|        "not supported.");
 4748|   458k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   458k|                  "\n"
 4750|   458k|                  "Unsupported range type given as input to a scanning "
 4751|   458k|                  "function.\n"
 4752|   458k|                  "file_marker_found cannot be used as an "
 4753|   458k|                  "source range type to scn::scan.\n"
 4754|   458k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   458k|                  "and do not provide an explicit source range, "
 4756|   458k|                  "or use scn::scan with a FILE* directly.");
 4757|   458k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   458k|                  "\n"
 4759|   458k|                  "Unsupported range type given as input to a scanning "
 4760|   458k|                  "function.\n"
 4761|   458k|                  "In order to be scannable, a range needs to satisfy "
 4762|   458k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   458k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   458k|                  "\n"
 4765|   458k|                  "Unsupported range type given as input to a scanning "
 4766|   458k|                  "function.\n"
 4767|   458k|                  "A range needs to model forward_range and have a valid "
 4768|   458k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   458k|                  "Examples of scannable ranges are std::string, "
 4770|   458k|                  "std::string_view, "
 4771|   458k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   458k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   458k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   458k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   458k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   458k|    else {
 4714|   458k|        return make_forward_scan_buffer(r);
 4715|   458k|    }
 4716|   458k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|   458k|{
 4533|   458k|    return basic_scan_forward_buffer_impl(range);
 4534|   458k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   458k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   458k|          m_cursor(ranges::begin(*m_range))
 4419|   458k|    {
 4420|   458k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|   458k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   458k|    {
 4391|   458k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|   458k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   458k|    {
 4159|   458k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|   458k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   827k|    {
 2724|   827k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   827k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   827k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   827k|    {
 2705|   827k|        return decay_copy(t.begin());
 2706|   827k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  1.19M|    {
 3326|  1.19M|        return m_iterator;
 3327|  1.19M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  2.39M|    {
 4424|  2.39M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 145k, False: 2.25M]
  ------------------
 4425|   145k|            return false;
 4426|   145k|        }
 4427|  2.25M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  2.25M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  2.25M|        }
 4430|  2.25M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 1.82M, False: 424k]
  ------------------
 4431|  1.82M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  1.82M|                                          this->m_current_view.begin(),
 4433|  1.82M|                                          this->m_current_view.end());
 4434|  1.82M|        }
 4435|  2.25M|        m_latest = *m_cursor;
 4436|  2.25M|        ++m_cursor;
 4437|  2.25M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  2.25M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  2.25M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  2.25M|        }
 4441|  2.25M|        return true;
 4442|  2.39M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.90M|    {
 2781|  6.90M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.90M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.90M|    {
 2763|  6.90M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.90M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  7.27M|    {
 3330|  7.27M|        return m_sentinel;
 3331|  7.27M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|   458k|    {
 4079|   458k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   458k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   458k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  90.2k|        : base(unexpect, std::move(e.error())),
 1474|  90.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  90.2k|    {
 1476|  90.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  90.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  90.2k|          m_has_value(false)
  446|  90.2k|    {
  447|  90.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   458k|    {
 1177|   458k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   368k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   368k|                      ranges::iterator_t<SourceRange>>) {
 5935|   368k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   368k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   368k|    {
 2724|   368k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   368k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   368k|    {
 2705|   368k|        return decay_copy(t.begin());
 2706|   368k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|   368k|{
 5920|   368k|    return ranges::end(source);
 5921|   368k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   368k|    {
 2781|   368k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   368k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   368k|    {
 2763|   368k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   368k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   368k|        : base(std::in_place, std::forward<U>(val)),
 1428|   368k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   368k|    {
 1430|   368k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   368k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   368k|    {
  437|   368k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  69.4k|    {
 7986|  69.4k|        return m_str;
 7987|  69.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  69.4k|{
 8831|  69.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  69.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 55.0k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  55.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.0k|    static_cast<    \
  |  |  929|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.0k|    static_cast<    \
  |  |  929|  55.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  69.4k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   458k|    {
 1598|   458k|        return has_value();
 1599|   458k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   917k|    {
  485|   917k|        return m_has_value;
  486|   917k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  90.2k|    {
 1604|  90.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  90.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  90.2k|        return this->get_unexpected().error();
 1606|  90.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  90.2k|    {
  468|  90.2k|        return m_unexpected;
  469|  90.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   340k|    {
 1653|   340k|        return value();
 1654|   340k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   368k|    {
 1627|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   368k|        return this->get_value();
 1629|   368k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   368k|    {
  451|   368k|        return m_value;
  452|   368k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5838|  59.7k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  59.7k|    {
 5840|  59.7k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|   368k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   368k|    static_cast<    \
  |  |  929|   368k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   368k|    {
 5691|   368k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  59.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  59.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  59.7k|    {
 1430|  59.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  59.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  59.7k|    {
  437|  59.7k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   827k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   827k|    static_cast<    \
  |  |  929|   827k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   827k|    static_cast<    \
  |  |  929|   827k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   827k|    {
 3312|   827k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  69.4k|        : m_str(r.str)
 7981|  69.4k|    {
 7982|  69.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  74.7k|    {
 1598|  74.7k|        return has_value();
 1599|  74.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   134k|    {
  485|   134k|        return m_has_value;
  486|   134k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1672|  59.7k|    {
 1673|  59.7k|        return &value();
 1674|  59.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  59.7k|    {
 1627|  59.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  59.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  59.7k|        return this->get_value();
 1629|  59.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  59.7k|    {
  451|  59.7k|        return m_value;
  452|  59.7k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|   368k|    {
 5708|   368k|        return ranges::begin(m_range);
 5709|   368k|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  34.7k|{
 8945|  34.7k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  34.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  34.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  34.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.7k|    static_cast<    \
  |  |  929|  34.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  34.7k|    static_cast<    \
  |  |  929|  34.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  34.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   213k|{
 8683|   213k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   213k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   213k|{
 8618|   213k|#if !SCN_DISABLE_LOCALE
 8619|   213k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   213k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   213k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   213k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   213k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.9k, False: 170k]
  |  |  ------------------
  ------------------
 8626|  42.9k|        return unexpected(result.error());
 8627|  42.9k|    }
 8628|   170k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   213k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  5.39k|{
 8984|  5.39k|    T value;
 8985|  5.39k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.39k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 4.68k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  5.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.68k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.68k|    static_cast<    \
  |  |  929|  4.68k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.68k|    static_cast<    \
  |  |  929|  4.68k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.39k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  32.0k|{
 8696|  32.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  32.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  32.0k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  32.0k|{
 8642|  32.0k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  32.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  32.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.29k, False: 27.7k]
  |  |  ------------------
  ------------------
 8646|  4.29k|        return unexpected(result.error());
 8647|  4.29k|    }
 8648|  27.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  27.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  32.0k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  27.7k|    {
 1663|  27.7k|        return std::move(value());
 1664|  27.7k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  30.6k|{
 8878|  30.6k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  30.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  30.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.6k|    static_cast<    \
  |  |  929|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.6k|    static_cast<    \
  |  |  929|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  30.6k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  61.2k|    {
 7986|  61.2k|        return m_str;
 7987|  61.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  61.2k|{
 8831|  61.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 46.9k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  46.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  46.9k|    static_cast<    \
  |  |  929|  46.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  46.9k|    static_cast<    \
  |  |  929|  46.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  61.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  65.7k|    {
 1177|  65.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5838|  50.6k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  50.6k|    {
 5840|  50.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  50.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  50.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  50.6k|    {
 1430|  50.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  50.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  50.6k|    {
  437|  50.6k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  61.2k|        : m_str(r.str)
 7981|  61.2k|    {
 7982|  61.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  65.7k|    {
 1598|  65.7k|        return has_value();
 1599|  65.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   116k|    {
  485|   116k|        return m_has_value;
  486|   116k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1672|  50.6k|    {
 1673|  50.6k|        return &value();
 1674|  50.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  50.6k|    {
 1627|  50.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  50.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  50.6k|        return this->get_value();
 1629|  50.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  50.6k|    {
  451|  50.6k|        return m_value;
  452|  50.6k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  30.6k|{
 8945|  30.6k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  30.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  30.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.6k|    static_cast<    \
  |  |  929|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  30.6k|    static_cast<    \
  |  |  929|  30.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  30.6k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  4.50k|{
 8984|  4.50k|    T value;
 8985|  4.50k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.50k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 3.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  4.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  3.78k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.78k|    static_cast<    \
  |  |  929|  3.78k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.78k|    static_cast<    \
  |  |  929|  3.78k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.50k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  40.3k|{
 8878|  40.3k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  40.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  40.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.3k|    static_cast<    \
  |  |  929|  40.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.3k|    static_cast<    \
  |  |  929|  40.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  40.3k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  80.6k|    {
 7986|  80.6k|        return m_str;
 7987|  80.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  80.6k|{
 8831|  80.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 66.3k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  66.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  66.3k|    static_cast<    \
  |  |  929|  66.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  66.3k|    static_cast<    \
  |  |  929|  66.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  80.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  86.7k|    {
 1177|  86.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5838|  71.6k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  71.6k|    static_cast<    \
  |  |  929|  71.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  71.6k|    static_cast<    \
  |  |  929|  71.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  71.6k|    {
 5840|  71.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  71.6k|        : base(std::in_place, std::forward<U>(val)),
 1428|  71.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  71.6k|    {
 1430|  71.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  71.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  71.6k|    {
  437|  71.6k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  80.6k|        : m_str(r.str)
 7981|  80.6k|    {
 7982|  80.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  86.7k|    {
 1598|  86.7k|        return has_value();
 1599|  86.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   158k|    {
  485|   158k|        return m_has_value;
  486|   158k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1672|  71.6k|    {
 1673|  71.6k|        return &value();
 1674|  71.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  71.6k|    {
 1627|  71.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  71.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  71.6k|        return this->get_value();
 1629|  71.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  71.6k|    {
  451|  71.6k|        return m_value;
  452|  71.6k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  40.3k|{
 8945|  40.3k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  40.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  40.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.3k|    static_cast<    \
  |  |  929|  40.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.3k|    static_cast<    \
  |  |  929|  40.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  40.3k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  6.03k|{
 8984|  6.03k|    T value;
 8985|  6.03k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.03k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 5.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  6.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.31k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.31k|    static_cast<    \
  |  |  929|  5.31k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.31k|    static_cast<    \
  |  |  929|  5.31k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.03k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  33.1k|{
 8878|  33.1k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.1k|    static_cast<    \
  |  |  929|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.1k|    static_cast<    \
  |  |  929|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.1k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  66.2k|    {
 7986|  66.2k|        return m_str;
 7987|  66.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  66.2k|{
 8831|  66.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 51.9k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  51.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  51.9k|    static_cast<    \
  |  |  929|  51.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  66.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  71.2k|    {
 1177|  71.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5838|  56.1k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  56.1k|    {
 5840|  56.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  56.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  56.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  56.1k|    {
 1430|  56.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  56.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  56.1k|    {
  437|  56.1k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  66.2k|        : m_str(r.str)
 7981|  66.2k|    {
 7982|  66.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  71.2k|    {
 1598|  71.2k|        return has_value();
 1599|  71.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   127k|    {
  485|   127k|        return m_has_value;
  486|   127k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1672|  56.1k|    {
 1673|  56.1k|        return &value();
 1674|  56.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  56.1k|    {
 1627|  56.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  56.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  56.1k|        return this->get_value();
 1629|  56.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  56.1k|    {
  451|  56.1k|        return m_value;
  452|  56.1k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  33.1k|{
 8945|  33.1k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.1k|    static_cast<    \
  |  |  929|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.1k|    static_cast<    \
  |  |  929|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.1k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  4.93k|{
 8984|  4.93k|    T value;
 8985|  4.93k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.93k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 4.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  4.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.21k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.93k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  41.0k|{
 8878|  41.0k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  41.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  41.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  41.0k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  82.0k|    {
 7986|  82.0k|        return m_str;
 7987|  82.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  82.0k|{
 8831|  82.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  82.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 67.7k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  67.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  82.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  88.1k|    {
 1177|  88.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5838|  73.1k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  73.1k|    static_cast<    \
  |  |  929|  73.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  73.1k|    static_cast<    \
  |  |  929|  73.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  73.1k|    {
 5840|  73.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  73.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  73.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  73.1k|    {
 1430|  73.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  73.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  73.1k|    {
  437|  73.1k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  82.0k|        : m_str(r.str)
 7981|  82.0k|    {
 7982|  82.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  88.1k|    {
 1598|  88.1k|        return has_value();
 1599|  88.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   161k|    {
  485|   161k|        return m_has_value;
  486|   161k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1672|  73.1k|    {
 1673|  73.1k|        return &value();
 1674|  73.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  73.1k|    {
 1627|  73.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  73.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  73.1k|        return this->get_value();
 1629|  73.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  73.1k|    {
  451|  73.1k|        return m_value;
  452|  73.1k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  41.0k|{
 8945|  41.0k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  41.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  41.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  41.0k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  6.14k|{
 8984|  6.14k|    T value;
 8985|  6.14k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.14k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 5.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  6.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.42k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.42k|    static_cast<    \
  |  |  929|  5.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.42k|    static_cast<    \
  |  |  929|  5.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.14k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  33.4k|{
 8878|  33.4k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.4k|    static_cast<    \
  |  |  929|  33.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.4k|    static_cast<    \
  |  |  929|  33.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.4k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  66.9k|    {
 7986|  66.9k|        return m_str;
 7987|  66.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  66.9k|{
 8831|  66.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 52.6k]
  |  |  ------------------
  ------------------
 8832|  14.3k|        return unexpected(result.error());
 8833|  14.3k|    }
 8834|  52.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.6k|    static_cast<    \
  |  |  929|  52.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  52.6k|    static_cast<    \
  |  |  929|  52.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  66.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  15.0k|        : base(unexpect, std::move(e.error())),
 1474|  15.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.0k|    {
 1476|  15.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  15.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.0k|          m_has_value(false)
  446|  15.0k|    {
  447|  15.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  71.9k|    {
 1177|  71.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5838|  56.9k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.9k|    static_cast<    \
  |  |  929|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  56.9k|    static_cast<    \
  |  |  929|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  56.9k|    {
 5840|  56.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  56.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  56.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  56.9k|    {
 1430|  56.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  56.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  56.9k|    {
  437|  56.9k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  66.9k|        : m_str(r.str)
 7981|  66.9k|    {
 7982|  66.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  71.9k|    {
 1598|  71.9k|        return has_value();
 1599|  71.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   128k|    {
  485|   128k|        return m_has_value;
  486|   128k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1672|  56.9k|    {
 1673|  56.9k|        return &value();
 1674|  56.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  56.9k|    {
 1627|  56.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  56.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  56.9k|        return this->get_value();
 1629|  56.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  56.9k|    {
  451|  56.9k|        return m_value;
  452|  56.9k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  33.4k|{
 8945|  33.4k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.4k|    static_cast<    \
  |  |  929|  33.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.4k|    static_cast<    \
  |  |  929|  33.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.4k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  4.99k|{
 8984|  4.99k|    T value;
 8985|  4.99k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.99k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 4.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  4.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.28k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.28k|    static_cast<    \
  |  |  929|  4.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.28k|    static_cast<    \
  |  |  929|  4.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.99k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   181k|    {
 2724|   181k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   181k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   181k|    {
 2705|   181k|        return decay_copy(t.begin());
 2706|   181k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|   855k|{
 1949|   855k|    return SCN_FWD(t);
  ------------------
  |  |  930|   855k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   855k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   368k|    {
 2781|   368k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   368k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   368k|    {
 2763|   368k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   368k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDav:
 5405|  58.1k|{
 5406|  58.1k|    detail::check_scan_arg_types<Args...>();
 5407|  58.1k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  58.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2Ev:
 5357|  58.1k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  58.1k|    {
 5359|  58.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  58.1k|    {
 5370|  58.1k|        return {detail::make_arg<
 5371|  58.1k|            kind, Context,
 5372|  58.1k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  58.1k|                                 typename Context::char_type>::value>(args)...};
 5374|  58.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEEPvRT2_:
 5179|  58.1k|{
 5180|  58.1k|    return make_value<Context>(value).ref_value;
 5181|  58.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
 5129|  61.1k|{
 5130|  61.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  61.1k|                                  needs_context_tag>) {
 5134|  61.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  61.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  61.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERa:
 4968|  61.1k|    {                                                                        \
 4969|  61.1k|        return val;                                                          \
 4970|  61.1k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|  87.4k|{
 8602|  87.4k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  87.4k|    auto result = vscan_impl(buffer, format, args);
 8605|  87.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.9k, False: 1.50k]
  |  |  ------------------
  ------------------
 8606|  85.9k|        return unexpected(result.error());
 8607|  85.9k|    }
 8608|  1.50k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  87.4k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|   183k|{
 4729|   183k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   183k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   183k|                  "\n"
 4733|   183k|                  "Unsupported range type given as input to a scanning "
 4734|   183k|                  "function.\n"
 4735|   183k|                  "A range needs to have a character type (value type) "
 4736|   183k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   183k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   183k|                  "to be included.\n"
 4739|   183k|                  "See the scnlib documentation for more details.");
 4740|   183k|    static_assert(
 4741|   183k|        !std::is_same_v<T, custom_char_traits>,
 4742|   183k|        "\n"
 4743|   183k|        "Unsupported range type given as input to a scanning "
 4744|   183k|        "function.\n"
 4745|   183k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   183k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   183k|        "not supported.");
 4748|   183k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   183k|                  "\n"
 4750|   183k|                  "Unsupported range type given as input to a scanning "
 4751|   183k|                  "function.\n"
 4752|   183k|                  "file_marker_found cannot be used as an "
 4753|   183k|                  "source range type to scn::scan.\n"
 4754|   183k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   183k|                  "and do not provide an explicit source range, "
 4756|   183k|                  "or use scn::scan with a FILE* directly.");
 4757|   183k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   183k|                  "\n"
 4759|   183k|                  "Unsupported range type given as input to a scanning "
 4760|   183k|                  "function.\n"
 4761|   183k|                  "In order to be scannable, a range needs to satisfy "
 4762|   183k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   183k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   183k|                  "\n"
 4765|   183k|                  "Unsupported range type given as input to a scanning "
 4766|   183k|                  "function.\n"
 4767|   183k|                  "A range needs to model forward_range and have a valid "
 4768|   183k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   183k|                  "Examples of scannable ranges are std::string, "
 4770|   183k|                  "std::string_view, "
 4771|   183k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   183k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   183k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   183k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   183k|{
 4668|   183k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   183k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   183k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   183k|    {
 2855|   183k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   183k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   183k|    {
 2836|   183k|        return t.data();
 2837|   183k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|   183k|    {
 3229|   183k|        return detail::to_address(ranges::begin(derived()));
 3230|   183k|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   301k|{
  326|   301k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   301k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   301k|{
  304|   301k|    return p;
  305|   301k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   186k|    {
 2724|   186k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   186k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   186k|    {
 2705|   186k|        return decay_copy(t.begin());
 2706|   186k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  37.7M|    {
 3326|  37.7M|        return m_iterator;
 3327|  37.7M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   183k|    {
 3185|   183k|        return static_cast<const D&>(*this);
 3186|   183k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   183k|    {
 2930|   183k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   183k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   183k|    {
 2896|   183k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   183k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|   399k|    {
 3342|   399k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|   399k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   180k|        : base(unexpect, std::move(e.error())),
 1474|   180k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   180k|    {
 1476|   180k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   180k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   180k|          m_has_value(false)
  446|   180k|    {
  447|   180k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   183k|    {
 1177|   183k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  3.25k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  3.25k|                      ranges::iterator_t<SourceRange>>) {
 5935|  3.25k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  3.25k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   115k|    {
 2724|   115k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   115k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   115k|    {
 2705|   115k|        return decay_copy(t.begin());
 2706|   115k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|  3.25k|{
 5920|  3.25k|    return ranges::end(source);
 5921|  3.25k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.25k|    {
 2781|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.25k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.25k|    {
 2763|  3.25k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.25k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  36.9M|    {
 3330|  36.9M|        return m_sentinel;
 3331|  36.9M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  3.25k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.25k|    {
 1430|  3.25k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  3.25k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.25k|    {
  437|  3.25k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.0k|    {
 7986|  29.0k|        return m_str;
 7987|  29.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  58.1k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  58.1k|    {
 5436|  58.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12arg_pointersEv:
 5388|  58.1k|    {
 5389|  58.1k|        return m_argptrs;
 5390|  58.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|   349k|        : m_desc(desc), m_builtin_values(data)
 5487|   349k|    {
 5488|   349k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.0k|{
 8831|  29.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 448]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    448|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.0k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   183k|    {
 1598|   183k|        return has_value();
 1599|   183k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   367k|    {
  485|   367k|        return m_has_value;
  486|   367k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   180k|    {
 1604|   180k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   180k|        return this->get_unexpected().error();
 1606|   180k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   180k|    {
  468|   180k|        return m_unexpected;
  469|   180k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.5k|    {
 1177|  30.5k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  3.00k|    {
 1653|  3.00k|        return value();
 1654|  3.00k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  3.25k|    {
 1627|  3.25k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.25k|        return this->get_value();
 1629|  3.25k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.25k|    {
  451|  3.25k|        return m_value;
  452|  3.25k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5838|    484|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    484|    {
 5840|    484|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  3.25k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  3.25k|    static_cast<    \
  |  |  929|  3.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  3.25k|    {
 5691|  3.25k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    484|        : base(std::in_place, std::forward<U>(val)),
 1428|    484|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    484|    {
 1430|    484|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    484|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    484|    {
  437|    484|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
 5383|  58.1k|    {
 5384|  58.1k|        return m_args;
 5385|  58.1k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  1.25M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.25M|    static_cast<    \
  |  |  929|  1.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.25M|    static_cast<    \
  |  |  929|  1.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.25M|    {
 3312|  1.25M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|   349k|{
 7707|   349k|    return s;
 7708|   349k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|   349k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.0k|        : m_str(r.str)
 7981|  29.0k|    {
 7982|  29.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  30.5k|    {
 1598|  30.5k|        return has_value();
 1599|  30.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.0k|    {
  485|  31.0k|        return m_has_value;
  486|  31.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1672|    484|    {
 1673|    484|        return &value();
 1674|    484|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    484|    {
 1627|    484|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    484|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    484|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    484|        return this->get_value();
 1629|    484|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    484|    {
  451|    484|        return m_value;
  452|    484|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|  3.25k|    {
 5708|  3.25k|        return ranges::begin(m_range);
 5709|  3.25k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|  87.4k|{
 8618|  87.4k|#if !SCN_DISABLE_LOCALE
 8619|  87.4k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  87.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  87.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  87.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  87.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.9k, False: 1.50k]
  |  |  ------------------
  ------------------
 8626|  85.9k|        return unexpected(result.error());
 8627|  85.9k|    }
 8628|  1.50k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  87.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.93k|{
 5165|  2.93k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.93k|    basic_scan_arg<Context> arg;
 5168|  2.93k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.93k|    arg.m_value = make_value<Context>(value);
 5170|  2.93k|    return arg;
 5171|  2.93k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|   367k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  8.83k|{
 8642|  8.83k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  8.83k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  8.83k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.59k, False: 246]
  |  |  ------------------
  ------------------
 8646|  8.59k|        return unexpected(result.error());
 8647|  8.59k|    }
 8648|    246|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  8.83k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|    246|    {
 1663|    246|        return std::move(value());
 1664|    246|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDav:
 5405|  58.0k|{
 5406|  58.0k|    detail::check_scan_arg_types<Args...>();
 5407|  58.0k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  58.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2Ev:
 5357|  58.0k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  58.0k|    {
 5359|  58.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  58.0k|    {
 5370|  58.0k|        return {detail::make_arg<
 5371|  58.0k|            kind, Context,
 5372|  58.0k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  58.0k|                                 typename Context::char_type>::value>(args)...};
 5374|  58.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEEPvRT2_:
 5179|  58.0k|{
 5180|  58.0k|    return make_value<Context>(value).ref_value;
 5181|  58.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
 5129|  60.9k|{
 5130|  60.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  60.9k|                                  needs_context_tag>) {
 5134|  60.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  60.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  60.9k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERh:
 4968|  60.9k|    {                                                                        \
 4969|  60.9k|        return val;                                                          \
 4970|  60.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.0k|    {
 7986|  29.0k|        return m_str;
 7987|  29.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  58.0k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  58.0k|    {
 5436|  58.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12arg_pointersEv:
 5388|  58.0k|    {
 5389|  58.0k|        return m_argptrs;
 5390|  58.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.0k|{
 8831|  29.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 382]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    382|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.4k|    {
 1177|  30.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5838|    411|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    411|    {
 5840|    411|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    411|        : base(std::in_place, std::forward<U>(val)),
 1428|    411|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    411|    {
 1430|    411|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    411|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    411|    {
  437|    411|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
 5383|  58.0k|    {
 5384|  58.0k|        return m_args;
 5385|  58.0k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.0k|        : m_str(r.str)
 7981|  29.0k|    {
 7982|  29.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  30.4k|    {
 1598|  30.4k|        return has_value();
 1599|  30.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.8k|    {
  485|  30.8k|        return m_has_value;
  486|  30.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1672|    411|    {
 1673|    411|        return &value();
 1674|    411|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    411|    {
 1627|    411|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    411|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    411|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    411|        return this->get_value();
 1629|    411|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    411|    {
  451|    411|        return m_value;
  452|    411|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.92k|{
 5165|  2.92k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.92k|    basic_scan_arg<Context> arg;
 5168|  2.92k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.92k|    arg.m_value = make_value<Context>(value);
 5170|  2.92k|    return arg;
 5171|  2.92k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5405|  58.3k|{
 5406|  58.3k|    detail::check_scan_arg_types<Args...>();
 5407|  58.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  58.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5357|  58.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  58.3k|    {
 5359|  58.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  58.3k|    {
 5370|  58.3k|        return {detail::make_arg<
 5371|  58.3k|            kind, Context,
 5372|  58.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  58.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  58.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  58.3k|{
 5180|  58.3k|    return make_value<Context>(value).ref_value;
 5181|  58.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5129|  61.3k|{
 5130|  61.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  61.3k|                                  needs_context_tag>) {
 5134|  61.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  61.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4968|  61.3k|    {                                                                        \
 4969|  61.3k|        return val;                                                          \
 4970|  61.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.1k|    {
 7986|  29.1k|        return m_str;
 7987|  29.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  58.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  58.3k|    {
 5436|  58.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5388|  58.3k|    {
 5389|  58.3k|        return m_argptrs;
 5390|  58.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.1k|{
 8831|  29.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 554]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    554|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.6k|    {
 1177|  30.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5838|    600|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    600|    {
 5840|    600|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    600|        : base(std::in_place, std::forward<U>(val)),
 1428|    600|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    600|    {
 1430|    600|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    600|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    600|    {
  437|    600|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5383|  58.3k|    {
 5384|  58.3k|        return m_args;
 5385|  58.3k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.1k|        : m_str(r.str)
 7981|  29.1k|    {
 7982|  29.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  30.6k|    {
 1598|  30.6k|        return has_value();
 1599|  30.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.2k|    {
  485|  31.2k|        return m_has_value;
  486|  31.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1672|    600|    {
 1673|    600|        return &value();
 1674|    600|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    600|    {
 1627|    600|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    600|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    600|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    600|        return this->get_value();
 1629|    600|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    600|    {
  451|    600|        return m_value;
  452|    600|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.95k|{
 5165|  2.95k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.95k|    basic_scan_arg<Context> arg;
 5168|  2.95k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.95k|    arg.m_value = make_value<Context>(value);
 5170|  2.95k|    return arg;
 5171|  2.95k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5405|  58.1k|{
 5406|  58.1k|    detail::check_scan_arg_types<Args...>();
 5407|  58.1k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  58.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5357|  58.1k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  58.1k|    {
 5359|  58.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  58.1k|    {
 5370|  58.1k|        return {detail::make_arg<
 5371|  58.1k|            kind, Context,
 5372|  58.1k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  58.1k|                                 typename Context::char_type>::value>(args)...};
 5374|  58.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  58.1k|{
 5180|  58.1k|    return make_value<Context>(value).ref_value;
 5181|  58.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5129|  61.0k|{
 5130|  61.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  61.0k|                                  needs_context_tag>) {
 5134|  61.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  61.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  61.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4968|  61.0k|    {                                                                        \
 4969|  61.0k|        return val;                                                          \
 4970|  61.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.0k|    {
 7986|  29.0k|        return m_str;
 7987|  29.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  58.1k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  58.1k|    {
 5436|  58.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5388|  58.1k|    {
 5389|  58.1k|        return m_argptrs;
 5390|  58.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.0k|{
 8831|  29.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 440]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    440|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.5k|    {
 1177|  30.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5838|    475|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    475|    {
 5840|    475|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    475|        : base(std::in_place, std::forward<U>(val)),
 1428|    475|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    475|    {
 1430|    475|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    475|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    475|    {
  437|    475|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5383|  58.1k|    {
 5384|  58.1k|        return m_args;
 5385|  58.1k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.0k|        : m_str(r.str)
 7981|  29.0k|    {
 7982|  29.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  30.5k|    {
 1598|  30.5k|        return has_value();
 1599|  30.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.0k|    {
  485|  31.0k|        return m_has_value;
  486|  31.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1672|    475|    {
 1673|    475|        return &value();
 1674|    475|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    475|    {
 1627|    475|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    475|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    475|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    475|        return this->get_value();
 1629|    475|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    475|    {
  451|    475|        return m_value;
  452|    475|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.93k|{
 5165|  2.93k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.93k|    basic_scan_arg<Context> arg;
 5168|  2.93k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.93k|    arg.m_value = make_value<Context>(value);
 5170|  2.93k|    return arg;
 5171|  2.93k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDav:
 5405|  58.6k|{
 5406|  58.6k|    detail::check_scan_arg_types<Args...>();
 5407|  58.6k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  58.6k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2Ev:
 5357|  58.6k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  58.6k|    {
 5359|  58.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  58.6k|    {
 5370|  58.6k|        return {detail::make_arg<
 5371|  58.6k|            kind, Context,
 5372|  58.6k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  58.6k|                                 typename Context::char_type>::value>(args)...};
 5374|  58.6k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5179|  58.6k|{
 5180|  58.6k|    return make_value<Context>(value).ref_value;
 5181|  58.6k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
 5129|  61.5k|{
 5130|  61.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  61.5k|                                  needs_context_tag>) {
 5134|  61.5k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  61.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  61.5k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERx:
 4968|  61.5k|    {                                                                        \
 4969|  61.5k|        return val;                                                          \
 4970|  61.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.3k|    {
 7986|  29.3k|        return m_str;
 7987|  29.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  58.6k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  58.6k|    {
 5436|  58.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12arg_pointersEv:
 5388|  58.6k|    {
 5389|  58.6k|        return m_argptrs;
 5390|  58.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.3k|{
 8831|  29.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 660]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    660|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.7k|    {
 1177|  30.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5838|    717|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    717|    {
 5840|    717|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    717|        : base(std::in_place, std::forward<U>(val)),
 1428|    717|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    717|    {
 1430|    717|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    717|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    717|    {
  437|    717|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
 5383|  58.6k|    {
 5384|  58.6k|        return m_args;
 5385|  58.6k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.3k|        : m_str(r.str)
 7981|  29.3k|    {
 7982|  29.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  30.7k|    {
 1598|  30.7k|        return has_value();
 1599|  30.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.5k|    {
  485|  31.5k|        return m_has_value;
  486|  31.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1672|    717|    {
 1673|    717|        return &value();
 1674|    717|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    717|    {
 1627|    717|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    717|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    717|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    717|        return this->get_value();
 1629|    717|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    717|    {
  451|    717|        return m_value;
  452|    717|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.97k|{
 5165|  2.97k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.97k|    basic_scan_arg<Context> arg;
 5168|  2.97k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.97k|    arg.m_value = make_value<Context>(value);
 5170|  2.97k|    return arg;
 5171|  2.97k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDav:
 5405|  58.3k|{
 5406|  58.3k|    detail::check_scan_arg_types<Args...>();
 5407|  58.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  58.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2Ev:
 5357|  58.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  58.3k|    {
 5359|  58.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  58.3k|    {
 5370|  58.3k|        return {detail::make_arg<
 5371|  58.3k|            kind, Context,
 5372|  58.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  58.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  58.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEEPvRT2_:
 5179|  58.3k|{
 5180|  58.3k|    return make_value<Context>(value).ref_value;
 5181|  58.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
 5129|  61.2k|{
 5130|  61.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  61.2k|                                  needs_context_tag>) {
 5134|  61.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  61.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERy:
 4968|  61.2k|    {                                                                        \
 4969|  61.2k|        return val;                                                          \
 4970|  61.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  29.1k|    {
 7986|  29.1k|        return m_str;
 7987|  29.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  58.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  58.3k|    {
 5436|  58.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12arg_pointersEv:
 5388|  58.3k|    {
 5389|  58.3k|        return m_argptrs;
 5390|  58.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  29.1k|{
 8831|  29.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 522]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    522|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.6k|    {
 1177|  30.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5838|    565|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    565|    {
 5840|    565|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    565|        : base(std::in_place, std::forward<U>(val)),
 1428|    565|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    565|    {
 1430|    565|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    565|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    565|    {
  437|    565|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
 5383|  58.3k|    {
 5384|  58.3k|        return m_args;
 5385|  58.3k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.1k|        : m_str(r.str)
 7981|  29.1k|    {
 7982|  29.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  30.6k|    {
 1598|  30.6k|        return has_value();
 1599|  30.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.2k|    {
  485|  31.2k|        return m_has_value;
  486|  31.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1672|    565|    {
 1673|    565|        return &value();
 1674|    565|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    565|    {
 1627|    565|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    565|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    565|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    565|        return this->get_value();
 1629|    565|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    565|    {
  451|    565|        return m_value;
  452|    565|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
 5164|  2.95k|{
 5165|  2.95k|    check_scan_arg_types<T>();
 5166|       |
 5167|  2.95k|    basic_scan_arg<Context> arg;
 5168|  2.95k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  2.95k|    arg.m_value = make_value<Context>(value);
 5170|  2.95k|    return arg;
 5171|  2.95k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   180k|    {
 2724|   180k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   180k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   180k|    {
 2705|   180k|        return decay_copy(t.begin());
 2706|   180k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|   107M|{
 1949|   107M|    return SCN_FWD(t);
  ------------------
  |  |  930|   107M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   107M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   367k|    {
 2781|   367k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   367k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   367k|    {
 2763|   367k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   367k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|  87.4k|{
 8602|  87.4k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  87.4k|    auto result = vscan_impl(buffer, format, args);
 8605|  87.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.9k, False: 1.50k]
  |  |  ------------------
  ------------------
 8606|  85.9k|        return unexpected(result.error());
 8607|  85.9k|    }
 8608|  1.50k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  87.4k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   183k|{
 4729|   183k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   183k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   183k|                  "\n"
 4733|   183k|                  "Unsupported range type given as input to a scanning "
 4734|   183k|                  "function.\n"
 4735|   183k|                  "A range needs to have a character type (value type) "
 4736|   183k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   183k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   183k|                  "to be included.\n"
 4739|   183k|                  "See the scnlib documentation for more details.");
 4740|   183k|    static_assert(
 4741|   183k|        !std::is_same_v<T, custom_char_traits>,
 4742|   183k|        "\n"
 4743|   183k|        "Unsupported range type given as input to a scanning "
 4744|   183k|        "function.\n"
 4745|   183k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   183k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   183k|        "not supported.");
 4748|   183k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   183k|                  "\n"
 4750|   183k|                  "Unsupported range type given as input to a scanning "
 4751|   183k|                  "function.\n"
 4752|   183k|                  "file_marker_found cannot be used as an "
 4753|   183k|                  "source range type to scn::scan.\n"
 4754|   183k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   183k|                  "and do not provide an explicit source range, "
 4756|   183k|                  "or use scn::scan with a FILE* directly.");
 4757|   183k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   183k|                  "\n"
 4759|   183k|                  "Unsupported range type given as input to a scanning "
 4760|   183k|                  "function.\n"
 4761|   183k|                  "In order to be scannable, a range needs to satisfy "
 4762|   183k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   183k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   183k|                  "\n"
 4765|   183k|                  "Unsupported range type given as input to a scanning "
 4766|   183k|                  "function.\n"
 4767|   183k|                  "A range needs to model forward_range and have a valid "
 4768|   183k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   183k|                  "Examples of scannable ranges are std::string, "
 4770|   183k|                  "std::string_view, "
 4771|   183k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   183k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   183k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   183k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   183k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   183k|    else {
 4714|   183k|        return make_forward_scan_buffer(r);
 4715|   183k|    }
 4716|   183k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   183k|{
 4533|   183k|    return basic_scan_forward_buffer_impl(range);
 4534|   183k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   183k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   183k|          m_cursor(ranges::begin(*m_range))
 4419|   183k|    {
 4420|   183k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   183k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   183k|    {
 4391|   183k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   183k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   183k|    {
 4159|   183k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   183k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   186k|    {
 2724|   186k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   186k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   186k|    {
 2705|   186k|        return decay_copy(t.begin());
 2706|   186k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|   190k|    {
 3326|   190k|        return m_iterator;
 3327|   190k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  35.6M|    {
 4424|  35.6M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 109k, False: 35.5M]
  ------------------
 4425|   109k|            return false;
 4426|   109k|        }
 4427|  35.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  35.5M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  35.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  35.5M|        }
 4430|  35.5M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 35.3M, False: 131k]
  ------------------
 4431|  35.3M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  35.3M|                                          this->m_current_view.begin(),
 4433|  35.3M|                                          this->m_current_view.end());
 4434|  35.3M|        }
 4435|  35.5M|        m_latest = *m_cursor;
 4436|  35.5M|        ++m_cursor;
 4437|  35.5M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  35.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  35.5M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  35.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  35.5M|        }
 4441|  35.5M|        return true;
 4442|  35.6M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   106M|    {
 2781|   106M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   106M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   106M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   106M|    {
 2763|   106M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   106M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   106M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|   106M|    {
 3330|   106M|        return m_sentinel;
 3331|   106M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   183k|    {
 4079|   183k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   183k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   183k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   180k|        : base(unexpect, std::move(e.error())),
 1474|   180k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   180k|    {
 1476|   180k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   180k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   180k|          m_has_value(false)
  446|   180k|    {
  447|   180k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   183k|    {
 1177|   183k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  3.25k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  3.25k|                      ranges::iterator_t<SourceRange>>) {
 5935|  3.25k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  3.25k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.25k|    {
 2724|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.25k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.25k|    {
 2705|  3.25k|        return decay_copy(t.begin());
 2706|  3.25k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|  3.25k|{
 5920|  3.25k|    return ranges::end(source);
 5921|  3.25k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.25k|    {
 2781|  3.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.25k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.25k|    {
 2763|  3.25k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.25k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  3.25k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.25k|    {
 1430|  3.25k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  3.25k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.25k|    {
  437|  3.25k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.0k|    {
 7986|  29.0k|        return m_str;
 7987|  29.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.0k|{
 8831|  29.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 448]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    448|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    448|    static_cast<    \
  |  |  929|    448|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.0k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   183k|    {
 1598|   183k|        return has_value();
 1599|   183k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   367k|    {
  485|   367k|        return m_has_value;
  486|   367k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   180k|    {
 1604|   180k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   180k|        return this->get_unexpected().error();
 1606|   180k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   180k|    {
  468|   180k|        return m_unexpected;
  469|   180k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.5k|    {
 1177|  30.5k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  3.00k|    {
 1653|  3.00k|        return value();
 1654|  3.00k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  3.25k|    {
 1627|  3.25k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.25k|        return this->get_value();
 1629|  3.25k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.25k|    {
  451|  3.25k|        return m_value;
  452|  3.25k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5838|    484|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    484|    {
 5840|    484|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|  3.25k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  3.25k|    static_cast<    \
  |  |  929|  3.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  3.25k|    {
 5691|  3.25k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    484|        : base(std::in_place, std::forward<U>(val)),
 1428|    484|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    484|    {
 1430|    484|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    484|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    484|    {
  437|    484|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   186k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   186k|    static_cast<    \
  |  |  929|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   186k|    static_cast<    \
  |  |  929|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   186k|    {
 3312|   186k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.0k|        : m_str(r.str)
 7981|  29.0k|    {
 7982|  29.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  30.5k|    {
 1598|  30.5k|        return has_value();
 1599|  30.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.0k|    {
  485|  31.0k|        return m_has_value;
  486|  31.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1672|    484|    {
 1673|    484|        return &value();
 1674|    484|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    484|    {
 1627|    484|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    484|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    484|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    484|        return this->get_value();
 1629|    484|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    484|    {
  451|    484|        return m_value;
  452|    484|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|  3.25k|    {
 5708|  3.25k|        return ranges::begin(m_range);
 5709|  3.25k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|  87.4k|{
 8618|  87.4k|#if !SCN_DISABLE_LOCALE
 8619|  87.4k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  87.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  87.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  87.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  87.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.9k, False: 1.50k]
  |  |  ------------------
  ------------------
 8626|  85.9k|        return unexpected(result.error());
 8627|  85.9k|    }
 8628|  1.50k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  87.4k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  8.83k|{
 8642|  8.83k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  8.83k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  8.83k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.59k, False: 246]
  |  |  ------------------
  ------------------
 8646|  8.59k|        return unexpected(result.error());
 8647|  8.59k|    }
 8648|    246|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  8.83k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|    246|    {
 1663|    246|        return std::move(value());
 1664|    246|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.0k|    {
 7986|  29.0k|        return m_str;
 7987|  29.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.0k|{
 8831|  29.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 382]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    382|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    382|    static_cast<    \
  |  |  929|    382|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.4k|    {
 1177|  30.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5838|    411|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    411|    static_cast<    \
  |  |  929|    411|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    411|    {
 5840|    411|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    411|        : base(std::in_place, std::forward<U>(val)),
 1428|    411|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    411|    {
 1430|    411|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    411|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    411|    {
  437|    411|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.0k|        : m_str(r.str)
 7981|  29.0k|    {
 7982|  29.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  30.4k|    {
 1598|  30.4k|        return has_value();
 1599|  30.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  30.8k|    {
  485|  30.8k|        return m_has_value;
  486|  30.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1672|    411|    {
 1673|    411|        return &value();
 1674|    411|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    411|    {
 1627|    411|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    411|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    411|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    411|        return this->get_value();
 1629|    411|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    411|    {
  451|    411|        return m_value;
  452|    411|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.1k|    {
 7986|  29.1k|        return m_str;
 7987|  29.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.1k|{
 8831|  29.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 554]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    554|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    554|    static_cast<    \
  |  |  929|    554|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.6k|    {
 1177|  30.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5838|    600|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    600|    static_cast<    \
  |  |  929|    600|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    600|    {
 5840|    600|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    600|        : base(std::in_place, std::forward<U>(val)),
 1428|    600|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    600|    {
 1430|    600|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    600|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    600|    {
  437|    600|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.1k|        : m_str(r.str)
 7981|  29.1k|    {
 7982|  29.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  30.6k|    {
 1598|  30.6k|        return has_value();
 1599|  30.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.2k|    {
  485|  31.2k|        return m_has_value;
  486|  31.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1672|    600|    {
 1673|    600|        return &value();
 1674|    600|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    600|    {
 1627|    600|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    600|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    600|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    600|        return this->get_value();
 1629|    600|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    600|    {
  451|    600|        return m_value;
  452|    600|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.0k|    {
 7986|  29.0k|        return m_str;
 7987|  29.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.0k|{
 8831|  29.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 440]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    440|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    440|    static_cast<    \
  |  |  929|    440|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.5k|    {
 1177|  30.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5838|    475|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    475|    static_cast<    \
  |  |  929|    475|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    475|    {
 5840|    475|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    475|        : base(std::in_place, std::forward<U>(val)),
 1428|    475|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    475|    {
 1430|    475|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    475|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    475|    {
  437|    475|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.0k|        : m_str(r.str)
 7981|  29.0k|    {
 7982|  29.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  30.5k|    {
 1598|  30.5k|        return has_value();
 1599|  30.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.0k|    {
  485|  31.0k|        return m_has_value;
  486|  31.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1672|    475|    {
 1673|    475|        return &value();
 1674|    475|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    475|    {
 1627|    475|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    475|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    475|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    475|        return this->get_value();
 1629|    475|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    475|    {
  451|    475|        return m_value;
  452|    475|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.3k|    {
 7986|  29.3k|        return m_str;
 7987|  29.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.3k|{
 8831|  29.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 660]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    660|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.7k|    {
 1177|  30.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5838|    717|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    717|    static_cast<    \
  |  |  929|    717|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    717|    {
 5840|    717|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    717|        : base(std::in_place, std::forward<U>(val)),
 1428|    717|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    717|    {
 1430|    717|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    717|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    717|    {
  437|    717|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.3k|        : m_str(r.str)
 7981|  29.3k|    {
 7982|  29.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  30.7k|    {
 1598|  30.7k|        return has_value();
 1599|  30.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.5k|    {
  485|  31.5k|        return m_has_value;
  486|  31.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1672|    717|    {
 1673|    717|        return &value();
 1674|    717|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    717|    {
 1627|    717|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    717|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    717|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    717|        return this->get_value();
 1629|    717|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    717|    {
  451|    717|        return m_value;
  452|    717|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  29.1k|    {
 7986|  29.1k|        return m_str;
 7987|  29.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  29.1k|{
 8831|  29.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 522]
  |  |  ------------------
  ------------------
 8832|  28.6k|        return unexpected(result.error());
 8833|  28.6k|    }
 8834|    522|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    522|    static_cast<    \
  |  |  929|    522|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  29.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  30.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.0k|          m_has_value(false)
  446|  30.0k|    {
  447|  30.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  30.6k|    {
 1177|  30.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5838|    565|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    565|    static_cast<    \
  |  |  929|    565|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    565|    {
 5840|    565|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    565|        : base(std::in_place, std::forward<U>(val)),
 1428|    565|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    565|    {
 1430|    565|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    565|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    565|    {
  437|    565|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  29.1k|        : m_str(r.str)
 7981|  29.1k|    {
 7982|  29.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  30.6k|    {
 1598|  30.6k|        return has_value();
 1599|  30.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  31.2k|    {
  485|  31.2k|        return m_has_value;
  486|  31.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1672|    565|    {
 1673|    565|        return &value();
 1674|    565|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    565|    {
 1627|    565|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    565|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    565|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    565|        return this->get_value();
 1629|    565|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    565|    {
  451|    565|        return m_value;
  452|    565|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   747k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   747k|    {
 3564|   747k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   747k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   747k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  5.37M|    {
 3570|  5.37M|        return m_code == good;
 3571|  5.37M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   309k|    {
 3581|   309k|        return m_code;
 3582|   309k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  10.8M|    {
 3326|  10.8M|        return m_iterator;
 3327|  10.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  38.0M|    {
 3326|  38.0M|        return m_iterator;
 3327|  38.0M|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6231|   863k|    {
 6232|   863k|        SCN_GCC_COMPAT_PUSH
 6233|   863k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6234|   863k|        switch (type) {
 6235|   161k|            case presentation_type::none:
  ------------------
  |  Branch (6235:13): [True: 161k, False: 702k]
  ------------------
 6236|   161k|                return 10;
 6237|   179k|            case presentation_type::int_generic:
  ------------------
  |  Branch (6237:13): [True: 179k, False: 684k]
  ------------------
 6238|   179k|                return 0;
 6239|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6239:13): [True: 0, False: 863k]
  ------------------
 6240|      0|                return arbitrary_base;
 6241|       |
 6242|  79.1k|            case presentation_type::int_binary:
  ------------------
  |  Branch (6242:13): [True: 79.1k, False: 784k]
  ------------------
 6243|  79.1k|                return 2;
 6244|   114k|            case presentation_type::int_octal:
  ------------------
  |  Branch (6244:13): [True: 114k, False: 748k]
  ------------------
 6245|   114k|                return 8;
 6246|   161k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6246:13): [True: 161k, False: 702k]
  ------------------
 6247|   161k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6247:13): [True: 0, False: 863k]
  ------------------
 6248|   161k|                return 10;
 6249|   167k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6249:13): [True: 167k, False: 695k]
  ------------------
 6250|   167k|                return 16;
 6251|       |
 6252|      0|            default:
  ------------------
  |  Branch (6252:13): [True: 0, False: 863k]
  ------------------
 6253|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6254|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6255|   863k|        }
 6256|   863k|        SCN_GCC_COMPAT_POP
 6257|   863k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  1.03M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|   770k|    {
 6314|   770k|        m_specs.type = type;
 6315|   770k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6375|   103k|    {
 6376|   103k|        SCN_UNLIKELY_ATTR
 6377|   103k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6378|   103k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|   936k|    {
 6387|   936k|        return static_cast<bool>(m_error);
 6388|   936k|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   309k|{
 3605|   309k|    return a.code() == b;
 3606|   309k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   309k|{
 3609|   309k|    return !(a == b);
 3610|   309k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  1.08M|{
 4043|       |    // Pattern_White_Space property
 4044|  1.08M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 948k, False: 136k]
  |  Branch (4044:27): [True: 384k, False: 563k]
  ------------------
 4045|  1.08M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 9.24k, False: 690k]
  ------------------
 4046|  1.08M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 3.93k, False: 686k]
  ------------------
 4047|  1.08M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 1.56k, False: 685k]
  ------------------
 4048|  1.08M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 2.08k, False: 683k]
  ------------------
 4049|  1.08M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 2.48k, False: 680k]
  ------------------
 4050|  1.08M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 0, False: 680k]
  ------------------
 4051|  1.08M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|   165k|{
 7074|   165k|    switch (type) {
 7075|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 165k]
  ------------------
 7076|      0|            return arg_type_category::none;
 7077|       |
 7078|  27.5k|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 27.5k, False: 137k]
  ------------------
 7079|  27.5k|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 165k]
  ------------------
 7080|  58.3k|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 30.8k, False: 134k]
  ------------------
 7081|  58.3k|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 165k]
  ------------------
 7082|  89.6k|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 31.3k, False: 133k]
  ------------------
 7083|  89.6k|            return arg_type_category::integer;
 7084|       |
 7085|  23.9k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 23.9k, False: 141k]
  ------------------
 7086|  23.9k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 165k]
  ------------------
 7087|  49.6k|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 25.7k, False: 139k]
  ------------------
 7088|  49.6k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 165k]
  ------------------
 7089|  75.6k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 26.0k, False: 139k]
  ------------------
 7090|  75.6k|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 165k]
  ------------------
 7093|      0|            return arg_type_category::pointer;
 7094|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 165k]
  ------------------
 7095|      0|            return arg_type_category::boolean;
 7096|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 165k]
  ------------------
 7097|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 165k]
  ------------------
 7098|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 165k]
  ------------------
 7099|      0|            return arg_type_category::character;
 7100|       |
 7101|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 165k]
  ------------------
 7102|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 165k]
  ------------------
 7103|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 0, False: 165k]
  ------------------
 7104|      0|            return arg_type_category::floating;
 7105|       |
 7106|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 0, False: 165k]
  ------------------
 7107|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 0, False: 165k]
  ------------------
 7108|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 0, False: 165k]
  ------------------
 7109|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 0, False: 165k]
  ------------------
 7110|      0|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 165k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 165k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   165k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|   165k|            SCN_CLANG_POP
 7121|   165k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|   165k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  23.6k|{
 3650|  23.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  23.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  23.6k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7159|   884k|{
 7160|   884k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|   884k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 884k]
  |  |  ------------------
  ------------------
 7161|      0|        return handler.on_error("Invalid type specifier for integer type");
 7162|      0|    }
 7163|   884k|    if (specs.localized) {
  ------------------
  |  Branch (7163:9): [True: 165k, False: 719k]
  ------------------
 7164|   165k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 7165|       |            // clang-format off
 7166|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7167|       |            // clang-format on
 7168|      0|            return;
 7169|      0|        }
 7170|   165k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 7171|       |            // clang-format off
 7172|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7173|       |            // clang-format on
 7174|      0|        }
 7175|   165k|    }
 7176|   884k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
 3649|  25.0k|{
 3650|  25.0k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  25.0k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|  65.1M|    {
 4203|  65.1M|        assert(m_begin);
 4204|  65.1M|        return m_end == nullptr;
 4205|  65.1M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   603k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   603k|    else {
 3716|   603k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   603k|    }
 3718|   603k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|  1.43M|    {
 4220|  1.43M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 1.43M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  1.43M|        return parent()->get_segment_starting_at(position());
 4226|  1.43M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|  35.7M|    {
 4214|  35.7M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  35.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  35.7M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  35.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|  1.43M|    {
 4109|  1.43M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 385k, False: 1.05M]
  |  |  ------------------
  ------------------
 4110|  1.43M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   385k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   385k|        }
 4113|  1.05M|        const auto start = pos - m_putback_buffer.size();
 4114|  1.05M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|  1.05M|        return m_current_view.substr(start);
 4116|  1.05M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4208|   343k|    {
 4209|   343k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|   343k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|   343k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|  2.22M|    {
 4198|  2.22M|        return m_position;
 4199|  2.22M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|  1.37M|    {
 4131|  1.37M|        return m_is_contiguous;
 4132|  1.37M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|   144G|    {
 4203|   144G|        assert(m_begin);
 4204|   144G|        return m_end == nullptr;
 4205|   144G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  5.75k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|  5.75k|    else {
 3716|  5.75k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  5.75k|    }
 3718|  5.75k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|   138k|    {
 4220|   138k|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 138k]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|   138k|        return parent()->get_segment_starting_at(position());
 4226|   138k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|  72.3G|    {
 4214|  72.3G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  72.3G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.3G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  72.3G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  72.3G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|   138k|    {
 4109|   138k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 135k]
  |  |  ------------------
  ------------------
 4110|   138k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  2.77k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  2.77k|        }
 4113|   135k|        const auto start = pos - m_putback_buffer.size();
 4114|   135k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   135k|        return m_current_view.substr(start);
 4116|   135k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4208|   104k|    {
 4209|   104k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|   104k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|   104k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|   247k|    {
 4198|   247k|        return m_position;
 4199|   247k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|   551k|    {
 4131|   551k|        return m_is_contiguous;
 4132|   551k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  1.08M|    {
 3180|  1.08M|        return static_cast<D&>(*this);
 3181|  1.08M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  1.08M|    {
 3221|  1.08M|        return detail::to_address(ranges::begin(derived()));
 3222|  1.08M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   111k|    {
 3180|   111k|        return static_cast<D&>(*this);
 3181|   111k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   111k|    {
 3221|   111k|        return detail::to_address(ranges::begin(derived()));
 3222|   111k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8179|   336k|    {
 8180|   336k|        return ranges::subrange{begin(), end()};
 8181|   336k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8163|   984k|    {
 8164|   984k|        return m_current;
 8165|   984k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8171|   336k|    {
 8172|   336k|        return ranges::default_sentinel;
 8173|   336k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  3.51M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.51M|    static_cast<    \
  |  |  929|  3.51M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.51M|    static_cast<    \
  |  |  929|  3.51M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.51M|    {
 3312|  3.51M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|   848k|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   432k|    {
 1837|   432k|        return detail::transform_error_impl(std::move(*this),
 1838|   432k|                                            std::forward<F>(f));
 1839|   432k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   432k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   432k|    else {
 1333|   432k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   432k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   432k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 420k, False: 11.8k]
  |  |  ------------------
  ------------------
 1335|   432k|                   ? result(*std::forward<Exp>(exp))
 1336|   432k|                   : result(unexpect,
 1337|  11.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  11.8k|                                           std::forward<Exp>(exp).error()));
 1339|   432k|    }
 1340|   432k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  2.18M|    {
  485|  2.18M|        return m_has_value;
  486|  2.18M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   752k|    {
 1663|   752k|        return std::move(value());
 1664|   752k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   850k|    {
 1627|   850k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   850k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   850k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   850k|        return this->get_value();
 1629|   850k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   850k|    {
  451|   850k|        return m_value;
  452|   850k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  1.36M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.36M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.36M|    {
 1430|  1.36M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.36M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.36M|    {
  437|  1.36M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.50M|    {
 1177|  1.50M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  26.7k|{
 1211|  26.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  26.7k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  23.7k|    {
 1614|  23.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  23.7k|        return std::move(this->get_unexpected().error());
 1616|  23.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  24.0k|    {
  468|  24.0k|        return m_unexpected;
  469|  24.0k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   157k|    {
  361|   157k|        return m_unexpected;
  362|   157k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  41.4k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  41.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  41.4k|    {
 1486|  41.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   147k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   147k|          m_has_value(false)
  446|   147k|    {
  447|   147k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8179|   105k|    {
 8180|   105k|        return ranges::subrange{begin(), end()};
 8181|   105k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8163|   265k|    {
 8164|   265k|        return m_current;
 8165|   265k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8171|   105k|    {
 8172|   105k|        return ranges::default_sentinel;
 8173|   105k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|   945k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   945k|    static_cast<    \
  |  |  929|   945k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   945k|    static_cast<    \
  |  |  929|   945k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   945k|    {
 3312|   945k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   132k|    {
 1837|   132k|        return detail::transform_error_impl(std::move(*this),
 1838|   132k|                                            std::forward<F>(f));
 1839|   132k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   132k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   132k|    else {
 1333|   132k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   132k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   132k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 130k, False: 1.86k]
  |  |  ------------------
  ------------------
 1335|   132k|                   ? result(*std::forward<Exp>(exp))
 1336|   132k|                   : result(unexpect,
 1337|  1.86k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.86k|                                           std::forward<Exp>(exp).error()));
 1339|   132k|    }
 1340|   132k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   639k|    {
  485|   639k|        return m_has_value;
  486|   639k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   214k|    {
 1663|   214k|        return std::move(value());
 1664|   214k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   217k|    {
 1627|   217k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   217k|        return this->get_value();
 1629|   217k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   217k|    {
  451|   217k|        return m_value;
  452|   217k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   138k|        : base(std::in_place, std::forward<U>(val)),
 1428|   138k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   138k|    {
 1430|   138k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   138k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   138k|    {
  437|   138k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   480k|    {
 1177|   480k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  21.5k|    {
 1614|  21.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  21.5k|        return std::move(this->get_unexpected().error());
 1616|  21.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  21.6k|    {
  468|  21.6k|        return m_unexpected;
  469|  21.6k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|   110k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   110k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   110k|    {
 1486|   110k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   341k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   341k|          m_has_value(false)
  446|   341k|    {
  447|   341k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|   138k|{
 3650|   138k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   138k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   202k|        : m_unexpected(std::forward<Err>(e))
  346|   202k|    {
  347|   202k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   202k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   202k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   166k|        : base(unexpect, std::move(e.error())),
 1474|   166k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   166k|    {
 1476|   166k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   177k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   177k|          m_has_value(false)
  446|   177k|    {
  447|   177k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.73M|    {
 1177|  2.73M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  2.55M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.55M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.55M|    {
 1430|  2.55M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.55M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.55M|    {
  437|  2.55M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  2.73M|    {
 1598|  2.73M|        return has_value();
 1599|  2.73M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  5.46M|    {
  485|  5.46M|        return m_has_value;
  486|  5.46M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   177k|    {
 1604|   177k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   177k|        return this->get_unexpected().error();
 1606|   177k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   177k|    {
  468|   177k|        return m_unexpected;
  469|   177k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.26M|    {
 1663|  2.26M|        return std::move(value());
 1664|  2.26M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  2.55M|    {
 1627|  2.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.55M|        return this->get_value();
 1629|  2.55M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  2.55M|    {
  451|  2.55M|        return m_value;
  452|  2.55M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   341k|        : base(unexpect, std::move(e.error())),
 1474|   341k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   341k|    {
 1476|   341k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   343k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   343k|          m_has_value(false)
  446|   343k|    {
  447|   343k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   600k|    {
 1177|   600k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|   257k|        : base(std::in_place, std::forward<U>(val)),
 1428|   257k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   257k|    {
 1430|   257k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   257k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   257k|    {
  437|   257k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   600k|    {
 1598|   600k|        return has_value();
 1599|   600k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.20M|    {
  485|  1.20M|        return m_has_value;
  486|  1.20M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   343k|    {
 1604|   343k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   343k|        return this->get_unexpected().error();
 1606|   343k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   343k|    {
  468|   343k|        return m_unexpected;
  469|   343k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|   255k|    {
 1663|   255k|        return std::move(value());
 1664|   255k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|   257k|    {
 1627|   257k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   257k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   257k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   257k|        return this->get_value();
 1629|   257k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|   257k|    {
  451|   257k|        return m_value;
  452|   257k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   433k|    {
 1837|   433k|        return detail::transform_error_impl(std::move(*this),
 1838|   433k|                                            std::forward<F>(f));
 1839|   433k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   433k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   433k|    else {
 1333|   433k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   433k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   433k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 422k, False: 11.1k]
  |  |  ------------------
  ------------------
 1335|   433k|                   ? result(*std::forward<Exp>(exp))
 1336|   433k|                   : result(unexpect,
 1337|  11.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  11.1k|                                           std::forward<Exp>(exp).error()));
 1339|   433k|    }
 1340|   433k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.49M|    {
  485|  1.49M|        return m_has_value;
  486|  1.49M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   422k|    {
 1663|   422k|        return std::move(value());
 1664|   422k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   520k|    {
 1627|   520k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   520k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   520k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   520k|        return this->get_value();
 1629|   520k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   520k|    {
  451|   520k|        return m_value;
  452|   520k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  11.1k|    {
 1614|  11.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  11.1k|        return std::move(this->get_unexpected().error());
 1616|  11.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  11.4k|    {
  468|  11.4k|        return m_unexpected;
  469|  11.4k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  11.1k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  11.1k|    {
 1486|  11.1k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  3.53M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   106k|        : base(unexpect, std::move(e.error())),
 1474|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   106k|    {
 1476|   106k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  2.33M|    {
 4289|  2.33M|        return x.is_at_end();
 4290|  2.33M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  4.98M|    {
 4333|  4.98M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 4.98M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  4.98M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 4.98M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  4.98M|        return !read_at_position();
 4340|  4.98M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|  20.9M|    {
 4313|  20.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  20.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  20.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 20.9M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  20.9M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  20.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18.5M, False: 2.39M]
  |  |  ------------------
  ------------------
 4320|  18.5M|            return true;
 4321|  18.5M|        }
 4322|       |
 4323|  4.65M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 2.39M, False: 2.25M]
  ------------------
 4324|  2.39M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 145k, False: 2.25M]
  ------------------
 4325|   145k|                return false;
 4326|   145k|            }
 4327|  2.39M|        }
 4328|  2.25M|        return true;
 4329|  2.39M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|  25.9M|    {
 4089|  25.9M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  25.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  6.33M|    {
 4248|  6.33M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  6.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  6.33M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 6.33M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  6.33M|        auto res = read_at_position();
 4257|  6.33M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  6.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  6.33M|        return parent()->get_character_at(m_position);
 4259|  6.33M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  6.33M|    {
 4120|  6.33M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  6.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.99M, False: 2.34M]
  |  |  ------------------
  ------------------
 4121|  6.33M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  3.99M|            return m_putback_buffer[pos];
 4123|  3.99M|        }
 4124|  2.34M|        const auto start = pos - m_putback_buffer.size();
 4125|  2.34M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  2.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  2.34M|        return m_current_view[start];
 4127|  2.34M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  1.28M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.28M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.28M|    {
 1430|  1.28M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.28M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.28M|    {
  437|  1.28M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.30M|    {
 1177|  1.30M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|  51.2k|        : m_unexpected(std::forward<Err>(e))
  346|  51.2k|    {
  347|  51.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  51.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  51.2k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  24.0k|        : base(unexpect, std::move(e.error())),
 1474|  24.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  24.0k|    {
 1476|  24.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  24.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  24.0k|          m_has_value(false)
  446|  24.0k|    {
  447|  24.0k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  78.7k|        : m_unexpected(std::forward<Args>(args)...)
  355|  78.7k|    {
  356|  78.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  78.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  78.7k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   531k|    {
 1598|   531k|        return has_value();
 1599|   531k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  97.6k|    {
 1653|  97.6k|        return value();
 1654|  97.6k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  6.27M|    {
 4283|  6.27M|        return !(lhs == rhs);
 4284|  6.27M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  6.59M|    {
 4278|  6.59M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 6.59M, False: 0]
  |  Branch (4278:46): [True: 546k, False: 6.04M]
  ------------------
 4279|  6.59M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  9.59M|    {
 4234|  9.59M|        ++m_position;
 4235|  9.59M|        (void)read_at_position();
 4236|  9.59M|        return *this;
 4237|  9.59M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  27.5k|        : m_unexpected(std::forward<Err>(e))
  346|  27.5k|    {
  347|  27.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  27.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  27.5k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  9.50k|        : base(unexpect, std::move(e.error())),
 1474|  9.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  9.50k|    {
 1476|  9.50k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  9.50k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  9.50k|          m_has_value(false)
  446|  9.50k|    {
  447|  9.50k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   615k|    {
 1177|   615k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   606k|        : base(std::in_place, std::forward<U>(val)),
 1428|   606k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   606k|    {
 1430|   606k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   606k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   606k|    {
  437|   606k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   615k|    {
 1598|   615k|        return has_value();
 1599|   615k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.23M|    {
  485|  1.23M|        return m_has_value;
  486|  1.23M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  9.50k|    {
 1604|  9.50k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  9.50k|        return this->get_unexpected().error();
 1606|  9.50k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  9.50k|    {
  468|  9.50k|        return m_unexpected;
  469|  9.50k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   606k|    {
 1663|   606k|        return std::move(value());
 1664|   606k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   606k|    {
 1627|   606k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   606k|        return this->get_value();
 1629|   606k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   606k|    {
  451|   606k|        return m_value;
  452|   606k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  7.69M|    {
 3330|  7.69M|        return m_sentinel;
 3331|  7.69M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  12.9k|        : m_unexpected(std::forward<Err>(e))
  346|  12.9k|    {
  347|  12.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  12.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  12.9k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  1.24M|    {
  361|  1.24M|        return m_unexpected;
  362|  1.24M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   115k|        : m_unexpected(std::forward<Args>(args)...)
  355|   115k|    {
  356|   115k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   115k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   115k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  2.36M|        : m_unexpected(std::forward<Err>(e))
  346|  2.36M|    {
  347|  2.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.36M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  2.36M|    {
  361|  2.36M|        return m_unexpected;
  362|  2.36M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  2.36M|        : m_unexpected(std::forward<Args>(args)...)
  355|  2.36M|    {
  356|  2.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.36M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  51.2k|{
 1211|  51.2k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  51.2k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  51.2k|        : m_unexpected(std::forward<Err>(e))
  346|  51.2k|    {
  347|  51.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  51.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  51.2k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|   138k|{
 1211|   138k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   138k|}
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  22.5k|{
  392|  22.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  22.5k|        T(std::forward<Args>(args)...);
  394|  22.5k|}
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 2961|   113k|    {
 2962|   113k|        return fn::impl(std::forward<T>(t));
 2963|   113k|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 2952|   113k|    {
 2953|   113k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|   113k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 2929|   113k|    {
 2930|   113k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   113k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 2895|   113k|    {
 2896|   113k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   113k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  22.5k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  22.5k|    else {
  404|  22.5k|        p->~T();
  405|  22.5k|    }
  406|  22.5k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|    360|    {
 1604|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    360|        return this->get_unexpected().error();
 1606|    360|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  12.1k|        : base(unexpect, std::move(e.error())),
 1474|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.1k|    {
 1476|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  24.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  24.0k|          m_has_value(false)
  446|  24.0k|    {
  447|  24.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.64M|    {
 1177|  1.64M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   140k|        : base(std::in_place, std::forward<U>(val)),
 1428|   140k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   140k|    {
 1430|   140k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   140k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   140k|    {
  437|   140k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|   859k|        : base(unexpect, std::move(e.error())),
 1474|   859k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   859k|    {
 1476|   859k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   859k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   859k|          m_has_value(false)
  446|   859k|    {
  447|   859k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  1.32M|    {
 1598|  1.32M|        return has_value();
 1599|  1.32M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  2.81M|    {
  485|  2.81M|        return m_has_value;
  486|  2.81M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|   377k|    {
 1604|   377k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   377k|        return this->get_unexpected().error();
 1606|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   407k|    {
  468|   407k|        return m_unexpected;
  469|   407k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   420k|        : base(std::in_place, std::forward<U>(val)),
 1428|   420k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   420k|    {
 1430|   420k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   420k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   420k|    {
  437|   420k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   420k|    {
 1177|   420k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   143k|    {
 1653|   143k|        return value();
 1654|   143k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   762k|    {
 1627|   762k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   762k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   762k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   762k|        return this->get_value();
 1629|   762k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   762k|    {
  451|   762k|        return m_value;
  452|   762k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   420k|    {
 1598|   420k|        return has_value();
 1599|   420k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   841k|    {
  485|   841k|        return m_has_value;
  486|   841k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   420k|    {
 1177|   420k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   420k|    {
 1663|   420k|        return std::move(value());
 1664|   420k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   420k|    {
 1627|   420k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   420k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   420k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   420k|        return this->get_value();
 1629|   420k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   420k|    {
  451|   420k|        return m_value;
  452|   420k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   343k|    {
 1837|   343k|        return detail::transform_error_impl(std::move(*this),
 1838|   343k|                                            std::forward<F>(f));
 1839|   343k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   343k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   343k|    else {
 1333|   343k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   343k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   343k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 331k, False: 11.8k]
  |  |  ------------------
  ------------------
 1335|   343k|                   ? result(*std::forward<Exp>(exp))
 1336|   343k|                   : result(unexpect,
 1337|  11.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  11.8k|                                           std::forward<Exp>(exp).error()));
 1339|   343k|    }
 1340|   343k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|   621k|        : base(std::in_place, std::forward<U>(val)),
 1428|   621k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   621k|    {
 1430|   621k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   621k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   621k|    {
  437|   621k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  11.8k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  11.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  11.8k|    {
 1486|  11.8k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   618k|    {
 1663|   618k|        return std::move(value());
 1664|   618k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1427|   420k|        : base(std::in_place, std::forward<U>(val)),
 1428|   420k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   420k|    {
 1430|   420k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   420k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   420k|    {
  437|   420k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   420k|    {
 1837|   420k|        return detail::transform_error_impl(std::move(*this),
 1838|   420k|                                            std::forward<F>(f));
 1839|   420k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|   420k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   420k|    else {
 1333|   420k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   420k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   420k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 420k, False: 0]
  |  |  ------------------
  ------------------
 1335|   420k|                   ? result(*std::forward<Exp>(exp))
 1336|   420k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   420k|    }
 1340|   420k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  484|   841k|    {
  485|   841k|        return m_has_value;
  486|   841k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   420k|    {
 1663|   420k|        return std::move(value());
 1664|   420k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   420k|    {
 1627|   420k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   420k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   420k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   420k|        return this->get_value();
 1629|   420k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  450|   420k|    {
  451|   420k|        return m_value;
  452|   420k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   420k|        : base(std::in_place, std::forward<U>(val)),
 1428|   420k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   420k|    {
 1430|   420k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   420k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   420k|    {
  437|   420k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   420k|    {
 1177|   420k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1597|   420k|    {
 1598|   420k|        return has_value();
 1599|   420k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   841k|    {
  485|   841k|        return m_has_value;
  486|   841k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   420k|    {
 1663|   420k|        return std::move(value());
 1664|   420k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   420k|    {
 1627|   420k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   420k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   420k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   420k|        return this->get_value();
 1629|   420k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   420k|    {
  451|   420k|        return m_value;
  452|   420k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   316k|    {
 1837|   316k|        return detail::transform_error_impl(std::move(*this),
 1838|   316k|                                            std::forward<F>(f));
 1839|   316k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   316k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   316k|    else {
 1333|   316k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   316k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   316k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 286k, False: 29.5k]
  |  |  ------------------
  ------------------
 1335|   316k|                   ? result(*std::forward<Exp>(exp))
 1336|   316k|                   : result(unexpect,
 1337|  29.5k|                            trivial_invoke(std::forward<F>(f),
 1338|  29.5k|                                           std::forward<Exp>(exp).error()));
 1339|   316k|    }
 1340|   316k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1613|  29.5k|    {
 1614|  29.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  29.5k|        return std::move(this->get_unexpected().error());
 1616|  29.5k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  3.13k|        : base(unexpect, std::move(e.error())),
 1474|  3.13k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.13k|    {
 1476|  3.13k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  624|  3.13k|        : m_has_value(false)
  625|  3.13k|    {
  626|  3.13k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  3.13k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  688|  3.13k|    {
  689|  3.13k|        scn::detail::construct_at(unexpected_ptr(),
  690|  3.13k|                                  std::forward<Args>(args)...);
  691|  3.13k|        m_has_value = false;
  692|  3.13k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  9.39k|    {
  718|  9.39k|        return reinterpret_cast<unexpected<E>*>(
  719|  9.39k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  9.39k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  9.39k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  61.5k|    {
 1177|  61.5k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  58.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  58.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  58.4k|    {
 1430|  58.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  614|  58.4k|        : m_has_value(true)
  615|  58.4k|    {
  616|  58.4k|        construct(std::forward<Args>(args)...);
  617|  58.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  681|  58.4k|    {
  682|  58.4k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  58.4k|        m_has_value = true;
  684|  58.4k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  391|  58.4k|{
  392|  58.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  58.4k|        T(std::forward<Args>(args)...);
  394|  58.4k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   175k|    {
  706|   175k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   175k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   175k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1597|  61.5k|    {
 1598|  61.5k|        return has_value();
 1599|  61.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|   184k|    {
  675|   184k|        return m_has_value;
  676|   184k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1603|  3.13k|    {
 1604|  3.13k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.13k|        return this->get_unexpected().error();
 1606|  3.13k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  3.13k|    {
  658|  3.13k|        return *unexpected_ptr();
  659|  3.13k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  58.4k|    {
 1663|  58.4k|        return std::move(value());
 1664|  58.4k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  58.4k|    {
 1627|  58.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  58.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  58.4k|        return this->get_value();
 1629|  58.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  640|  58.4k|    {
  641|  58.4k|        return *value_ptr();
  642|  58.4k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|   650k|    {
 3326|   650k|        return m_iterator;
 3327|   650k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|   650k|    {
 3330|   650k|        return m_sentinel;
 3331|   650k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  630|  61.5k|    {
  631|  61.5k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 58.4k, False: 3.13k]
  ------------------
  632|  58.4k|            destroy_value();
  633|  58.4k|        }
  634|  3.13k|        else {
  635|  3.13k|            destroy_unexpected();
  636|  3.13k|        }
  637|  61.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  58.4k|    {
  696|  58.4k|        scn::detail::destroy_at(value_ptr());
  697|  58.4k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  397|  58.4k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  58.4k|    else {
  404|  58.4k|        p->~T();
  405|  58.4k|    }
  406|  58.4k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  3.13k|    {
  700|  3.13k|        scn::detail::destroy_at(unexpected_ptr());
  701|  3.13k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  1.50M|    {
 1598|  1.50M|        return has_value();
 1599|  1.50M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.01M|    {
  485|  3.01M|        return m_has_value;
  486|  3.01M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   147k|    {
 1604|   147k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   147k|        return this->get_unexpected().error();
 1606|   147k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   147k|    {
  468|   147k|        return m_unexpected;
  469|   147k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.07M|    {
 1663|  1.07M|        return std::move(value());
 1664|  1.07M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.36M|    {
 1627|  1.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.36M|        return this->get_value();
 1629|  1.36M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.36M|    {
  451|  1.36M|        return m_value;
  452|  1.36M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   288k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   288k|    static_cast<    \
  |  |  929|   288k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   288k|    static_cast<    \
  |  |  929|   288k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   288k|    {
 3312|   288k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  2.64M|    {
 4300|  2.64M|        return !x.is_at_end();
 4301|  2.64M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  11.4k|        : base(unexpect, std::move(e.error())),
 1474|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.4k|    {
 1476|  11.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.4k|          m_has_value(false)
  446|  11.4k|    {
  447|  11.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   966k|    {
 1177|   966k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   955k|        : base(std::in_place, std::forward<U>(val)),
 1428|   955k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   955k|    {
 1430|   955k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   955k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   955k|    {
  437|   955k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|   533k|    {
 1598|   533k|        return has_value();
 1599|   533k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  97.7k|    {
 1653|  97.7k|        return value();
 1654|  97.7k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  8.60k|        : base(unexpect, std::move(e.error())),
 1474|  8.60k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.60k|    {
 1476|  8.60k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  8.60k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.60k|          m_has_value(false)
  446|  8.60k|    {
  447|  8.60k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   614k|    {
 1177|   614k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   606k|        : base(std::in_place, std::forward<U>(val)),
 1428|   606k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   606k|    {
 1430|   606k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   606k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   606k|    {
  437|   606k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   614k|    {
 1598|   614k|        return has_value();
 1599|   614k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.22M|    {
  485|  1.22M|        return m_has_value;
  486|  1.22M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  8.60k|    {
 1604|  8.60k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  8.60k|        return this->get_unexpected().error();
 1606|  8.60k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  8.60k|    {
  468|  8.60k|        return m_unexpected;
  469|  8.60k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   606k|    {
 1663|   606k|        return std::move(value());
 1664|   606k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   606k|    {
 1627|   606k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   606k|        return this->get_value();
 1629|   606k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   606k|    {
  451|   606k|        return m_value;
  452|   606k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|    360|    {
 1604|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    360|        return this->get_unexpected().error();
 1606|    360|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  12.4k|        : base(unexpect, std::move(e.error())),
 1474|  12.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.4k|    {
 1476|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  12.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.4k|          m_has_value(false)
  446|  12.4k|    {
  447|  12.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   988k|    {
 1177|   988k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   140k|        : base(std::in_place, std::forward<U>(val)),
 1428|   140k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   140k|    {
 1430|   140k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   140k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   140k|    {
  437|   140k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   832k|        : base(unexpect, std::move(e.error())),
 1474|   832k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   832k|    {
 1476|   832k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   832k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   832k|          m_has_value(false)
  446|   832k|    {
  447|   832k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|   988k|    {
 1598|   988k|        return has_value();
 1599|   988k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  1.49M|    {
  485|  1.49M|        return m_has_value;
  486|  1.49M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|   367k|    {
 1604|   367k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   367k|        return this->get_unexpected().error();
 1606|   367k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   367k|    {
  468|   367k|        return m_unexpected;
  469|   367k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   422k|        : base(std::in_place, std::forward<U>(val)),
 1428|   422k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   422k|    {
 1430|   422k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   422k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   422k|    {
  437|   422k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   422k|    {
 1177|   422k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   143k|    {
 1653|   143k|        return value();
 1654|   143k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   143k|    {
  451|   143k|        return m_value;
  452|   143k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|   422k|    {
 1598|   422k|        return has_value();
 1599|   422k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   845k|    {
  485|   845k|        return m_has_value;
  486|   845k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   422k|    {
 1177|   422k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   422k|    {
 1663|   422k|        return std::move(value());
 1664|   422k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   422k|    {
 1627|   422k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   422k|        return this->get_value();
 1629|   422k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   422k|    {
  451|   422k|        return m_value;
  452|   422k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  2.62k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.62k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.62k|    {
 1430|  2.62k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.62k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.62k|    {
  437|  2.62k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|   422k|        : base(std::in_place, std::forward<U>(val)),
 1428|   422k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   422k|    {
 1430|   422k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   422k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   422k|    {
  437|   422k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   422k|    {
 1837|   422k|        return detail::transform_error_impl(std::move(*this),
 1838|   422k|                                            std::forward<F>(f));
 1839|   422k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|   422k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   422k|    else {
 1333|   422k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   422k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   422k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 422k, False: 0]
  |  |  ------------------
  ------------------
 1335|   422k|                   ? result(*std::forward<Exp>(exp))
 1336|   422k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   422k|    }
 1340|   422k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|   845k|    {
  485|   845k|        return m_has_value;
  486|   845k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   422k|    {
 1663|   422k|        return std::move(value());
 1664|   422k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   422k|    {
 1627|   422k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   422k|        return this->get_value();
 1629|   422k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|   422k|    {
  451|   422k|        return m_value;
  452|   422k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   422k|        : base(std::in_place, std::forward<U>(val)),
 1428|   422k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   422k|    {
 1430|   422k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   422k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   422k|    {
  437|   422k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   422k|    {
 1177|   422k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|   422k|    {
 1598|   422k|        return has_value();
 1599|   422k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|   845k|    {
  485|   845k|        return m_has_value;
  486|   845k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   422k|    {
 1663|   422k|        return std::move(value());
 1664|   422k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   422k|    {
 1627|   422k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   422k|        return this->get_value();
 1629|   422k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|   422k|    {
  451|   422k|        return m_value;
  452|   422k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1473|  3.30k|        : base(unexpect, std::move(e.error())),
 1474|  3.30k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.30k|    {
 1476|  3.30k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  624|  3.30k|        : m_has_value(false)
  625|  3.30k|    {
  626|  3.30k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  3.30k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|  3.30k|    {
  689|  3.30k|        scn::detail::construct_at(unexpected_ptr(),
  690|  3.30k|                                  std::forward<Args>(args)...);
  691|  3.30k|        m_has_value = false;
  692|  3.30k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  9.91k|    {
  718|  9.91k|        return reinterpret_cast<unexpected<E>*>(
  719|  9.91k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  9.91k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  9.91k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  61.6k|    {
 1177|  61.6k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1427|  58.3k|        : base(std::in_place, std::forward<U>(val)),
 1428|  58.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  58.3k|    {
 1430|  58.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  614|  58.3k|        : m_has_value(true)
  615|  58.3k|    {
  616|  58.3k|        construct(std::forward<Args>(args)...);
  617|  58.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  681|  58.3k|    {
  682|  58.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  58.3k|        m_has_value = true;
  684|  58.3k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  391|  58.3k|{
  392|  58.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  58.3k|        T(std::forward<Args>(args)...);
  394|  58.3k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   175k|    {
  706|   175k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   175k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   175k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|  61.6k|    {
 1598|  61.6k|        return has_value();
 1599|  61.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|   185k|    {
  675|   185k|        return m_has_value;
  676|   185k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|  3.30k|    {
 1604|  3.30k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.30k|        return this->get_unexpected().error();
 1606|  3.30k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  3.30k|    {
  658|  3.30k|        return *unexpected_ptr();
  659|  3.30k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1662|  58.3k|    {
 1663|  58.3k|        return std::move(value());
 1664|  58.3k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1626|  58.3k|    {
 1627|  58.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  58.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  58.3k|        return this->get_value();
 1629|  58.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  640|  58.3k|    {
  641|  58.3k|        return *value_ptr();
  642|  58.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|  61.6k|    {
  631|  61.6k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 58.3k, False: 3.30k]
  ------------------
  632|  58.3k|            destroy_value();
  633|  58.3k|        }
  634|  3.30k|        else {
  635|  3.30k|            destroy_unexpected();
  636|  3.30k|        }
  637|  61.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  58.3k|    {
  696|  58.3k|        scn::detail::destroy_at(value_ptr());
  697|  58.3k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  397|  58.3k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  58.3k|    else {
  404|  58.3k|        p->~T();
  405|  58.3k|    }
  406|  58.3k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  3.30k|    {
  700|  3.30k|        scn::detail::destroy_at(unexpected_ptr());
  701|  3.30k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   749k|    {
 2855|   749k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   749k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   749k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   749k|    {
 2836|   749k|        return t.data();
 2837|   749k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   541k|        : base(unexpect, std::move(e.error())),
 1474|   541k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   541k|    {
 1476|   541k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   541k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   541k|          m_has_value(false)
  446|   541k|    {
  447|   541k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.28M|    {
 1177|  1.28M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|   744k|        : base(std::in_place, std::forward<U>(val)),
 1428|   744k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   744k|    {
 1430|   744k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|   744k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   744k|    {
  437|   744k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   285k|    {
 1653|   285k|        return value();
 1654|   285k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   284k|    {
 1653|   284k|        return value();
 1654|   284k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|   316k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   316k|    static_cast<    \
  |  |  929|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   316k|    {
 3644|   316k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   230k|        : base(unexpect, std::move(e.error())),
 1474|   230k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   230k|    {
 1476|   230k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|   626k|    {
 4289|   626k|        return x.is_at_end();
 4290|   626k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  36.1M|    {
 4333|  36.1M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 36.1M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  36.1M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 36.1M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  36.1M|        return !read_at_position();
 4340|  36.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|  72.2G|    {
 4313|  72.2G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  72.2G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.2G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  72.2G|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 72.2G]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  72.2G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  72.2G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 72.1G, False: 35.6M]
  |  |  ------------------
  ------------------
 4320|  72.1G|            return true;
 4321|  72.1G|        }
 4322|       |
 4323|  71.1M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 35.6M, False: 35.5M]
  ------------------
 4324|  35.6M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 109k, False: 35.5M]
  ------------------
 4325|   109k|                return false;
 4326|   109k|            }
 4327|  35.6M|        }
 4328|  35.5M|        return true;
 4329|  35.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|  72.2G|    {
 4089|  72.2G|        return m_putback_buffer.size() + m_current_view.size();
 4090|  72.2G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  36.2M|    {
 4248|  36.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  36.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  36.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 36.2M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  36.2M|        auto res = read_at_position();
 4257|  36.2M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  36.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  36.2M|        return parent()->get_character_at(m_position);
 4259|  36.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  36.2M|    {
 4120|  36.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  36.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 658k, False: 35.5M]
  |  |  ------------------
  ------------------
 4121|  36.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|   658k|            return m_putback_buffer[pos];
 4123|   658k|        }
 4124|  35.5M|        const auto start = pos - m_putback_buffer.size();
 4125|  35.5M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  35.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  35.5M|        return m_current_view[start];
 4127|  35.5M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   265k|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   265k|    else {
 3810|       |        // utf-32
 3811|   265k|        static_assert(sizeof(U) == 4);
 3812|   265k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   265k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   265k|        return 1;
 3814|   265k|    }
 3815|   265k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   379k|        : base(std::in_place, std::forward<U>(val)),
 1428|   379k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   379k|    {
 1430|   379k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   379k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   379k|    {
  437|   379k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   401k|    {
 1177|   401k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  21.6k|        : base(unexpect, std::move(e.error())),
 1474|  21.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.6k|    {
 1476|  21.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  21.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.6k|          m_has_value(false)
  446|  21.6k|    {
  447|  21.6k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   164k|    {
 1598|   164k|        return has_value();
 1599|   164k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  2.22k|    {
 1653|  2.22k|        return value();
 1654|  2.22k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  72.1G|    {
 4283|  72.1G|        return !(lhs == rhs);
 4284|  72.1G|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  72.1G|    {
 4278|  72.1G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 72.1G, False: 0]
  |  Branch (4278:46): [True: 35.3M, False: 72.0G]
  ------------------
 4279|  72.1G|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  72.1G|    {
 4234|  72.1G|        ++m_position;
 4235|  72.1G|        (void)read_at_position();
 4236|  72.1G|        return *this;
 4237|  72.1G|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   265k|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   265k|    else {
 4016|   265k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   265k|        auto cp = static_cast<char32_t>(input.front());
 4018|   265k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108k, False: 156k]
  |  |  ------------------
  ------------------
 4019|   108k|            return invalid_code_point;
 4020|   108k|        }
 4021|   156k|        return cp;
 4022|   265k|    }
 4023|   265k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.48k|        : base(unexpect, std::move(e.error())),
 1474|  1.48k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.48k|    {
 1476|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.48k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.48k|          m_has_value(false)
  446|  1.48k|    {
  447|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   107k|    {
 1177|   107k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   106k|        : base(std::in_place, std::forward<U>(val)),
 1428|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   106k|    {
 1430|   106k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   106k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   106k|    {
  437|   106k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   107k|    {
 1598|   107k|        return has_value();
 1599|   107k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   215k|    {
  485|   215k|        return m_has_value;
  486|   215k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.48k|    {
 1604|  1.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.48k|        return this->get_unexpected().error();
 1606|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.48k|    {
  468|  1.48k|        return m_unexpected;
  469|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   106k|    {
 1663|   106k|        return std::move(value());
 1664|   106k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   106k|    {
 1627|   106k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   106k|        return this->get_value();
 1629|   106k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   106k|    {
  451|   106k|        return m_value;
  452|   106k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  36.7M|    {
 3330|  36.7M|        return m_sentinel;
 3331|  36.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|     72|    {
 1604|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     72|        return this->get_unexpected().error();
 1606|     72|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  19.7k|        : base(unexpect, std::move(e.error())),
 1474|  19.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  19.7k|    {
 1476|  19.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  39.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  39.4k|          m_has_value(false)
  446|  39.4k|    {
  447|  39.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   520k|    {
 1177|   520k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  2.58k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.58k|    {
 1430|  2.58k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.58k|    {
  437|  2.58k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|   390k|        : base(unexpect, std::move(e.error())),
 1474|   390k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   390k|    {
 1476|   390k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   390k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   390k|          m_has_value(false)
  446|   390k|    {
  447|   390k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|   408k|    {
 1598|   408k|        return has_value();
 1599|   408k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|   867k|    {
  485|   867k|        return m_has_value;
  486|   867k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|   148k|    {
 1604|   148k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   148k|        return this->get_unexpected().error();
 1606|   148k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   257k|    {
  468|   257k|        return m_unexpected;
  469|   257k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   130k|        : base(std::in_place, std::forward<U>(val)),
 1428|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   130k|    {
 1430|   130k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   130k|    {
  437|   130k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   130k|    {
 1177|   130k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  2.58k|    {
 1653|  2.58k|        return value();
 1654|  2.58k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  90.0k|    {
 1627|  90.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  90.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  90.0k|        return this->get_value();
 1629|  90.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  90.0k|    {
  451|  90.0k|        return m_value;
  452|  90.0k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   130k|    {
 1598|   130k|        return has_value();
 1599|   130k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   260k|    {
  485|   260k|        return m_has_value;
  486|   260k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   130k|    {
 1177|   130k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   130k|    {
 1663|   130k|        return std::move(value());
 1664|   130k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   130k|    {
 1627|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   130k|        return this->get_value();
 1629|   130k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   130k|    {
  451|   130k|        return m_value;
  452|   130k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   104k|    {
 1837|   104k|        return detail::transform_error_impl(std::move(*this),
 1838|   104k|                                            std::forward<F>(f));
 1839|   104k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   104k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   104k|    else {
 1333|   104k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   104k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   104k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 84.5k, False: 19.6k]
  |  |  ------------------
  ------------------
 1335|   104k|                   ? result(*std::forward<Exp>(exp))
 1336|   104k|                   : result(unexpect,
 1337|  19.6k|                            trivial_invoke(std::forward<F>(f),
 1338|  19.6k|                                           std::forward<Exp>(exp).error()));
 1339|   104k|    }
 1340|   104k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  87.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  87.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  87.4k|    {
 1430|  87.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  87.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  87.4k|    {
  437|  87.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  19.6k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  19.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  19.6k|    {
 1486|  19.6k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  87.4k|    {
 1663|  87.4k|        return std::move(value());
 1664|  87.4k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1427|   130k|        : base(std::in_place, std::forward<U>(val)),
 1428|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   130k|    {
 1430|   130k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   130k|    {
  437|   130k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   130k|    {
 1837|   130k|        return detail::transform_error_impl(std::move(*this),
 1838|   130k|                                            std::forward<F>(f));
 1839|   130k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|   130k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   130k|    else {
 1333|   130k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   130k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 130k, False: 0]
  |  |  ------------------
  ------------------
 1335|   130k|                   ? result(*std::forward<Exp>(exp))
 1336|   130k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   130k|    }
 1340|   130k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  484|   260k|    {
  485|   260k|        return m_has_value;
  486|   260k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   130k|    {
 1663|   130k|        return std::move(value());
 1664|   130k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   130k|    {
 1627|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   130k|        return this->get_value();
 1629|   130k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  450|   130k|    {
  451|   130k|        return m_value;
  452|   130k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   130k|        : base(std::in_place, std::forward<U>(val)),
 1428|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   130k|    {
 1430|   130k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   130k|    {
  437|   130k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   130k|    {
 1177|   130k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1597|   130k|    {
 1598|   130k|        return has_value();
 1599|   130k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   260k|    {
  485|   260k|        return m_has_value;
  486|   260k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   130k|    {
 1663|   130k|        return std::move(value());
 1664|   130k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   130k|    {
 1627|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   130k|        return this->get_value();
 1629|   130k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   130k|    {
  451|   130k|        return m_value;
  452|   130k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   111k|    {
 1837|   111k|        return detail::transform_error_impl(std::move(*this),
 1838|   111k|                                            std::forward<F>(f));
 1839|   111k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   111k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   111k|    else {
 1333|   111k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   111k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   111k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.94k, False: 108k]
  |  |  ------------------
  ------------------
 1335|   111k|                   ? result(*std::forward<Exp>(exp))
 1336|   111k|                   : result(unexpect,
 1337|   108k|                            trivial_invoke(std::forward<F>(f),
 1338|   108k|                                           std::forward<Exp>(exp).error()));
 1339|   111k|    }
 1340|   111k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1613|   108k|    {
 1614|   108k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|   108k|        return std::move(this->get_unexpected().error());
 1616|   108k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  8.06k|        : base(unexpect, std::move(e.error())),
 1474|  8.06k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.06k|    {
 1476|  8.06k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  624|  8.06k|        : m_has_value(false)
  625|  8.06k|    {
  626|  8.06k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  8.06k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|  8.06k|    {
  689|  8.06k|        scn::detail::construct_at(unexpected_ptr(),
  690|  8.06k|                                  std::forward<Args>(args)...);
  691|  8.06k|        m_has_value = false;
  692|  8.06k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  24.1k|    {
  718|  24.1k|        return reinterpret_cast<unexpected<E>*>(
  719|  24.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  24.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  24.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.2k|    {
 1177|  17.2k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  9.18k|        : base(std::in_place, std::forward<U>(val)),
 1428|  9.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  9.18k|    {
 1430|  9.18k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  614|  9.18k|        : m_has_value(true)
  615|  9.18k|    {
  616|  9.18k|        construct(std::forward<Args>(args)...);
  617|  9.18k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  681|  9.18k|    {
  682|  9.18k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  9.18k|        m_has_value = true;
  684|  9.18k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  391|  9.18k|{
  392|  9.18k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  9.18k|        T(std::forward<Args>(args)...);
  394|  9.18k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  27.5k|    {
  706|  27.5k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  27.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  27.5k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  17.2k|    {
 1598|  17.2k|        return has_value();
 1599|  17.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  51.7k|    {
  675|  51.7k|        return m_has_value;
  676|  51.7k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|  8.06k|    {
 1604|  8.06k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  8.06k|        return this->get_unexpected().error();
 1606|  8.06k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  8.06k|    {
  658|  8.06k|        return *unexpected_ptr();
  659|  8.06k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1662|  9.18k|    {
 1663|  9.18k|        return std::move(value());
 1664|  9.18k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|  9.18k|    {
 1627|  9.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.18k|        return this->get_value();
 1629|  9.18k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  9.18k|    {
  641|  9.18k|        return *value_ptr();
  642|  9.18k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  15.7k|    {
 3326|  15.7k|        return m_iterator;
 3327|  15.7k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  15.7k|    {
 3330|  15.7k|        return m_sentinel;
 3331|  15.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  17.2k|    {
  631|  17.2k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 9.18k, False: 8.06k]
  ------------------
  632|  9.18k|            destroy_value();
  633|  9.18k|        }
  634|  8.06k|        else {
  635|  8.06k|            destroy_unexpected();
  636|  8.06k|        }
  637|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  9.18k|    {
  696|  9.18k|        scn::detail::destroy_at(value_ptr());
  697|  9.18k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  397|  9.18k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  9.18k|    else {
  404|  9.18k|        p->~T();
  405|  9.18k|    }
  406|  9.18k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  8.06k|    {
  700|  8.06k|        scn::detail::destroy_at(unexpected_ptr());
  701|  8.06k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   480k|    {
 1598|   480k|        return has_value();
 1599|   480k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   960k|    {
  485|   960k|        return m_has_value;
  486|   960k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   341k|    {
 1604|   341k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   341k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   341k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   341k|        return this->get_unexpected().error();
 1606|   341k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   341k|    {
  468|   341k|        return m_unexpected;
  469|   341k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   136k|    {
 1663|   136k|        return std::move(value());
 1664|   136k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   138k|    {
 1627|   138k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   138k|        return this->get_value();
 1629|   138k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   138k|    {
  451|   138k|        return m_value;
  452|   138k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|  11.6k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  11.6k|    static_cast<    \
  |  |  929|  11.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  11.6k|    static_cast<    \
  |  |  929|  11.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  11.6k|    {
 3312|  11.6k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  35.4M|    {
 4300|  35.4M|        return !x.is_at_end();
 4301|  35.4M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  21.6k|        : base(unexpect, std::move(e.error())),
 1474|  21.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.6k|    {
 1476|  21.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  21.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  21.6k|          m_has_value(false)
  446|  21.6k|    {
  447|  21.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   401k|    {
 1177|   401k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   379k|        : base(std::in_place, std::forward<U>(val)),
 1428|   379k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   379k|    {
 1430|   379k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   379k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   379k|    {
  437|   379k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   164k|    {
 1598|   164k|        return has_value();
 1599|   164k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   639k|    {
  485|   639k|        return m_has_value;
  486|   639k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  2.22k|    {
 1653|  2.22k|        return value();
 1654|  2.22k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   217k|    {
 1627|   217k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   217k|        return this->get_value();
 1629|   217k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   217k|    {
  451|   217k|        return m_value;
  452|   217k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  1.48k|        : base(unexpect, std::move(e.error())),
 1474|  1.48k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.48k|    {
 1476|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  1.48k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.48k|          m_has_value(false)
  446|  1.48k|    {
  447|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   107k|    {
 1177|   107k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   106k|        : base(std::in_place, std::forward<U>(val)),
 1428|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   106k|    {
 1430|   106k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   106k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   106k|    {
  437|   106k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   132k|    {
 1837|   132k|        return detail::transform_error_impl(std::move(*this),
 1838|   132k|                                            std::forward<F>(f));
 1839|   132k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   132k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   132k|    else {
 1333|   132k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   132k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   132k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 130k, False: 1.86k]
  |  |  ------------------
  ------------------
 1335|   132k|                   ? result(*std::forward<Exp>(exp))
 1336|   132k|                   : result(unexpect,
 1337|  1.86k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.86k|                                           std::forward<Exp>(exp).error()));
 1339|   132k|    }
 1340|   132k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   214k|    {
 1663|   214k|        return std::move(value());
 1664|   214k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  21.5k|    {
 1614|  21.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  21.5k|        return std::move(this->get_unexpected().error());
 1616|  21.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  21.6k|    {
  468|  21.6k|        return m_unexpected;
  469|  21.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.86k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.86k|    {
 1486|  1.86k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   107k|    {
 1598|   107k|        return has_value();
 1599|   107k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|   215k|    {
  485|   215k|        return m_has_value;
  486|   215k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  1.48k|    {
 1604|  1.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.48k|        return this->get_unexpected().error();
 1606|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.48k|    {
  468|  1.48k|        return m_unexpected;
  469|  1.48k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   106k|    {
 1663|   106k|        return std::move(value());
 1664|   106k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   106k|    {
 1627|   106k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   106k|        return this->get_value();
 1629|   106k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   106k|    {
  451|   106k|        return m_value;
  452|   106k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|     72|    {
 1604|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     72|        return this->get_unexpected().error();
 1606|     72|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  19.7k|        : base(unexpect, std::move(e.error())),
 1474|  19.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  19.7k|    {
 1476|  19.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  39.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  39.4k|          m_has_value(false)
  446|  39.4k|    {
  447|  39.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   408k|    {
 1177|   408k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  2.58k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.58k|    {
 1430|  2.58k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.58k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.58k|    {
  437|  2.58k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   281k|        : base(unexpect, std::move(e.error())),
 1474|   281k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   281k|    {
 1476|   281k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   281k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   281k|          m_has_value(false)
  446|   281k|    {
  447|   281k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|   408k|    {
 1598|   408k|        return has_value();
 1599|   408k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|   643k|    {
  485|   643k|        return m_has_value;
  486|   643k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|   148k|    {
 1604|   148k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   148k|        return this->get_unexpected().error();
 1606|   148k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   148k|    {
  468|   148k|        return m_unexpected;
  469|   148k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   130k|        : base(std::in_place, std::forward<U>(val)),
 1428|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   130k|    {
 1430|   130k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   130k|    {
  437|   130k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   130k|    {
 1177|   130k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  2.58k|    {
 1653|  2.58k|        return value();
 1654|  2.58k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  87.1k|    {
 1627|  87.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  87.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  87.1k|        return this->get_value();
 1629|  87.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  87.1k|    {
  451|  87.1k|        return m_value;
  452|  87.1k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|   130k|    {
 1598|   130k|        return has_value();
 1599|   130k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   260k|    {
  485|   260k|        return m_has_value;
  486|   260k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   130k|    {
 1177|   130k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   130k|    {
 1663|   130k|        return std::move(value());
 1664|   130k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   130k|    {
 1627|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   130k|        return this->get_value();
 1629|   130k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   130k|    {
  451|   130k|        return m_value;
  452|   130k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   104k|    {
 1837|   104k|        return detail::transform_error_impl(std::move(*this),
 1838|   104k|                                            std::forward<F>(f));
 1839|   104k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   104k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   104k|    else {
 1333|   104k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   104k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   104k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 84.5k, False: 19.6k]
  |  |  ------------------
  ------------------
 1335|   104k|                   ? result(*std::forward<Exp>(exp))
 1336|   104k|                   : result(unexpect,
 1337|  19.6k|                            trivial_invoke(std::forward<F>(f),
 1338|  19.6k|                                           std::forward<Exp>(exp).error()));
 1339|   104k|    }
 1340|   104k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  84.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  84.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  84.5k|    {
 1430|  84.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  84.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  84.5k|    {
  437|  84.5k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  19.6k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  19.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  19.6k|    {
 1486|  19.6k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  84.5k|    {
 1663|  84.5k|        return std::move(value());
 1664|  84.5k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|   130k|        : base(std::in_place, std::forward<U>(val)),
 1428|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   130k|    {
 1430|   130k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   130k|    {
  437|   130k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   130k|    {
 1837|   130k|        return detail::transform_error_impl(std::move(*this),
 1838|   130k|                                            std::forward<F>(f));
 1839|   130k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|   130k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   130k|    else {
 1333|   130k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   130k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 130k, False: 0]
  |  |  ------------------
  ------------------
 1335|   130k|                   ? result(*std::forward<Exp>(exp))
 1336|   130k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   130k|    }
 1340|   130k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|   260k|    {
  485|   260k|        return m_has_value;
  486|   260k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   130k|    {
 1663|   130k|        return std::move(value());
 1664|   130k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   130k|    {
 1627|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   130k|        return this->get_value();
 1629|   130k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|   130k|    {
  451|   130k|        return m_value;
  452|   130k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   130k|        : base(std::in_place, std::forward<U>(val)),
 1428|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   130k|    {
 1430|   130k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   130k|    {
  437|   130k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   130k|    {
 1177|   130k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|   130k|    {
 1598|   130k|        return has_value();
 1599|   130k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|   260k|    {
  485|   260k|        return m_has_value;
  486|   260k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   130k|    {
 1663|   130k|        return std::move(value());
 1664|   130k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   130k|    {
 1627|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   130k|        return this->get_value();
 1629|   130k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|   130k|    {
  451|   130k|        return m_value;
  452|   130k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  8.06k|        : base(unexpect, std::move(e.error())),
 1474|  8.06k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.06k|    {
 1476|  8.06k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  624|  8.06k|        : m_has_value(false)
  625|  8.06k|    {
  626|  8.06k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  8.06k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|  8.06k|    {
  689|  8.06k|        scn::detail::construct_at(unexpected_ptr(),
  690|  8.06k|                                  std::forward<Args>(args)...);
  691|  8.06k|        m_has_value = false;
  692|  8.06k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  24.1k|    {
  718|  24.1k|        return reinterpret_cast<unexpected<E>*>(
  719|  24.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  24.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  24.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.2k|    {
 1177|  17.2k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|  9.18k|        : base(std::in_place, std::forward<U>(val)),
 1428|  9.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  9.18k|    {
 1430|  9.18k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  614|  9.18k|        : m_has_value(true)
  615|  9.18k|    {
  616|  9.18k|        construct(std::forward<Args>(args)...);
  617|  9.18k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  681|  9.18k|    {
  682|  9.18k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  9.18k|        m_has_value = true;
  684|  9.18k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  391|  9.18k|{
  392|  9.18k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  9.18k|        T(std::forward<Args>(args)...);
  394|  9.18k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  27.5k|    {
  706|  27.5k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  27.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  27.5k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  17.2k|    {
 1598|  17.2k|        return has_value();
 1599|  17.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  51.7k|    {
  675|  51.7k|        return m_has_value;
  676|  51.7k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|  8.06k|    {
 1604|  8.06k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  8.06k|        return this->get_unexpected().error();
 1606|  8.06k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  8.06k|    {
  658|  8.06k|        return *unexpected_ptr();
  659|  8.06k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1662|  9.18k|    {
 1663|  9.18k|        return std::move(value());
 1664|  9.18k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|  9.18k|    {
 1627|  9.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.18k|        return this->get_value();
 1629|  9.18k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  9.18k|    {
  641|  9.18k|        return *value_ptr();
  642|  9.18k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  17.2k|    {
  631|  17.2k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 9.18k, False: 8.06k]
  ------------------
  632|  9.18k|            destroy_value();
  633|  9.18k|        }
  634|  8.06k|        else {
  635|  8.06k|            destroy_unexpected();
  636|  8.06k|        }
  637|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  9.18k|    {
  696|  9.18k|        scn::detail::destroy_at(value_ptr());
  697|  9.18k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  397|  9.18k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  9.18k|    else {
  404|  9.18k|        p->~T();
  405|  9.18k|    }
  406|  9.18k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  8.06k|    {
  700|  8.06k|        scn::detail::destroy_at(unexpected_ptr());
  701|  8.06k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   111k|    {
 2855|   111k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   111k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   111k|    {
 2836|   111k|        return t.data();
 2837|   111k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  2.51k|    {
 1653|  2.51k|        return value();
 1654|  2.51k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  2.51k|    {
 1653|  2.51k|        return value();
 1654|  2.51k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|   111k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   111k|    static_cast<    \
  |  |  929|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   111k|    {
 3644|   111k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
 3649|  15.3k|{
 3650|  15.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  15.3k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   853k|    {
 5476|   853k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   853k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 853k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   853k|        return static_cast<std::size_t>(m_desc &
 5481|   853k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   853k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|  1.70M|    {
 5501|  1.70M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  1.70M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   853k|    {
 5444|   853k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   853k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 853k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   853k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   853k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 853k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   853k|        const auto t = type(id);
 5456|   853k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   853k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 853k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   853k|        basic_scan_arg<Context> arg;
 5461|   853k|        arg.m_type = t;
 5462|   853k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 853k, False: 0]
  ------------------
 5463|   853k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   853k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   853k|        return arg;
 5469|   853k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   853k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   853k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   853k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   853k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   853k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   853k|    {
 5505|   853k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   853k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  1.59M|    {
 5257|  1.59M|        return m_type != detail::arg_type::none_type;
 5258|  1.59M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  97.4k|{
 8428|  97.4k|#define SCN_VISIT(Type)                                         \
 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  97.4k|    }                                                           \
 8432|  97.4k|    else {                                                      \
 8433|  97.4k|        return vis(monostate_val);                              \
 8434|  97.4k|    }
 8435|       |
 8436|  97.4k|    monostate monostate_val{};
 8437|       |
 8438|  97.4k|    switch (arg.m_type) {
 8439|  16.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 16.2k, False: 81.1k]
  ------------------
 8440|  16.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  16.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.2k|    }                                                           \
  |  | 8432|  16.2k|    else {                                                      \
  |  | 8433|  16.2k|        return vis(monostate_val);                              \
  |  | 8434|  16.2k|    }
  ------------------
 8441|  16.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 97.4k]
  ------------------
 8442|  16.2k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  16.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.2k|    }                                                           \
  |  | 8432|  16.2k|    else {                                                      \
  |  | 8433|  16.2k|        return vis(monostate_val);                              \
  |  | 8434|  16.2k|    }
  ------------------
 8443|  34.8k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 18.6k, False: 78.7k]
  ------------------
 8444|  34.8k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  34.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.8k|    }                                                           \
  |  | 8432|  34.8k|    else {                                                      \
  |  | 8433|  34.8k|        return vis(monostate_val);                              \
  |  | 8434|  34.8k|    }
  ------------------
 8445|  34.8k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 97.4k]
  ------------------
 8446|  34.8k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  34.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.8k|    }                                                           \
  |  | 8432|  34.8k|    else {                                                      \
  |  | 8433|  34.8k|        return vis(monostate_val);                              \
  |  | 8434|  34.8k|    }
  ------------------
 8447|  53.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 19.0k, False: 78.3k]
  ------------------
 8448|  53.9k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  53.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  53.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  53.9k|    }                                                           \
  |  | 8432|  53.9k|    else {                                                      \
  |  | 8433|  53.9k|        return vis(monostate_val);                              \
  |  | 8434|  53.9k|    }
  ------------------
 8449|  67.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 13.5k, False: 83.8k]
  ------------------
 8450|  67.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  67.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  67.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  67.4k|    }                                                           \
  |  | 8432|  67.4k|    else {                                                      \
  |  | 8433|  67.4k|        return vis(monostate_val);                              \
  |  | 8434|  67.4k|    }
  ------------------
 8451|  67.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 97.4k]
  ------------------
 8452|  67.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  67.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  67.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  67.4k|    }                                                           \
  |  | 8432|  67.4k|    else {                                                      \
  |  | 8433|  67.4k|        return vis(monostate_val);                              \
  |  | 8434|  67.4k|    }
  ------------------
 8453|  82.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 14.8k, False: 82.5k]
  ------------------
 8454|  82.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  82.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  82.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  82.3k|    }                                                           \
  |  | 8432|  82.3k|    else {                                                      \
  |  | 8433|  82.3k|        return vis(monostate_val);                              \
  |  | 8434|  82.3k|    }
  ------------------
 8455|  82.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 97.4k]
  ------------------
 8456|  82.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  82.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  82.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  82.3k|    }                                                           \
  |  | 8432|  82.3k|    else {                                                      \
  |  | 8433|  82.3k|        return vis(monostate_val);                              \
  |  | 8434|  82.3k|    }
  ------------------
 8457|  97.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 15.0k, False: 82.3k]
  ------------------
 8458|  97.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8459|  97.4k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 97.4k]
  ------------------
 8460|  97.4k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8461|  97.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 97.4k]
  ------------------
 8462|  97.4k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8463|  97.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 97.4k]
  ------------------
 8464|  97.4k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8465|  97.4k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 97.4k]
  ------------------
 8466|  97.4k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8467|  97.4k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 97.4k]
  ------------------
 8468|  97.4k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8469|  97.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 97.4k]
  ------------------
 8470|  97.4k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8471|  97.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 97.4k]
  ------------------
 8472|  97.4k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8473|  97.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 97.4k]
  ------------------
 8474|  97.4k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8475|  97.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 97.4k]
  ------------------
 8476|  97.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8477|  97.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 97.4k]
  ------------------
 8478|  97.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8479|  97.4k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 97.4k]
  ------------------
 8480|  97.4k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8481|  97.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 97.4k]
  ------------------
 8482|  97.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8483|  97.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 97.4k]
  ------------------
 8484|  97.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8485|  97.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 97.4k]
  ------------------
 8486|  97.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  97.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  97.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  97.4k|    }                                                           \
  |  | 8432|  97.4k|    else {                                                      \
  |  | 8433|  97.4k|        return vis(monostate_val);                              \
  |  | 8434|  97.4k|    }
  ------------------
 8487|       |
 8488|  97.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 97.4k]
  ------------------
 8489|  97.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  97.4k|            return vis(
 8491|  97.4k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 97.4k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 97.4k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  97.4k|            SCN_CLANG_POP
 8506|  97.4k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   724k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   724k|    {
 5555|   724k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   362k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   362k|    {
 8149|   362k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|   724k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   724k|    static_cast<    \
  |  |  929|   724k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   724k|    static_cast<    \
  |  |  929|   724k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   724k|    {
 8067|   724k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|   458k|{
 4353|   458k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 458k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   458k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   458k|                            ranges::default_sentinel};
 4359|   458k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|   458k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   458k|    {
 4185|   458k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   458k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   458k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   458k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   458k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   458k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   458k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  96.0k|{
 8428|  96.0k|#define SCN_VISIT(Type)                                         \
 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  96.0k|    }                                                           \
 8432|  96.0k|    else {                                                      \
 8433|  96.0k|        return vis(monostate_val);                              \
 8434|  96.0k|    }
 8435|       |
 8436|  96.0k|    monostate monostate_val{};
 8437|       |
 8438|  96.0k|    switch (arg.m_type) {
 8439|  16.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 16.1k, False: 79.8k]
  ------------------
 8440|  16.1k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.1k|    }                                                           \
  |  | 8432|  16.1k|    else {                                                      \
  |  | 8433|  16.1k|        return vis(monostate_val);                              \
  |  | 8434|  16.1k|    }
  ------------------
 8441|  16.1k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 96.0k]
  ------------------
 8442|  16.1k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  16.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  16.1k|    }                                                           \
  |  | 8432|  16.1k|    else {                                                      \
  |  | 8433|  16.1k|        return vis(monostate_val);                              \
  |  | 8434|  16.1k|    }
  ------------------
 8443|  34.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 18.1k, False: 77.9k]
  ------------------
 8444|  34.2k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  34.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.2k|    }                                                           \
  |  | 8432|  34.2k|    else {                                                      \
  |  | 8433|  34.2k|        return vis(monostate_val);                              \
  |  | 8434|  34.2k|    }
  ------------------
 8445|  34.2k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 96.0k]
  ------------------
 8446|  34.2k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  34.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.2k|    }                                                           \
  |  | 8432|  34.2k|    else {                                                      \
  |  | 8433|  34.2k|        return vis(monostate_val);                              \
  |  | 8434|  34.2k|    }
  ------------------
 8447|  52.7k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 18.4k, False: 77.6k]
  ------------------
 8448|  52.7k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  52.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  52.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  52.7k|    }                                                           \
  |  | 8432|  52.7k|    else {                                                      \
  |  | 8433|  52.7k|        return vis(monostate_val);                              \
  |  | 8434|  52.7k|    }
  ------------------
 8449|  66.2k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 13.5k, False: 82.5k]
  ------------------
 8450|  66.2k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  66.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  66.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  66.2k|    }                                                           \
  |  | 8432|  66.2k|    else {                                                      \
  |  | 8433|  66.2k|        return vis(monostate_val);                              \
  |  | 8434|  66.2k|    }
  ------------------
 8451|  66.2k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 96.0k]
  ------------------
 8452|  66.2k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  66.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  66.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  66.2k|    }                                                           \
  |  | 8432|  66.2k|    else {                                                      \
  |  | 8433|  66.2k|        return vis(monostate_val);                              \
  |  | 8434|  66.2k|    }
  ------------------
 8453|  81.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 14.8k, False: 81.2k]
  ------------------
 8454|  81.0k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  81.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  81.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  81.0k|    }                                                           \
  |  | 8432|  81.0k|    else {                                                      \
  |  | 8433|  81.0k|        return vis(monostate_val);                              \
  |  | 8434|  81.0k|    }
  ------------------
 8455|  81.0k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 96.0k]
  ------------------
 8456|  81.0k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  81.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  81.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  81.0k|    }                                                           \
  |  | 8432|  81.0k|    else {                                                      \
  |  | 8433|  81.0k|        return vis(monostate_val);                              \
  |  | 8434|  81.0k|    }
  ------------------
 8457|  96.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 14.9k, False: 81.0k]
  ------------------
 8458|  96.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8459|  96.0k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 96.0k]
  ------------------
 8460|  96.0k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8461|  96.0k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 96.0k]
  ------------------
 8462|  96.0k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8463|  96.0k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 96.0k]
  ------------------
 8464|  96.0k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8465|  96.0k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 96.0k]
  ------------------
 8466|  96.0k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8467|  96.0k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 96.0k]
  ------------------
 8468|  96.0k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8469|  96.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 96.0k]
  ------------------
 8470|  96.0k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8471|  96.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 96.0k]
  ------------------
 8472|  96.0k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8473|  96.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 96.0k]
  ------------------
 8474|  96.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8475|  96.0k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 96.0k]
  ------------------
 8476|  96.0k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8477|  96.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 96.0k]
  ------------------
 8478|  96.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8479|  96.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 96.0k]
  ------------------
 8480|  96.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8481|  96.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 96.0k]
  ------------------
 8482|  96.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8483|  96.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 96.0k]
  ------------------
 8484|  96.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8485|  96.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 96.0k]
  ------------------
 8486|  96.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.0k|    }                                                           \
  |  | 8432|  96.0k|    else {                                                      \
  |  | 8433|  96.0k|        return vis(monostate_val);                              \
  |  | 8434|  96.0k|    }
  ------------------
 8487|       |
 8488|  96.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 96.0k]
  ------------------
 8489|  96.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  96.0k|            return vis(
 8491|  96.0k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 96.0k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 96.0k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  96.0k|            SCN_CLANG_POP
 8506|  96.0k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   362k|{
 7055|   362k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   362k|    handler.check_args_exhausted();
 7057|   362k|    return handler.get_error();
 7058|   362k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   362k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   362k|    auto begin = format.data();
 7024|   362k|    auto it = begin;
 7025|   362k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   646k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 362k, False: 284k]
  ------------------
 7028|   362k|        const auto ch = *it++;
 7029|   362k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 362k, False: 0]
  ------------------
 7030|   362k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   362k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   362k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 77.3k, False: 284k]
  ------------------
 7034|  77.3k|                return;
 7035|  77.3k|            }
 7036|   362k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   362k|    }
 7047|       |
 7048|   284k|    handler.on_literal_text(begin, end);
 7049|   284k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|   362k|{
 6953|   362k|    struct id_adapter {
 6954|   362k|        constexpr void operator()()
 6955|   362k|        {
 6956|   362k|            arg_id = handler.on_arg_id();
 6957|   362k|        }
 6958|   362k|        constexpr void operator()(std::size_t id)
 6959|   362k|        {
 6960|   362k|            arg_id = handler.on_arg_id(id);
 6961|   362k|        }
 6962|       |
 6963|   362k|        constexpr void on_error(const char* msg)
 6964|   362k|        {
 6965|   362k|            SCN_UNLIKELY_ATTR
 6966|   362k|            handler.on_error(msg);
 6967|   362k|        }
 6968|       |
 6969|   362k|        Handler& handler;
 6970|   362k|        std::size_t arg_id;
 6971|   362k|    };
 6972|       |
 6973|   362k|    ++begin;
 6974|   362k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   362k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 362k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   362k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 362k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   362k|    else {
 6986|   362k|        auto adapter = id_adapter{handler, 0};
 6987|   362k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   362k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   362k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 362k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   362k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 362k, False: 0]
  ------------------
 6998|   362k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   362k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   362k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.7k, False: 336k]
  |  |  |  Branch (859:45): [True: 0, False: 362k]
  |  |  |  Branch (859:45): [True: 25.7k, False: 336k]
  |  |  ------------------
  ------------------
 7004|  25.7k|                handler.on_error("Unknown format specifier");
 7005|  25.7k|                return begin;
 7006|  25.7k|            }
 7007|   362k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   362k|    }
 7014|   336k|    return begin + 1;
 7015|   362k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|   724k|    {
 8050|   724k|        return m_args.get(id);
 8051|   724k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|   673k|    {
 8060|   673k|        return m_locale;
 8061|   673k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   724k|    {
 5576|   724k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 724k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   724k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   724k|        do_check_arg_id(id);
 5584|   724k|        return id;
 5585|   724k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   724k|{
 6064|   724k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   724k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   724k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   362k|{
 6454|   362k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   362k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 362k, False: 0]
  |  Branch (6455:26): [True: 0, False: 362k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   362k|    handler();
 6460|   362k|    return begin;
 6461|   362k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   362k|        {
 6956|   362k|            arg_id = handler.on_arg_id();
 6957|   362k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|  1.44M|    {
 5262|  1.44M|        return m_type;
 5263|  1.44M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   673k|    {
 5571|   673k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   673k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|  1.39M|    {
 5560|  1.39M|        return m_format.data();
 5561|  1.39M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   362k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   362k|    {
 7133|   362k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   362k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|   362k|{
 6869|   362k|    auto do_presentation = [&]() -> const CharT* {
 6870|   362k|        if (*begin == CharT{'['}) {
 6871|   362k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   362k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   362k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   362k|                return begin;
 6877|   362k|            }
 6878|   362k|            handler.on_character_set_string(set);
 6879|   362k|            return begin;
 6880|   362k|        }
 6881|   362k|        if (*begin == CharT{'/'}) {
 6882|   362k|            return parse_presentation_regex(begin, end, handler);
 6883|   362k|        }
 6884|   362k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   362k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   362k|            handler.on_error("Invalid type specifier in format string");
 6887|   362k|            return begin;
 6888|   362k|        }
 6889|   362k|        handler.on_type(type);
 6890|   362k|        return begin;
 6891|   362k|    };
 6892|       |
 6893|   362k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 362k, False: 0]
  |  Branch (6893:28): [True: 344k, False: 17.1k]
  ------------------
 6894|   362k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 336k, False: 8.59k]
  |  Branch (6894:36): [True: 271k, False: 65.0k]
  ------------------
 6895|   271k|        return do_presentation();
 6896|   271k|    }
 6897|       |
 6898|  90.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.7k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  90.7k|    begin = parse_align(begin, end, handler);
 6904|  90.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.7k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  90.7k|    begin = parse_width(begin, end, handler);
 6910|  90.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.7k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  90.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 90.7k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  90.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 65.0k, False: 25.7k]
  ------------------
 6929|  65.0k|        handler.on_localized();
 6930|  65.0k|        ++begin;
 6931|  65.0k|    }
 6932|  90.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.7k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  90.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 90.7k, False: 0]
  |  Branch (6937:25): [True: 25.7k, False: 65.0k]
  ------------------
 6938|  25.7k|        do_presentation();
 6939|  25.7k|    }
 6940|  90.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.7k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  90.7k|    return begin;
 6946|  90.7k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|   690k|{
 6518|   690k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 543k, False: 147k]
  |  Branch (6518:33): [True: 543k, False: 0]
  ------------------
 6519|   690k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 130k, False: 17.1k]
  |  Branch (6519:33): [True: 130k, False: 0]
  ------------------
 6520|   690k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   297k|    auto do_presentation = [&]() -> const CharT* {
 6870|   297k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 297k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   297k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 297k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   297k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   297k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.1k, False: 279k]
  |  |  ------------------
  ------------------
 6886|  17.1k|            handler.on_error("Invalid type specifier in format string");
 6887|  17.1k|            return begin;
 6888|  17.1k|        }
 6889|   279k|        handler.on_type(type);
 6890|   279k|        return begin;
 6891|   297k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|   594k|{
 6466|   594k|    switch (type) {
 6467|  45.7k|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 45.7k, False: 548k]
  ------------------
 6468|  62.9k|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 17.1k, False: 577k]
  ------------------
 6469|  62.9k|            return presentation_type::int_binary;
 6470|   129k|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 129k, False: 464k]
  ------------------
 6471|   129k|            return presentation_type::int_decimal;
 6472|   147k|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 147k, False: 446k]
  ------------------
 6473|   147k|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 594k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|  81.8k|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 81.8k, False: 512k]
  ------------------
 6477|  81.8k|            return presentation_type::int_octal;
 6478|   137k|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 137k, False: 457k]
  ------------------
 6479|   137k|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 594k]
  ------------------
 6480|   137k|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 594k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 594k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 594k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 594k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 594k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 594k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 594k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 594k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 594k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 594k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 594k]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 594k]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 594k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 594k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 594k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 594k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  34.3k|        default:
  ------------------
  |  Branch (6510:9): [True: 34.3k, False: 560k]
  ------------------
 6511|  34.3k|            return presentation_type::none;
 6512|   594k|    }
 6513|   594k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|  90.7k|{
 6543|  90.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  90.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  90.7k|    auto check_align = [](wchar_t ch) {
 6546|  90.7k|        switch (ch) {
 6547|  90.7k|            case L'<':
 6548|  90.7k|                return align_type::left;
 6549|  90.7k|            case L'>':
 6550|  90.7k|                return align_type::right;
 6551|  90.7k|            case L'^':
 6552|  90.7k|                return align_type::center;
 6553|  90.7k|            default:
 6554|  90.7k|                return align_type::none;
 6555|  90.7k|        }
 6556|  90.7k|    };
 6557|       |
 6558|  90.7k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  90.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.7k]
  |  |  |  Branch (859:45): [True: 0, False: 90.7k]
  |  |  |  Branch (859:45): [True: 0, False: 90.7k]
  |  |  ------------------
  ------------------
 6560|  90.7k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  90.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  90.7k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  90.7k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  90.7k|    const auto begin_before_fill = begin;
 6570|  90.7k|    begin += potential_fill_len;
 6571|       |
 6572|  90.7k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 90.7k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  90.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  90.7k|    const auto begin_after_fill = begin;
 6578|  90.7k|    ++begin;
 6579|       |
 6580|  90.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 90.7k, False: 0]
  ------------------
 6581|  90.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.7k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  90.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 90.7k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  90.7k|    }
 6589|       |
 6590|  90.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 90.7k, False: 0]
  ------------------
 6591|  90.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 90.7k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  90.7k|        return begin_before_fill;
 6596|  90.7k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  90.7k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|   181k|{
 6525|   181k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|   181k|    else {
 6530|   181k|        const auto lengths =
 6531|   181k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|   181k|            "\3\4";
 6533|   181k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|   181k|        return len;
 6535|   181k|    }
 6536|   181k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   181k|    auto check_align = [](wchar_t ch) {
 6546|   181k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 181k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 181k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 181k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   181k|            default:
  ------------------
  |  Branch (6553:13): [True: 181k, False: 0]
  ------------------
 6554|   181k|                return align_type::none;
 6555|   181k|        }
 6556|   181k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|  90.7k|{
 6608|  90.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  90.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  90.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 73.5k, False: 17.1k]
  |  Branch (6610:33): [True: 0, False: 73.5k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  90.7k|    return begin;
 6621|  90.7k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|  65.0k|    {
 7138|  65.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  65.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 29.0k, False: 35.9k]
  ------------------
 7140|  65.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 29.0k]
  ------------------
 7141|  65.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  65.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  65.0k|        Handler::on_localized();
 7150|  65.0k|    }
_ZN3scn2v36detail12specs_setter12on_localizedILb1EEEvv:
 6282|   165k|    {
 6283|   165k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6284|   165k|            m_specs.localized = true;
 6285|       |        }
 6286|       |        else {
 6287|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6288|       |        }
 6289|   165k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   336k|{
 8428|   336k|#define SCN_VISIT(Type)                                         \
 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   336k|    }                                                           \
 8432|   336k|    else {                                                      \
 8433|   336k|        return vis(monostate_val);                              \
 8434|   336k|    }
 8435|       |
 8436|   336k|    monostate monostate_val{};
 8437|       |
 8438|   336k|    switch (arg.m_type) {
 8439|  54.2k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 54.2k, False: 282k]
  ------------------
 8440|  54.2k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  54.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.2k|    }                                                           \
  |  | 8432|  54.2k|    else {                                                      \
  |  | 8433|  54.2k|        return vis(monostate_val);                              \
  |  | 8434|  54.2k|    }
  ------------------
 8441|  54.2k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 336k]
  ------------------
 8442|  54.2k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  54.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.2k|    }                                                           \
  |  | 8432|  54.2k|    else {                                                      \
  |  | 8433|  54.2k|        return vis(monostate_val);                              \
  |  | 8434|  54.2k|    }
  ------------------
 8443|   118k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 64.2k, False: 272k]
  ------------------
 8444|   118k|            SCN_VISIT(int);
  ------------------
  |  | 8429|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   118k|    }                                                           \
  |  | 8432|   118k|    else {                                                      \
  |  | 8433|   118k|        return vis(monostate_val);                              \
  |  | 8434|   118k|    }
  ------------------
 8445|   118k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 336k]
  ------------------
 8446|   118k|            SCN_VISIT(long);
  ------------------
  |  | 8429|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   118k|    }                                                           \
  |  | 8432|   118k|    else {                                                      \
  |  | 8433|   118k|        return vis(monostate_val);                              \
  |  | 8434|   118k|    }
  ------------------
 8447|   183k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 65.3k, False: 271k]
  ------------------
 8448|   183k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|   183k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   183k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   183k|    }                                                           \
  |  | 8432|   183k|    else {                                                      \
  |  | 8433|   183k|        return vis(monostate_val);                              \
  |  | 8434|   183k|    }
  ------------------
 8449|   231k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 47.8k, False: 288k]
  ------------------
 8450|   231k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   231k|    }                                                           \
  |  | 8432|   231k|    else {                                                      \
  |  | 8433|   231k|        return vis(monostate_val);                              \
  |  | 8434|   231k|    }
  ------------------
 8451|   231k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 336k]
  ------------------
 8452|   231k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   231k|    }                                                           \
  |  | 8432|   231k|    else {                                                      \
  |  | 8433|   231k|        return vis(monostate_val);                              \
  |  | 8434|   231k|    }
  ------------------
 8453|   283k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 52.0k, False: 284k]
  ------------------
 8454|   283k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|   283k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   283k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   283k|    }                                                           \
  |  | 8432|   283k|    else {                                                      \
  |  | 8433|   283k|        return vis(monostate_val);                              \
  |  | 8434|   283k|    }
  ------------------
 8455|   283k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 336k]
  ------------------
 8456|   283k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|   283k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   283k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   283k|    }                                                           \
  |  | 8432|   283k|    else {                                                      \
  |  | 8433|   283k|        return vis(monostate_val);                              \
  |  | 8434|   283k|    }
  ------------------
 8457|   336k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 52.6k, False: 283k]
  ------------------
 8458|   336k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8459|   336k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 336k]
  ------------------
 8460|   336k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8461|   336k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 336k]
  ------------------
 8462|   336k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8463|   336k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 336k]
  ------------------
 8464|   336k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8465|   336k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 336k]
  ------------------
 8466|   336k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8467|   336k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 336k]
  ------------------
 8468|   336k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8469|   336k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 336k]
  ------------------
 8470|   336k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8471|   336k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 336k]
  ------------------
 8472|   336k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8473|   336k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 336k]
  ------------------
 8474|   336k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8475|   336k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 336k]
  ------------------
 8476|   336k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8477|   336k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 336k]
  ------------------
 8478|   336k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8479|   336k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 336k]
  ------------------
 8480|   336k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8481|   336k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 336k]
  ------------------
 8482|   336k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8483|   336k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 336k]
  ------------------
 8484|   336k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8485|   336k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 336k]
  ------------------
 8486|   336k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8487|       |
 8488|   336k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 336k]
  ------------------
 8489|   336k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   336k|            return vis(
 8491|   336k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 336k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 336k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   336k|            SCN_CLANG_POP
 8506|   336k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   362k|{
 7055|   362k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   362k|    handler.check_args_exhausted();
 7057|   362k|    return handler.get_error();
 7058|   362k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   362k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   362k|    auto begin = format.data();
 7024|   362k|    auto it = begin;
 7025|   362k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   647k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 362k, False: 285k]
  ------------------
 7028|   362k|        const auto ch = *it++;
 7029|   362k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 362k, False: 0]
  ------------------
 7030|   362k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   362k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   362k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 77.3k, False: 285k]
  ------------------
 7034|  77.3k|                return;
 7035|  77.3k|            }
 7036|   362k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   362k|    }
 7047|       |
 7048|   285k|    handler.on_literal_text(begin, end);
 7049|   285k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8185|   285k|    {
 8186|   285k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   285k|    static_cast<    \
  |  |  929|   285k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   285k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6952|   362k|{
 6953|   362k|    struct id_adapter {
 6954|   362k|        constexpr void operator()()
 6955|   362k|        {
 6956|   362k|            arg_id = handler.on_arg_id();
 6957|   362k|        }
 6958|   362k|        constexpr void operator()(std::size_t id)
 6959|   362k|        {
 6960|   362k|            arg_id = handler.on_arg_id(id);
 6961|   362k|        }
 6962|       |
 6963|   362k|        constexpr void on_error(const char* msg)
 6964|   362k|        {
 6965|   362k|            SCN_UNLIKELY_ATTR
 6966|   362k|            handler.on_error(msg);
 6967|   362k|        }
 6968|       |
 6969|   362k|        Handler& handler;
 6970|   362k|        std::size_t arg_id;
 6971|   362k|    };
 6972|       |
 6973|   362k|    ++begin;
 6974|   362k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   362k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 362k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   362k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 362k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   362k|    else {
 6986|   362k|        auto adapter = id_adapter{handler, 0};
 6987|   362k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   362k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   362k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 362k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   362k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 362k, False: 0]
  ------------------
 6998|   362k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   362k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   362k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   725k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.7k, False: 336k]
  |  |  |  Branch (859:45): [True: 0, False: 362k]
  |  |  |  Branch (859:45): [True: 25.7k, False: 336k]
  |  |  ------------------
  ------------------
 7004|  25.7k|                handler.on_error("Unknown format specifier");
 7005|  25.7k|                return begin;
 7006|  25.7k|            }
 7007|   362k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   362k|    }
 7014|   336k|    return begin + 1;
 7015|   362k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   362k|{
 6454|   362k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   362k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 362k, False: 0]
  |  Branch (6455:26): [True: 0, False: 362k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   362k|    handler();
 6460|   362k|    return begin;
 6461|   362k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   362k|        {
 6956|   362k|            arg_id = handler.on_arg_id();
 6957|   362k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   362k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   362k|    {
 7133|   362k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   362k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6868|   362k|{
 6869|   362k|    auto do_presentation = [&]() -> const CharT* {
 6870|   362k|        if (*begin == CharT{'['}) {
 6871|   362k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   362k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   362k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   362k|                return begin;
 6877|   362k|            }
 6878|   362k|            handler.on_character_set_string(set);
 6879|   362k|            return begin;
 6880|   362k|        }
 6881|   362k|        if (*begin == CharT{'/'}) {
 6882|   362k|            return parse_presentation_regex(begin, end, handler);
 6883|   362k|        }
 6884|   362k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   362k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   362k|            handler.on_error("Invalid type specifier in format string");
 6887|   362k|            return begin;
 6888|   362k|        }
 6889|   362k|        handler.on_type(type);
 6890|   362k|        return begin;
 6891|   362k|    };
 6892|       |
 6893|   362k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 362k, False: 0]
  |  Branch (6893:28): [True: 345k, False: 17.1k]
  ------------------
 6894|   362k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 336k, False: 8.59k]
  |  Branch (6894:36): [True: 271k, False: 65.0k]
  ------------------
 6895|   271k|        return do_presentation();
 6896|   271k|    }
 6897|       |
 6898|  90.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  90.8k|    begin = parse_align(begin, end, handler);
 6904|  90.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  90.8k|    begin = parse_width(begin, end, handler);
 6910|  90.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  90.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 90.8k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  90.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 65.0k, False: 25.7k]
  ------------------
 6929|  65.0k|        handler.on_localized();
 6930|  65.0k|        ++begin;
 6931|  65.0k|    }
 6932|  90.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  90.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 90.8k, False: 0]
  |  Branch (6937:25): [True: 25.7k, False: 65.0k]
  ------------------
 6938|  25.7k|        do_presentation();
 6939|  25.7k|    }
 6940|  90.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  90.8k|    return begin;
 6946|  90.8k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   297k|    auto do_presentation = [&]() -> const CharT* {
 6870|   297k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 297k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   297k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 297k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   297k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   297k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.1k, False: 280k]
  |  |  ------------------
  ------------------
 6886|  17.1k|            handler.on_error("Invalid type specifier in format string");
 6887|  17.1k|            return begin;
 6888|  17.1k|        }
 6889|   280k|        handler.on_type(type);
 6890|   280k|        return begin;
 6891|   297k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6542|  90.8k|{
 6543|  90.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  90.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  90.8k|    auto check_align = [](wchar_t ch) {
 6546|  90.8k|        switch (ch) {
 6547|  90.8k|            case L'<':
 6548|  90.8k|                return align_type::left;
 6549|  90.8k|            case L'>':
 6550|  90.8k|                return align_type::right;
 6551|  90.8k|            case L'^':
 6552|  90.8k|                return align_type::center;
 6553|  90.8k|            default:
 6554|  90.8k|                return align_type::none;
 6555|  90.8k|        }
 6556|  90.8k|    };
 6557|       |
 6558|  90.8k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  90.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.8k]
  |  |  |  Branch (859:45): [True: 0, False: 90.8k]
  |  |  |  Branch (859:45): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 6560|  90.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  90.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  90.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  90.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  90.8k|    const auto begin_before_fill = begin;
 6570|  90.8k|    begin += potential_fill_len;
 6571|       |
 6572|  90.8k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 90.8k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  90.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  90.8k|    const auto begin_after_fill = begin;
 6578|  90.8k|    ++begin;
 6579|       |
 6580|  90.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 90.8k, False: 0]
  ------------------
 6581|  90.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  90.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 90.8k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  90.8k|    }
 6589|       |
 6590|  90.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 90.8k, False: 0]
  ------------------
 6591|  90.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 90.8k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  90.8k|        return begin_before_fill;
 6596|  90.8k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  90.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   181k|    auto check_align = [](wchar_t ch) {
 6546|   181k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 181k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 181k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 181k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   181k|            default:
  ------------------
  |  Branch (6553:13): [True: 181k, False: 0]
  ------------------
 6554|   181k|                return align_type::none;
 6555|   181k|        }
 6556|   181k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6607|  90.8k|{
 6608|  90.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  90.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  90.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 73.6k, False: 17.1k]
  |  Branch (6610:33): [True: 0, False: 73.6k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  90.8k|    return begin;
 6621|  90.8k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7137|  65.0k|    {
 7138|  65.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  65.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 29.0k, False: 35.9k]
  ------------------
 7140|  65.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 29.0k]
  ------------------
 7141|  65.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  65.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  65.0k|        Handler::on_localized();
 7150|  65.0k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   336k|{
 8428|   336k|#define SCN_VISIT(Type)                                         \
 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   336k|    }                                                           \
 8432|   336k|    else {                                                      \
 8433|   336k|        return vis(monostate_val);                              \
 8434|   336k|    }
 8435|       |
 8436|   336k|    monostate monostate_val{};
 8437|       |
 8438|   336k|    switch (arg.m_type) {
 8439|  54.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 54.3k, False: 282k]
  ------------------
 8440|  54.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  54.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.3k|    }                                                           \
  |  | 8432|  54.3k|    else {                                                      \
  |  | 8433|  54.3k|        return vis(monostate_val);                              \
  |  | 8434|  54.3k|    }
  ------------------
 8441|  54.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 336k]
  ------------------
 8442|  54.3k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  54.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.3k|    }                                                           \
  |  | 8432|  54.3k|    else {                                                      \
  |  | 8433|  54.3k|        return vis(monostate_val);                              \
  |  | 8434|  54.3k|    }
  ------------------
 8443|   118k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 64.3k, False: 272k]
  ------------------
 8444|   118k|            SCN_VISIT(int);
  ------------------
  |  | 8429|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   118k|    }                                                           \
  |  | 8432|   118k|    else {                                                      \
  |  | 8433|   118k|        return vis(monostate_val);                              \
  |  | 8434|   118k|    }
  ------------------
 8445|   118k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 336k]
  ------------------
 8446|   118k|            SCN_VISIT(long);
  ------------------
  |  | 8429|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   118k|    }                                                           \
  |  | 8432|   118k|    else {                                                      \
  |  | 8433|   118k|        return vis(monostate_val);                              \
  |  | 8434|   118k|    }
  ------------------
 8447|   184k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 65.4k, False: 271k]
  ------------------
 8448|   184k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|   184k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   184k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   184k|    }                                                           \
  |  | 8432|   184k|    else {                                                      \
  |  | 8433|   184k|        return vis(monostate_val);                              \
  |  | 8434|   184k|    }
  ------------------
 8449|   232k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 47.9k, False: 288k]
  ------------------
 8450|   232k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|   232k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   232k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   232k|    }                                                           \
  |  | 8432|   232k|    else {                                                      \
  |  | 8433|   232k|        return vis(monostate_val);                              \
  |  | 8434|   232k|    }
  ------------------
 8451|   232k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 336k]
  ------------------
 8452|   232k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|   232k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   232k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   232k|    }                                                           \
  |  | 8432|   232k|    else {                                                      \
  |  | 8433|   232k|        return vis(monostate_val);                              \
  |  | 8434|   232k|    }
  ------------------
 8453|   284k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 52.1k, False: 284k]
  ------------------
 8454|   284k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|   284k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   284k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   284k|    }                                                           \
  |  | 8432|   284k|    else {                                                      \
  |  | 8433|   284k|        return vis(monostate_val);                              \
  |  | 8434|   284k|    }
  ------------------
 8455|   284k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 336k]
  ------------------
 8456|   284k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|   284k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   284k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   284k|    }                                                           \
  |  | 8432|   284k|    else {                                                      \
  |  | 8433|   284k|        return vis(monostate_val);                              \
  |  | 8434|   284k|    }
  ------------------
 8457|   336k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 52.6k, False: 284k]
  ------------------
 8458|   336k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8459|   336k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 336k]
  ------------------
 8460|   336k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8461|   336k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 336k]
  ------------------
 8462|   336k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8463|   336k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 336k]
  ------------------
 8464|   336k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8465|   336k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 336k]
  ------------------
 8466|   336k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8467|   336k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 336k]
  ------------------
 8468|   336k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8469|   336k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 336k]
  ------------------
 8470|   336k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8471|   336k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 336k]
  ------------------
 8472|   336k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8473|   336k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 336k]
  ------------------
 8474|   336k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8475|   336k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 336k]
  ------------------
 8476|   336k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8477|   336k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 336k]
  ------------------
 8478|   336k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8479|   336k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 336k]
  ------------------
 8480|   336k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8481|   336k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 336k]
  ------------------
 8482|   336k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8483|   336k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 336k]
  ------------------
 8484|   336k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8485|   336k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 336k]
  ------------------
 8486|   336k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   336k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   336k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   336k|    }                                                           \
  |  | 8432|   336k|    else {                                                      \
  |  | 8433|   336k|        return vis(monostate_val);                              \
  |  | 8434|   336k|    }
  ------------------
 8487|       |
 8488|   336k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 336k]
  ------------------
 8489|   336k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   336k|            return vis(
 8491|   336k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 336k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 336k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   336k|            SCN_CLANG_POP
 8506|   336k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  90.2k|    {
 4084|  90.2k|        sync(0);
 4085|  90.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|   349k|    {
 5476|   349k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   349k|        return static_cast<std::size_t>(m_desc &
 5481|   349k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   349k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|   699k|    {
 5501|   699k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   699k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|   349k|    {
 5444|   349k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   349k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   349k|        const auto t = type(id);
 5456|   349k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   349k|        basic_scan_arg<Context> arg;
 5461|   349k|        arg.m_type = t;
 5462|   349k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 349k, False: 0]
  ------------------
 5463|   349k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   349k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   349k|        return arg;
 5469|   349k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|   349k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   349k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   349k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   349k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   349k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|   349k|    {
 5505|   349k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   349k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|   578k|    {
 5257|   578k|        return m_type != detail::arg_type::none_type;
 5258|   578k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  26.5k|{
 8428|  26.5k|#define SCN_VISIT(Type)                                         \
 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  26.5k|    }                                                           \
 8432|  26.5k|    else {                                                      \
 8433|  26.5k|        return vis(monostate_val);                              \
 8434|  26.5k|    }
 8435|       |
 8436|  26.5k|    monostate monostate_val{};
 8437|       |
 8438|  26.5k|    switch (arg.m_type) {
 8439|  4.40k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 4.40k, False: 22.1k]
  ------------------
 8440|  4.40k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  4.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.40k|    }                                                           \
  |  | 8432|  4.40k|    else {                                                      \
  |  | 8433|  4.40k|        return vis(monostate_val);                              \
  |  | 8434|  4.40k|    }
  ------------------
 8441|  4.40k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 26.5k]
  ------------------
 8442|  4.40k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  4.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.40k|    }                                                           \
  |  | 8432|  4.40k|    else {                                                      \
  |  | 8433|  4.40k|        return vis(monostate_val);                              \
  |  | 8434|  4.40k|    }
  ------------------
 8443|  8.83k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 4.43k, False: 22.0k]
  ------------------
 8444|  8.83k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  8.83k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  8.83k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  8.83k|    }                                                           \
  |  | 8432|  8.83k|    else {                                                      \
  |  | 8433|  8.83k|        return vis(monostate_val);                              \
  |  | 8434|  8.83k|    }
  ------------------
 8445|  8.83k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 26.5k]
  ------------------
 8446|  8.83k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  8.83k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  8.83k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  8.83k|    }                                                           \
  |  | 8432|  8.83k|    else {                                                      \
  |  | 8433|  8.83k|        return vis(monostate_val);                              \
  |  | 8434|  8.83k|    }
  ------------------
 8447|  13.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 4.46k, False: 22.0k]
  ------------------
 8448|  13.3k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  13.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.3k|    }                                                           \
  |  | 8432|  13.3k|    else {                                                      \
  |  | 8433|  13.3k|        return vis(monostate_val);                              \
  |  | 8434|  13.3k|    }
  ------------------
 8449|  17.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 4.38k, False: 22.1k]
  ------------------
 8450|  17.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  17.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.6k|    }                                                           \
  |  | 8432|  17.6k|    else {                                                      \
  |  | 8433|  17.6k|        return vis(monostate_val);                              \
  |  | 8434|  17.6k|    }
  ------------------
 8451|  17.6k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 26.5k]
  ------------------
 8452|  17.6k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  17.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.6k|    }                                                           \
  |  | 8432|  17.6k|    else {                                                      \
  |  | 8433|  17.6k|        return vis(monostate_val);                              \
  |  | 8434|  17.6k|    }
  ------------------
 8453|  22.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 4.40k, False: 22.1k]
  ------------------
 8454|  22.0k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  22.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  22.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  22.0k|    }                                                           \
  |  | 8432|  22.0k|    else {                                                      \
  |  | 8433|  22.0k|        return vis(monostate_val);                              \
  |  | 8434|  22.0k|    }
  ------------------
 8455|  22.0k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 26.5k]
  ------------------
 8456|  22.0k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  22.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  22.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  22.0k|    }                                                           \
  |  | 8432|  22.0k|    else {                                                      \
  |  | 8433|  22.0k|        return vis(monostate_val);                              \
  |  | 8434|  22.0k|    }
  ------------------
 8457|  26.5k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 4.42k, False: 22.0k]
  ------------------
 8458|  26.5k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8459|  26.5k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 26.5k]
  ------------------
 8460|  26.5k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8461|  26.5k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 26.5k]
  ------------------
 8462|  26.5k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8463|  26.5k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 26.5k]
  ------------------
 8464|  26.5k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8465|  26.5k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 26.5k]
  ------------------
 8466|  26.5k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8467|  26.5k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 26.5k]
  ------------------
 8468|  26.5k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8469|  26.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 26.5k]
  ------------------
 8470|  26.5k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8471|  26.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 26.5k]
  ------------------
 8472|  26.5k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8473|  26.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 26.5k]
  ------------------
 8474|  26.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8475|  26.5k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 26.5k]
  ------------------
 8476|  26.5k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8477|  26.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 26.5k]
  ------------------
 8478|  26.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8479|  26.5k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 26.5k]
  ------------------
 8480|  26.5k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8481|  26.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 26.5k]
  ------------------
 8482|  26.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8483|  26.5k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 26.5k]
  ------------------
 8484|  26.5k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8485|  26.5k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 26.5k]
  ------------------
 8486|  26.5k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8487|       |
 8488|  26.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 26.5k]
  ------------------
 8489|  26.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  26.5k|            return vis(
 8491|  26.5k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 26.5k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 26.5k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  26.5k|            SCN_CLANG_POP
 8506|  26.5k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   314k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   314k|    {
 5555|   314k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   157k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   157k|    {
 8149|   157k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|   314k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   314k|    static_cast<    \
  |  |  929|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   314k|    static_cast<    \
  |  |  929|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   314k|    {
 8067|   314k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   157k|{
 7055|   157k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   157k|    handler.check_args_exhausted();
 7057|   157k|    return handler.get_error();
 7058|   157k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   157k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   157k|    auto begin = format.data();
 7024|   157k|    auto it = begin;
 7025|   157k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   159k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 157k, False: 2.51k]
  ------------------
 7028|   157k|        const auto ch = *it++;
 7029|   157k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 157k, False: 0]
  ------------------
 7030|   157k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   157k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   157k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 154k, False: 2.51k]
  ------------------
 7034|   154k|                return;
 7035|   154k|            }
 7036|   157k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   157k|    }
 7047|       |
 7048|  2.51k|    handler.on_literal_text(begin, end);
 7049|  2.51k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   157k|{
 6953|   157k|    struct id_adapter {
 6954|   157k|        constexpr void operator()()
 6955|   157k|        {
 6956|   157k|            arg_id = handler.on_arg_id();
 6957|   157k|        }
 6958|   157k|        constexpr void operator()(std::size_t id)
 6959|   157k|        {
 6960|   157k|            arg_id = handler.on_arg_id(id);
 6961|   157k|        }
 6962|       |
 6963|   157k|        constexpr void on_error(const char* msg)
 6964|   157k|        {
 6965|   157k|            SCN_UNLIKELY_ATTR
 6966|   157k|            handler.on_error(msg);
 6967|   157k|        }
 6968|       |
 6969|   157k|        Handler& handler;
 6970|   157k|        std::size_t arg_id;
 6971|   157k|    };
 6972|       |
 6973|   157k|    ++begin;
 6974|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   157k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 157k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   157k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 157k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   157k|    else {
 6986|   157k|        auto adapter = id_adapter{handler, 0};
 6987|   157k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   157k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   157k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 157k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   157k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 157k, False: 0]
  ------------------
 6998|   157k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   157k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   157k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.5k, False: 105k]
  |  |  |  Branch (859:45): [True: 0, False: 157k]
  |  |  |  Branch (859:45): [True: 51.5k, False: 105k]
  |  |  ------------------
  ------------------
 7004|  51.5k|                handler.on_error("Unknown format specifier");
 7005|  51.5k|                return begin;
 7006|  51.5k|            }
 7007|   157k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   157k|    }
 7014|   105k|    return begin + 1;
 7015|   157k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|   314k|    {
 8050|   314k|        return m_args.get(id);
 8051|   314k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|   211k|    {
 8060|   211k|        return m_locale;
 8061|   211k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|   314k|    {
 5576|   314k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   314k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   314k|        do_check_arg_id(id);
 5584|   314k|        return id;
 5585|   314k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|   314k|{
 6064|   314k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   314k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   314k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   157k|{
 6454|   157k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   157k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 157k, False: 0]
  |  Branch (6455:26): [True: 0, False: 157k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   157k|    handler();
 6460|   157k|    return begin;
 6461|   157k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   157k|        {
 6956|   157k|            arg_id = handler.on_arg_id();
 6957|   157k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|   628k|    {
 5262|   628k|        return m_type;
 5263|   628k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|   211k|    {
 5571|   211k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   211k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   183k|{
 4353|   183k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 183k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   183k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   183k|                            ranges::default_sentinel};
 4359|   183k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   183k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   183k|    {
 4185|   183k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   183k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   183k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|   525k|    {
 5560|   525k|        return m_format.data();
 5561|   525k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   157k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   157k|    {
 7133|   157k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   157k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|   157k|{
 6869|   157k|    auto do_presentation = [&]() -> const CharT* {
 6870|   157k|        if (*begin == CharT{'['}) {
 6871|   157k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   157k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   157k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   157k|                return begin;
 6877|   157k|            }
 6878|   157k|            handler.on_character_set_string(set);
 6879|   157k|            return begin;
 6880|   157k|        }
 6881|   157k|        if (*begin == CharT{'/'}) {
 6882|   157k|            return parse_presentation_regex(begin, end, handler);
 6883|   157k|        }
 6884|   157k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   157k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   157k|            handler.on_error("Invalid type specifier in format string");
 6887|   157k|            return begin;
 6888|   157k|        }
 6889|   157k|        handler.on_type(type);
 6890|   157k|        return begin;
 6891|   157k|    };
 6892|       |
 6893|   157k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 157k, False: 0]
  |  Branch (6893:28): [True: 122k, False: 34.3k]
  ------------------
 6894|   157k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 105k, False: 17.1k]
  |  Branch (6894:36): [True: 88.0k, False: 17.6k]
  ------------------
 6895|  88.0k|        return do_presentation();
 6896|  88.0k|    }
 6897|       |
 6898|  69.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  69.1k|    begin = parse_align(begin, end, handler);
 6904|  69.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  69.1k|    begin = parse_width(begin, end, handler);
 6910|  69.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  69.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 69.1k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  69.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 17.6k, False: 51.5k]
  ------------------
 6929|  17.6k|        handler.on_localized();
 6930|  17.6k|        ++begin;
 6931|  17.6k|    }
 6932|  69.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  69.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 69.1k, False: 0]
  |  Branch (6937:25): [True: 51.5k, False: 17.6k]
  ------------------
 6938|  51.5k|        do_presentation();
 6939|  51.5k|    }
 6940|  69.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  69.1k|    return begin;
 6946|  69.1k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|   245k|{
 6518|   245k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 176k, False: 69.6k]
  |  Branch (6518:33): [True: 176k, False: 0]
  ------------------
 6519|   245k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 35.2k, False: 34.3k]
  |  Branch (6519:33): [True: 35.2k, False: 0]
  ------------------
 6520|   245k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   139k|    auto do_presentation = [&]() -> const CharT* {
 6870|   139k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 139k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   139k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 139k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   139k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   139k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.3k, False: 105k]
  |  |  ------------------
  ------------------
 6886|  34.3k|            handler.on_error("Invalid type specifier in format string");
 6887|  34.3k|            return begin;
 6888|  34.3k|        }
 6889|   105k|        handler.on_type(type);
 6890|   105k|        return begin;
 6891|   139k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|   279k|{
 6466|   279k|    switch (type) {
 6467|  34.8k|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 34.8k, False: 244k]
  ------------------
 6468|  69.2k|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 34.3k, False: 244k]
  ------------------
 6469|  69.2k|            return presentation_type::int_binary;
 6470|  35.3k|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 35.3k, False: 243k]
  ------------------
 6471|  35.3k|            return presentation_type::int_decimal;
 6472|  35.3k|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 35.3k, False: 243k]
  ------------------
 6473|  35.3k|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 279k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|  34.9k|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 34.9k, False: 244k]
  ------------------
 6477|  34.9k|            return presentation_type::int_octal;
 6478|  35.4k|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 35.4k, False: 243k]
  ------------------
 6479|  35.4k|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 279k]
  ------------------
 6480|  35.4k|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 279k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 279k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 279k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 279k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 279k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 279k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 279k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 279k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 279k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 279k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 279k]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 279k]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 279k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 279k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 279k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 279k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  68.7k|        default:
  ------------------
  |  Branch (6510:9): [True: 68.7k, False: 210k]
  ------------------
 6511|  68.7k|            return presentation_type::none;
 6512|   279k|    }
 6513|   279k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  69.1k|{
 6543|  69.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  69.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  69.1k|    auto check_align = [](wchar_t ch) {
 6546|  69.1k|        switch (ch) {
 6547|  69.1k|            case L'<':
 6548|  69.1k|                return align_type::left;
 6549|  69.1k|            case L'>':
 6550|  69.1k|                return align_type::right;
 6551|  69.1k|            case L'^':
 6552|  69.1k|                return align_type::center;
 6553|  69.1k|            default:
 6554|  69.1k|                return align_type::none;
 6555|  69.1k|        }
 6556|  69.1k|    };
 6557|       |
 6558|  69.1k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  69.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  |  Branch (859:45): [True: 0, False: 69.1k]
  |  |  |  Branch (859:45): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6560|  69.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  69.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  69.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  69.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  69.1k|    const auto begin_before_fill = begin;
 6570|  69.1k|    begin += potential_fill_len;
 6571|       |
 6572|  69.1k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 69.1k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  69.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  69.1k|    const auto begin_after_fill = begin;
 6578|  69.1k|    ++begin;
 6579|       |
 6580|  69.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 69.1k, False: 0]
  ------------------
 6581|  69.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  69.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 69.1k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  69.1k|    }
 6589|       |
 6590|  69.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 69.1k, False: 0]
  ------------------
 6591|  69.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 69.1k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  69.1k|        return begin_before_fill;
 6596|  69.1k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  69.1k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|   138k|{
 6525|   138k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|   138k|    if constexpr (sizeof(CharT) != 1) {
 6527|   138k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|   138k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   138k|    auto check_align = [](wchar_t ch) {
 6546|   138k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 138k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 138k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 138k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   138k|            default:
  ------------------
  |  Branch (6553:13): [True: 138k, False: 0]
  ------------------
 6554|   138k|                return align_type::none;
 6555|   138k|        }
 6556|   138k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  69.1k|{
 6608|  69.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  69.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  69.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 34.8k, False: 34.3k]
  |  Branch (6610:33): [True: 0, False: 34.8k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  69.1k|    return begin;
 6621|  69.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|  17.6k|    {
 7138|  17.6k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  17.6k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 8.77k, False: 8.84k]
  ------------------
 7140|  17.6k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 8.77k]
  ------------------
 7141|  17.6k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  17.6k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  17.6k|        Handler::on_localized();
 7150|  17.6k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   105k|{
 8428|   105k|#define SCN_VISIT(Type)                                         \
 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   105k|    }                                                           \
 8432|   105k|    else {                                                      \
 8433|   105k|        return vis(monostate_val);                              \
 8434|   105k|    }
 8435|       |
 8436|   105k|    monostate monostate_val{};
 8437|       |
 8438|   105k|    switch (arg.m_type) {
 8439|  17.5k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 17.5k, False: 88.0k]
  ------------------
 8440|  17.5k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  17.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.5k|    }                                                           \
  |  | 8432|  17.5k|    else {                                                      \
  |  | 8433|  17.5k|        return vis(monostate_val);                              \
  |  | 8434|  17.5k|    }
  ------------------
 8441|  17.5k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 105k]
  ------------------
 8442|  17.5k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  17.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.5k|    }                                                           \
  |  | 8432|  17.5k|    else {                                                      \
  |  | 8433|  17.5k|        return vis(monostate_val);                              \
  |  | 8434|  17.5k|    }
  ------------------
 8443|  35.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 17.6k, False: 87.9k]
  ------------------
 8444|  35.2k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  35.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  35.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  35.2k|    }                                                           \
  |  | 8432|  35.2k|    else {                                                      \
  |  | 8433|  35.2k|        return vis(monostate_val);                              \
  |  | 8434|  35.2k|    }
  ------------------
 8445|  35.2k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 105k]
  ------------------
 8446|  35.2k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  35.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  35.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  35.2k|    }                                                           \
  |  | 8432|  35.2k|    else {                                                      \
  |  | 8433|  35.2k|        return vis(monostate_val);                              \
  |  | 8434|  35.2k|    }
  ------------------
 8447|  52.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 17.7k, False: 87.8k]
  ------------------
 8448|  52.9k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  52.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  52.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  52.9k|    }                                                           \
  |  | 8432|  52.9k|    else {                                                      \
  |  | 8433|  52.9k|        return vis(monostate_val);                              \
  |  | 8434|  52.9k|    }
  ------------------
 8449|  70.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 17.5k, False: 88.1k]
  ------------------
 8450|  70.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  70.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  70.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  70.4k|    }                                                           \
  |  | 8432|  70.4k|    else {                                                      \
  |  | 8433|  70.4k|        return vis(monostate_val);                              \
  |  | 8434|  70.4k|    }
  ------------------
 8451|  70.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 105k]
  ------------------
 8452|  70.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  70.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  70.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  70.4k|    }                                                           \
  |  | 8432|  70.4k|    else {                                                      \
  |  | 8433|  70.4k|        return vis(monostate_val);                              \
  |  | 8434|  70.4k|    }
  ------------------
 8453|  87.9k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 17.5k, False: 88.0k]
  ------------------
 8454|  87.9k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  87.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  87.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  87.9k|    }                                                           \
  |  | 8432|  87.9k|    else {                                                      \
  |  | 8433|  87.9k|        return vis(monostate_val);                              \
  |  | 8434|  87.9k|    }
  ------------------
 8455|  87.9k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 105k]
  ------------------
 8456|  87.9k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  87.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  87.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  87.9k|    }                                                           \
  |  | 8432|  87.9k|    else {                                                      \
  |  | 8433|  87.9k|        return vis(monostate_val);                              \
  |  | 8434|  87.9k|    }
  ------------------
 8457|   105k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 17.6k, False: 87.9k]
  ------------------
 8458|   105k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8459|   105k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 105k]
  ------------------
 8460|   105k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8461|   105k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 105k]
  ------------------
 8462|   105k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8463|   105k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 105k]
  ------------------
 8464|   105k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8465|   105k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 105k]
  ------------------
 8466|   105k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8467|   105k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 105k]
  ------------------
 8468|   105k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8469|   105k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 105k]
  ------------------
 8470|   105k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8471|   105k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 105k]
  ------------------
 8472|   105k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8473|   105k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 105k]
  ------------------
 8474|   105k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8475|   105k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 105k]
  ------------------
 8476|   105k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8477|   105k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 105k]
  ------------------
 8478|   105k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8479|   105k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 105k]
  ------------------
 8480|   105k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8481|   105k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 105k]
  ------------------
 8482|   105k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8483|   105k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 105k]
  ------------------
 8484|   105k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8485|   105k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 105k]
  ------------------
 8486|   105k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8487|       |
 8488|   105k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 105k]
  ------------------
 8489|   105k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   105k|            return vis(
 8491|   105k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 105k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 105k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   105k|            SCN_CLANG_POP
 8506|   105k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  26.5k|{
 8428|  26.5k|#define SCN_VISIT(Type)                                         \
 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  26.5k|    }                                                           \
 8432|  26.5k|    else {                                                      \
 8433|  26.5k|        return vis(monostate_val);                              \
 8434|  26.5k|    }
 8435|       |
 8436|  26.5k|    monostate monostate_val{};
 8437|       |
 8438|  26.5k|    switch (arg.m_type) {
 8439|  4.40k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 4.40k, False: 22.1k]
  ------------------
 8440|  4.40k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  4.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.40k|    }                                                           \
  |  | 8432|  4.40k|    else {                                                      \
  |  | 8433|  4.40k|        return vis(monostate_val);                              \
  |  | 8434|  4.40k|    }
  ------------------
 8441|  4.40k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 26.5k]
  ------------------
 8442|  4.40k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  4.40k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.40k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.40k|    }                                                           \
  |  | 8432|  4.40k|    else {                                                      \
  |  | 8433|  4.40k|        return vis(monostate_val);                              \
  |  | 8434|  4.40k|    }
  ------------------
 8443|  8.83k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 4.43k, False: 22.0k]
  ------------------
 8444|  8.83k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  8.83k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  8.83k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  8.83k|    }                                                           \
  |  | 8432|  8.83k|    else {                                                      \
  |  | 8433|  8.83k|        return vis(monostate_val);                              \
  |  | 8434|  8.83k|    }
  ------------------
 8445|  8.83k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 26.5k]
  ------------------
 8446|  8.83k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  8.83k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  8.83k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  8.83k|    }                                                           \
  |  | 8432|  8.83k|    else {                                                      \
  |  | 8433|  8.83k|        return vis(monostate_val);                              \
  |  | 8434|  8.83k|    }
  ------------------
 8447|  13.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 4.46k, False: 22.0k]
  ------------------
 8448|  13.3k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  13.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  13.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  13.3k|    }                                                           \
  |  | 8432|  13.3k|    else {                                                      \
  |  | 8433|  13.3k|        return vis(monostate_val);                              \
  |  | 8434|  13.3k|    }
  ------------------
 8449|  17.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 4.38k, False: 22.1k]
  ------------------
 8450|  17.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  17.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.6k|    }                                                           \
  |  | 8432|  17.6k|    else {                                                      \
  |  | 8433|  17.6k|        return vis(monostate_val);                              \
  |  | 8434|  17.6k|    }
  ------------------
 8451|  17.6k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 26.5k]
  ------------------
 8452|  17.6k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  17.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.6k|    }                                                           \
  |  | 8432|  17.6k|    else {                                                      \
  |  | 8433|  17.6k|        return vis(monostate_val);                              \
  |  | 8434|  17.6k|    }
  ------------------
 8453|  22.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 4.40k, False: 22.1k]
  ------------------
 8454|  22.0k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  22.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  22.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  22.0k|    }                                                           \
  |  | 8432|  22.0k|    else {                                                      \
  |  | 8433|  22.0k|        return vis(monostate_val);                              \
  |  | 8434|  22.0k|    }
  ------------------
 8455|  22.0k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 26.5k]
  ------------------
 8456|  22.0k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  22.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  22.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  22.0k|    }                                                           \
  |  | 8432|  22.0k|    else {                                                      \
  |  | 8433|  22.0k|        return vis(monostate_val);                              \
  |  | 8434|  22.0k|    }
  ------------------
 8457|  26.5k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 4.42k, False: 22.0k]
  ------------------
 8458|  26.5k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8459|  26.5k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 26.5k]
  ------------------
 8460|  26.5k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8461|  26.5k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 26.5k]
  ------------------
 8462|  26.5k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8463|  26.5k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 26.5k]
  ------------------
 8464|  26.5k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8465|  26.5k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 26.5k]
  ------------------
 8466|  26.5k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8467|  26.5k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 26.5k]
  ------------------
 8468|  26.5k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8469|  26.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 26.5k]
  ------------------
 8470|  26.5k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8471|  26.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 26.5k]
  ------------------
 8472|  26.5k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8473|  26.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 26.5k]
  ------------------
 8474|  26.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8475|  26.5k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 26.5k]
  ------------------
 8476|  26.5k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8477|  26.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 26.5k]
  ------------------
 8478|  26.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8479|  26.5k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 26.5k]
  ------------------
 8480|  26.5k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8481|  26.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 26.5k]
  ------------------
 8482|  26.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8483|  26.5k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 26.5k]
  ------------------
 8484|  26.5k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8485|  26.5k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 26.5k]
  ------------------
 8486|  26.5k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  26.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  26.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  26.5k|    }                                                           \
  |  | 8432|  26.5k|    else {                                                      \
  |  | 8433|  26.5k|        return vis(monostate_val);                              \
  |  | 8434|  26.5k|    }
  ------------------
 8487|       |
 8488|  26.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 26.5k]
  ------------------
 8489|  26.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  26.5k|            return vis(
 8491|  26.5k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 26.5k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 26.5k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  26.5k|            SCN_CLANG_POP
 8506|  26.5k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   157k|{
 7055|   157k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   157k|    handler.check_args_exhausted();
 7057|   157k|    return handler.get_error();
 7058|   157k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   157k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   157k|    auto begin = format.data();
 7024|   157k|    auto it = begin;
 7025|   157k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   159k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 157k, False: 2.51k]
  ------------------
 7028|   157k|        const auto ch = *it++;
 7029|   157k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 157k, False: 0]
  ------------------
 7030|   157k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   157k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   157k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 154k, False: 2.51k]
  ------------------
 7034|   154k|                return;
 7035|   154k|            }
 7036|   157k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   157k|    }
 7047|       |
 7048|  2.51k|    handler.on_literal_text(begin, end);
 7049|  2.51k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8185|  2.51k|    {
 8186|  2.51k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.51k|    static_cast<    \
  |  |  929|  2.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|  2.51k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6952|   157k|{
 6953|   157k|    struct id_adapter {
 6954|   157k|        constexpr void operator()()
 6955|   157k|        {
 6956|   157k|            arg_id = handler.on_arg_id();
 6957|   157k|        }
 6958|   157k|        constexpr void operator()(std::size_t id)
 6959|   157k|        {
 6960|   157k|            arg_id = handler.on_arg_id(id);
 6961|   157k|        }
 6962|       |
 6963|   157k|        constexpr void on_error(const char* msg)
 6964|   157k|        {
 6965|   157k|            SCN_UNLIKELY_ATTR
 6966|   157k|            handler.on_error(msg);
 6967|   157k|        }
 6968|       |
 6969|   157k|        Handler& handler;
 6970|   157k|        std::size_t arg_id;
 6971|   157k|    };
 6972|       |
 6973|   157k|    ++begin;
 6974|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   157k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 157k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   157k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 157k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   157k|    else {
 6986|   157k|        auto adapter = id_adapter{handler, 0};
 6987|   157k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   157k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   157k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 157k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   157k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 157k, False: 0]
  ------------------
 6998|   157k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   157k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   157k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.5k, False: 105k]
  |  |  |  Branch (859:45): [True: 0, False: 157k]
  |  |  |  Branch (859:45): [True: 51.5k, False: 105k]
  |  |  ------------------
  ------------------
 7004|  51.5k|                handler.on_error("Unknown format specifier");
 7005|  51.5k|                return begin;
 7006|  51.5k|            }
 7007|   157k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   157k|    }
 7014|   105k|    return begin + 1;
 7015|   157k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   157k|{
 6454|   157k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   157k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 157k, False: 0]
  |  Branch (6455:26): [True: 0, False: 157k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   157k|    handler();
 6460|   157k|    return begin;
 6461|   157k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   157k|        {
 6956|   157k|            arg_id = handler.on_arg_id();
 6957|   157k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   157k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   157k|    {
 7133|   157k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   157k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6868|   157k|{
 6869|   157k|    auto do_presentation = [&]() -> const CharT* {
 6870|   157k|        if (*begin == CharT{'['}) {
 6871|   157k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   157k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   157k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   157k|                return begin;
 6877|   157k|            }
 6878|   157k|            handler.on_character_set_string(set);
 6879|   157k|            return begin;
 6880|   157k|        }
 6881|   157k|        if (*begin == CharT{'/'}) {
 6882|   157k|            return parse_presentation_regex(begin, end, handler);
 6883|   157k|        }
 6884|   157k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   157k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   157k|            handler.on_error("Invalid type specifier in format string");
 6887|   157k|            return begin;
 6888|   157k|        }
 6889|   157k|        handler.on_type(type);
 6890|   157k|        return begin;
 6891|   157k|    };
 6892|       |
 6893|   157k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 157k, False: 0]
  |  Branch (6893:28): [True: 122k, False: 34.3k]
  ------------------
 6894|   157k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 105k, False: 17.1k]
  |  Branch (6894:36): [True: 88.0k, False: 17.6k]
  ------------------
 6895|  88.0k|        return do_presentation();
 6896|  88.0k|    }
 6897|       |
 6898|  69.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  69.1k|    begin = parse_align(begin, end, handler);
 6904|  69.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  69.1k|    begin = parse_width(begin, end, handler);
 6910|  69.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  69.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 69.1k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  69.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 17.6k, False: 51.5k]
  ------------------
 6929|  17.6k|        handler.on_localized();
 6930|  17.6k|        ++begin;
 6931|  17.6k|    }
 6932|  69.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  69.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 69.1k, False: 0]
  |  Branch (6937:25): [True: 51.5k, False: 17.6k]
  ------------------
 6938|  51.5k|        do_presentation();
 6939|  51.5k|    }
 6940|  69.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  69.1k|    return begin;
 6946|  69.1k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   139k|    auto do_presentation = [&]() -> const CharT* {
 6870|   139k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 139k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   139k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 139k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   139k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   139k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.3k, False: 105k]
  |  |  ------------------
  ------------------
 6886|  34.3k|            handler.on_error("Invalid type specifier in format string");
 6887|  34.3k|            return begin;
 6888|  34.3k|        }
 6889|   105k|        handler.on_type(type);
 6890|   105k|        return begin;
 6891|   139k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6542|  69.1k|{
 6543|  69.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  69.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  69.1k|    auto check_align = [](wchar_t ch) {
 6546|  69.1k|        switch (ch) {
 6547|  69.1k|            case L'<':
 6548|  69.1k|                return align_type::left;
 6549|  69.1k|            case L'>':
 6550|  69.1k|                return align_type::right;
 6551|  69.1k|            case L'^':
 6552|  69.1k|                return align_type::center;
 6553|  69.1k|            default:
 6554|  69.1k|                return align_type::none;
 6555|  69.1k|        }
 6556|  69.1k|    };
 6557|       |
 6558|  69.1k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  69.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  |  Branch (859:45): [True: 0, False: 69.1k]
  |  |  |  Branch (859:45): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6560|  69.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  69.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  69.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  69.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  69.1k|    const auto begin_before_fill = begin;
 6570|  69.1k|    begin += potential_fill_len;
 6571|       |
 6572|  69.1k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 69.1k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  69.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  69.1k|    const auto begin_after_fill = begin;
 6578|  69.1k|    ++begin;
 6579|       |
 6580|  69.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 69.1k, False: 0]
  ------------------
 6581|  69.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  69.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 69.1k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  69.1k|    }
 6589|       |
 6590|  69.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 69.1k, False: 0]
  ------------------
 6591|  69.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 69.1k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  69.1k|        return begin_before_fill;
 6596|  69.1k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  69.1k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   138k|    auto check_align = [](wchar_t ch) {
 6546|   138k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 138k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 138k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 138k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   138k|            default:
  ------------------
  |  Branch (6553:13): [True: 138k, False: 0]
  ------------------
 6554|   138k|                return align_type::none;
 6555|   138k|        }
 6556|   138k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6607|  69.1k|{
 6608|  69.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  69.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  69.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 34.8k, False: 34.3k]
  |  Branch (6610:33): [True: 0, False: 34.8k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  69.1k|    return begin;
 6621|  69.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7137|  17.6k|    {
 7138|  17.6k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  17.6k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 8.77k, False: 8.84k]
  ------------------
 7140|  17.6k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 8.77k]
  ------------------
 7141|  17.6k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  17.6k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  17.6k|        Handler::on_localized();
 7150|  17.6k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   105k|{
 8428|   105k|#define SCN_VISIT(Type)                                         \
 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   105k|    }                                                           \
 8432|   105k|    else {                                                      \
 8433|   105k|        return vis(monostate_val);                              \
 8434|   105k|    }
 8435|       |
 8436|   105k|    monostate monostate_val{};
 8437|       |
 8438|   105k|    switch (arg.m_type) {
 8439|  17.5k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 17.5k, False: 88.0k]
  ------------------
 8440|  17.5k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  17.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.5k|    }                                                           \
  |  | 8432|  17.5k|    else {                                                      \
  |  | 8433|  17.5k|        return vis(monostate_val);                              \
  |  | 8434|  17.5k|    }
  ------------------
 8441|  17.5k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 105k]
  ------------------
 8442|  17.5k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  17.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.5k|    }                                                           \
  |  | 8432|  17.5k|    else {                                                      \
  |  | 8433|  17.5k|        return vis(monostate_val);                              \
  |  | 8434|  17.5k|    }
  ------------------
 8443|  35.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 17.6k, False: 87.9k]
  ------------------
 8444|  35.2k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  35.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  35.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  35.2k|    }                                                           \
  |  | 8432|  35.2k|    else {                                                      \
  |  | 8433|  35.2k|        return vis(monostate_val);                              \
  |  | 8434|  35.2k|    }
  ------------------
 8445|  35.2k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 105k]
  ------------------
 8446|  35.2k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  35.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  35.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  35.2k|    }                                                           \
  |  | 8432|  35.2k|    else {                                                      \
  |  | 8433|  35.2k|        return vis(monostate_val);                              \
  |  | 8434|  35.2k|    }
  ------------------
 8447|  52.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 17.7k, False: 87.8k]
  ------------------
 8448|  52.9k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  52.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  52.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  52.9k|    }                                                           \
  |  | 8432|  52.9k|    else {                                                      \
  |  | 8433|  52.9k|        return vis(monostate_val);                              \
  |  | 8434|  52.9k|    }
  ------------------
 8449|  70.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 17.5k, False: 88.1k]
  ------------------
 8450|  70.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  70.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  70.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  70.4k|    }                                                           \
  |  | 8432|  70.4k|    else {                                                      \
  |  | 8433|  70.4k|        return vis(monostate_val);                              \
  |  | 8434|  70.4k|    }
  ------------------
 8451|  70.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 105k]
  ------------------
 8452|  70.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  70.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  70.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  70.4k|    }                                                           \
  |  | 8432|  70.4k|    else {                                                      \
  |  | 8433|  70.4k|        return vis(monostate_val);                              \
  |  | 8434|  70.4k|    }
  ------------------
 8453|  87.9k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 17.5k, False: 88.0k]
  ------------------
 8454|  87.9k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  87.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  87.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  87.9k|    }                                                           \
  |  | 8432|  87.9k|    else {                                                      \
  |  | 8433|  87.9k|        return vis(monostate_val);                              \
  |  | 8434|  87.9k|    }
  ------------------
 8455|  87.9k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 105k]
  ------------------
 8456|  87.9k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  87.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  87.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  87.9k|    }                                                           \
  |  | 8432|  87.9k|    else {                                                      \
  |  | 8433|  87.9k|        return vis(monostate_val);                              \
  |  | 8434|  87.9k|    }
  ------------------
 8457|   105k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 17.6k, False: 87.9k]
  ------------------
 8458|   105k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8459|   105k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 105k]
  ------------------
 8460|   105k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8461|   105k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 105k]
  ------------------
 8462|   105k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8463|   105k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 105k]
  ------------------
 8464|   105k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8465|   105k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 105k]
  ------------------
 8466|   105k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8467|   105k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 105k]
  ------------------
 8468|   105k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8469|   105k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 105k]
  ------------------
 8470|   105k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8471|   105k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 105k]
  ------------------
 8472|   105k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8473|   105k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 105k]
  ------------------
 8474|   105k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8475|   105k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 105k]
  ------------------
 8476|   105k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8477|   105k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 105k]
  ------------------
 8478|   105k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8479|   105k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 105k]
  ------------------
 8480|   105k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8481|   105k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 105k]
  ------------------
 8482|   105k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8483|   105k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 105k]
  ------------------
 8484|   105k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8485|   105k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 105k]
  ------------------
 8486|   105k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   105k|    }                                                           \
  |  | 8432|   105k|    else {                                                      \
  |  | 8433|   105k|        return vis(monostate_val);                              \
  |  | 8434|   105k|    }
  ------------------
 8487|       |
 8488|   105k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 105k]
  ------------------
 8489|   105k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   105k|            return vis(
 8491|   105k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 105k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 105k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   105k|            SCN_CLANG_POP
 8506|   105k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|   180k|    {
 4084|   180k|        sync(0);
 4085|   180k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|  64.4k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|  17.6k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.5k|{
   89|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  87.4k|{
   44|  87.4k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  87.4k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.5k|{
  127|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  87.4k|{
   60|  87.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  87.4k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.46k|{
  163|  1.46k|    T value;
  164|  1.46k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.46k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     36|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.46k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  8.83k|{
   72|  8.83k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  8.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.83k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.5k|{
   89|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.5k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.5k|{
  127|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.5k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.46k|{
  163|  1.46k|    T value;
  164|  1.46k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.46k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 29]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     29|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     29|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.46k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.5k|{
   89|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.5k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.5k|{
  127|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.5k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.47k|{
  163|  1.47k|    T value;
  164|  1.47k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.47k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     46|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.47k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.5k|{
   89|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.5k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.5k|{
  127|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.5k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.46k|{
  163|  1.46k|    T value;
  164|  1.46k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.46k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 35]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     35|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     35|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.46k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.6k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.6k|{
  127|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.6k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.48k|{
  163|  1.48k|    T value;
  164|  1.48k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.48k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 57]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     57|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     57|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.48k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  14.5k|{
   89|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.5k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  14.5k|{
  127|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.5k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.47k|{
  163|  1.47k|    T value;
  164|  1.47k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.47k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 43]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     43|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     43|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.47k|}
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.5k|{
   89|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  87.4k|{
   44|  87.4k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  87.4k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.5k|{
  127|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  87.4k|{
   60|  87.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  87.4k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.46k|{
  163|  1.46k|    T value;
  164|  1.46k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.46k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     36|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     36|    static_cast<    \
  |  |  929|     36|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.46k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  8.83k|{
   72|  8.83k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  8.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  8.83k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.5k|{
   89|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.5k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.5k|{
  127|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.5k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.46k|{
  163|  1.46k|    T value;
  164|  1.46k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.46k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 29]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     29|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     29|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     29|    static_cast<    \
  |  |  929|     29|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.46k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.5k|{
   89|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.5k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.5k|{
  127|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.5k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.47k|{
  163|  1.47k|    T value;
  164|  1.47k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.47k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     46|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     46|    static_cast<    \
  |  |  929|     46|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.47k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.5k|{
   89|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.5k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.5k|{
  127|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.5k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.46k|{
  163|  1.46k|    T value;
  164|  1.46k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.46k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 35]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     35|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     35|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     35|    static_cast<    \
  |  |  929|     35|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.46k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.6k|{
   89|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.6k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.6k|{
  127|  14.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.6k|    static_cast<    \
  |  |  929|  14.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.6k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.48k|{
  163|  1.48k|    T value;
  164|  1.48k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.48k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 57]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     57|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     57|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     57|    static_cast<    \
  |  |  929|     57|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.48k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  14.5k|{
   89|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  14.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  14.5k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  14.5k|{
  127|  14.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  14.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  14.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.5k|    static_cast<    \
  |  |  929|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  14.5k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.47k|{
  163|  1.47k|    T value;
  164|  1.47k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.47k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 43]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  1.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     43|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     43|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     43|    static_cast<    \
  |  |  929|     43|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.47k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   601k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  653|   601k|{
  654|   601k|    static_assert(std::is_same_v<Locale, std::locale>);
  655|   601k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  659|   157k|{
  660|   157k|    static_assert(std::is_same_v<Locale, std::locale>);
  661|   157k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (661:12): [True: 78.8k, False: 78.8k]
  ------------------
  662|   157k|                    : std::locale{};
  663|   157k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|   119k|{
 1462|   119k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   119k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   119k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|   119k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|   119k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 5.34k, False: 114k]
  ------------------
 1468|  5.34k|        SCN_UNLIKELY_ATTR
 1469|  5.34k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  5.34k|                                     "Invalid integer value");
 1471|  5.34k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|   114k|    auto start = source.data();
 1475|   114k|    const auto end = source.data() + source.size();
 1476|   114k|    {
 1477|   314k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 295k, False: 18.6k]
  ------------------
 1478|   295k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 95.8k, False: 199k]
  ------------------
 1479|  95.8k|                break;
 1480|  95.8k|            }
 1481|   295k|        }
 1482|   114k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.9k, False: 83.5k]
  |  |  |  Branch (859:45): [True: 18.6k, False: 95.8k]
  |  |  |  Branch (859:45): [True: 12.2k, False: 83.5k]
  |  |  ------------------
  ------------------
 1483|  30.9k|            value = 0;
 1484|  30.9k|            return ranges::next(source.begin(),
 1485|  30.9k|                                ranges::distance(source.data(), start));
 1486|  30.9k|        }
 1487|   114k|    }
 1488|       |
 1489|  83.5k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|  83.5k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 62.3k, False: 21.1k]
  ------------------
 1491|  62.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  62.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.43k, False: 58.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.43k|    }                                                  \
  |  |  |  | 3667|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  58.9k|                             detail::make_string_view_from_pointers(start, end),
 1493|  58.9k|                             value, sign == sign_type::minus_sign));
 1494|  58.9k|            return ranges::next(source.begin(),
 1495|  58.9k|                                ranges::distance(source.data(), ptr));
 1496|  62.3k|        }
 1497|  83.5k|    }
 1498|       |
 1499|  81.5k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  83.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.99k, False: 81.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.99k|    }                                                  \
  |  |  |  | 3667|  83.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  81.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|  81.5k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|  81.5k|                     base, sign == sign_type::minus_sign));
 1502|  81.5k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|  83.5k|}
_ZN3scn2v34impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  19.3k|{
 1462|  19.3k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.3k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.3k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  19.3k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  19.3k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 18.1k, False: 1.21k]
  ------------------
 1468|  18.1k|        SCN_UNLIKELY_ATTR
 1469|  18.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  18.1k|                                     "Invalid integer value");
 1471|  18.1k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  1.21k|    auto start = source.data();
 1475|  1.21k|    const auto end = source.data() + source.size();
 1476|  1.21k|    {
 1477|  1.63k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.42k, False: 208]
  ------------------
 1478|  1.42k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 1.00k, False: 416]
  ------------------
 1479|  1.00k|                break;
 1480|  1.00k|            }
 1481|  1.42k|        }
 1482|  1.21k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 328, False: 888]
  |  |  |  Branch (859:45): [True: 208, False: 1.00k]
  |  |  |  Branch (859:45): [True: 120, False: 888]
  |  |  ------------------
  ------------------
 1483|    328|            value = 0;
 1484|    328|            return ranges::next(source.begin(),
 1485|    328|                                ranges::distance(source.data(), start));
 1486|    328|        }
 1487|  1.21k|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    888|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    888|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    888|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    888|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 332, False: 556]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    332|    }                                                  \
  |  |  |  | 3667|    888|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    556|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    556|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    556|                     base, sign == sign_type::minus_sign));
 1502|    556|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    888|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|   141k|{
 1462|   141k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   141k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   141k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|   141k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|   141k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 5.96k, False: 135k]
  ------------------
 1468|  5.96k|        SCN_UNLIKELY_ATTR
 1469|  5.96k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  5.96k|                                     "Invalid integer value");
 1471|  5.96k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|   135k|    auto start = source.data();
 1475|   135k|    const auto end = source.data() + source.size();
 1476|   135k|    {
 1477|   349k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 328k, False: 20.7k]
  ------------------
 1478|   328k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 114k, False: 213k]
  ------------------
 1479|   114k|                break;
 1480|   114k|            }
 1481|   328k|        }
 1482|   135k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.5k, False: 100k]
  |  |  |  Branch (859:45): [True: 20.7k, False: 114k]
  |  |  |  Branch (859:45): [True: 13.8k, False: 100k]
  |  |  ------------------
  ------------------
 1483|  34.5k|            value = 0;
 1484|  34.5k|            return ranges::next(source.begin(),
 1485|  34.5k|                                ranges::distance(source.data(), start));
 1486|  34.5k|        }
 1487|   135k|    }
 1488|       |
 1489|   100k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|   100k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 72.3k, False: 28.5k]
  ------------------
 1491|  72.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  72.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.72k, False: 70.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.72k|    }                                                  \
  |  |  |  | 3667|  72.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  70.6k|                             detail::make_string_view_from_pointers(start, end),
 1493|  70.6k|                             value, sign == sign_type::minus_sign));
 1494|  70.6k|            return ranges::next(source.begin(),
 1495|  70.6k|                                ranges::distance(source.data(), ptr));
 1496|  72.3k|        }
 1497|   100k|    }
 1498|       |
 1499|  99.9k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 934, False: 99.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    934|    }                                                  \
  |  |  |  | 3667|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  99.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|  99.9k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|  99.9k|                     base, sign == sign_type::minus_sign));
 1502|  99.9k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|   100k|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  19.4k|{
 1462|  19.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  19.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  19.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 18.2k, False: 1.26k]
  ------------------
 1468|  18.2k|        SCN_UNLIKELY_ATTR
 1469|  18.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  18.2k|                                     "Invalid integer value");
 1471|  18.2k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  1.26k|    auto start = source.data();
 1475|  1.26k|    const auto end = source.data() + source.size();
 1476|  1.26k|    {
 1477|  1.69k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.47k, False: 219]
  ------------------
 1478|  1.47k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 1.04k, False: 434]
  ------------------
 1479|  1.04k|                break;
 1480|  1.04k|            }
 1481|  1.47k|        }
 1482|  1.26k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 346, False: 914]
  |  |  |  Branch (859:45): [True: 219, False: 1.04k]
  |  |  |  Branch (859:45): [True: 127, False: 914]
  |  |  ------------------
  ------------------
 1483|    346|            value = 0;
 1484|    346|            return ranges::next(source.begin(),
 1485|    346|                                ranges::distance(source.data(), start));
 1486|    346|        }
 1487|  1.26k|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    914|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 148, False: 766]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    148|    }                                                  \
  |  |  |  | 3667|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    766|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    766|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    766|                     base, sign == sign_type::minus_sign));
 1502|    766|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    914|}
_ZN3scn2v34impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|   143k|{
 1462|   143k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   143k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   143k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|   143k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|   143k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 6.25k, False: 137k]
  ------------------
 1468|  6.25k|        SCN_UNLIKELY_ATTR
 1469|  6.25k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  6.25k|                                     "Invalid integer value");
 1471|  6.25k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|   137k|    auto start = source.data();
 1475|   137k|    const auto end = source.data() + source.size();
 1476|   137k|    {
 1477|   351k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 330k, False: 20.9k]
  ------------------
 1478|   330k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 116k, False: 214k]
  ------------------
 1479|   116k|                break;
 1480|   116k|            }
 1481|   330k|        }
 1482|   137k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.8k, False: 102k]
  |  |  |  Branch (859:45): [True: 20.9k, False: 116k]
  |  |  |  Branch (859:45): [True: 13.9k, False: 102k]
  |  |  ------------------
  ------------------
 1483|  34.8k|            value = 0;
 1484|  34.8k|            return ranges::next(source.begin(),
 1485|  34.8k|                                ranges::distance(source.data(), start));
 1486|  34.8k|        }
 1487|   137k|    }
 1488|       |
 1489|   102k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|   102k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 73.3k, False: 28.8k]
  ------------------
 1491|  73.3k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  73.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  73.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  73.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 938, False: 72.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    938|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    938|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    938|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    938|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    938|    }                                                  \
  |  |  |  | 3667|  73.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  72.4k|                             detail::make_string_view_from_pointers(start, end),
 1493|  72.4k|                             value, sign == sign_type::minus_sign));
 1494|  72.4k|            return ranges::next(source.begin(),
 1495|  72.4k|                                ranges::distance(source.data(), ptr));
 1496|  73.3k|        }
 1497|   102k|    }
 1498|       |
 1499|   101k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 486, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    486|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    486|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    486|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    486|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    486|    }                                                  \
  |  |  |  | 3667|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|   101k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|   101k|                     base, sign == sign_type::minus_sign));
 1502|   101k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|   102k|}
_ZN3scn2v34impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  19.6k|{
 1462|  19.6k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.6k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.6k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  19.6k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  19.6k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 18.2k, False: 1.35k]
  ------------------
 1468|  18.2k|        SCN_UNLIKELY_ATTR
 1469|  18.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  18.2k|                                     "Invalid integer value");
 1471|  18.2k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  1.35k|    auto start = source.data();
 1475|  1.35k|    const auto end = source.data() + source.size();
 1476|  1.35k|    {
 1477|  1.84k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.59k, False: 252]
  ------------------
 1478|  1.59k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 1.10k, False: 488]
  ------------------
 1479|  1.10k|                break;
 1480|  1.10k|            }
 1481|  1.59k|        }
 1482|  1.35k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 400, False: 954]
  |  |  |  Branch (859:45): [True: 252, False: 1.10k]
  |  |  |  Branch (859:45): [True: 148, False: 954]
  |  |  ------------------
  ------------------
 1483|    400|            value = 0;
 1484|    400|            return ranges::next(source.begin(),
 1485|    400|                                ranges::distance(source.data(), start));
 1486|    400|        }
 1487|  1.35k|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    954|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    954|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    954|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    954|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    954|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 934]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    954|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    934|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    934|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    934|                     base, sign == sign_type::minus_sign));
 1502|    934|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    954|}
_ZN3scn2v34impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  98.2k|{
 1462|  98.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  98.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  98.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  98.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  98.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  98.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  98.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  98.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  98.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 3.72k, False: 94.4k]
  ------------------
 1468|  3.72k|        SCN_UNLIKELY_ATTR
 1469|  3.72k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  3.72k|                                     "Invalid integer value");
 1471|  3.72k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  94.4k|    auto start = source.data();
 1475|  94.4k|    const auto end = source.data() + source.size();
 1476|  94.4k|    {
 1477|   285k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 268k, False: 17.5k]
  ------------------
 1478|   268k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 76.9k, False: 191k]
  ------------------
 1479|  76.9k|                break;
 1480|  76.9k|            }
 1481|   268k|        }
 1482|  94.4k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.2k, False: 65.1k]
  |  |  |  Branch (859:45): [True: 17.5k, False: 76.9k]
  |  |  |  Branch (859:45): [True: 11.7k, False: 65.1k]
  |  |  ------------------
  ------------------
 1483|  29.2k|            value = 0;
 1484|  29.2k|            return ranges::next(source.begin(),
 1485|  29.2k|                                ranges::distance(source.data(), start));
 1486|  29.2k|        }
 1487|  94.4k|    }
 1488|       |
 1489|  65.1k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|  65.1k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 47.2k, False: 17.9k]
  ------------------
 1491|  47.2k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.71k, False: 45.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.71k|    }                                                  \
  |  |  |  | 3667|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  45.5k|                             detail::make_string_view_from_pointers(start, end),
 1493|  45.5k|                             value, sign == sign_type::minus_sign));
 1494|  45.5k|            return ranges::next(source.begin(),
 1495|  45.5k|                                ranges::distance(source.data(), ptr));
 1496|  47.2k|        }
 1497|  65.1k|    }
 1498|       |
 1499|  64.1k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  65.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  65.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  65.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.05k, False: 64.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.05k|    }                                                  \
  |  |  |  | 3667|  65.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|  64.1k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|  64.1k|                     base, sign == sign_type::minus_sign));
 1502|  64.1k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|  65.1k|}
_ZN3scn2v34impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  19.0k|{
 1462|  19.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  19.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  19.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 18.0k, False: 992]
  ------------------
 1468|  18.0k|        SCN_UNLIKELY_ATTR
 1469|  18.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  18.0k|                                     "Invalid integer value");
 1471|  18.0k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|    992|    auto start = source.data();
 1475|    992|    const auto end = source.data() + source.size();
 1476|    992|    {
 1477|  1.39k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.19k, False: 197]
  ------------------
 1478|  1.19k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 795, False: 398]
  ------------------
 1479|    795|                break;
 1480|    795|            }
 1481|  1.19k|        }
 1482|    992|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 310, False: 682]
  |  |  |  Branch (859:45): [True: 197, False: 795]
  |  |  |  Branch (859:45): [True: 113, False: 682]
  |  |  ------------------
  ------------------
 1483|    310|            value = 0;
 1484|    310|            return ranges::next(source.begin(),
 1485|    310|                                ranges::distance(source.data(), start));
 1486|    310|        }
 1487|    992|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    682|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    682|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    682|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    682|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    682|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 250, False: 432]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    250|    }                                                  \
  |  |  |  | 3667|    682|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    432|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    432|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    432|                     base, sign == sign_type::minus_sign));
 1502|    432|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    682|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|   107k|{
 1462|   107k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   107k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   107k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|   107k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|   107k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 3.96k, False: 103k]
  ------------------
 1468|  3.96k|        SCN_UNLIKELY_ATTR
 1469|  3.96k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  3.96k|                                     "Invalid integer value");
 1471|  3.96k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|   103k|    auto start = source.data();
 1475|   103k|    const auto end = source.data() + source.size();
 1476|   103k|    {
 1477|   300k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 282k, False: 18.7k]
  ------------------
 1478|   282k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 85.0k, False: 197k]
  ------------------
 1479|  85.0k|                break;
 1480|  85.0k|            }
 1481|   282k|        }
 1482|   103k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.3k, False: 72.4k]
  |  |  |  Branch (859:45): [True: 18.7k, False: 85.0k]
  |  |  |  Branch (859:45): [True: 12.6k, False: 72.4k]
  |  |  ------------------
  ------------------
 1483|  31.3k|            value = 0;
 1484|  31.3k|            return ranges::next(source.begin(),
 1485|  31.3k|                                ranges::distance(source.data(), start));
 1486|  31.3k|        }
 1487|   103k|    }
 1488|       |
 1489|  72.4k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|  72.4k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 52.4k, False: 19.9k]
  ------------------
 1491|  52.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  52.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 913, False: 51.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    913|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    913|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    913|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    913|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    913|    }                                                  \
  |  |  |  | 3667|  52.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  51.5k|                             detail::make_string_view_from_pointers(start, end),
 1493|  51.5k|                             value, sign == sign_type::minus_sign));
 1494|  51.5k|            return ranges::next(source.begin(),
 1495|  51.5k|                                ranges::distance(source.data(), ptr));
 1496|  52.4k|        }
 1497|  72.4k|    }
 1498|       |
 1499|  71.8k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  72.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 502, False: 71.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    502|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    502|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    502|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    502|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    502|    }                                                  \
  |  |  |  | 3667|  72.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|  71.8k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|  71.8k|                     base, sign == sign_type::minus_sign));
 1502|  71.8k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|  72.4k|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  19.0k|{
 1462|  19.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  19.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  19.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 18.0k, False: 1.01k]
  ------------------
 1468|  18.0k|        SCN_UNLIKELY_ATTR
 1469|  18.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  18.0k|                                     "Invalid integer value");
 1471|  18.0k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  1.01k|    auto start = source.data();
 1475|  1.01k|    const auto end = source.data() + source.size();
 1476|  1.01k|    {
 1477|  1.41k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.21k, False: 197]
  ------------------
 1478|  1.21k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 817, False: 398]
  ------------------
 1479|    817|                break;
 1480|    817|            }
 1481|  1.21k|        }
 1482|  1.01k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 310, False: 704]
  |  |  |  Branch (859:45): [True: 197, False: 817]
  |  |  |  Branch (859:45): [True: 113, False: 704]
  |  |  ------------------
  ------------------
 1483|    310|            value = 0;
 1484|    310|            return ranges::next(source.begin(),
 1485|    310|                                ranges::distance(source.data(), start));
 1486|    310|        }
 1487|  1.01k|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    704|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    704|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    704|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    704|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 144, False: 560]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    144|    }                                                  \
  |  |  |  | 3667|    704|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    560|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    560|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    560|                     base, sign == sign_type::minus_sign));
 1502|    560|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    704|}
_ZN3scn2v34impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|   108k|{
 1462|   108k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   108k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   108k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|   108k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|   108k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 4.03k, False: 104k]
  ------------------
 1468|  4.03k|        SCN_UNLIKELY_ATTR
 1469|  4.03k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  4.03k|                                     "Invalid integer value");
 1471|  4.03k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|   104k|    auto start = source.data();
 1475|   104k|    const auto end = source.data() + source.size();
 1476|   104k|    {
 1477|   301k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 282k, False: 18.7k]
  ------------------
 1478|   282k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 85.8k, False: 197k]
  ------------------
 1479|  85.8k|                break;
 1480|  85.8k|            }
 1481|   282k|        }
 1482|   104k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.3k, False: 73.1k]
  |  |  |  Branch (859:45): [True: 18.7k, False: 85.8k]
  |  |  |  Branch (859:45): [True: 12.6k, False: 73.1k]
  |  |  ------------------
  ------------------
 1483|  31.3k|            value = 0;
 1484|  31.3k|            return ranges::next(source.begin(),
 1485|  31.3k|                                ranges::distance(source.data(), start));
 1486|  31.3k|        }
 1487|   104k|    }
 1488|       |
 1489|  73.1k|    if constexpr (std::is_same_v<CharT, char>) {
 1490|  73.1k|        if (base == 10) {
  ------------------
  |  Branch (1490:13): [True: 53.0k, False: 20.1k]
  ------------------
 1491|  53.0k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  53.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  53.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  53.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 466, False: 52.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    466|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    466|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    466|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    466|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    466|    }                                                  \
  |  |  |  | 3667|  53.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1492|  52.5k|                             detail::make_string_view_from_pointers(start, end),
 1493|  52.5k|                             value, sign == sign_type::minus_sign));
 1494|  52.5k|            return ranges::next(source.begin(),
 1495|  52.5k|                                ranges::distance(source.data(), ptr));
 1496|  53.0k|        }
 1497|  73.1k|    }
 1498|       |
 1499|  72.9k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  73.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  73.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  73.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 72.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    270|    }                                                  \
  |  |  |  | 3667|  73.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|  72.9k|                     detail::make_string_view_from_pointers(start, end), value,
 1501|  72.9k|                     base, sign == sign_type::minus_sign));
 1502|  72.9k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|  73.1k|}
_ZN3scn2v34impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1461|  19.1k|{
 1462|  19.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  19.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  19.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|  19.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1466|       |
 1467|  19.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1467:9): [True: 18.1k, False: 1.05k]
  ------------------
 1468|  18.1k|        SCN_UNLIKELY_ATTR
 1469|  18.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1470|  18.1k|                                     "Invalid integer value");
 1471|  18.1k|    }
 1472|       |
 1473|       |    // Skip leading zeroes
 1474|  1.05k|    auto start = source.data();
 1475|  1.05k|    const auto end = source.data() + source.size();
 1476|  1.05k|    {
 1477|  1.45k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1477:16): [True: 1.25k, False: 197]
  ------------------
 1478|  1.25k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1478:17): [True: 861, False: 398]
  ------------------
 1479|    861|                break;
 1480|    861|            }
 1481|  1.25k|        }
 1482|  1.05k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 310, False: 748]
  |  |  |  Branch (859:45): [True: 197, False: 861]
  |  |  |  Branch (859:45): [True: 113, False: 748]
  |  |  ------------------
  ------------------
 1483|    310|            value = 0;
 1484|    310|            return ranges::next(source.begin(),
 1485|    310|                                ranges::distance(source.data(), start));
 1486|    310|        }
 1487|  1.05k|    }
 1488|       |
 1489|       |    if constexpr (std::is_same_v<CharT, char>) {
 1490|       |        if (base == 10) {
 1491|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1492|       |                             detail::make_string_view_from_pointers(start, end),
 1493|       |                             value, sign == sign_type::minus_sign));
 1494|       |            return ranges::next(source.begin(),
 1495|       |                                ranges::distance(source.data(), ptr));
 1496|       |        }
 1497|       |    }
 1498|       |
 1499|    748|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    748|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    748|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    748|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    748|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 740]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|    748|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    740|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1500|    740|                     detail::make_string_view_from_pointers(start, end), value,
 1501|    740|                     base, sign == sign_type::minus_sign));
 1502|    740|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1503|    748|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2184|   213k|{
 2185|   213k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2186|   213k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2192|   213k|{
 2193|   213k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2194|   213k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   213k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 170k, False: 42.9k]
  |  |  ------------------
  ------------------
 2195|   170k|        source.sync(*n);
 2196|   170k|    }
 2197|  42.9k|    else {
 2198|  42.9k|        source.sync_all();
 2199|  42.9k|    }
 2200|   213k|    return n;
 2201|   213k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2208|  87.4k|{
 2209|  87.4k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2210|  87.4k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2216|  87.4k|{
 2217|  87.4k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2218|  87.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  87.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.50k, False: 85.9k]
  |  |  ------------------
  ------------------
 2219|  1.50k|        source.sync(*n);
 2220|  1.50k|    }
 2221|  85.9k|    else {
 2222|  85.9k|        source.sync_all();
 2223|  85.9k|    }
 2224|  87.4k|    return n;
 2225|  87.4k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  202|   862k|{
  203|   862k|    return find_classic_impl(
  204|   862k|        source, [](char ch) { return !is_ascii_space(ch); },
  205|   862k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  206|   862k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2141|   213k|{
 2142|   213k|    return vscan_internal(source, format, args);
 2143|   213k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2147|   213k|{
 2148|   213k|    auto n = vscan_internal(source, format, args);
 2149|   213k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   213k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 170k, False: 42.9k]
  |  |  ------------------
  ------------------
 2150|   170k|        source.sync(*n);
 2151|   170k|    }
 2152|  42.9k|    else {
 2153|  42.9k|        source.sync_all();
 2154|  42.9k|    }
 2155|   213k|    return n;
 2156|   213k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2161|  87.4k|{
 2162|  87.4k|    return vscan_internal(source, format, args);
 2163|  87.4k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2167|  87.4k|{
 2168|  87.4k|    auto n = vscan_internal(source, format, args);
 2169|  87.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  87.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.50k, False: 85.9k]
  |  |  ------------------
  ------------------
 2170|  1.50k|        source.sync(*n);
 2171|  1.50k|    }
 2172|  85.9k|    else {
 2173|  85.9k|        source.sync_all();
 2174|  85.9k|    }
 2175|  87.4k|    return n;
 2176|  87.4k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2251|  32.4k|{
 2252|  32.4k|    return vscan_value_internal(source, arg);
 2253|  32.4k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2256|  32.0k|{
 2257|  32.0k|    auto n = vscan_value_internal(source, arg);
 2258|  32.0k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  32.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 27.7k, False: 4.29k]
  |  |  ------------------
  ------------------
 2259|  27.7k|        source.sync(*n);
 2260|  27.7k|    }
 2261|  4.29k|    else {
 2262|  4.29k|        source.sync_all();
 2263|  4.29k|    }
 2264|  32.0k|    return n;
 2265|  32.0k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2270|  8.83k|{
 2271|  8.83k|    return vscan_value_internal(source, arg);
 2272|  8.83k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2276|  8.83k|{
 2277|  8.83k|    auto n = vscan_value_internal(source, arg);
 2278|  8.83k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  8.83k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 246, False: 8.59k]
  |  |  ------------------
  ------------------
 2279|    246|        source.sync(*n);
 2280|    246|    }
 2281|  8.59k|    else {
 2282|  8.59k|        source.sync_all();
 2283|  8.59k|    }
 2284|  8.83k|    return n;
 2285|  8.83k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1369|  84.4k|{
 1370|  84.4k|    auto max_digits = maxdigits_u64(base);
 1371|  84.4k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 964, False: 83.4k]
  ------------------
 1372|    964|        return true;
 1373|    964|    }
 1374|  83.4k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 318, False: 83.1k]
  |  Branch (1374:39): [True: 106, False: 212]
  ------------------
 1375|    106|        return true;
 1376|    106|    }
 1377|  83.3k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|  83.3k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 4.69k, False: 78.6k]
  ------------------
 1379|  83.3k|                      static_cast<uint64_t>(is_negative)) {
 1380|  4.69k|            SCN_UNLIKELY_ATTR
 1381|  4.69k|            return true;
 1382|  4.69k|        }
 1383|  83.3k|    }
 1384|       |
 1385|  78.6k|    return false;
 1386|  83.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113maxdigits_u64Ei:
 1315|   502k|{
 1316|   502k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|   502k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   502k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1317|   502k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1318|   502k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112min_safe_u64Ei:
 1359|  1.79k|{
 1360|  1.79k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|  1.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1361|  1.79k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1362|  1.79k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIaEET_mb:
 1390|  78.6k|{
 1391|  78.6k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 15.0k, False: 63.5k]
  ------------------
 1392|  15.0k|        SCN_MSVC_PUSH
 1393|  15.0k|        SCN_MSVC_IGNORE(4146)
 1394|  15.0k|        return static_cast<T>(
 1395|  15.0k|            -std::numeric_limits<T>::max() -
 1396|  15.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|  15.0k|        SCN_MSVC_POP
 1398|  15.0k|    }
 1399|       |
 1400|  63.5k|    return static_cast<T>(u64val);
 1401|  78.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1369|   101k|{
 1370|   101k|    auto max_digits = maxdigits_u64(base);
 1371|   101k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 1.03k, False: 100k]
  ------------------
 1372|  1.03k|        return true;
 1373|  1.03k|    }
 1374|   100k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 326, False: 100k]
  |  Branch (1374:39): [True: 106, False: 220]
  ------------------
 1375|    106|        return true;
 1376|    106|    }
 1377|   100k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|   100k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 1.66k, False: 99.0k]
  ------------------
 1379|   100k|                      static_cast<uint64_t>(is_negative)) {
 1380|  1.66k|            SCN_UNLIKELY_ATTR
 1381|  1.66k|            return true;
 1382|  1.66k|        }
 1383|   100k|    }
 1384|       |
 1385|  99.0k|    return false;
 1386|   100k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIiEET_mb:
 1390|  99.0k|{
 1391|  99.0k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 16.4k, False: 82.5k]
  ------------------
 1392|  16.4k|        SCN_MSVC_PUSH
 1393|  16.4k|        SCN_MSVC_IGNORE(4146)
 1394|  16.4k|        return static_cast<T>(
 1395|  16.4k|            -std::numeric_limits<T>::max() -
 1396|  16.4k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|  16.4k|        SCN_MSVC_POP
 1398|  16.4k|    }
 1399|       |
 1400|  82.5k|    return static_cast<T>(u64val);
 1401|  99.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1369|   103k|{
 1370|   103k|    auto max_digits = maxdigits_u64(base);
 1371|   103k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 1.14k, False: 102k]
  ------------------
 1372|  1.14k|        return true;
 1373|  1.14k|    }
 1374|   102k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 362, False: 101k]
  |  Branch (1374:39): [True: 106, False: 256]
  ------------------
 1375|    106|        return true;
 1376|    106|    }
 1377|   101k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|   101k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 198, False: 101k]
  ------------------
 1379|   101k|                      static_cast<uint64_t>(is_negative)) {
 1380|    198|            SCN_UNLIKELY_ATTR
 1381|    198|            return true;
 1382|    198|        }
 1383|   101k|    }
 1384|       |
 1385|   101k|    return false;
 1386|   102k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIxEET_mb:
 1390|   101k|{
 1391|   101k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 17.2k, False: 84.5k]
  ------------------
 1392|  17.2k|        SCN_MSVC_PUSH
 1393|  17.2k|        SCN_MSVC_IGNORE(4146)
 1394|  17.2k|        return static_cast<T>(
 1395|  17.2k|            -std::numeric_limits<T>::max() -
 1396|  17.2k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|  17.2k|        SCN_MSVC_POP
 1398|  17.2k|    }
 1399|       |
 1400|  84.5k|    return static_cast<T>(u64val);
 1401|   101k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1369|  65.8k|{
 1370|  65.8k|    auto max_digits = maxdigits_u64(base);
 1371|  65.8k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 672, False: 65.2k]
  ------------------
 1372|    672|        return true;
 1373|    672|    }
 1374|  65.2k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 224, False: 64.9k]
  |  Branch (1374:39): [True: 58, False: 166]
  ------------------
 1375|     58|        return true;
 1376|     58|    }
 1377|  65.1k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|  65.1k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 2.28k, False: 62.8k]
  ------------------
 1379|  65.1k|                      static_cast<uint64_t>(is_negative)) {
 1380|  2.28k|            SCN_UNLIKELY_ATTR
 1381|  2.28k|            return true;
 1382|  2.28k|        }
 1383|  65.1k|    }
 1384|       |
 1385|  62.8k|    return false;
 1386|  65.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIhEET_mb:
 1390|  62.8k|{
 1391|  62.8k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 0, False: 62.8k]
  ------------------
 1392|      0|        SCN_MSVC_PUSH
 1393|      0|        SCN_MSVC_IGNORE(4146)
 1394|      0|        return static_cast<T>(
 1395|      0|            -std::numeric_limits<T>::max() -
 1396|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|      0|        SCN_MSVC_POP
 1398|      0|    }
 1399|       |
 1400|  62.8k|    return static_cast<T>(u64val);
 1401|  62.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1369|  73.1k|{
 1370|  73.1k|    auto max_digits = maxdigits_u64(base);
 1371|  73.1k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 672, False: 72.4k]
  ------------------
 1372|    672|        return true;
 1373|    672|    }
 1374|  72.4k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 228, False: 72.2k]
  |  Branch (1374:39): [True: 58, False: 170]
  ------------------
 1375|     58|        return true;
 1376|     58|    }
 1377|  72.3k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|  72.3k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 829, False: 71.5k]
  ------------------
 1379|  72.3k|                      static_cast<uint64_t>(is_negative)) {
 1380|    829|            SCN_UNLIKELY_ATTR
 1381|    829|            return true;
 1382|    829|        }
 1383|  72.3k|    }
 1384|       |
 1385|  71.5k|    return false;
 1386|  72.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIjEET_mb:
 1390|  71.5k|{
 1391|  71.5k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 0, False: 71.5k]
  ------------------
 1392|      0|        SCN_MSVC_PUSH
 1393|      0|        SCN_MSVC_IGNORE(4146)
 1394|      0|        return static_cast<T>(
 1395|      0|            -std::numeric_limits<T>::max() -
 1396|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|      0|        SCN_MSVC_POP
 1398|      0|    }
 1399|       |
 1400|  71.5k|    return static_cast<T>(u64val);
 1401|  71.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1369|  73.9k|{
 1370|  73.9k|    auto max_digits = maxdigits_u64(base);
 1371|  73.9k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1371:9): [True: 686, False: 73.2k]
  ------------------
 1372|    686|        return true;
 1373|    686|    }
 1374|  73.2k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1374:9): [True: 336, False: 72.9k]
  |  Branch (1374:39): [True: 58, False: 278]
  ------------------
 1375|     58|        return true;
 1376|     58|    }
 1377|  73.1k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1378|  73.1k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1378:13): [True: 0, False: 73.1k]
  ------------------
 1379|  73.1k|                      static_cast<uint64_t>(is_negative)) {
 1380|      0|            SCN_UNLIKELY_ATTR
 1381|      0|            return true;
 1382|      0|        }
 1383|  73.1k|    }
 1384|       |
 1385|  73.1k|    return false;
 1386|  73.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIyEET_mb:
 1390|  73.1k|{
 1391|  73.1k|    if (is_negative) {
  ------------------
  |  Branch (1391:9): [True: 0, False: 73.1k]
  ------------------
 1392|      0|        SCN_MSVC_PUSH
 1393|      0|        SCN_MSVC_IGNORE(4146)
 1394|      0|        return static_cast<T>(
 1395|      0|            -std::numeric_limits<T>::max() -
 1396|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1397|      0|        SCN_MSVC_POP
 1398|      0|    }
 1399|       |
 1400|  73.1k|    return static_cast<T>(u64val);
 1401|  73.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1253|   190k|{
 1254|   190k|    uint64_t val{};
 1255|   190k|    std::memcpy(&val, input, sizeof(uint64_t));
 1256|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1257|       |        val = byteswap(val);
 1258|       |    }
 1259|   190k|    return val;
 1260|   190k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1263|  34.0k|{
 1264|  34.0k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1265|  34.0k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1266|  34.0k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1267|  34.0k|    word -= 0x3030303030303030;
 1268|  34.0k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1269|  34.0k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1270|  34.0k|    return static_cast<uint32_t>(word);
 1271|  34.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1274|   156k|{
 1275|   156k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1276|   156k|              0x8080808080808080));
 1277|   156k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  105|   526k|{
  106|   526k|    static_assert(sizeof(*source.data()) == 1);
  107|   526k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   526k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   526k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|   526k|    uint64_t word{};
  109|   526k|    std::memcpy(&word, source.data(), source.size());
  110|       |
  111|   526k|    return has_byte_greater(word, 127) != 0;
  112|   526k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|   862k|{
  119|   862k|    auto it = source.begin();
  120|       |
  121|   942k|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 526k, False: 416k]
  ------------------
  122|   526k|        auto sv =
  123|   526k|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|   526k|                .substr(0, 8);
  125|       |
  126|   526k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 501k, False: 25.1k]
  ------------------
  127|   501k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|   501k|            it = detail::make_string_view_iterator(source, tmp_it);
  129|   501k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 423k, False: 77.9k]
  ------------------
  130|   423k|                break;
  131|   423k|            }
  132|  77.9k|            continue;
  133|   501k|        }
  134|       |
  135|  35.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 33.0k, False: 2.05k]
  ------------------
  136|  33.0k|            auto tmp =
  137|  33.0k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|  33.0k|            auto res = get_next_code_point(tmp);
  139|  33.0k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 23.1k, False: 9.93k]
  ------------------
  140|  23.1k|                return it;
  141|  23.1k|            }
  142|  9.93k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|  9.93k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|  9.93k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  9.93k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|  9.93k|        }
  146|  25.1k|    }
  147|       |
  148|   839k|    return detail::make_string_view_iterator(source, it);
  149|   862k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  204|   873k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  205|  33.0k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  62.3k|{
 1408|  62.3k|    uint64_t u64val{};
 1409|  62.3k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  62.3k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  62.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  62.3k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.43k, False: 58.9k]
  |  |  ------------------
  ------------------
 1414|  62.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|  3.43k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|  3.43k|                                     "Integer overflow");
 1417|  3.43k|    }
 1418|       |
 1419|  58.9k|    val = store_result<T>(u64val, is_negative);
 1420|  58.9k|    return ptr;
 1421|  62.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1295|   360k|{
 1296|   360k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1297|       |
 1298|   810k|    while (begin != end) {
  ------------------
  |  Branch (1298:12): [True: 586k, False: 223k]
  ------------------
 1299|   586k|        const auto digit = char_to_int(*begin);
 1300|   586k|        if (digit >= 10) {
  ------------------
  |  Branch (1300:13): [True: 136k, False: 449k]
  ------------------
 1301|   136k|            break;
 1302|   136k|        }
 1303|   449k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1304|   449k|        ++begin;
 1305|   449k|    }
 1306|       |
 1307|   360k|    return begin;
 1308|   360k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1282|   360k|{
 1283|   360k|    while (
 1284|   394k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1284:9): [True: 156k, False: 238k]
  ------------------
 1285|   394k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1285:9): [True: 34.0k, False: 122k]
  ------------------
 1286|  34.0k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1287|  34.0k|                                      get_eight_digits_word(p));
 1288|  34.0k|        p += 8;
 1289|  34.0k|    }
 1290|   360k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  21.1k|{
 1429|  21.1k|    uint64_t u64val{};
 1430|  21.1k|    const CharT* begin = input.data();
 1431|  21.1k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  74.8k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 63.8k, False: 11.0k]
  ------------------
 1434|  63.8k|        const auto digit = char_to_int(*begin);
 1435|  63.8k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 10.1k, False: 53.7k]
  ------------------
 1436|  10.1k|            break;
 1437|  10.1k|        }
 1438|  53.7k|        u64val =
 1439|  53.7k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  53.7k|        ++begin;
 1441|  53.7k|    }
 1442|       |
 1443|  21.1k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  21.1k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.99k, False: 19.1k]
  |  |  ------------------
  ------------------
 1445|  21.1k|                                               is_negative))) {
 1446|  1.99k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|  1.99k|                                     "Integer overflow");
 1448|  1.99k|    }
 1449|       |
 1450|  19.1k|    val = store_result<T>(u64val, is_negative);
 1451|  19.1k|    return begin;
 1452|  21.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    888|{
 1429|    888|    uint64_t u64val{};
 1430|    888|    const CharT* begin = input.data();
 1431|    888|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.60k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 3.99k, False: 611]
  ------------------
 1434|  3.99k|        const auto digit = char_to_int(*begin);
 1435|  3.99k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 277, False: 3.71k]
  ------------------
 1436|    277|            break;
 1437|    277|        }
 1438|  3.71k|        u64val =
 1439|  3.71k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.71k|        ++begin;
 1441|  3.71k|    }
 1442|       |
 1443|    888|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    888|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    888|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 556]
  |  |  ------------------
  ------------------
 1445|    888|                                               is_negative))) {
 1446|    332|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    332|                                     "Integer overflow");
 1448|    332|    }
 1449|       |
 1450|    556|    val = store_result<T>(u64val, is_negative);
 1451|    556|    return begin;
 1452|    888|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  72.3k|{
 1408|  72.3k|    uint64_t u64val{};
 1409|  72.3k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  72.3k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  72.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  72.3k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  72.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.72k, False: 70.6k]
  |  |  ------------------
  ------------------
 1414|  72.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|  1.72k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|  1.72k|                                     "Integer overflow");
 1417|  1.72k|    }
 1418|       |
 1419|  70.6k|    val = store_result<T>(u64val, is_negative);
 1420|  70.6k|    return ptr;
 1421|  72.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  28.5k|{
 1429|  28.5k|    uint64_t u64val{};
 1430|  28.5k|    const CharT* begin = input.data();
 1431|  28.5k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  93.5k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 78.7k, False: 14.8k]
  ------------------
 1434|  78.7k|        const auto digit = char_to_int(*begin);
 1435|  78.7k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 13.7k, False: 65.0k]
  ------------------
 1436|  13.7k|            break;
 1437|  13.7k|        }
 1438|  65.0k|        u64val =
 1439|  65.0k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  65.0k|        ++begin;
 1441|  65.0k|    }
 1442|       |
 1443|  28.5k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  28.5k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 934, False: 27.6k]
  |  |  ------------------
  ------------------
 1445|  28.5k|                                               is_negative))) {
 1446|    934|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    934|                                     "Integer overflow");
 1448|    934|    }
 1449|       |
 1450|  27.6k|    val = store_result<T>(u64val, is_negative);
 1451|  27.6k|    return begin;
 1452|  28.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    914|{
 1429|    914|    uint64_t u64val{};
 1430|    914|    const CharT* begin = input.data();
 1431|    914|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.65k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 4.03k, False: 626]
  ------------------
 1434|  4.03k|        const auto digit = char_to_int(*begin);
 1435|  4.03k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 288, False: 3.74k]
  ------------------
 1436|    288|            break;
 1437|    288|        }
 1438|  3.74k|        u64val =
 1439|  3.74k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.74k|        ++begin;
 1441|  3.74k|    }
 1442|       |
 1443|    914|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    914|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 148, False: 766]
  |  |  ------------------
  ------------------
 1445|    914|                                               is_negative))) {
 1446|    148|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    148|                                     "Integer overflow");
 1448|    148|    }
 1449|       |
 1450|    766|    val = store_result<T>(u64val, is_negative);
 1451|    766|    return begin;
 1452|    914|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  73.3k|{
 1408|  73.3k|    uint64_t u64val{};
 1409|  73.3k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  73.3k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  73.3k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  73.3k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  73.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 938, False: 72.4k]
  |  |  ------------------
  ------------------
 1414|  73.3k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|    938|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|    938|                                     "Integer overflow");
 1417|    938|    }
 1418|       |
 1419|  72.4k|    val = store_result<T>(u64val, is_negative);
 1420|  72.4k|    return ptr;
 1421|  73.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  28.8k|{
 1429|  28.8k|    uint64_t u64val{};
 1430|  28.8k|    const CharT* begin = input.data();
 1431|  28.8k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  96.5k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 81.5k, False: 15.0k]
  ------------------
 1434|  81.5k|        const auto digit = char_to_int(*begin);
 1435|  81.5k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 13.8k, False: 67.6k]
  ------------------
 1436|  13.8k|            break;
 1437|  13.8k|        }
 1438|  67.6k|        u64val =
 1439|  67.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  67.6k|        ++begin;
 1441|  67.6k|    }
 1442|       |
 1443|  28.8k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  28.8k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  28.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 486, False: 28.4k]
  |  |  ------------------
  ------------------
 1445|  28.8k|                                               is_negative))) {
 1446|    486|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    486|                                     "Integer overflow");
 1448|    486|    }
 1449|       |
 1450|  28.4k|    val = store_result<T>(u64val, is_negative);
 1451|  28.4k|    return begin;
 1452|  28.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    954|{
 1429|    954|    uint64_t u64val{};
 1430|    954|    const CharT* begin = input.data();
 1431|    954|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.73k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 4.08k, False: 650]
  ------------------
 1434|  4.08k|        const auto digit = char_to_int(*begin);
 1435|  4.08k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 304, False: 3.78k]
  ------------------
 1436|    304|            break;
 1437|    304|        }
 1438|  3.78k|        u64val =
 1439|  3.78k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.78k|        ++begin;
 1441|  3.78k|    }
 1442|       |
 1443|    954|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    954|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    954|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 934]
  |  |  ------------------
  ------------------
 1445|    954|                                               is_negative))) {
 1446|     20|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|     20|                                     "Integer overflow");
 1448|     20|    }
 1449|       |
 1450|    934|    val = store_result<T>(u64val, is_negative);
 1451|    934|    return begin;
 1452|    954|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  47.2k|{
 1408|  47.2k|    uint64_t u64val{};
 1409|  47.2k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  47.2k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  47.2k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  47.2k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.71k, False: 45.5k]
  |  |  ------------------
  ------------------
 1414|  47.2k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|  1.71k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|  1.71k|                                     "Integer overflow");
 1417|  1.71k|    }
 1418|       |
 1419|  45.5k|    val = store_result<T>(u64val, is_negative);
 1420|  45.5k|    return ptr;
 1421|  47.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  17.9k|{
 1429|  17.9k|    uint64_t u64val{};
 1430|  17.9k|    const CharT* begin = input.data();
 1431|  17.9k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  57.7k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 48.4k, False: 9.32k]
  ------------------
 1434|  48.4k|        const auto digit = char_to_int(*begin);
 1435|  48.4k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 8.62k, False: 39.8k]
  ------------------
 1436|  8.62k|            break;
 1437|  8.62k|        }
 1438|  39.8k|        u64val =
 1439|  39.8k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  39.8k|        ++begin;
 1441|  39.8k|    }
 1442|       |
 1443|  17.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  17.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.05k, False: 16.8k]
  |  |  ------------------
  ------------------
 1445|  17.9k|                                               is_negative))) {
 1446|  1.05k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|  1.05k|                                     "Integer overflow");
 1448|  1.05k|    }
 1449|       |
 1450|  16.8k|    val = store_result<T>(u64val, is_negative);
 1451|  16.8k|    return begin;
 1452|  17.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    682|{
 1429|    682|    uint64_t u64val{};
 1430|    682|    const CharT* begin = input.data();
 1431|    682|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.03k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 3.58k, False: 450]
  ------------------
 1434|  3.58k|        const auto digit = char_to_int(*begin);
 1435|  3.58k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 232, False: 3.34k]
  ------------------
 1436|    232|            break;
 1437|    232|        }
 1438|  3.34k|        u64val =
 1439|  3.34k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.34k|        ++begin;
 1441|  3.34k|    }
 1442|       |
 1443|    682|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    682|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    682|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250, False: 432]
  |  |  ------------------
  ------------------
 1445|    682|                                               is_negative))) {
 1446|    250|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    250|                                     "Integer overflow");
 1448|    250|    }
 1449|       |
 1450|    432|    val = store_result<T>(u64val, is_negative);
 1451|    432|    return begin;
 1452|    682|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  52.4k|{
 1408|  52.4k|    uint64_t u64val{};
 1409|  52.4k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  52.4k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  52.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  52.4k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 913, False: 51.5k]
  |  |  ------------------
  ------------------
 1414|  52.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|    913|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|    913|                                     "Integer overflow");
 1417|    913|    }
 1418|       |
 1419|  51.5k|    val = store_result<T>(u64val, is_negative);
 1420|  51.5k|    return ptr;
 1421|  52.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  19.9k|{
 1429|  19.9k|    uint64_t u64val{};
 1430|  19.9k|    const CharT* begin = input.data();
 1431|  19.9k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  63.0k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 52.7k, False: 10.3k]
  ------------------
 1434|  52.7k|        const auto digit = char_to_int(*begin);
 1435|  52.7k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 9.60k, False: 43.0k]
  ------------------
 1436|  9.60k|            break;
 1437|  9.60k|        }
 1438|  43.0k|        u64val =
 1439|  43.0k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  43.0k|        ++begin;
 1441|  43.0k|    }
 1442|       |
 1443|  19.9k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  19.9k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 502, False: 19.4k]
  |  |  ------------------
  ------------------
 1445|  19.9k|                                               is_negative))) {
 1446|    502|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    502|                                     "Integer overflow");
 1448|    502|    }
 1449|       |
 1450|  19.4k|    val = store_result<T>(u64val, is_negative);
 1451|  19.4k|    return begin;
 1452|  19.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    704|{
 1429|    704|    uint64_t u64val{};
 1430|    704|    const CharT* begin = input.data();
 1431|    704|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.07k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 3.61k, False: 463]
  ------------------
 1434|  3.61k|        const auto digit = char_to_int(*begin);
 1435|  3.61k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 241, False: 3.37k]
  ------------------
 1436|    241|            break;
 1437|    241|        }
 1438|  3.37k|        u64val =
 1439|  3.37k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.37k|        ++begin;
 1441|  3.37k|    }
 1442|       |
 1443|    704|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    704|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144, False: 560]
  |  |  ------------------
  ------------------
 1445|    704|                                               is_negative))) {
 1446|    144|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    144|                                     "Integer overflow");
 1448|    144|    }
 1449|       |
 1450|    560|    val = store_result<T>(u64val, is_negative);
 1451|    560|    return begin;
 1452|    704|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1407|  53.0k|{
 1408|  53.0k|    uint64_t u64val{};
 1409|  53.0k|    auto ptr = parse_decimal_integer_fast_impl(
 1410|  53.0k|        input.data(), input.data() + input.size(), u64val);
 1411|       |
 1412|  53.0k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1413|  53.0k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 466, False: 52.5k]
  |  |  ------------------
  ------------------
 1414|  53.0k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1415|    466|        return unexpected_scan_error(scan_error::value_out_of_range,
 1416|    466|                                     "Integer overflow");
 1417|    466|    }
 1418|       |
 1419|  52.5k|    val = store_result<T>(u64val, is_negative);
 1420|  52.5k|    return ptr;
 1421|  53.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|  20.1k|{
 1429|  20.1k|    uint64_t u64val{};
 1430|  20.1k|    const CharT* begin = input.data();
 1431|  20.1k|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  64.4k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 54.0k, False: 10.4k]
  ------------------
 1434|  54.0k|        const auto digit = char_to_int(*begin);
 1435|  54.0k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 9.68k, False: 44.3k]
  ------------------
 1436|  9.68k|            break;
 1437|  9.68k|        }
 1438|  44.3k|        u64val =
 1439|  44.3k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  44.3k|        ++begin;
 1441|  44.3k|    }
 1442|       |
 1443|  20.1k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|  20.1k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 270, False: 19.8k]
  |  |  ------------------
  ------------------
 1445|  20.1k|                                               is_negative))) {
 1446|    270|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|    270|                                     "Integer overflow");
 1448|    270|    }
 1449|       |
 1450|  19.8k|    val = store_result<T>(u64val, is_negative);
 1451|  19.8k|    return begin;
 1452|  20.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1428|    748|{
 1429|    748|    uint64_t u64val{};
 1430|    748|    const CharT* begin = input.data();
 1431|    748|    const CharT* const end = input.data() + input.size();
 1432|       |
 1433|  4.16k|    while (begin != end) {
  ------------------
  |  Branch (1433:12): [True: 3.67k, False: 489]
  ------------------
 1434|  3.67k|        const auto digit = char_to_int(*begin);
 1435|  3.67k|        if (digit >= base) {
  ------------------
  |  Branch (1435:13): [True: 259, False: 3.41k]
  ------------------
 1436|    259|            break;
 1437|    259|        }
 1438|  3.41k|        u64val =
 1439|  3.41k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1440|  3.41k|        ++begin;
 1441|  3.41k|    }
 1442|       |
 1443|    748|    auto digits_count = static_cast<size_t>(begin - input.data());
 1444|    748|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    748|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 740]
  |  |  ------------------
  ------------------
 1445|    748|                                               is_negative))) {
 1446|      8|        return unexpected_scan_error(scan_error::value_out_of_range,
 1447|      8|                                     "Integer overflow");
 1448|      8|    }
 1449|       |
 1450|    740|    val = store_result<T>(u64val, is_negative);
 1451|    740|    return begin;
 1452|    748|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2073|   426k|{
 2074|   426k|    const auto argcount = args.size();
 2075|   426k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2075:9): [True: 64.0k, False: 362k]
  |  Branch (2075:60): [True: 64.0k, False: 0]
  ------------------
 2076|  64.0k|        auto arg = args.get(0);
 2077|  64.0k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  64.0k|    static_cast<    \
  |  |  929|  64.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2078|  64.0k|    }
 2079|       |
 2080|   362k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2080:9): [True: 0, False: 362k]
  ------------------
 2081|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2082|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2084|      0|        return vscan_parse_format_string(format, handler);
 2085|      0|    }
 2086|       |
 2087|   362k|    SCN_UNLIKELY_ATTR
 2088|   362k|    {
 2089|   362k|        auto handler = format_handler<false, CharT>{
 2090|   362k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2091|   362k|        return vscan_parse_format_string(format, handler);
 2092|   362k|    }
 2093|   362k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|   853k|{
 1626|   853k|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 724k, False: 128k]
  ------------------
 1627|   724k|        return false;
 1628|   724k|    }
 1629|   128k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 128k, False: 0]
  |  Branch (1629:39): [True: 128k, False: 0]
  ------------------
 1630|   853k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1658|  96.0k|{
 1659|  96.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96.0k]
  |  |  ------------------
  ------------------
 1660|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1661|      0|                                     "Argument #0 not found");
 1662|      0|    }
 1663|       |
 1664|  96.0k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  96.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 96.0k]
  |  |  ------------------
  ------------------
 1665|      0|        auto reader = impl::default_arg_reader<
 1666|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1667|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1668|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1669|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1670|      0|    }
 1671|       |
 1672|  96.0k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1673|  96.0k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  96.0k|    static_cast<    \
  |  |  929|  96.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1674|  96.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  96.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  96.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  96.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.8k, False: 83.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.8k|    }                                                  \
  |  |  |  | 3667|  96.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1675|  83.1k|    return it.position();
 1676|  96.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1900|   362k|        : format_handler_base{argcount},
 1901|   362k|          parse_ctx{format},
 1902|   362k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   362k|    {
 1904|   362k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  1.03M|    format_handler_base(size_t argcount) : args_count(argcount)
 1722|  1.03M|    {
 1723|  1.03M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1724|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1725|      0|        }
 1726|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   362k|        : contiguous_ctx(source, args, loc)
 1853|   362k|    {
 1854|   362k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   362k|{
 2039|   362k|    const auto beg = handler.get_ctx().begin();
 2040|   362k|    detail::parse_format_string<false>(format, handler);
 2041|   362k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.3k, False: 284k]
  |  |  ------------------
  ------------------
 2042|  77.3k|        return unexpected(handler.error);
 2043|  77.3k|    }
 2044|   284k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   362k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2022|  2.32M|    {
 2023|  2.32M|        return ctx.get();
 2024|  2.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1857|  2.32M|    {
 1858|  2.32M|        return contiguous_ctx;
 1859|  2.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1907|   646k|    {
 1908|   646k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 646k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   646k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1681|   362k|{
 1682|   362k|    auto arg = ctx.arg(id);
 1683|   362k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   362k|    return arg;
 1687|   362k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1797|  1.03M|    {
 1798|  1.03M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1799|      0|            on_error("Invalid out-of-range argument ID");
 1800|      0|            return;
 1801|      0|        }
 1802|       |
 1803|  1.03M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1804|      0|            return on_error("Argument with this ID has already been scanned");
 1805|      0|        }
 1806|       |
 1807|  1.03M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.03M, False: 0]
  |  |  ------------------
  ------------------
 1808|  1.03M|            visited_args_lower64 |= (1ull << id);
 1809|  1.03M|            return;
 1810|  1.03M|        }
 1811|       |
 1812|      0|        id -= 64;
 1813|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1814|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1782|  1.03M|    {
 1783|  1.03M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1784|      0|            on_error("Invalid out-of-range argument ID");
 1785|      0|            return false;
 1786|      0|        }
 1787|       |
 1788|  1.03M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.03M, False: 0]
  |  |  ------------------
  ------------------
 1789|  1.03M|            return (visited_args_lower64 >> id) & 1ull;
 1790|  1.03M|        }
 1791|       |
 1792|      0|        id -= 64;
 1793|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1794|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1766|   309k|    {
 1767|   309k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 309k, False: 0]
  |  |  ------------------
  ------------------
 1768|   309k|            error = err;
 1769|   309k|        }
 1770|   309k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1944|   362k|    {
 1945|   362k|        return parse_ctx.next_arg_id();
 1946|   362k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1985|   362k|    {
 1986|   362k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   362k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   362k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 362k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   362k|        auto specs = detail::format_specs{};
 1999|   362k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   362k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   362k|            arg.type()};
 2002|       |
 2003|   362k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   362k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 362k]
  |  Branch (2004:29): [True: 17.1k, False: 344k]
  ------------------
 2005|  17.1k|            SCN_UNLIKELY_ATTR
 2006|  17.1k|            on_error("Missing '}' in format string");
 2007|  17.1k|            return parse_ctx.begin();
 2008|  17.1k|        }
 2009|   344k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.59k, False: 336k]
  |  |  ------------------
  ------------------
 2010|  8.59k|            return parse_ctx.begin();
 2011|  8.59k|        }
 2012|   336k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   336k|        on_visit_scan_arg(
 2015|   336k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   336k|                                           get_ctx().locale()},
 2017|   336k|            arg);
 2018|   336k|        return parse_ctx.begin();
 2019|   344k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   362k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   362k|    {
 1702|   362k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1956|   336k|    {
 1957|   336k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 336k]
  |  Branch (1957:23): [True: 0, False: 336k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   336k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   336k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.5k, False: 284k]
  |  |  ------------------
  ------------------
 1964|  51.5k|            on_error(r.error());
 1965|  51.5k|        }
 1966|   284k|        else {
 1967|   284k|            get_ctx().advance_to(*r);
 1968|   284k|        }
 1969|   336k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1761|   257k|    {
 1762|   257k|        SCN_UNLIKELY_ATTR
 1763|   257k|        error = scan_error{scan_error::invalid_format_string, msg};
 1764|   257k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1729|  1.03M|    {
 1730|  1.03M|        {
 1731|  1.03M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1731:45): [True: 0, False: 1.03M]
  ------------------
 1732|  1.03M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1732:35): [True: 0, False: 1.03M]
  ------------------
 1733|  1.03M|                                      ? std::numeric_limits<uint64_t>::max()
 1734|  1.03M|                                      : (1ull << args_count_lower64) - 1;
 1735|       |
 1736|  1.03M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1736:17): [True: 0, False: 1.03M]
  ------------------
 1737|      0|                return on_error("Argument list not exhausted");
 1738|      0|            }
 1739|  1.03M|        }
 1740|       |
 1741|  1.03M|        if (args_count < 64) {
  ------------------
  |  Branch (1741:13): [True: 1.03M, False: 0]
  ------------------
 1742|  1.03M|            return;
 1743|  1.03M|        }
 1744|       |
 1745|      0|        auto last_args_count = args_count - 64;
 1746|      0|        for (auto it = visited_args_upper.begin();
 1747|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1747:14): [True: 0, False: 0]
  ------------------
 1748|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1748:17): [True: 0, False: 0]
  ------------------
 1749|      0|                return on_error("Argument list not exhausted");
 1750|      0|            }
 1751|      0|            last_args_count -= 8;
 1752|      0|        }
 1753|       |
 1754|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1755|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1755:13): [True: 0, False: 0]
  ------------------
 1756|      0|            return on_error("Argument list not exhausted");
 1757|      0|        }
 1758|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1777|  1.03M|    {
 1778|  1.03M|        return error;
 1779|  1.03M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1773|  2.96M|    {
 1774|  2.96M|        return static_cast<bool>(error);
 1775|  2.96M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1900|   362k|        : format_handler_base{argcount},
 1901|   362k|          parse_ctx{format},
 1902|   362k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   362k|    {
 1904|   362k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|   362k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1830|   362k|    {
 1831|   362k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   362k|{
 2039|   362k|    const auto beg = handler.get_ctx().begin();
 2040|   362k|    detail::parse_format_string<false>(format, handler);
 2041|   362k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.3k, False: 285k]
  |  |  ------------------
  ------------------
 2042|  77.3k|        return unexpected(handler.error);
 2043|  77.3k|    }
 2044|   285k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   362k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2022|  2.33M|    {
 2023|  2.33M|        return ctx.get();
 2024|  2.33M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1834|  2.33M|    {
 1835|  2.33M|        return ctx;
 1836|  2.33M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1907|   647k|    {
 1908|   647k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 647k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   647k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1681|   362k|{
 1682|   362k|    auto arg = ctx.arg(id);
 1683|   362k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   362k|    return arg;
 1687|   362k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1944|   362k|    {
 1945|   362k|        return parse_ctx.next_arg_id();
 1946|   362k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1985|   362k|    {
 1986|   362k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   362k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   362k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 362k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   362k|        auto specs = detail::format_specs{};
 1999|   362k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   362k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   362k|            arg.type()};
 2002|       |
 2003|   362k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   362k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 362k]
  |  Branch (2004:29): [True: 17.1k, False: 345k]
  ------------------
 2005|  17.1k|            SCN_UNLIKELY_ATTR
 2006|  17.1k|            on_error("Missing '}' in format string");
 2007|  17.1k|            return parse_ctx.begin();
 2008|  17.1k|        }
 2009|   345k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.59k, False: 336k]
  |  |  ------------------
  ------------------
 2010|  8.59k|            return parse_ctx.begin();
 2011|  8.59k|        }
 2012|   336k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   336k|        on_visit_scan_arg(
 2015|   336k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   336k|                                           get_ctx().locale()},
 2017|   336k|            arg);
 2018|   336k|        return parse_ctx.begin();
 2019|   345k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|   362k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   362k|    {
 1702|   362k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1956|   336k|    {
 1957|   336k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 336k]
  |  Branch (1957:23): [True: 0, False: 336k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   336k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   336k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.5k, False: 285k]
  |  |  ------------------
  ------------------
 1964|  51.5k|            on_error(r.error());
 1965|  51.5k|        }
 1966|   285k|        else {
 1967|   285k|            get_ctx().advance_to(*r);
 1968|   285k|        }
 1969|   336k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|   427k|{
 2054|   427k|    const auto argcount = args.size();
 2055|   427k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 64.9k, False: 362k]
  |  Branch (2055:60): [True: 64.9k, False: 0]
  ------------------
 2056|  64.9k|        auto arg = args.get(0);
 2057|  64.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  64.9k|    static_cast<    \
  |  |  929|  64.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|  64.9k|    }
 2059|       |
 2060|   362k|    auto handler = format_handler<true, CharT>{
 2061|   362k|        ranges::subrange<const CharT*>{source.data(),
 2062|   362k|                                       source.data() + source.size()},
 2063|   362k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   362k|    return vscan_parse_format_string(format, handler);
 2065|   427k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|  97.4k|{
 1639|  97.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  97.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.4k]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|  97.4k|    auto reader =
 1645|  97.4k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|  97.4k|            ranges::subrange<const CharT*>{source.data(),
 1647|  97.4k|                                           source.data() + source.size()},
 1648|  97.4k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  97.4k|    static_cast<    \
  |  |  929|  97.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|  97.4k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  97.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  97.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  97.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.8k, False: 84.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.8k|    }                                                  \
  |  |  |  | 3667|  97.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  84.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|  84.5k|    return ranges::distance(source.data(), it);
 1651|  97.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|   174k|{
 2054|   174k|    const auto argcount = args.size();
 2055|   174k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 17.6k, False: 157k]
  |  Branch (2055:60): [True: 17.6k, False: 0]
  ------------------
 2056|  17.6k|        auto arg = args.get(0);
 2057|  17.6k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  17.6k|    static_cast<    \
  |  |  929|  17.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|  17.6k|    }
 2059|       |
 2060|   157k|    auto handler = format_handler<true, CharT>{
 2061|   157k|        ranges::subrange<const CharT*>{source.data(),
 2062|   157k|                                       source.data() + source.size()},
 2063|   157k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   157k|    return vscan_parse_format_string(format, handler);
 2065|   174k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|   349k|{
 1626|   349k|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 314k, False: 35.3k]
  ------------------
 1627|   314k|        return false;
 1628|   314k|    }
 1629|  35.3k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 35.3k, False: 0]
  |  Branch (1629:39): [True: 35.3k, False: 0]
  ------------------
 1630|   349k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|  26.5k|{
 1639|  26.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.5k]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|  26.5k|    auto reader =
 1645|  26.5k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|  26.5k|            ranges::subrange<const CharT*>{source.data(),
 1647|  26.5k|                                           source.data() + source.size()},
 1648|  26.5k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  26.5k|    static_cast<    \
  |  |  929|  26.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|  26.5k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  26.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 25.7k, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  25.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  25.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  25.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  25.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  25.7k|    }                                                  \
  |  |  |  | 3667|  26.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|    738|    return ranges::distance(source.data(), it);
 1651|  26.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1900|   157k|        : format_handler_base{argcount},
 1901|   157k|          parse_ctx{format},
 1902|   157k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   157k|    {
 1904|   157k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   157k|        : contiguous_ctx(source, args, loc)
 1853|   157k|    {
 1854|   157k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   157k|{
 2039|   157k|    const auto beg = handler.get_ctx().begin();
 2040|   157k|    detail::parse_format_string<false>(format, handler);
 2041|   157k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 154k, False: 2.51k]
  |  |  ------------------
  ------------------
 2042|   154k|        return unexpected(handler.error);
 2043|   154k|    }
 2044|  2.51k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   157k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2022|   687k|    {
 2023|   687k|        return ctx.get();
 2024|   687k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1857|   687k|    {
 1858|   687k|        return contiguous_ctx;
 1859|   687k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1907|   159k|    {
 1908|   159k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 159k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   159k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1681|   157k|{
 1682|   157k|    auto arg = ctx.arg(id);
 1683|   157k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   157k|    return arg;
 1687|   157k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1944|   157k|    {
 1945|   157k|        return parse_ctx.next_arg_id();
 1946|   157k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1985|   157k|    {
 1986|   157k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   157k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   157k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 157k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   157k|        auto specs = detail::format_specs{};
 1999|   157k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   157k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   157k|            arg.type()};
 2002|       |
 2003|   157k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   157k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 157k]
  |  Branch (2004:29): [True: 34.3k, False: 122k]
  ------------------
 2005|  34.3k|            SCN_UNLIKELY_ATTR
 2006|  34.3k|            on_error("Missing '}' in format string");
 2007|  34.3k|            return parse_ctx.begin();
 2008|  34.3k|        }
 2009|   122k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.1k, False: 105k]
  |  |  ------------------
  ------------------
 2010|  17.1k|            return parse_ctx.begin();
 2011|  17.1k|        }
 2012|   105k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   105k|        on_visit_scan_arg(
 2015|   105k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   105k|                                           get_ctx().locale()},
 2017|   105k|            arg);
 2018|   105k|        return parse_ctx.begin();
 2019|   122k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   157k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   157k|    {
 1702|   157k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1956|   105k|    {
 1957|   105k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 105k]
  |  Branch (1957:23): [True: 0, False: 105k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   105k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   105k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 2.51k]
  |  |  ------------------
  ------------------
 1964|   103k|            on_error(r.error());
 1965|   103k|        }
 1966|  2.51k|        else {
 1967|  2.51k|            get_ctx().advance_to(*r);
 1968|  2.51k|        }
 1969|   105k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2073|   174k|{
 2074|   174k|    const auto argcount = args.size();
 2075|   174k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2075:9): [True: 17.6k, False: 157k]
  |  Branch (2075:60): [True: 17.6k, False: 0]
  ------------------
 2076|  17.6k|        auto arg = args.get(0);
 2077|  17.6k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  17.6k|    static_cast<    \
  |  |  929|  17.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2078|  17.6k|    }
 2079|       |
 2080|   157k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2080:9): [True: 0, False: 157k]
  ------------------
 2081|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2082|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2084|      0|        return vscan_parse_format_string(format, handler);
 2085|      0|    }
 2086|       |
 2087|   157k|    SCN_UNLIKELY_ATTR
 2088|   157k|    {
 2089|   157k|        auto handler = format_handler<false, CharT>{
 2090|   157k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2091|   157k|        return vscan_parse_format_string(format, handler);
 2092|   157k|    }
 2093|   157k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1658|  26.5k|{
 1659|  26.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.5k]
  |  |  ------------------
  ------------------
 1660|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1661|      0|                                     "Argument #0 not found");
 1662|      0|    }
 1663|       |
 1664|  26.5k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  26.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 26.5k]
  |  |  ------------------
  ------------------
 1665|      0|        auto reader = impl::default_arg_reader<
 1666|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1667|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1668|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1669|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1670|      0|    }
 1671|       |
 1672|  26.5k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1673|  26.5k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  26.5k|    static_cast<    \
  |  |  929|  26.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1674|  26.5k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  26.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 25.7k, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  25.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  25.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  25.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  25.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  25.7k|    }                                                  \
  |  |  |  | 3667|  26.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1675|    738|    return it.position();
 1676|  26.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1900|   157k|        : format_handler_base{argcount},
 1901|   157k|          parse_ctx{format},
 1902|   157k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   157k|    {
 1904|   157k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   157k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1830|   157k|    {
 1831|   157k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   157k|{
 2039|   157k|    const auto beg = handler.get_ctx().begin();
 2040|   157k|    detail::parse_format_string<false>(format, handler);
 2041|   157k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 154k, False: 2.51k]
  |  |  ------------------
  ------------------
 2042|   154k|        return unexpected(handler.error);
 2043|   154k|    }
 2044|  2.51k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   157k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2022|   687k|    {
 2023|   687k|        return ctx.get();
 2024|   687k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1834|   687k|    {
 1835|   687k|        return ctx;
 1836|   687k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1907|   159k|    {
 1908|   159k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 159k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   159k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1681|   157k|{
 1682|   157k|    auto arg = ctx.arg(id);
 1683|   157k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   157k|    return arg;
 1687|   157k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1944|   157k|    {
 1945|   157k|        return parse_ctx.next_arg_id();
 1946|   157k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1985|   157k|    {
 1986|   157k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   157k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   157k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 157k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   157k|        auto specs = detail::format_specs{};
 1999|   157k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   157k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   157k|            arg.type()};
 2002|       |
 2003|   157k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   157k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 157k]
  |  Branch (2004:29): [True: 34.3k, False: 122k]
  ------------------
 2005|  34.3k|            SCN_UNLIKELY_ATTR
 2006|  34.3k|            on_error("Missing '}' in format string");
 2007|  34.3k|            return parse_ctx.begin();
 2008|  34.3k|        }
 2009|   122k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.1k, False: 105k]
  |  |  ------------------
  ------------------
 2010|  17.1k|            return parse_ctx.begin();
 2011|  17.1k|        }
 2012|   105k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   105k|        on_visit_scan_arg(
 2015|   105k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   105k|                                           get_ctx().locale()},
 2017|   105k|            arg);
 2018|   105k|        return parse_ctx.begin();
 2019|   122k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   157k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   157k|    {
 1702|   157k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1956|   105k|    {
 1957|   105k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 105k]
  |  Branch (1957:23): [True: 0, False: 105k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   105k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   105k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 2.51k]
  |  |  ------------------
  ------------------
 1964|   103k|            on_error(r.error());
 1965|   103k|        }
 1966|  2.51k|        else {
 1967|  2.51k|            get_ctx().advance_to(*r);
 1968|  2.51k|        }
 1969|   105k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  32.4k|{
 2100|  32.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  32.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  32.0k|{
 2100|  32.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  32.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  32.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  8.83k|{
 2100|  8.83k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  8.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  8.83k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  8.83k|{
 2100|  8.83k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  8.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  8.83k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|    716|{
 1351|    716|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|    716|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|    716|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|    716|            return transcode_to_string_impl_to32(src, dest);
 1362|    716|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|    716|    SCN_EXPECT(false);
  ------------------
  |  |  924|    716|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    716|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|    716|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|    716|{
 1244|    716|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|    716|    auto it = src.begin();
 1247|  49.8k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 49.1k, False: 716]
  ------------------
 1248|  49.1k|        auto res = get_next_code_point(
 1249|  49.1k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|  49.1k|                                                                 src.end()));
 1251|  49.1k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  49.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 491, False: 48.6k]
  |  |  ------------------
  ------------------
 1252|    491|            dest.push_back(DestCharT{0xfffd});
 1253|    491|        }
 1254|  48.6k|        else {
 1255|  48.6k|            dest.push_back(res.value);
 1256|  48.6k|        }
 1257|  49.1k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|  49.1k|    }
 1259|    716|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  82.1k|{
 1169|  82.1k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  82.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  82.1k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  82.1k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  82.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.54k, False: 79.6k]
  |  |  ------------------
  ------------------
 1173|  2.54k|        return {get_start_for_next_code_point(input),
 1174|  2.54k|                detail::invalid_code_point};
 1175|  2.54k|    }
 1176|  79.6k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  79.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.17k, False: 77.4k]
  |  |  ------------------
  ------------------
 1177|  2.17k|        return {input.end(), detail::invalid_code_point};
 1178|  2.17k|    }
 1179|       |
 1180|  77.4k|    return {input.begin() + len,
 1181|  77.4k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  79.6k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  2.54k|{
 1155|  2.54k|    auto it = input.begin();
 1156|  10.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 9.29k, False: 1.19k]
  ------------------
 1157|  9.29k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.35k, False: 7.94k]
  ------------------
 1158|  1.35k|            break;
 1159|  1.35k|        }
 1160|  9.29k|    }
 1161|  2.54k|    return it;
 1162|  2.54k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  3.69M|    constexpr parse_error(code c) : m_code(c)
  808|  3.69M|    {
  809|  3.69M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.69M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  3.69M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  1.26M|    {
  823|  1.26M|        return a.m_code == b.m_code;
  824|  1.26M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|   884k|    {
 2925|   884k|        return m_msg == nullptr;
 2926|   884k|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   873k|{
  458|   873k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   873k|        static_cast<unsigned char>(ch))];
  460|   873k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   526k|{
  539|   526k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   526k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  3.19M|{
  784|  3.19M|    return e != eof_error::good;
  785|  3.19M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  26.7k|{
  798|  26.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  26.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  26.7k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  26.7k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  64.1k|{
  845|  64.1k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  64.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  64.1k|    return parse_error::eof;
  847|  64.1k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   138k|{
  854|   138k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 138k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   138k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 138k]
  ------------------
  859|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  860|      0|    }
  861|       |
  862|   138k|    return scan_error{code, msg};
  863|   138k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|   428k|{
  868|   428k|    return [code, msg](parse_error err) {
  869|   428k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   428k|    };
  871|   428k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|   332k|{
 2209|   332k|    unsigned char running_diff{0};
 2210|   996k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 664k, False: 332k]
  ------------------
 2211|   664k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|   664k|    }
 2213|   332k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 2.16k, False: 329k]
  |  Branch (2213:33): [True: 462, False: 329k]
  ------------------
 2214|   332k|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  5.28M|{
 3112|  5.28M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  5.28M|}
_ZN3scn2v34impl11char_to_intEw:
 3115|   614k|{
 3116|   614k|#if WCHAR_MIN < 0
 3117|   614k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 588k, False: 25.9k]
  |  Branch (3117:20): [True: 378k, False: 210k]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|   378k|        return char_to_int(static_cast<char>(ch));
 3122|   378k|    }
 3123|   236k|    return 255;
 3124|   614k|}
_ZN3scn2v34impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
 3147|  20.7k|{
 3148|  70.4M|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (3148:44): [True: 70.4M, False: 20.7k]
  ------------------
 3149|  70.4M|         ++thsep_it) {
 3150|  70.4M|        const auto tmp = *thsep_it;
 3151|  70.4M|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
 3152|  70.4M|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
 3153|  70.4M|    }
 3154|  20.7k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
 3155|  20.7k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|   575k|{
 5997|   575k|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 575k]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|   575k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 575k]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|   575k|    return {};
 6012|   575k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.44M|    {
  304|  1.44M|        ranges::advance(x, n);
  305|  1.44M|        return x;
  306|  1.44M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.44M|    {
  268|  1.44M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.44M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.44M|    {
  151|  1.44M|        i += n;
  152|  1.44M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.22M|    {
  108|  2.22M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.22M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.22M|    {
   87|  2.22M|        return s - i;
   88|  2.22M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  93.5k|    {
  304|  93.5k|        ranges::advance(x, n);
  305|  93.5k|        return x;
  306|  93.5k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  93.5k|    {
  268|  93.5k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  93.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  93.5k|    {
  151|  93.5k|        i += n;
  152|  93.5k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  35.2M|    {
  108|  35.2M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  35.2M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  35.2M|    {
   87|  35.2M|        return s - i;
   88|  35.2M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   432k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   432k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   432k|        auto beg = r.begin();
  990|   432k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 432k, False: 0]
  ------------------
  991|   432k|            return false;
  992|   432k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   432k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  2.36M|    {
  763|  2.36M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.36M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|   343k|{
 1845|   343k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|   343k|    else {
 1856|   343k|        auto it = range.begin();
 1857|   343k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 307k, False: 36.6k]
  ------------------
 1858|   307k|            return ranges::next(it, count);
 1859|   307k|        }
 1860|       |
 1861|  96.9k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 72.1k, False: 24.8k]
  ------------------
 1862|  72.1k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 11.8k, False: 60.3k]
  ------------------
 1863|  11.8k|                return unexpected(eof_error::eof);
 1864|  11.8k|            }
 1865|  72.1k|        }
 1866|       |
 1867|  24.8k|        return it;
 1868|  36.6k|    }
 1869|   343k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   343k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|   343k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|   343k|        else {
 1106|   343k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 343k, False: 0]
  ------------------
 1107|   343k|                return static_cast<size_t>(
 1108|   343k|                    r.begin().parent()->chars_available() -
 1109|   343k|                    r.begin().position());
 1110|   343k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   343k|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|   343k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   316k|        : m_fptr([](storage fn,
  743|   316k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   316k|              cvref<T> obj = *get<T>(fn);
  745|   316k|              if constexpr (std::is_void_v<R>) {
  746|   316k|                  obj(static_cast<decltype(args)>(args)...);
  747|   316k|              }
  748|   316k|              else {
  749|   316k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   316k|              }
  751|   316k|          }),
  752|   316k|          m_storage(std::addressof(f))
  753|   316k|    {
  754|   316k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  1.18M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.18M|              else {
  749|  1.18M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18M|              }
  751|  1.18M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  1.18M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.18M|        else if constexpr (std::is_object_v<T>) {
  688|  1.18M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.18M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   316k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   316k|        {
  662|   316k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  2.10M|    {
  763|  2.10M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.10M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   670k|        : m_fptr([](storage fn,
  743|   670k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   670k|              cvref<T> obj = *get<T>(fn);
  745|   670k|              if constexpr (std::is_void_v<R>) {
  746|   670k|                  obj(static_cast<decltype(args)>(args)...);
  747|   670k|              }
  748|   670k|              else {
  749|   670k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   670k|              }
  751|   670k|          }),
  752|   670k|          m_storage(std::addressof(f))
  753|   670k|    {
  754|   670k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  1.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.05M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.05M|              else {
  749|  1.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.05M|              }
  751|  1.05M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.05M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.05M|        else if constexpr (std::is_object_v<T>) {
  688|  1.05M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.05M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   670k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   670k|        {
  662|   670k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   336k|    {
 6026|   336k|        const bool need_skipped_width =
 6027|   336k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 336k]
  |  Branch (6027:33): [True: 0, False: 336k]
  ------------------
 6028|   336k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   336k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 336k]
  ------------------
 6032|   336k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 336k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   336k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 336k, False: 0]
  |  Branch (6036:56): [True: 336k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   336k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 336k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   664k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.50k, False: 327k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  9.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  9.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  9.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  9.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  9.50k|    }                                                  \
  |  |  |  | 3667|   336k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   664k|                            make_eof_scan_error));
 6047|       |
 6048|   664k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 327k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   327k|            return result_type{it, 0};
 6056|   664k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   336k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|   316k|{
 1964|   316k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   316k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|   316k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|   316k|    else {
 1949|   316k|        auto first = range.begin();
 1950|  1.19M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.18M, False: 9.30k]
  ------------------
 1951|  1.18M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 307k, False: 876k]
  ------------------
 1952|   307k|                return first;
 1953|   307k|            }
 1954|  1.18M|        }
 1955|  9.30k|        return first;
 1956|   316k|    }
 1957|   316k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   323k|    {
  108|   323k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   323k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   323k|    {
   94|   323k|        iter_difference_t<I> counter{0};
   95|  4.82M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 4.49M, False: 323k]
  ------------------
   96|  4.49M|            ++i;
   97|  4.49M|            ++counter;
   98|  4.49M|        }
   99|   323k|        return counter;
  100|   323k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   138k|    return [code, msg](parse_error err) {
  869|   138k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   138k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|   123k|    {
 1768|   123k|        auto stdloc = loc.get<std::locale>();
 1769|   123k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   123k|        grouping = numpunct.grouping();
 1771|   123k|        thousands_sep =
 1772|   123k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 123k]
  ------------------
 1773|   123k|        decimal_point = numpunct.decimal_point();
 1774|   123k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|   123k|{
 1705|   123k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 123k, False: 0]
  ------------------
 1706|   123k|        return std::use_facet<Facet>(stdloc);
 1707|   123k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   123k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|   531k|{
 1834|   531k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 530k]
  |  |  ------------------
  ------------------
 1835|    360|        return unexpected(e);
 1836|    360|    }
 1837|       |
 1838|   530k|    return ranges::next(range.begin());
 1839|   531k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.05M|{
  950|  1.05M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.2k, False: 1.04M]
  |  |  ------------------
  ------------------
  951|  12.2k|        return eof_error::eof;
  952|  12.2k|    }
  953|  1.04M|    return eof_error::good;
  954|  1.05M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.84M|{
  944|  1.84M|    return is_range_eof(r.begin(), r.end());
  945|  1.84M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.84M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.84M|    {
  937|  1.84M|        return begin == end;
  938|  1.84M|    }
  939|  1.84M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   530k|    {
  296|   530k|        ++x;
  297|   530k|        return x;
  298|   530k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  52.8k|    {
 3528|  52.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  52.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 52.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  52.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  52.8k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  52.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 7.76k, False: 45.0k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  7.76k|            else {
 3539|  7.76k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 7.76k]
  ------------------
 3540|  7.76k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  7.76k|            }
 3546|  7.76k|        }
 3547|       |
 3548|  52.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.24k, False: 47.5k]
  ------------------
 3549|  5.24k|            value = T{0};
 3550|  5.24k|            return std::next(prefix_result.iterator);
 3551|  5.24k|        }
 3552|       |
 3553|  47.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  47.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 37.0k, False: 10.5k]
  |  |  ------------------
  ------------------
 3554|  37.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  37.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  37.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  37.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.24k, False: 32.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.24k|    }                                                  \
  |  |  |  | 3667|  37.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  32.8k|                    parse_integer_digits_without_thsep(
 3556|  32.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  32.8k|                        prefix_result.parsed_base));
 3558|       |
 3559|  32.8k|            auto buf = make_contiguous_buffer(
 3560|  32.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  32.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  32.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.73k, False: 31.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.73k|    }                                                  \
  |  |  |  | 3667|  32.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  31.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  31.0k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  31.0k|            return ranges::next(
 3566|  31.0k|                prefix_result.iterator,
 3567|  31.0k|                ranges::distance(buf.view().begin(), result_it));
 3568|  32.8k|        }
 3569|       |
 3570|  10.5k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  10.5k|            localized_number_formatting_options<CharT>{loc};
 3575|  10.5k|#endif
 3576|       |
 3577|  10.5k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 572, False: 9.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    572|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    572|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    572|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    572|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    572|    }                                                  \
  |  |  |  | 3667|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  9.95k|                parse_integer_digits_with_thsep(
 3579|  9.95k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  9.95k|                    prefix_result.parsed_base, locale_options));
 3581|  9.95k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  9.95k|            parse_digits_result;
 3583|       |
 3584|  9.95k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 308, False: 9.65k]
  ------------------
 3585|    308|            if (auto e = check_thsep_grouping(
 3586|    308|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    308|                    thsep_indices, locale_options.grouping);
 3588|    308|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 134]
  |  |  ------------------
  ------------------
 3589|    174|                return unexpected(e);
 3590|    174|            }
 3591|    308|        }
 3592|       |
 3593|  9.78k|        auto nothsep_source_view =
 3594|  9.78k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  9.78k|        SCN_TRY(
  ------------------
  |  | 3668|  9.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  9.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  9.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 388, False: 9.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    388|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    388|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    388|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    388|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    388|    }                                                  \
  |  |  |  | 3667|  9.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  9.39k|            nothsep_source_it,
 3597|  9.39k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  9.39k|                                prefix_result.parsed_base));
 3599|       |
 3600|  9.39k|        return ranges::next(
 3601|  9.39k|            prefix_result.iterator,
 3602|  9.39k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  9.39k|                ranges::ssize(thsep_indices));
 3604|  9.78k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3314|   420k|{
 3315|   420k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   420k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   420k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   420k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 420k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   420k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   420k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   420k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   420k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   420k|        parse_integer_base_prefix(
 3320|   420k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   420k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 42.3k, False: 378k]
  ------------------
 3323|  42.3k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 502, False: 41.8k]
  ------------------
 3324|  42.3k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 30.9k, False: 10.9k]
  ------------------
 3325|  31.4k|            digits_begin_it = base_prefix_begin_it;
 3326|  31.4k|        }
 3327|  10.9k|        else {
 3328|  10.9k|            parsed_zero = false;
 3329|  10.9k|        }
 3330|  42.3k|    }
 3331|   378k|    else {
 3332|   378k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 2.12k, False: 376k]
  ------------------
 3333|   378k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 35.0k, False: 341k]
  ------------------
 3334|  37.2k|            digits_begin_it = base_prefix_begin_it;
 3335|  37.2k|        }
 3336|   378k|    }
 3337|       |
 3338|   420k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 365k, False: 55.3k]
  ------------------
 3339|   365k|        sign = sign_type::plus_sign;
 3340|   365k|    }
 3341|   420k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   420k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   420k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   420k|{
 3130|   420k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   420k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 365k, False: 55.3k]
  ------------------
 3132|   365k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 365k, False: 0]
  ------------------
 3133|   365k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   365k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   365k|    }
 3137|       |
 3138|  55.3k|    auto& it = *r;
 3139|  55.3k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 42.9k, False: 12.4k]
  ------------------
 3140|  42.9k|        return std::pair{it, sign_type::minus_sign};
 3141|  42.9k|    }
 3142|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3143|  55.3k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|   420k|{
 2261|   420k|    auto it = read_code_unit(range);
 2262|   420k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 420k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   829k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 829k, False: 365k]
  ------------------
 2267|   829k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 55.3k, False: 774k]
  ------------------
 2268|  55.3k|            return *it;
 2269|  55.3k|        }
 2270|   829k|    }
 2271|       |
 2272|   365k|    return unexpected(parse_error::error);
 2273|   420k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3281|   420k|{
 3282|   420k|    switch (base) {
 3283|  22.2k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 22.2k, False: 398k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  22.2k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  22.2k|                    false};
 3287|       |
 3288|  39.9k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 39.9k, False: 381k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  39.9k|            bool zero_parsed = false;
 3291|  39.9k|            auto it = apply_opt(
 3292|  39.9k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  39.9k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  66.5k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 66.5k, False: 354k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  66.5k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  66.5k|                    false};
 3300|       |
 3301|  72.1k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 72.1k, False: 348k]
  ------------------
 3302|       |            // detect base
 3303|  72.1k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|   220k|        default:
  ------------------
  |  Branch (3305:9): [True: 220k, False: 200k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|   220k|            return {range.begin(), base, false};
 3308|   420k|    }
 3309|   420k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2279|   128k|{
 2280|   128k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 111k, False: 17.6k]
  ------------------
 2281|   111k|        return range.begin();
 2282|   111k|    }
 2283|  17.6k|    return *result;
 2284|   128k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3232|  93.8k|{
 3233|  93.8k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  93.8k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|   343k|{
 2220|   343k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   343k|    else {
 2233|   343k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   343k|            if (ch < 'A' || ch > 'Z') {
 2235|   343k|                return ch;
 2236|   343k|            }
 2237|   343k|            return static_cast<char_type>(ch +
 2238|   343k|                                          static_cast<char_type>('a' - 'A'));
 2239|   343k|        };
 2240|       |
 2241|   343k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.8k, False: 331k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.8k|    }                                                  \
  |  |  |  | 3667|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|   331k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|   331k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|   331k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 329k, False: 2.62k]
  |  |  ------------------
  ------------------
 2246|   331k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|   331k|                    return ascii_tolower(a) ==
 2248|   331k|                           static_cast<detail::char_t<Range>>(b);
 2249|   331k|                }))) {
 2250|   329k|            return unexpected(parse_error::error);
 2251|   329k|        }
 2252|       |
 2253|  2.62k|        return it;
 2254|   331k|    }
 2255|   343k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2233|   469k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   469k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 455k, False: 13.9k]
  |  Branch (2234:29): [True: 7.71k, False: 6.25k]
  ------------------
 2235|   462k|                return ch;
 2236|   462k|            }
 2237|  6.25k|            return static_cast<char_type>(ch +
 2238|  6.25k|                                          static_cast<char_type>('a' - 'A'));
 2239|   469k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3246|   111k|{
 3247|   111k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 952, False: 110k]
  ------------------
 3248|    952|        return *r;
 3249|    952|    }
 3250|       |
 3251|   110k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 42.3k, False: 67.8k]
  ------------------
 3252|  42.3k|        zero_parsed = true;
 3253|  42.3k|        return *r;
 3254|  42.3k|    }
 3255|       |
 3256|  67.8k|    return unexpected(parse_error::error);
 3257|   110k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|   110k|{
 2135|   110k|    auto it = read_code_unit(range);
 2136|   110k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 109k]
  |  |  ------------------
  ------------------
 2137|    360|        return unexpected(make_eof_parse_error(it.error()));
 2138|    360|    }
 2139|       |
 2140|   109k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.5k, False: 42.3k]
  |  |  ------------------
  ------------------
 2141|   109k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  67.5k|        return unexpected(parse_error::error);
 2143|  67.5k|    }
 2144|       |
 2145|  42.3k|    return *it;
 2146|   109k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3239|   138k|{
 3240|   138k|    return read_matching_string_classic_nocase(range, "0x");
 3241|   138k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3262|  72.1k|{
 3263|  72.1k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 544, False: 71.5k]
  ------------------
 3264|    544|        return {*r, 16, false};
 3265|    544|    }
 3266|  71.5k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 318, False: 71.2k]
  ------------------
 3267|    318|        return {*r, 2, false};
 3268|    318|    }
 3269|  71.2k|    {
 3270|  71.2k|        bool zero_parsed{false};
 3271|  71.2k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 26.4k, False: 44.8k]
  ------------------
 3272|  26.4k|            return {*r, 8, zero_parsed};
 3273|  26.4k|        }
 3274|  71.2k|    }
 3275|  44.8k|    return {range.begin(), 10, false};
 3276|  71.2k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3348|   316k|{
 3349|   316k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|   316k|    else {
 3360|   316k|        return read_while1_code_unit(range,
 3361|   316k|                                     [&](char_type ch) noexcept {
 3362|   316k|                                         return char_to_int(ch) < base;
 3363|   316k|                                     })
 3364|   316k|            .transform_error(map_parse_error_to_scan_error(
 3365|   316k|                scan_error::invalid_scanned_value,
 3366|   316k|                "Failed to parse integer: No digits found"));
 3367|   316k|    }
 3368|   316k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|   316k|{
 1984|   316k|    auto it = read_while_code_unit(range, pred);
 1985|   316k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 29.5k, False: 286k]
  ------------------
 1986|  29.5k|        return unexpected(parse_error::error);
 1987|  29.5k|    }
 1988|   286k|    return it;
 1989|   316k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   316k|        : m_fptr([](storage fn,
  743|   316k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   316k|              cvref<T> obj = *get<T>(fn);
  745|   316k|              if constexpr (std::is_void_v<R>) {
  746|   316k|                  obj(static_cast<decltype(args)>(args)...);
  747|   316k|              }
  748|   316k|              else {
  749|   316k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   316k|              }
  751|   316k|          }),
  752|   316k|          m_storage(std::addressof(f))
  753|   316k|    {
  754|   316k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  1.18M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.18M|              else {
  749|  1.18M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18M|              }
  751|  1.18M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  1.18M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.18M|        else if constexpr (std::is_object_v<T>) {
  688|  1.18M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.18M|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3361|  1.18M|                                     [&](char_type ch) noexcept {
 3362|  1.18M|                                         return char_to_int(ch) < base;
 3363|  1.18M|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   316k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   316k|        {
  662|   316k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3378|  61.5k|{
 3379|  61.5k|    std::basic_string<CharT> output;
 3380|  61.5k|    std::string thsep_indices;
 3381|  61.5k|    auto it = range.begin();
 3382|  61.5k|    bool digit_matched = false;
 3383|   353k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 350k, False: 2.27k]
  ------------------
 3384|   350k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 36.1k, False: 314k]
  ------------------
 3385|  36.1k|            thsep_indices.push_back(
 3386|  36.1k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  36.1k|        }
 3388|   314k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 59.2k, False: 255k]
  ------------------
 3389|  59.2k|            break;
 3390|  59.2k|        }
 3391|   255k|        else {
 3392|   255k|            output.push_back(*it);
 3393|   255k|            digit_matched = true;
 3394|   255k|        }
 3395|   350k|    }
 3396|  61.5k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.13k, False: 58.4k]
  |  |  ------------------
  ------------------
 3397|  3.13k|        return unexpected_scan_error(
 3398|  3.13k|            scan_error::invalid_scanned_value,
 3399|  3.13k|            "Failed to parse integer: No digits found");
 3400|  3.13k|    }
 3401|  58.4k|    return std::tuple{it, output, thsep_indices};
 3402|  61.5k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3199|  1.71k|{
 3200|  1.71k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  1.71k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 918, False: 792]
  ------------------
 3203|    918|        SCN_UNLIKELY_ATTR
 3204|    918|        return {scan_error::invalid_scanned_value,
 3205|    918|                "Invalid thousands separator grouping"};
 3206|    918|    }
 3207|       |
 3208|    792|    return {};
 3209|  1.71k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3161|  1.71k|{
 3162|  1.71k|    transform_thsep_indices(thsep_indices,
 3163|  1.71k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  1.71k|    auto thsep_it = thsep_indices.rbegin();
 3166|  1.71k|    for (auto grouping_it = grouping.begin();
 3167|  1.71k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 1.71k]
  |  Branch (3167:10): [True: 0, False: 1.71k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  1.71k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  1.71k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  1.71k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  26.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 25.6k, False: 1.25k]
  ------------------
 3179|  25.6k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 454, False: 25.2k]
  ------------------
 3180|    454|            return false;
 3181|    454|        }
 3182|  25.6k|    }
 3183|       |
 3184|  1.25k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 1.25k, False: 0]
  ------------------
 3185|  1.25k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 464, False: 792]
  ------------------
 3186|    464|            return false;
 3187|    464|        }
 3188|  1.25k|    }
 3189|       |
 3190|    792|    SCN_CLANG_POP
 3191|       |
 3192|    792|    return true;
 3193|  1.25k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1670|   286k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   286k|    else {
 1677|   286k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   286k|    }
 1679|   286k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   286k|    {
 1525|   286k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   286k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|   286k|    {
 1609|   286k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   286k|                           ranges::common_range<Range>) {
 1626|   286k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   286k|            auto end_seg = range.end().contiguous_segment();
 1628|   286k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 181k, False: 105k]
  |  |  ------------------
  ------------------
 1629|   286k|                             detail::to_address(end_seg.end()))) {
 1630|   181k|                auto& str = m_storage.emplace();
 1631|   181k|                str.reserve(range.end().position() - range.begin().position());
 1632|   181k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|   181k|                m_view = string_view_type{str};
 1634|   181k|                return;
 1635|   181k|            }
 1636|       |
 1637|   105k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   105k|                                                            end_seg.data());
 1639|   105k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   286k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|   567k|    {
 1570|   567k|        return m_view;
 1571|   567k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|   286k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   278k|    {
 6068|   278k|        const bool need_skipped_width =
 6069|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 278k]
  |  Branch (6069:33): [True: 0, False: 278k]
  ------------------
 6070|   278k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   278k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 278k]
  ------------------
 6073|   278k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 278k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   278k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 278k, False: 0]
  ------------------
 6082|   278k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 278k]
  ------------------
 6083|   278k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   278k|        return result_type{rng.begin(), 0};
 6107|   278k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|   533k|{
 1834|   533k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   533k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 532k]
  |  |  ------------------
  ------------------
 1835|    360|        return unexpected(e);
 1836|    360|    }
 1837|       |
 1838|   532k|    return ranges::next(range.begin());
 1839|   533k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  1.38M|{
  950|  1.38M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 1.36M]
  |  |  ------------------
  ------------------
  951|  12.3k|        return eof_error::eof;
  952|  12.3k|    }
  953|  1.36M|    return eof_error::good;
  954|  1.38M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  1.38M|{
  944|  1.38M|    return is_range_eof(r.begin(), r.end());
  945|  1.38M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  1.38M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.38M|    {
  937|  1.38M|        return begin == end;
  938|  1.38M|    }
  939|  1.38M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   532k|    {
  296|   532k|        ++x;
  297|   532k|        return x;
  298|   532k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  52.9k|    {
 3528|  52.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  52.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 52.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  52.9k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  52.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 7.76k, False: 45.1k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  7.76k|            else {
 3539|  7.76k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 7.76k]
  ------------------
 3540|  7.76k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  7.76k|            }
 3546|  7.76k|        }
 3547|       |
 3548|  52.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.24k, False: 47.7k]
  ------------------
 3549|  5.24k|            value = T{0};
 3550|  5.24k|            return std::next(prefix_result.iterator);
 3551|  5.24k|        }
 3552|       |
 3553|  47.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  47.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 37.1k, False: 10.5k]
  |  |  ------------------
  ------------------
 3554|  37.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  37.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  37.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  37.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 37.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    128|    }                                                  \
  |  |  |  | 3667|  37.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  37.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  37.0k|                    parse_integer_digits_without_thsep(
 3556|  37.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  37.0k|                        prefix_result.parsed_base));
 3558|       |
 3559|  37.0k|            auto buf = make_contiguous_buffer(
 3560|  37.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  37.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  37.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  37.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  37.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.97k, False: 31.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.97k|    }                                                  \
  |  |  |  | 3667|  37.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  31.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  31.0k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  31.0k|            return ranges::next(
 3566|  31.0k|                prefix_result.iterator,
 3567|  31.0k|                ranges::distance(buf.view().begin(), result_it));
 3568|  37.0k|        }
 3569|       |
 3570|  10.5k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  10.5k|            localized_number_formatting_options<CharT>{loc};
 3575|  10.5k|#endif
 3576|       |
 3577|  10.5k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 602, False: 9.94k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    602|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    602|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    602|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    602|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    602|    }                                                  \
  |  |  |  | 3667|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  9.94k|                parse_integer_digits_with_thsep(
 3579|  9.94k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  9.94k|                    prefix_result.parsed_base, locale_options));
 3581|  9.94k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  9.94k|            parse_digits_result;
 3583|       |
 3584|  9.94k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 308, False: 9.63k]
  ------------------
 3585|    308|            if (auto e = check_thsep_grouping(
 3586|    308|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    308|                    thsep_indices, locale_options.grouping);
 3588|    308|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 134]
  |  |  ------------------
  ------------------
 3589|    174|                return unexpected(e);
 3590|    174|            }
 3591|    308|        }
 3592|       |
 3593|  9.77k|        auto nothsep_source_view =
 3594|  9.77k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  9.77k|        SCN_TRY(
  ------------------
  |  | 3668|  9.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  9.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  9.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 384, False: 9.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    384|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    384|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    384|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    384|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    384|    }                                                  \
  |  |  |  | 3667|  9.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  9.38k|            nothsep_source_it,
 3597|  9.38k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  9.38k|                                prefix_result.parsed_base));
 3599|       |
 3600|  9.38k|        return ranges::next(
 3601|  9.38k|            prefix_result.iterator,
 3602|  9.38k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  9.38k|                ranges::ssize(thsep_indices));
 3604|  9.77k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|   422k|{
 3315|   422k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   422k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   422k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   422k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 422k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   422k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   422k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   422k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   422k|        parse_integer_base_prefix(
 3320|   422k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   422k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 42.3k, False: 380k]
  ------------------
 3323|  42.3k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 502, False: 41.8k]
  ------------------
 3324|  42.3k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 30.9k, False: 10.8k]
  ------------------
 3325|  31.4k|            digits_begin_it = base_prefix_begin_it;
 3326|  31.4k|        }
 3327|  10.8k|        else {
 3328|  10.8k|            parsed_zero = false;
 3329|  10.8k|        }
 3330|  42.3k|    }
 3331|   380k|    else {
 3332|   380k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 2.12k, False: 378k]
  ------------------
 3333|   380k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 35.8k, False: 342k]
  ------------------
 3334|  37.9k|            digits_begin_it = base_prefix_begin_it;
 3335|  37.9k|        }
 3336|   380k|    }
 3337|       |
 3338|   422k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 367k, False: 55.3k]
  ------------------
 3339|   367k|        sign = sign_type::plus_sign;
 3340|   367k|    }
 3341|   422k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   422k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   422k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   422k|{
 3130|   422k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   422k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 367k, False: 55.3k]
  ------------------
 3132|   367k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 367k, False: 0]
  ------------------
 3133|   367k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   367k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   367k|    }
 3137|       |
 3138|  55.3k|    auto& it = *r;
 3139|  55.3k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 42.9k, False: 12.4k]
  ------------------
 3140|  42.9k|        return std::pair{it, sign_type::minus_sign};
 3141|  42.9k|    }
 3142|  12.4k|    return std::pair{it, sign_type::plus_sign};
 3143|  55.3k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|   422k|{
 2261|   422k|    auto it = read_code_unit(range);
 2262|   422k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 422k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   832k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 832k, False: 367k]
  ------------------
 2267|   832k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 55.3k, False: 777k]
  ------------------
 2268|  55.3k|            return *it;
 2269|  55.3k|        }
 2270|   832k|    }
 2271|       |
 2272|   367k|    return unexpected(parse_error::error);
 2273|   422k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|   422k|{
 3282|   422k|    switch (base) {
 3283|  22.3k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 22.3k, False: 400k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  22.3k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  22.3k|                    false};
 3287|       |
 3288|  40.0k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 40.0k, False: 382k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  40.0k|            bool zero_parsed = false;
 3291|  40.0k|            auto it = apply_opt(
 3292|  40.0k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  40.0k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  66.5k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 66.5k, False: 356k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  66.5k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  66.5k|                    false};
 3300|       |
 3301|  72.2k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 72.2k, False: 350k]
  ------------------
 3302|       |            // detect base
 3303|  72.2k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|   221k|        default:
  ------------------
  |  Branch (3305:9): [True: 221k, False: 201k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|   221k|            return {range.begin(), base, false};
 3308|   422k|    }
 3309|   422k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|   128k|{
 2280|   128k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 111k, False: 17.6k]
  ------------------
 2281|   111k|        return range.begin();
 2282|   111k|    }
 2283|  17.6k|    return *result;
 2284|   128k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|  94.0k|{
 3233|  94.0k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  94.0k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|   344k|{
 2220|   344k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|   344k|                  std::is_same_v<char_type, char>) {
 2224|   344k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 12.0k, False: 332k]
  ------------------
 2225|  12.0k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|  12.0k|        }
 2227|   332k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 329k, False: 2.62k]
  ------------------
 2228|   329k|            return unexpected(parse_error::error);
 2229|   329k|        }
 2230|  2.62k|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|   344k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|   111k|{
 3247|   111k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 952, False: 110k]
  ------------------
 3248|    952|        return *r;
 3249|    952|    }
 3250|       |
 3251|   110k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 42.3k, False: 68.1k]
  ------------------
 3252|  42.3k|        zero_parsed = true;
 3253|  42.3k|        return *r;
 3254|  42.3k|    }
 3255|       |
 3256|  68.1k|    return unexpected(parse_error::error);
 3257|   110k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   110k|{
 2135|   110k|    auto it = read_code_unit(range);
 2136|   110k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 110k]
  |  |  ------------------
  ------------------
 2137|    360|        return unexpected(make_eof_parse_error(it.error()));
 2138|    360|    }
 2139|       |
 2140|   110k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.7k, False: 42.3k]
  |  |  ------------------
  ------------------
 2141|   110k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  67.7k|        return unexpected(parse_error::error);
 2143|  67.7k|    }
 2144|       |
 2145|  42.3k|    return *it;
 2146|   110k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|   138k|{
 3240|   138k|    return read_matching_string_classic_nocase(range, "0x");
 3241|   138k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|  72.2k|{
 3263|  72.2k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 544, False: 71.6k]
  ------------------
 3264|    544|        return {*r, 16, false};
 3265|    544|    }
 3266|  71.6k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 318, False: 71.3k]
  ------------------
 3267|    318|        return {*r, 2, false};
 3268|    318|    }
 3269|  71.3k|    {
 3270|  71.3k|        bool zero_parsed{false};
 3271|  71.3k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 26.4k, False: 44.9k]
  ------------------
 3272|  26.4k|            return {*r, 8, zero_parsed};
 3273|  26.4k|        }
 3274|  71.3k|    }
 3275|  44.9k|    return {range.begin(), 10, false};
 3276|  71.3k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|   318k|{
 3349|   318k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|   318k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|   318k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 891, False: 317k]
  |  |  ------------------
  ------------------
 3353|    891|            return unexpected_scan_error(
 3354|    891|                scan_error::invalid_scanned_value,
 3355|    891|                "Failed to parse integer: No digits found");
 3356|    891|        }
 3357|   317k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|   318k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|  61.6k|{
 3379|  61.6k|    std::basic_string<CharT> output;
 3380|  61.6k|    std::string thsep_indices;
 3381|  61.6k|    auto it = range.begin();
 3382|  61.6k|    bool digit_matched = false;
 3383|   352k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 350k, False: 2.24k]
  ------------------
 3384|   350k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 36.0k, False: 314k]
  ------------------
 3385|  36.0k|            thsep_indices.push_back(
 3386|  36.0k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  36.0k|        }
 3388|   314k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 59.4k, False: 254k]
  ------------------
 3389|  59.4k|            break;
 3390|  59.4k|        }
 3391|   254k|        else {
 3392|   254k|            output.push_back(*it);
 3393|   254k|            digit_matched = true;
 3394|   254k|        }
 3395|   350k|    }
 3396|  61.6k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  61.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.30k, False: 58.3k]
  |  |  ------------------
  ------------------
 3397|  3.30k|        return unexpected_scan_error(
 3398|  3.30k|            scan_error::invalid_scanned_value,
 3399|  3.30k|            "Failed to parse integer: No digits found");
 3400|  3.30k|    }
 3401|  58.3k|    return std::tuple{it, output, thsep_indices};
 3402|  61.6k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3199|  1.70k|{
 3200|  1.70k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  1.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  1.70k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 910, False: 792]
  ------------------
 3203|    910|        SCN_UNLIKELY_ATTR
 3204|    910|        return {scan_error::invalid_scanned_value,
 3205|    910|                "Invalid thousands separator grouping"};
 3206|    910|    }
 3207|       |
 3208|    792|    return {};
 3209|  1.70k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3161|  1.70k|{
 3162|  1.70k|    transform_thsep_indices(thsep_indices,
 3163|  1.70k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  1.70k|    auto thsep_it = thsep_indices.rbegin();
 3166|  1.70k|    for (auto grouping_it = grouping.begin();
 3167|  1.70k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 1.70k]
  |  Branch (3167:10): [True: 0, False: 1.70k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  1.70k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  1.70k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  1.70k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  26.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 25.6k, False: 1.25k]
  ------------------
 3179|  25.6k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 446, False: 25.2k]
  ------------------
 3180|    446|            return false;
 3181|    446|        }
 3182|  25.6k|    }
 3183|       |
 3184|  1.25k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 1.25k, False: 0]
  ------------------
 3185|  1.25k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 464, False: 792]
  ------------------
 3186|    464|            return false;
 3187|    464|        }
 3188|  1.25k|    }
 3189|       |
 3190|    792|    SCN_CLANG_POP
 3191|       |
 3192|    792|    return true;
 3193|  1.25k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   317k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   317k|                  ranges::sized_range<Range>) {
 1674|   317k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   317k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   317k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   317k|    {
 1478|   317k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  1.46M|    {
 1491|  1.46M|        return sv;
 1492|  1.46M|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   431k|{
 2940|   431k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 431k, False: 0]
  ------------------
 2941|   431k|        auto it = read_while_classic_space(range);
 2942|   431k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   431k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.18k, False: 422k]
  |  |  ------------------
  ------------------
 2944|  9.18k|            return unexpected(e);
 2945|  9.18k|        }
 2946|       |
 2947|   422k|        return it;
 2948|   431k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   431k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   431k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   431k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   431k|        auto buf = make_contiguous_buffer(range);
 2109|   431k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   431k|        return ranges::next(range.begin(),
 2111|   431k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   431k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   431k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   431k|                  ranges::sized_range<Range>) {
 1674|   431k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   431k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   431k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|   431k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   431k|    {
 1478|   431k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   668k|    {
  304|   668k|        ranges::advance(x, n);
  305|   668k|        return x;
  306|   668k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.07M|    {
  268|  1.07M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.07M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.07M|    {
  181|  2.65M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.58M, False: 1.07M]
  ------------------
  182|  1.58M|            ++i;
  183|  1.58M|        }
  184|  1.07M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  54.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  54.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  54.3k|            auto rd = make_reader<T, char_type>();
 6195|  54.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.3k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  54.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 54.3k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  54.3k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  54.3k|                return impl(rd, range, value);
 6202|  54.3k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  54.3k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|   673k|    {
 3029|   673k|        reader_error_handler eh{};
 3030|   673k|        get_derived().check_specs_impl(specs, eh);
 3031|   673k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 673k]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|   673k|        return {};
 3035|   673k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3039|   673k|    {
 3040|   673k|        return static_cast<Derived&>(*this);
 3041|   673k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|   673k|    {
 3474|   673k|        detail::check_int_type_specs(specs, eh);
 3475|   673k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  54.3k|    {
 6113|  54.3k|        const bool need_skipped_width =
 6114|  54.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 54.3k]
  |  Branch (6114:33): [True: 0, False: 54.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  54.3k|        auto it = rng.begin();
 6118|  54.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  54.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 54.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  54.3k|        else {
 6127|  54.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  54.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.47k, False: 52.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.47k|    }                                                  \
  |  |  |  | 3667|  54.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  52.8k|            std::tie(it, prefix_width) = prefix_result;
 6129|  52.8k|        }
 6130|  52.8k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  52.8k|        std::ptrdiff_t value_width = 0;
 6134|  52.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 52.8k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  52.8k|        else {
 6150|  52.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  52.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  52.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  52.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.11k, False: 45.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.11k|    }                                                  \
  |  | 3667|  52.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  52.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  45.7k|                                             specs, value, loc));
 6152|       |
 6153|  45.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 45.7k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  45.7k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  45.7k|        std::ptrdiff_t postfix_width = 0;
 6162|  45.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 44.7k, False: 1.00k]
  ------------------
 6163|  44.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  44.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  44.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  44.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  44.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  44.7k|                                 value_width));
 6167|  44.7k|            std::tie(it, postfix_width) = postfix_result;
 6168|  44.7k|        }
 6169|       |
 6170|  45.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  45.7k|                                                 value_width, postfix_width);
 6172|  45.7k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 45.7k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  45.7k|        return it;
 6177|  45.7k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3023|  1.42M|    {
 3024|  1.42M|        return true;
 3025|  1.42M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  64.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  64.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  64.3k|            auto rd = make_reader<T, char_type>();
 6195|  64.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 64.3k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  64.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 64.3k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  64.3k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  64.3k|                return impl(rd, range, value);
 6202|  64.3k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  64.3k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  64.3k|    {
 6113|  64.3k|        const bool need_skipped_width =
 6114|  64.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 64.3k]
  |  Branch (6114:33): [True: 0, False: 64.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  64.3k|        auto it = rng.begin();
 6118|  64.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  64.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 64.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  64.3k|        else {
 6127|  64.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  64.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  64.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  64.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  64.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  62.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  62.3k|        }
 6130|  62.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  62.3k|        std::ptrdiff_t value_width = 0;
 6134|  62.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 62.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  62.3k|        else {
 6150|  62.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.64k, False: 55.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.64k|    }                                                  \
  |  | 3667|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  55.7k|                                             specs, value, loc));
 6152|       |
 6153|  55.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 55.7k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  55.7k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  55.7k|        std::ptrdiff_t postfix_width = 0;
 6162|  55.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 54.3k, False: 1.35k]
  ------------------
 6163|  54.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  54.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 54.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  54.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  54.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  54.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  54.3k|                                 value_width));
 6167|  54.3k|            std::tie(it, postfix_width) = postfix_result;
 6168|  54.3k|        }
 6169|       |
 6170|  55.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  55.7k|                                                 value_width, postfix_width);
 6172|  55.7k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 55.7k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  55.7k|        return it;
 6177|  55.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  62.3k|    {
 3528|  62.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  62.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  62.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  62.3k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  62.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.12k, False: 54.2k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.12k|            else {
 3539|  8.12k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.12k]
  ------------------
 3540|  8.12k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.12k|            }
 3546|  8.12k|        }
 3547|       |
 3548|  62.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.52k, False: 56.8k]
  ------------------
 3549|  5.52k|            value = T{0};
 3550|  5.52k|            return std::next(prefix_result.iterator);
 3551|  5.52k|        }
 3552|       |
 3553|  56.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  56.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 44.7k, False: 12.0k]
  |  |  ------------------
  ------------------
 3554|  44.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  44.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.76k, False: 39.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.76k|    }                                                  \
  |  |  |  | 3667|  44.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  39.9k|                    parse_integer_digits_without_thsep(
 3556|  39.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  39.9k|                        prefix_result.parsed_base));
 3558|       |
 3559|  39.9k|            auto buf = make_contiguous_buffer(
 3560|  39.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  39.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  39.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  39.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  39.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 828, False: 39.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    828|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    828|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    828|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    828|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    828|    }                                                  \
  |  |  |  | 3667|  39.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  39.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  39.1k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  39.1k|            return ranges::next(
 3566|  39.1k|                prefix_result.iterator,
 3567|  39.1k|                ranges::distance(buf.view().begin(), result_it));
 3568|  39.9k|        }
 3569|       |
 3570|  12.0k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.0k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.0k|#endif
 3576|       |
 3577|  12.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 674, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    674|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    674|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    674|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    674|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    674|    }                                                  \
  |  |  |  | 3667|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.4k|                parse_integer_digits_with_thsep(
 3579|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.4k|                    prefix_result.parsed_base, locale_options));
 3581|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.4k|            parse_digits_result;
 3583|       |
 3584|  11.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 316, False: 11.1k]
  ------------------
 3585|    316|            if (auto e = check_thsep_grouping(
 3586|    316|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    316|                    thsep_indices, locale_options.grouping);
 3588|    316|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 182, False: 134]
  |  |  ------------------
  ------------------
 3589|    182|                return unexpected(e);
 3590|    182|            }
 3591|    316|        }
 3592|       |
 3593|  11.2k|        auto nothsep_source_view =
 3594|  11.2k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.2k|        SCN_TRY(
  ------------------
  |  | 3668|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 196, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    196|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    196|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    196|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    196|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    196|    }                                                  \
  |  |  |  | 3667|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.0k|            nothsep_source_it,
 3597|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.0k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.0k|        return ranges::next(
 3601|  11.0k|            prefix_result.iterator,
 3602|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.0k|                ranges::ssize(thsep_indices));
 3604|  11.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  62.4k|    {
 3528|  62.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  62.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  62.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  62.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 62.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  62.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  62.4k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  62.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.11k, False: 54.3k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.11k|            else {
 3539|  8.11k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.11k]
  ------------------
 3540|  8.11k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.11k|            }
 3546|  8.11k|        }
 3547|       |
 3548|  62.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.52k, False: 56.9k]
  ------------------
 3549|  5.52k|            value = T{0};
 3550|  5.52k|            return std::next(prefix_result.iterator);
 3551|  5.52k|        }
 3552|       |
 3553|  56.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  56.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 44.8k, False: 12.1k]
  |  |  ------------------
  ------------------
 3554|  44.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  44.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 44.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    192|    }                                                  \
  |  |  |  | 3667|  44.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  44.6k|                    parse_integer_digits_without_thsep(
 3556|  44.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  44.6k|                        prefix_result.parsed_base));
 3558|       |
 3559|  44.6k|            auto buf = make_contiguous_buffer(
 3560|  44.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  44.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  44.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.54k, False: 39.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.54k|    }                                                  \
  |  |  |  | 3667|  44.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  39.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  39.0k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  39.0k|            return ranges::next(
 3566|  39.0k|                prefix_result.iterator,
 3567|  39.0k|                ranges::distance(buf.view().begin(), result_it));
 3568|  44.6k|        }
 3569|       |
 3570|  12.1k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.1k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.1k|#endif
 3576|       |
 3577|  12.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 706, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    706|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    706|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    706|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    706|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    706|    }                                                  \
  |  |  |  | 3667|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.4k|                parse_integer_digits_with_thsep(
 3579|  11.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.4k|                    prefix_result.parsed_base, locale_options));
 3581|  11.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.4k|            parse_digits_result;
 3583|       |
 3584|  11.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 314, False: 11.0k]
  ------------------
 3585|    314|            if (auto e = check_thsep_grouping(
 3586|    314|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    314|                    thsep_indices, locale_options.grouping);
 3588|    314|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 134]
  |  |  ------------------
  ------------------
 3589|    180|                return unexpected(e);
 3590|    180|            }
 3591|    314|        }
 3592|       |
 3593|  11.2k|        auto nothsep_source_view =
 3594|  11.2k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.2k|        SCN_TRY(
  ------------------
  |  | 3668|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 194, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    194|    }                                                  \
  |  |  |  | 3667|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.0k|            nothsep_source_it,
 3597|  11.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.0k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.0k|        return ranges::next(
 3601|  11.0k|            prefix_result.iterator,
 3602|  11.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.0k|                ranges::ssize(thsep_indices));
 3604|  11.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  65.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  65.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  65.4k|            auto rd = make_reader<T, char_type>();
 6195|  65.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 65.4k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  65.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 65.4k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  65.4k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  65.4k|                return impl(rd, range, value);
 6202|  65.4k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  65.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  65.4k|    {
 6113|  65.4k|        const bool need_skipped_width =
 6114|  65.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 65.4k]
  |  Branch (6114:33): [True: 0, False: 65.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  65.4k|        auto it = rng.begin();
 6118|  65.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  65.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 65.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  65.4k|        else {
 6127|  65.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  65.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  65.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  65.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.14k, False: 63.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.14k|    }                                                  \
  |  |  |  | 3667|  65.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  63.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  63.3k|        }
 6130|  63.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  63.3k|        std::ptrdiff_t value_width = 0;
 6134|  63.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 63.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  63.3k|        else {
 6150|  63.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  63.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  63.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.44k, False: 56.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.44k|    }                                                  \
  |  | 3667|  63.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  56.8k|                                             specs, value, loc));
 6152|       |
 6153|  56.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 56.8k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  56.8k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  56.8k|        std::ptrdiff_t postfix_width = 0;
 6162|  56.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 55.3k, False: 1.50k]
  ------------------
 6163|  55.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  55.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 55.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  55.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  55.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  55.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  55.3k|                                 value_width));
 6167|  55.3k|            std::tie(it, postfix_width) = postfix_result;
 6168|  55.3k|        }
 6169|       |
 6170|  56.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  56.8k|                                                 value_width, postfix_width);
 6172|  56.8k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 56.8k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  56.8k|        return it;
 6177|  56.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  63.3k|    {
 3528|  63.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  63.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  63.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  63.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 63.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  63.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  63.3k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  63.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.32k, False: 55.0k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.32k|            else {
 3539|  8.32k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.32k]
  ------------------
 3540|  8.32k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.32k|            }
 3546|  8.32k|        }
 3547|       |
 3548|  63.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.56k, False: 57.7k]
  ------------------
 3549|  5.56k|            value = T{0};
 3550|  5.56k|            return std::next(prefix_result.iterator);
 3551|  5.56k|        }
 3552|       |
 3553|  57.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  57.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 45.4k, False: 12.2k]
  |  |  ------------------
  ------------------
 3554|  45.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  45.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.00k, False: 40.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.00k|    }                                                  \
  |  |  |  | 3667|  45.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  40.4k|                    parse_integer_digits_without_thsep(
 3556|  40.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  40.4k|                        prefix_result.parsed_base));
 3558|       |
 3559|  40.4k|            auto buf = make_contiguous_buffer(
 3560|  40.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  40.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  40.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  40.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  40.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  40.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 428, False: 40.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    428|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    428|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    428|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    428|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    428|    }                                                  \
  |  |  |  | 3667|  40.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  40.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  40.0k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  40.0k|            return ranges::next(
 3566|  40.0k|                prefix_result.iterator,
 3567|  40.0k|                ranges::distance(buf.view().begin(), result_it));
 3568|  40.4k|        }
 3569|       |
 3570|  12.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.2k|#endif
 3576|       |
 3577|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.5k|                parse_integer_digits_with_thsep(
 3579|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.5k|                    prefix_result.parsed_base, locale_options));
 3581|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.5k|            parse_digits_result;
 3583|       |
 3584|  11.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 330, False: 11.2k]
  ------------------
 3585|    330|            if (auto e = check_thsep_grouping(
 3586|    330|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    330|                    thsep_indices, locale_options.grouping);
 3588|    330|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 196, False: 134]
  |  |  ------------------
  ------------------
 3589|    196|                return unexpected(e);
 3590|    196|            }
 3591|    330|        }
 3592|       |
 3593|  11.3k|        auto nothsep_source_view =
 3594|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.3k|        SCN_TRY(
  ------------------
  |  | 3668|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 108, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    108|    }                                                  \
  |  |  |  | 3667|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.2k|            nothsep_source_it,
 3597|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.2k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.2k|        return ranges::next(
 3601|  11.2k|            prefix_result.iterator,
 3602|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.2k|                ranges::ssize(thsep_indices));
 3604|  11.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  63.4k|    {
 3528|  63.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  63.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  63.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  63.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  63.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 63.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  63.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  63.4k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  63.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.31k, False: 55.0k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.31k|            else {
 3539|  8.31k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.31k]
  ------------------
 3540|  8.31k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.31k|            }
 3546|  8.31k|        }
 3547|       |
 3548|  63.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.56k, False: 57.8k]
  ------------------
 3549|  5.56k|            value = T{0};
 3550|  5.56k|            return std::next(prefix_result.iterator);
 3551|  5.56k|        }
 3552|       |
 3553|  57.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  57.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 45.5k, False: 12.2k]
  |  |  ------------------
  ------------------
 3554|  45.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  45.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 222, False: 45.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    222|    }                                                  \
  |  |  |  | 3667|  45.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  45.3k|                    parse_integer_digits_without_thsep(
 3556|  45.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  45.3k|                        prefix_result.parsed_base));
 3558|       |
 3559|  45.3k|            auto buf = make_contiguous_buffer(
 3560|  45.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  45.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  45.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.35k, False: 39.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.35k|    }                                                  \
  |  |  |  | 3667|  45.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  39.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  39.9k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  39.9k|            return ranges::next(
 3566|  39.9k|                prefix_result.iterator,
 3567|  39.9k|                ranges::distance(buf.view().begin(), result_it));
 3568|  45.3k|        }
 3569|       |
 3570|  12.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.2k|#endif
 3576|       |
 3577|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 748, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    748|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    748|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    748|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    748|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    748|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.5k|                parse_integer_digits_with_thsep(
 3579|  11.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.5k|                    prefix_result.parsed_base, locale_options));
 3581|  11.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.5k|            parse_digits_result;
 3583|       |
 3584|  11.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 328, False: 11.2k]
  ------------------
 3585|    328|            if (auto e = check_thsep_grouping(
 3586|    328|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    328|                    thsep_indices, locale_options.grouping);
 3588|    328|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 194, False: 134]
  |  |  ------------------
  ------------------
 3589|    194|                return unexpected(e);
 3590|    194|            }
 3591|    328|        }
 3592|       |
 3593|  11.3k|        auto nothsep_source_view =
 3594|  11.3k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.3k|        SCN_TRY(
  ------------------
  |  | 3668|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    106|    }                                                  \
  |  |  |  | 3667|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.2k|            nothsep_source_it,
 3597|  11.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.2k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.2k|        return ranges::next(
 3601|  11.2k|            prefix_result.iterator,
 3602|  11.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.2k|                ranges::ssize(thsep_indices));
 3604|  11.3k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  47.9k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  47.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  47.9k|            auto rd = make_reader<T, char_type>();
 6195|  47.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.9k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  47.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 47.9k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  47.9k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  47.9k|                return impl(rd, range, value);
 6202|  47.9k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  47.9k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  47.9k|    {
 6113|  47.9k|        const bool need_skipped_width =
 6114|  47.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 47.9k]
  |  Branch (6114:33): [True: 0, False: 47.9k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  47.9k|        auto it = rng.begin();
 6118|  47.9k|        std::ptrdiff_t prefix_width = 0;
 6119|  47.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 47.9k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  47.9k|        else {
 6127|  47.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.10k, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.10k|    }                                                  \
  |  |  |  | 3667|  47.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  46.8k|            std::tie(it, prefix_width) = prefix_result;
 6129|  46.8k|        }
 6130|  46.8k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  46.8k|        std::ptrdiff_t value_width = 0;
 6134|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 46.8k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  46.8k|        else {
 6150|  46.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.48k, False: 39.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.48k|    }                                                  \
  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  39.3k|                                             specs, value, loc));
 6152|       |
 6153|  39.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 39.3k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  39.3k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  39.3k|        std::ptrdiff_t postfix_width = 0;
 6162|  39.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 38.5k, False: 742]
  ------------------
 6163|  38.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  38.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 38.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  38.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  38.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  38.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  38.5k|                                 value_width));
 6167|  38.5k|            std::tie(it, postfix_width) = postfix_result;
 6168|  38.5k|        }
 6169|       |
 6170|  39.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  39.3k|                                                 value_width, postfix_width);
 6172|  39.3k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 39.3k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  39.3k|        return it;
 6177|  39.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  46.8k|    {
 3528|  46.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  46.8k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  46.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.00k, False: 43.7k]
  ------------------
 3532|  3.00k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.00k|                return unexpected_scan_error(
 3534|  3.00k|                    scan_error::invalid_scanned_value,
 3535|  3.00k|                    "Unexpected '-' sign when parsing an "
 3536|  3.00k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.00k|        }
 3547|       |
 3548|  46.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 4.82k, False: 41.9k]
  ------------------
 3549|  4.82k|            value = T{0};
 3550|  4.82k|            return std::next(prefix_result.iterator);
 3551|  4.82k|        }
 3552|       |
 3553|  41.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  41.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.6k, False: 11.3k]
  |  |  ------------------
  ------------------
 3554|  30.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  30.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.89k, False: 27.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.89k|    }                                                  \
  |  |  |  | 3667|  30.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  27.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  27.7k|                    parse_integer_digits_without_thsep(
 3556|  27.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  27.7k|                        prefix_result.parsed_base));
 3558|       |
 3559|  27.7k|            auto buf = make_contiguous_buffer(
 3560|  27.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  27.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  27.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  27.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  27.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 892, False: 26.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    892|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    892|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    892|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    892|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    892|    }                                                  \
  |  |  |  | 3667|  27.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  26.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  26.8k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  26.8k|            return ranges::next(
 3566|  26.8k|                prefix_result.iterator,
 3567|  26.8k|                ranges::distance(buf.view().begin(), result_it));
 3568|  27.7k|        }
 3569|       |
 3570|  11.3k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  11.3k|            localized_number_formatting_options<CharT>{loc};
 3575|  11.3k|#endif
 3576|       |
 3577|  11.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 374, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    374|    }                                                  \
  |  |  |  | 3667|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  10.9k|                parse_integer_digits_with_thsep(
 3579|  10.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  10.9k|                    prefix_result.parsed_base, locale_options));
 3581|  10.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  10.9k|            parse_digits_result;
 3583|       |
 3584|  10.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 248, False: 10.7k]
  ------------------
 3585|    248|            if (auto e = check_thsep_grouping(
 3586|    248|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    248|                    thsep_indices, locale_options.grouping);
 3588|    248|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 130]
  |  |  ------------------
  ------------------
 3589|    118|                return unexpected(e);
 3590|    118|            }
 3591|    248|        }
 3592|       |
 3593|  10.8k|        auto nothsep_source_view =
 3594|  10.8k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  10.8k|        SCN_TRY(
  ------------------
  |  | 3668|  10.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    198|    }                                                  \
  |  |  |  | 3667|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  10.6k|            nothsep_source_it,
 3597|  10.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  10.6k|                                prefix_result.parsed_base));
 3599|       |
 3600|  10.6k|        return ranges::next(
 3601|  10.6k|            prefix_result.iterator,
 3602|  10.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  10.6k|                ranges::ssize(thsep_indices));
 3604|  10.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  46.8k|    {
 3528|  46.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  46.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  46.8k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  46.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.00k, False: 43.8k]
  ------------------
 3532|  3.00k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.00k|                return unexpected_scan_error(
 3534|  3.00k|                    scan_error::invalid_scanned_value,
 3535|  3.00k|                    "Unexpected '-' sign when parsing an "
 3536|  3.00k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.00k|        }
 3547|       |
 3548|  46.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 4.82k, False: 42.0k]
  ------------------
 3549|  4.82k|            value = T{0};
 3550|  4.82k|            return std::next(prefix_result.iterator);
 3551|  4.82k|        }
 3552|       |
 3553|  42.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  42.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.7k, False: 11.3k]
  |  |  ------------------
  ------------------
 3554|  30.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38, False: 30.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     38|    }                                                  \
  |  |  |  | 3667|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  30.6k|                    parse_integer_digits_without_thsep(
 3556|  30.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  30.6k|                        prefix_result.parsed_base));
 3558|       |
 3559|  30.6k|            auto buf = make_contiguous_buffer(
 3560|  30.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  30.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  30.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.85k, False: 26.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.85k|    }                                                  \
  |  |  |  | 3667|  30.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  26.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  26.8k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  26.8k|            return ranges::next(
 3566|  26.8k|                prefix_result.iterator,
 3567|  26.8k|                ranges::distance(buf.view().begin(), result_it));
 3568|  30.6k|        }
 3569|       |
 3570|  11.3k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  11.3k|            localized_number_formatting_options<CharT>{loc};
 3575|  11.3k|#endif
 3576|       |
 3577|  11.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 400, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    400|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    400|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    400|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    400|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    400|    }                                                  \
  |  |  |  | 3667|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  10.9k|                parse_integer_digits_with_thsep(
 3579|  10.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  10.9k|                    prefix_result.parsed_base, locale_options));
 3581|  10.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  10.9k|            parse_digits_result;
 3583|       |
 3584|  10.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 248, False: 10.6k]
  ------------------
 3585|    248|            if (auto e = check_thsep_grouping(
 3586|    248|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    248|                    thsep_indices, locale_options.grouping);
 3588|    248|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 130]
  |  |  ------------------
  ------------------
 3589|    118|                return unexpected(e);
 3590|    118|            }
 3591|    248|        }
 3592|       |
 3593|  10.8k|        auto nothsep_source_view =
 3594|  10.8k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  10.8k|        SCN_TRY(
  ------------------
  |  | 3668|  10.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 194, False: 10.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    194|    }                                                  \
  |  |  |  | 3667|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  10.6k|            nothsep_source_it,
 3597|  10.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  10.6k|                                prefix_result.parsed_base));
 3599|       |
 3600|  10.6k|        return ranges::next(
 3601|  10.6k|            prefix_result.iterator,
 3602|  10.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  10.6k|                ranges::ssize(thsep_indices));
 3604|  10.8k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  52.1k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  52.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  52.1k|            auto rd = make_reader<T, char_type>();
 6195|  52.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.1k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  52.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 52.1k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  52.1k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  52.1k|                return impl(rd, range, value);
 6202|  52.1k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  52.1k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  52.1k|    {
 6113|  52.1k|        const bool need_skipped_width =
 6114|  52.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 52.1k]
  |  Branch (6114:33): [True: 0, False: 52.1k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  52.1k|        auto it = rng.begin();
 6118|  52.1k|        std::ptrdiff_t prefix_width = 0;
 6119|  52.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 52.1k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  52.1k|        else {
 6127|  52.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  52.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 50.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  50.7k|            std::tie(it, prefix_width) = prefix_result;
 6129|  50.7k|        }
 6130|  50.7k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  50.7k|        std::ptrdiff_t value_width = 0;
 6134|  50.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 50.7k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  50.7k|        else {
 6150|  50.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.23k, False: 43.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.23k|    }                                                  \
  |  | 3667|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  43.5k|                                             specs, value, loc));
 6152|       |
 6153|  43.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 43.5k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  43.5k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  43.5k|        std::ptrdiff_t postfix_width = 0;
 6162|  43.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 42.6k, False: 916]
  ------------------
 6163|  42.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  42.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  42.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  42.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  42.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  42.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  42.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  42.6k|                                 value_width));
 6167|  42.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  42.6k|        }
 6169|       |
 6170|  43.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  43.5k|                                                 value_width, postfix_width);
 6172|  43.5k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 43.5k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  43.5k|        return it;
 6177|  43.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  50.7k|    {
 3528|  50.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  50.7k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  50.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.10k, False: 47.6k]
  ------------------
 3532|  3.10k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.10k|                return unexpected_scan_error(
 3534|  3.10k|                    scan_error::invalid_scanned_value,
 3535|  3.10k|                    "Unexpected '-' sign when parsing an "
 3536|  3.10k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.10k|        }
 3547|       |
 3548|  50.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.01k, False: 45.7k]
  ------------------
 3549|  5.01k|            value = T{0};
 3550|  5.01k|            return std::next(prefix_result.iterator);
 3551|  5.01k|        }
 3552|       |
 3553|  45.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  45.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.5k, False: 12.2k]
  |  |  ------------------
  ------------------
 3554|  33.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  33.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.07k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.07k|    }                                                  \
  |  |  |  | 3667|  33.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  30.4k|                    parse_integer_digits_without_thsep(
 3556|  30.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  30.4k|                        prefix_result.parsed_base));
 3558|       |
 3559|  30.4k|            auto buf = make_contiguous_buffer(
 3560|  30.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  30.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  30.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 440, False: 30.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    440|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    440|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    440|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    440|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    440|    }                                                  \
  |  |  |  | 3667|  30.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  30.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  30.0k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  30.0k|            return ranges::next(
 3566|  30.0k|                prefix_result.iterator,
 3567|  30.0k|                ranges::distance(buf.view().begin(), result_it));
 3568|  30.4k|        }
 3569|       |
 3570|  12.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.2k|#endif
 3576|       |
 3577|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 392, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    392|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    392|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    392|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    392|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    392|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.8k|                parse_integer_digits_with_thsep(
 3579|  11.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.8k|                    prefix_result.parsed_base, locale_options));
 3581|  11.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.8k|            parse_digits_result;
 3583|       |
 3584|  11.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 254, False: 11.5k]
  ------------------
 3585|    254|            if (auto e = check_thsep_grouping(
 3586|    254|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    254|                    thsep_indices, locale_options.grouping);
 3588|    254|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 130]
  |  |  ------------------
  ------------------
 3589|    124|                return unexpected(e);
 3590|    124|            }
 3591|    254|        }
 3592|       |
 3593|  11.7k|        auto nothsep_source_view =
 3594|  11.7k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.7k|        SCN_TRY(
  ------------------
  |  | 3668|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 108, False: 11.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    108|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    108|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    108|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    108|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    108|    }                                                  \
  |  |  |  | 3667|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.6k|            nothsep_source_it,
 3597|  11.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.6k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.6k|        return ranges::next(
 3601|  11.6k|            prefix_result.iterator,
 3602|  11.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.6k|                ranges::ssize(thsep_indices));
 3604|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  50.8k|    {
 3528|  50.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  50.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  50.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  50.8k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  50.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.09k, False: 47.7k]
  ------------------
 3532|  3.09k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.09k|                return unexpected_scan_error(
 3534|  3.09k|                    scan_error::invalid_scanned_value,
 3535|  3.09k|                    "Unexpected '-' sign when parsing an "
 3536|  3.09k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.09k|        }
 3547|       |
 3548|  50.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.01k, False: 45.8k]
  ------------------
 3549|  5.01k|            value = T{0};
 3550|  5.01k|            return std::next(prefix_result.iterator);
 3551|  5.01k|        }
 3552|       |
 3553|  45.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  45.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.5k, False: 12.2k]
  |  |  ------------------
  ------------------
 3554|  33.5k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  33.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 33.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|  33.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  33.5k|                    parse_integer_digits_without_thsep(
 3556|  33.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  33.5k|                        prefix_result.parsed_base));
 3558|       |
 3559|  33.5k|            auto buf = make_contiguous_buffer(
 3560|  33.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  33.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  33.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.59k, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.59k|    }                                                  \
  |  |  |  | 3667|  33.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  29.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  29.9k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  29.9k|            return ranges::next(
 3566|  29.9k|                prefix_result.iterator,
 3567|  29.9k|                ranges::distance(buf.view().begin(), result_it));
 3568|  33.5k|        }
 3569|       |
 3570|  12.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.2k|#endif
 3576|       |
 3577|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 420, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    420|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    420|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    420|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    420|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    420|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.8k|                parse_integer_digits_with_thsep(
 3579|  11.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.8k|                    prefix_result.parsed_base, locale_options));
 3581|  11.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.8k|            parse_digits_result;
 3583|       |
 3584|  11.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 252, False: 11.5k]
  ------------------
 3585|    252|            if (auto e = check_thsep_grouping(
 3586|    252|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    252|                    thsep_indices, locale_options.grouping);
 3588|    252|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 122, False: 130]
  |  |  ------------------
  ------------------
 3589|    122|                return unexpected(e);
 3590|    122|            }
 3591|    252|        }
 3592|       |
 3593|  11.6k|        auto nothsep_source_view =
 3594|  11.6k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.6k|        SCN_TRY(
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 11.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    106|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.5k|            nothsep_source_it,
 3597|  11.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.5k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.5k|        return ranges::next(
 3601|  11.5k|            prefix_result.iterator,
 3602|  11.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.5k|                ranges::ssize(thsep_indices));
 3604|  11.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  52.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  52.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  52.6k|            auto rd = make_reader<T, char_type>();
 6195|  52.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  52.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 52.6k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  52.6k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  52.6k|                return impl(rd, range, value);
 6202|  52.6k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  52.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  52.6k|    {
 6113|  52.6k|        const bool need_skipped_width =
 6114|  52.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 52.6k]
  |  Branch (6114:33): [True: 0, False: 52.6k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  52.6k|        auto it = rng.begin();
 6118|  52.6k|        std::ptrdiff_t prefix_width = 0;
 6119|  52.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 52.6k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  52.6k|        else {
 6127|  52.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.47k, False: 51.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.47k|    }                                                  \
  |  |  |  | 3667|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  51.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  51.2k|        }
 6130|  51.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  51.2k|        std::ptrdiff_t value_width = 0;
 6134|  51.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 51.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  51.2k|        else {
 6150|  51.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  51.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  51.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  51.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.12k, False: 44.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.12k|    }                                                  \
  |  | 3667|  51.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  44.1k|                                             specs, value, loc));
 6152|       |
 6153|  44.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 44.1k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  44.1k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  44.1k|        std::ptrdiff_t postfix_width = 0;
 6162|  44.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 43.0k, False: 1.02k]
  ------------------
 6163|  43.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  43.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 43.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  43.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  43.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  43.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  43.0k|                                 value_width));
 6167|  43.0k|            std::tie(it, postfix_width) = postfix_result;
 6168|  43.0k|        }
 6169|       |
 6170|  44.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  44.1k|                                                 value_width, postfix_width);
 6172|  44.1k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 44.1k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  44.1k|        return it;
 6177|  44.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  51.2k|    {
 3528|  51.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  51.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 51.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  51.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  51.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  51.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.19k, False: 48.0k]
  ------------------
 3532|  3.19k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.19k|                return unexpected_scan_error(
 3534|  3.19k|                    scan_error::invalid_scanned_value,
 3535|  3.19k|                    "Unexpected '-' sign when parsing an "
 3536|  3.19k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.19k|        }
 3547|       |
 3548|  51.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.01k, False: 46.2k]
  ------------------
 3549|  5.01k|            value = T{0};
 3550|  5.01k|            return std::next(prefix_result.iterator);
 3551|  5.01k|        }
 3552|       |
 3553|  46.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.8k, False: 12.4k]
  |  |  ------------------
  ------------------
 3554|  33.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  33.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.12k, False: 30.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.12k|    }                                                  \
  |  |  |  | 3667|  33.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  30.6k|                    parse_integer_digits_without_thsep(
 3556|  30.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  30.6k|                        prefix_result.parsed_base));
 3558|       |
 3559|  30.6k|            auto buf = make_contiguous_buffer(
 3560|  30.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  30.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  30.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 224, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    224|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    224|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    224|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    224|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    224|    }                                                  \
  |  |  |  | 3667|  30.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  30.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  30.4k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  30.4k|            return ranges::next(
 3566|  30.4k|                prefix_result.iterator,
 3567|  30.4k|                ranges::distance(buf.view().begin(), result_it));
 3568|  30.6k|        }
 3569|       |
 3570|  12.4k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.4k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.4k|#endif
 3576|       |
 3577|  12.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 402, False: 12.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    402|    }                                                  \
  |  |  |  | 3667|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  12.0k|                parse_integer_digits_with_thsep(
 3579|  12.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  12.0k|                    prefix_result.parsed_base, locale_options));
 3581|  12.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  12.0k|            parse_digits_result;
 3583|       |
 3584|  12.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 254, False: 11.7k]
  ------------------
 3585|    254|            if (auto e = check_thsep_grouping(
 3586|    254|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    254|                    thsep_indices, locale_options.grouping);
 3588|    254|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    254|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 130]
  |  |  ------------------
  ------------------
 3589|    124|                return unexpected(e);
 3590|    124|            }
 3591|    254|        }
 3592|       |
 3593|  11.8k|        auto nothsep_source_view =
 3594|  11.8k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.8k|        SCN_TRY(
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 58, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     58|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     58|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     58|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     58|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     58|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.8k|            nothsep_source_it,
 3597|  11.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.8k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.8k|        return ranges::next(
 3601|  11.8k|            prefix_result.iterator,
 3602|  11.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.8k|                ranges::ssize(thsep_indices));
 3604|  11.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  51.2k|    {
 3528|  51.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  51.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 51.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  51.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  51.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  51.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.18k, False: 48.0k]
  ------------------
 3532|  3.18k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.18k|                return unexpected_scan_error(
 3534|  3.18k|                    scan_error::invalid_scanned_value,
 3535|  3.18k|                    "Unexpected '-' sign when parsing an "
 3536|  3.18k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.18k|        }
 3547|       |
 3548|  51.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.01k, False: 46.2k]
  ------------------
 3549|  5.01k|            value = T{0};
 3550|  5.01k|            return std::next(prefix_result.iterator);
 3551|  5.01k|        }
 3552|       |
 3553|  46.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  46.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.8k, False: 12.4k]
  |  |  ------------------
  ------------------
 3554|  33.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  33.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 33.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|  33.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  33.8k|                    parse_integer_digits_without_thsep(
 3556|  33.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  33.8k|                        prefix_result.parsed_base));
 3558|       |
 3559|  33.8k|            auto buf = make_contiguous_buffer(
 3560|  33.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  33.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  33.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.43k, False: 30.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.43k|    }                                                  \
  |  |  |  | 3667|  33.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  30.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  30.3k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  30.3k|            return ranges::next(
 3566|  30.3k|                prefix_result.iterator,
 3567|  30.3k|                ranges::distance(buf.view().begin(), result_it));
 3568|  33.8k|        }
 3569|       |
 3570|  12.4k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.4k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.4k|#endif
 3576|       |
 3577|  12.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 430, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    430|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    430|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    430|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    430|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    430|    }                                                  \
  |  |  |  | 3667|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.9k|                parse_integer_digits_with_thsep(
 3579|  11.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.9k|                    prefix_result.parsed_base, locale_options));
 3581|  11.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.9k|            parse_digits_result;
 3583|       |
 3584|  11.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 252, False: 11.7k]
  ------------------
 3585|    252|            if (auto e = check_thsep_grouping(
 3586|    252|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    252|                    thsep_indices, locale_options.grouping);
 3588|    252|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 122, False: 130]
  |  |  ------------------
  ------------------
 3589|    122|                return unexpected(e);
 3590|    122|            }
 3591|    252|        }
 3592|       |
 3593|  11.8k|        auto nothsep_source_view =
 3594|  11.8k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.8k|        SCN_TRY(
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 56, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     56|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     56|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     56|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     56|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     56|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.8k|            nothsep_source_it,
 3597|  11.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.8k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.8k|        return ranges::next(
 3601|  11.8k|            prefix_result.iterator,
 3602|  11.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.8k|                ranges::ssize(thsep_indices));
 3604|  11.8k|    }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   430k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|   430k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|   430k|        else {
 1054|   430k|            return r.begin().contiguous_segment();
 1055|   430k|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|   430k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   406k|{
 2049|   406k|    auto it = range.begin();
 2050|   797k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 787k, False: 9.96k]
  ------------------
 2051|   787k|        const auto val =
 2052|   787k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   787k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   787k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 785k, False: 1.71k]
  |  |  ------------------
  ------------------
 2054|   785k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   785k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   785k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 397k, False: 388k]
  ------------------
 2057|   397k|                return it;
 2058|   397k|            }
 2059|   785k|        }
 2060|   390k|        it = val.iterator;
 2061|   390k|    }
 2062|       |
 2063|  9.96k|    return it;
 2064|   406k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   787k|{
 1887|   787k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   787k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   787k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   787k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   787k|    auto it = range.begin();
 1891|   787k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   787k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   787k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.71k, False: 785k]
  |  |  ------------------
  ------------------
 1894|  1.71k|        ++it;
 1895|  1.71k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  1.71k|        return {it, {}};
 1897|  1.71k|    }
 1898|       |
 1899|   785k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 780k, False: 5.10k]
  ------------------
 1900|   780k|        ++it;
 1901|   780k|        return {it, string_type(1, *range.begin())};
 1902|   780k|    }
 1903|       |
 1904|  5.10k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  5.10k|    return {it, string_type{range.begin(), it}};
 1906|   785k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  1.71k|{
 1155|  1.71k|    auto it = input.begin();
 1156|  2.93k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 2.16k, False: 767]
  ------------------
 1157|  2.16k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 943, False: 1.22k]
  ------------------
 1158|    943|            break;
 1159|    943|        }
 1160|  2.16k|    }
 1161|  1.71k|    return it;
 1162|  1.71k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  5.10k|    {
  283|  5.10k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  5.10k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  5.10k|    {
  252|  5.10k|        constexpr iter_difference_t<I> zero{0};
  253|  5.10k|        iter_difference_t<I> counter{0};
  254|       |
  255|  16.9k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 13.0k, False: 3.93k]
  |  Branch (255:30): [True: 11.8k, False: 1.17k]
  ------------------
  256|  11.8k|            ++i;
  257|  11.8k|            ++counter;
  258|  11.8k|        }
  259|       |
  260|  5.10k|        return counter;
  261|  5.10k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|   787k|    {
 1878|   787k|        return !codepoint.empty();
 1879|   787k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   406k|{
 2070|   406k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   406k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   430k|{
 2940|   430k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 430k, False: 0]
  ------------------
 2941|   430k|        auto it = read_while_classic_space(range);
 2942|   430k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   430k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.96k, False: 420k]
  |  |  ------------------
  ------------------
 2944|  9.96k|            return unexpected(e);
 2945|  9.96k|        }
 2946|       |
 2947|   420k|        return it;
 2948|   430k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   430k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   430k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   430k|    else {
 2114|   430k|        auto it = range.begin();
 2115|       |
 2116|   430k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|   430k|            auto seg = get_contiguous_beginning(range);
 2118|   430k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|   430k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 23.9k, False: 406k]
  ------------------
 2120|  23.9k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|  23.9k|            }
 2122|   406k|            ranges::advance(it, seg.size());
 2123|   406k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   430k|            return detail::is_cp_space(cp);
 2127|   430k|        });
 2128|   430k|    }
 2129|   430k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   406k|        : m_fptr([](storage fn,
  743|   406k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   406k|              cvref<T> obj = *get<T>(fn);
  745|   406k|              if constexpr (std::is_void_v<R>) {
  746|   406k|                  obj(static_cast<decltype(args)>(args)...);
  747|   406k|              }
  748|   406k|              else {
  749|   406k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   406k|              }
  751|   406k|          }),
  752|   406k|          m_storage(std::addressof(f))
  753|   406k|    {
  754|   406k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   785k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   785k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   785k|              else {
  749|   785k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   785k|              }
  751|   785k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   785k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   785k|        else if constexpr (std::is_object_v<T>) {
  688|   785k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   785k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   785k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   785k|            return detail::is_cp_space(cp);
 2127|   785k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   406k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   406k|        {
  662|   406k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   132k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   132k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   132k|        auto beg = r.begin();
  990|   132k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 132k, False: 0]
  ------------------
  991|   132k|            return false;
  992|   132k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   132k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|   242k|    {
  763|   242k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   242k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|   104k|{
 1845|   104k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|   104k|    else {
 1856|   104k|        auto it = range.begin();
 1857|   104k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 83.8k, False: 20.3k]
  ------------------
 1858|  83.8k|            return ranges::next(it, count);
 1859|  83.8k|        }
 1860|       |
 1861|  41.2k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 40.5k, False: 708]
  ------------------
 1862|  40.5k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 19.6k, False: 20.8k]
  ------------------
 1863|  19.6k|                return unexpected(eof_error::eof);
 1864|  19.6k|            }
 1865|  40.5k|        }
 1866|       |
 1867|    708|        return it;
 1868|  20.3k|    }
 1869|   104k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   104k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|   104k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|   104k|        else {
 1106|   104k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 104k, False: 0]
  ------------------
 1107|   104k|                return static_cast<size_t>(
 1108|   104k|                    r.begin().parent()->chars_available() -
 1109|   104k|                    r.begin().position());
 1110|   104k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   104k|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|   104k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   111k|        : m_fptr([](storage fn,
  743|   111k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   111k|              cvref<T> obj = *get<T>(fn);
  745|   111k|              if constexpr (std::is_void_v<R>) {
  746|   111k|                  obj(static_cast<decltype(args)>(args)...);
  747|   111k|              }
  748|   111k|              else {
  749|   111k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   111k|              }
  751|   111k|          }),
  752|   111k|          m_storage(std::addressof(f))
  753|   111k|    {
  754|   111k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   121k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   121k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   121k|              else {
  749|   121k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   121k|              }
  751|   121k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   121k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   121k|        else if constexpr (std::is_object_v<T>) {
  688|   121k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   121k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   111k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   111k|        {
  662|   111k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   105k|    {
 6026|   105k|        const bool need_skipped_width =
 6027|   105k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 105k]
  |  Branch (6027:33): [True: 0, False: 105k]
  ------------------
 6028|   105k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   105k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 105k]
  ------------------
 6032|   105k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 105k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   105k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 105k, False: 0]
  |  Branch (6036:56): [True: 105k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   105k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 105k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   209k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.48k|    }                                                  \
  |  |  |  | 3667|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   209k|                            make_eof_scan_error));
 6047|       |
 6048|   209k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 104k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   104k|            return result_type{it, 0};
 6056|   209k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   105k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|   111k|{
 1964|   111k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   111k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|   111k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|   111k|    else {
 1949|   111k|        auto first = range.begin();
 1950|   121k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 121k, False: 762]
  ------------------
 1951|   121k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 111k, False: 9.92k]
  ------------------
 1952|   111k|                return first;
 1953|   111k|            }
 1954|   121k|        }
 1955|    762|        return first;
 1956|   111k|    }
 1957|   111k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  35.2M|    {
  108|  35.2M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  35.2M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  35.2M|    {
   94|  35.2M|        iter_difference_t<I> counter{0};
   95|  72.1G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 72.0G, False: 35.2M]
  ------------------
   96|  72.0G|            ++i;
   97|  72.0G|            ++counter;
   98|  72.0G|        }
   99|  35.2M|        return counter;
  100|  35.2M|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|  34.5k|    {
 1768|  34.5k|        auto stdloc = loc.get<std::locale>();
 1769|  34.5k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|  34.5k|        grouping = numpunct.grouping();
 1771|  34.5k|        thousands_sep =
 1772|  34.5k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 34.5k]
  ------------------
 1773|  34.5k|        decimal_point = numpunct.decimal_point();
 1774|  34.5k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|  34.5k|{
 1705|  34.5k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 34.5k, False: 0]
  ------------------
 1706|  34.5k|        return std::use_facet<Facet>(stdloc);
 1707|  34.5k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|  34.5k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|   164k|{
 1834|   164k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 164k]
  |  |  ------------------
  ------------------
 1835|     72|        return unexpected(e);
 1836|     72|    }
 1837|       |
 1838|   164k|    return ranges::next(range.begin());
 1839|   164k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   323k|{
  950|   323k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.93k, False: 321k]
  |  |  ------------------
  ------------------
  951|  1.93k|        return eof_error::eof;
  952|  1.93k|    }
  953|   321k|    return eof_error::good;
  954|   323k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   456k|{
  944|   456k|    return is_range_eof(r.begin(), r.end());
  945|   456k|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   456k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   456k|    {
  937|   456k|        return begin == end;
  938|   456k|    }
  939|   456k|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   164k|    {
  296|   164k|        ++x;
  297|   164k|        return x;
  298|   164k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.3k|    {
 3528|  17.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.3k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 17.1k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    228|            else {
 3539|    228|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 228]
  ------------------
 3540|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    228|            }
 3546|    228|        }
 3547|       |
 3548|  17.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 17.3k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  17.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.4k, False: 2.90k]
  |  |  ------------------
  ------------------
 3554|  14.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.0k, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.0k|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    380|                    parse_integer_digits_without_thsep(
 3556|    380|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    380|                        prefix_result.parsed_base));
 3558|       |
 3559|    380|            auto buf = make_contiguous_buffer(
 3560|    380|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    380|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     44|    }                                                  \
  |  |  |  | 3667|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    336|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    336|                                        prefix_result.parsed_base));
 3564|       |
 3565|    336|            return ranges::next(
 3566|    336|                prefix_result.iterator,
 3567|    336|                ranges::distance(buf.view().begin(), result_it));
 3568|    380|        }
 3569|       |
 3570|  2.90k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.90k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.90k|#endif
 3576|       |
 3577|  2.90k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.90k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 1.54k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|  2.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.54k|                parse_integer_digits_with_thsep(
 3579|  1.54k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.54k|                    prefix_result.parsed_base, locale_options));
 3581|  1.54k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.54k|            parse_digits_result;
 3583|       |
 3584|  1.54k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 94]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|     94|        auto nothsep_source_view =
 3594|     94|            std::basic_string_view<CharT>{nothsep_source};
 3595|     94|        SCN_TRY(
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 82]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     82|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     82|            nothsep_source_it,
 3597|     82|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     82|                                prefix_result.parsed_base));
 3599|       |
 3600|     82|        return ranges::next(
 3601|     82|            prefix_result.iterator,
 3602|     82|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     82|                ranges::ssize(thsep_indices));
 3604|     94|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3314|   130k|{
 3315|   130k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   130k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   130k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   130k|        parse_integer_base_prefix(
 3320|   130k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   130k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 356, False: 129k]
  ------------------
 3323|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 48, False: 308]
  ------------------
 3324|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 212, False: 96]
  ------------------
 3325|    260|            digits_begin_it = base_prefix_begin_it;
 3326|    260|        }
 3327|     96|        else {
 3328|     96|            parsed_zero = false;
 3329|     96|        }
 3330|    356|    }
 3331|   129k|    else {
 3332|   129k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 270, False: 129k]
  ------------------
 3333|   129k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 125k, False: 3.74k]
  ------------------
 3334|   126k|            digits_begin_it = base_prefix_begin_it;
 3335|   126k|        }
 3336|   129k|    }
 3337|       |
 3338|   130k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 128k, False: 1.87k]
  ------------------
 3339|   128k|        sign = sign_type::plus_sign;
 3340|   128k|    }
 3341|   130k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   130k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   130k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   130k|{
 3130|   130k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   130k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 128k, False: 1.87k]
  ------------------
 3132|   128k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 128k, False: 0]
  ------------------
 3133|   128k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   128k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   128k|    }
 3137|       |
 3138|  1.87k|    auto& it = *r;
 3139|  1.87k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 1.69k, False: 179]
  ------------------
 3140|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3141|  1.69k|    }
 3142|    179|    return std::pair{it, sign_type::plus_sign};
 3143|  1.87k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|   130k|{
 2261|   130k|    auto it = read_code_unit(range);
 2262|   130k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   260k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 260k, False: 128k]
  ------------------
 2267|   260k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 1.87k, False: 258k]
  ------------------
 2268|  1.87k|            return *it;
 2269|  1.87k|        }
 2270|   260k|    }
 2271|       |
 2272|   128k|    return unexpected(parse_error::error);
 2273|   130k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3281|   130k|{
 3282|   130k|    switch (base) {
 3283|  17.2k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 17.2k, False: 113k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  17.2k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  17.2k|                    false};
 3287|       |
 3288|  17.2k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 17.2k, False: 113k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  17.2k|            bool zero_parsed = false;
 3291|  17.2k|            auto it = apply_opt(
 3292|  17.2k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  17.2k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  17.4k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 17.4k, False: 112k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  17.4k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  17.4k|                    false};
 3300|       |
 3301|  17.4k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 17.4k, False: 112k]
  ------------------
 3302|       |            // detect base
 3303|  17.4k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  60.9k|        default:
  ------------------
  |  Branch (3305:9): [True: 60.9k, False: 69.3k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  60.9k|            return {range.begin(), base, false};
 3308|   130k|    }
 3309|   130k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2279|  51.9k|{
 2280|  51.9k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 51.7k, False: 168]
  ------------------
 2281|  51.7k|        return range.begin();
 2282|  51.7k|    }
 2283|    168|    return *result;
 2284|  51.9k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3232|  34.6k|{
 3233|  34.6k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  34.6k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|   104k|{
 2220|   104k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   104k|    else {
 2233|   104k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   104k|            if (ch < 'A' || ch > 'Z') {
 2235|   104k|                return ch;
 2236|   104k|            }
 2237|   104k|            return static_cast<char_type>(ch +
 2238|   104k|                                          static_cast<char_type>('a' - 'A'));
 2239|   104k|        };
 2240|       |
 2241|   104k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.6k, False: 84.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.6k|    }                                                  \
  |  |  |  | 3667|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  84.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  84.5k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  84.5k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  84.5k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  84.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.5k, False: 0]
  |  |  ------------------
  ------------------
 2246|  84.5k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  84.5k|                    return ascii_tolower(a) ==
 2248|  84.5k|                           static_cast<detail::char_t<Range>>(b);
 2249|  84.5k|                }))) {
 2250|  84.5k|            return unexpected(parse_error::error);
 2251|  84.5k|        }
 2252|       |
 2253|      0|        return it;
 2254|  84.5k|    }
 2255|   104k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  85.4k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  85.4k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 57.0k, False: 28.3k]
  |  Branch (2234:29): [True: 28.0k, False: 360]
  ------------------
 2235|  85.1k|                return ch;
 2236|  85.1k|            }
 2237|    360|            return static_cast<char_type>(ch +
 2238|    360|                                          static_cast<char_type>('a' - 'A'));
 2239|  85.4k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3246|  34.6k|{
 3247|  34.6k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 34.6k]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|  34.6k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 356, False: 34.3k]
  ------------------
 3252|    356|        zero_parsed = true;
 3253|    356|        return *r;
 3254|    356|    }
 3255|       |
 3256|  34.3k|    return unexpected(parse_error::error);
 3257|  34.6k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|  34.6k|{
 2135|  34.6k|    auto it = read_code_unit(range);
 2136|  34.6k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  34.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 34.6k]
  |  |  ------------------
  ------------------
 2137|     72|        return unexpected(make_eof_parse_error(it.error()));
 2138|     72|    }
 2139|       |
 2140|  34.6k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  34.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.2k, False: 356]
  |  |  ------------------
  ------------------
 2141|  34.6k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  34.2k|        return unexpected(parse_error::error);
 2143|  34.2k|    }
 2144|       |
 2145|    356|    return *it;
 2146|  34.6k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3239|  34.8k|{
 3240|  34.8k|    return read_matching_string_classic_nocase(range, "0x");
 3241|  34.8k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3262|  17.4k|{
 3263|  17.4k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 17.4k]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|  17.4k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 17.4k]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|  17.4k|    {
 3270|  17.4k|        bool zero_parsed{false};
 3271|  17.4k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 188, False: 17.2k]
  ------------------
 3272|    188|            return {*r, 8, zero_parsed};
 3273|    188|        }
 3274|  17.4k|    }
 3275|  17.2k|    return {range.begin(), 10, false};
 3276|  17.4k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3348|   111k|{
 3349|   111k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|   111k|    else {
 3360|   111k|        return read_while1_code_unit(range,
 3361|   111k|                                     [&](char_type ch) noexcept {
 3362|   111k|                                         return char_to_int(ch) < base;
 3363|   111k|                                     })
 3364|   111k|            .transform_error(map_parse_error_to_scan_error(
 3365|   111k|                scan_error::invalid_scanned_value,
 3366|   111k|                "Failed to parse integer: No digits found"));
 3367|   111k|    }
 3368|   111k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|   111k|{
 1984|   111k|    auto it = read_while_code_unit(range, pred);
 1985|   111k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 108k, False: 2.94k]
  ------------------
 1986|   108k|        return unexpected(parse_error::error);
 1987|   108k|    }
 1988|  2.94k|    return it;
 1989|   111k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   111k|        : m_fptr([](storage fn,
  743|   111k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   111k|              cvref<T> obj = *get<T>(fn);
  745|   111k|              if constexpr (std::is_void_v<R>) {
  746|   111k|                  obj(static_cast<decltype(args)>(args)...);
  747|   111k|              }
  748|   111k|              else {
  749|   111k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   111k|              }
  751|   111k|          }),
  752|   111k|          m_storage(std::addressof(f))
  753|   111k|    {
  754|   111k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   121k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   121k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   121k|              else {
  749|   121k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   121k|              }
  751|   121k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   121k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   121k|        else if constexpr (std::is_object_v<T>) {
  688|   121k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   121k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3361|   121k|                                     [&](char_type ch) noexcept {
 3362|   121k|                                         return char_to_int(ch) < base;
 3363|   121k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   111k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   111k|        {
  662|   111k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3378|  17.2k|{
 3379|  17.2k|    std::basic_string<CharT> output;
 3380|  17.2k|    std::string thsep_indices;
 3381|  17.2k|    auto it = range.begin();
 3382|  17.2k|    bool digit_matched = false;
 3383|  35.2M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 35.2M, False: 360]
  ------------------
 3384|  35.2M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 35.1M, False: 44.7k]
  ------------------
 3385|  35.1M|            thsep_indices.push_back(
 3386|  35.1M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  35.1M|        }
 3388|  44.7k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 16.8k, False: 27.8k]
  ------------------
 3389|  16.8k|            break;
 3390|  16.8k|        }
 3391|  27.8k|        else {
 3392|  27.8k|            output.push_back(*it);
 3393|  27.8k|            digit_matched = true;
 3394|  27.8k|        }
 3395|  35.2M|    }
 3396|  17.2k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.06k, False: 9.18k]
  |  |  ------------------
  ------------------
 3397|  8.06k|        return unexpected_scan_error(
 3398|  8.06k|            scan_error::invalid_scanned_value,
 3399|  8.06k|            "Failed to parse integer: No digits found");
 3400|  8.06k|    }
 3401|  9.18k|    return std::tuple{it, output, thsep_indices};
 3402|  17.2k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3199|  8.68k|{
 3200|  8.68k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  8.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  8.68k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 8.68k, False: 0]
  ------------------
 3203|  8.68k|        SCN_UNLIKELY_ATTR
 3204|  8.68k|        return {scan_error::invalid_scanned_value,
 3205|  8.68k|                "Invalid thousands separator grouping"};
 3206|  8.68k|    }
 3207|       |
 3208|      0|    return {};
 3209|  8.68k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3161|  8.68k|{
 3162|  8.68k|    transform_thsep_indices(thsep_indices,
 3163|  8.68k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  8.68k|    auto thsep_it = thsep_indices.rbegin();
 3166|  8.68k|    for (auto grouping_it = grouping.begin();
 3167|  8.68k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 8.68k]
  |  Branch (3167:10): [True: 0, False: 8.68k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  8.68k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  8.68k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  8.68k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  9.14k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 9.08k, False: 60]
  ------------------
 3179|  9.08k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 8.62k, False: 462]
  ------------------
 3180|  8.62k|            return false;
 3181|  8.62k|        }
 3182|  9.08k|    }
 3183|       |
 3184|     60|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 60, False: 0]
  ------------------
 3185|     60|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 60, False: 0]
  ------------------
 3186|     60|            return false;
 3187|     60|        }
 3188|     60|    }
 3189|       |
 3190|      0|    SCN_CLANG_POP
 3191|       |
 3192|      0|    return true;
 3193|     60|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1670|  2.94k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|  2.94k|    else {
 1677|  2.94k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|  2.94k|    }
 1679|  2.94k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|  2.94k|    {
 1525|  2.94k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|  2.94k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|  2.94k|    {
 1609|  2.94k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|  2.94k|                           ranges::common_range<Range>) {
 1626|  2.94k|            auto beg_seg = range.begin().contiguous_segment();
 1627|  2.94k|            auto end_seg = range.end().contiguous_segment();
 1628|  2.94k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 863]
  |  |  ------------------
  ------------------
 1629|  2.94k|                             detail::to_address(end_seg.end()))) {
 1630|  2.07k|                auto& str = m_storage.emplace();
 1631|  2.07k|                str.reserve(range.end().position() - range.begin().position());
 1632|  2.07k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  2.07k|                m_view = string_view_type{str};
 1634|  2.07k|                return;
 1635|  2.07k|            }
 1636|       |
 1637|    863|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|    863|                                                            end_seg.data());
 1639|    863|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  2.94k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  5.50k|    {
 1570|  5.50k|        return m_view;
 1571|  5.50k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  2.94k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|  1.92k|    {
 6068|  1.92k|        const bool need_skipped_width =
 6069|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.92k]
  |  Branch (6069:33): [True: 0, False: 1.92k]
  ------------------
 6070|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.92k]
  ------------------
 6073|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.92k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.92k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.92k, False: 0]
  ------------------
 6082|  1.92k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.92k]
  ------------------
 6083|  1.92k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.92k|        return result_type{rng.begin(), 0};
 6107|  1.92k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|   104k|{
 1845|   104k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|   104k|    if constexpr (ranges::sized_range<Range>) {
 1848|   104k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|   104k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 19.6k, False: 84.5k]
  ------------------
 1850|  19.6k|            return unexpected(eof_error::eof);
 1851|  19.6k|        }
 1852|       |
 1853|  84.5k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|   104k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|   132k|{
 1887|   132k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   132k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   132k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   132k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   132k|    auto it = range.begin();
 1891|   132k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   132k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 132k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   132k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 132k, False: 0]
  ------------------
 1900|   132k|        ++it;
 1901|   132k|        return {it, string_type(1, *range.begin())};
 1902|   132k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   132k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   568k|{
  944|   568k|    return is_range_eof(r.begin(), r.end());
  945|   568k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   568k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   568k|    {
  937|   568k|        return begin == end;
  938|   568k|    }
  939|   568k|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|   132k|    {
 1878|   132k|        return !codepoint.empty();
 1879|   132k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   435k|{
  950|   435k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 433k]
  |  |  ------------------
  ------------------
  951|  2.09k|        return eof_error::eof;
  952|  2.09k|    }
  953|   433k|    return eof_error::good;
  954|   435k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|   164k|{
 1834|   164k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 164k]
  |  |  ------------------
  ------------------
 1835|     72|        return unexpected(e);
 1836|     72|    }
 1837|       |
 1838|   164k|    return ranges::next(range.begin());
 1839|   164k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   164k|    {
  296|   164k|        ++x;
  297|   164k|        return x;
  298|   164k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.3k|    {
 3528|  17.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.3k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 17.1k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    228|            else {
 3539|    228|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 228]
  ------------------
 3540|    228|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    228|            }
 3546|    228|        }
 3547|       |
 3548|  17.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 17.3k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  17.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.4k, False: 2.90k]
  |  |  ------------------
  ------------------
 3554|  14.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.4k|                    parse_integer_digits_without_thsep(
 3556|  14.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.4k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.4k|            auto buf = make_contiguous_buffer(
 3560|  14.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.0k, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.0k|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    336|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    336|                                        prefix_result.parsed_base));
 3564|       |
 3565|    336|            return ranges::next(
 3566|    336|                prefix_result.iterator,
 3567|    336|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.4k|        }
 3569|       |
 3570|  2.90k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.90k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.90k|#endif
 3576|       |
 3577|  2.90k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.90k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 1.54k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|  2.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.54k|                parse_integer_digits_with_thsep(
 3579|  1.54k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.54k|                    prefix_result.parsed_base, locale_options));
 3581|  1.54k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.54k|            parse_digits_result;
 3583|       |
 3584|  1.54k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 94]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|     94|        auto nothsep_source_view =
 3594|     94|            std::basic_string_view<CharT>{nothsep_source};
 3595|     94|        SCN_TRY(
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 82]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     82|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     82|            nothsep_source_it,
 3597|     82|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     82|                                prefix_result.parsed_base));
 3599|       |
 3600|     82|        return ranges::next(
 3601|     82|            prefix_result.iterator,
 3602|     82|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     82|                ranges::ssize(thsep_indices));
 3604|     94|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|   130k|{
 3315|   130k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   130k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   130k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   130k|        parse_integer_base_prefix(
 3320|   130k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   130k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 356, False: 129k]
  ------------------
 3323|    356|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 48, False: 308]
  ------------------
 3324|    356|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 212, False: 96]
  ------------------
 3325|    260|            digits_begin_it = base_prefix_begin_it;
 3326|    260|        }
 3327|     96|        else {
 3328|     96|            parsed_zero = false;
 3329|     96|        }
 3330|    356|    }
 3331|   129k|    else {
 3332|   129k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 270, False: 129k]
  ------------------
 3333|   129k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 125k, False: 3.74k]
  ------------------
 3334|   126k|            digits_begin_it = base_prefix_begin_it;
 3335|   126k|        }
 3336|   129k|    }
 3337|       |
 3338|   130k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 128k, False: 1.87k]
  ------------------
 3339|   128k|        sign = sign_type::plus_sign;
 3340|   128k|    }
 3341|   130k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   130k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   130k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   130k|{
 3130|   130k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   130k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 128k, False: 1.87k]
  ------------------
 3132|   128k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 128k, False: 0]
  ------------------
 3133|   128k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   128k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   128k|    }
 3137|       |
 3138|  1.87k|    auto& it = *r;
 3139|  1.87k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 1.69k, False: 179]
  ------------------
 3140|  1.69k|        return std::pair{it, sign_type::minus_sign};
 3141|  1.69k|    }
 3142|    179|    return std::pair{it, sign_type::plus_sign};
 3143|  1.87k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|   130k|{
 2261|   130k|    auto it = read_code_unit(range);
 2262|   130k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   260k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 260k, False: 128k]
  ------------------
 2267|   260k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 1.87k, False: 258k]
  ------------------
 2268|  1.87k|            return *it;
 2269|  1.87k|        }
 2270|   260k|    }
 2271|       |
 2272|   128k|    return unexpected(parse_error::error);
 2273|   130k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|   130k|{
 3282|   130k|    switch (base) {
 3283|  17.2k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 17.2k, False: 113k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  17.2k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  17.2k|                    false};
 3287|       |
 3288|  17.2k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 17.2k, False: 113k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  17.2k|            bool zero_parsed = false;
 3291|  17.2k|            auto it = apply_opt(
 3292|  17.2k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  17.2k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  17.4k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 17.4k, False: 112k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  17.4k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  17.4k|                    false};
 3300|       |
 3301|  17.4k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 17.4k, False: 112k]
  ------------------
 3302|       |            // detect base
 3303|  17.4k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  60.9k|        default:
  ------------------
  |  Branch (3305:9): [True: 60.9k, False: 69.3k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  60.9k|            return {range.begin(), base, false};
 3308|   130k|    }
 3309|   130k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|  51.9k|{
 2280|  51.9k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 51.7k, False: 168]
  ------------------
 2281|  51.7k|        return range.begin();
 2282|  51.7k|    }
 2283|    168|    return *result;
 2284|  51.9k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|  34.6k|{
 3233|  34.6k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  34.6k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|   104k|{
 2220|   104k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   104k|    else {
 2233|   104k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   104k|            if (ch < 'A' || ch > 'Z') {
 2235|   104k|                return ch;
 2236|   104k|            }
 2237|   104k|            return static_cast<char_type>(ch +
 2238|   104k|                                          static_cast<char_type>('a' - 'A'));
 2239|   104k|        };
 2240|       |
 2241|   104k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.6k, False: 84.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.6k|    }                                                  \
  |  |  |  | 3667|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  84.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  84.5k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  84.5k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  84.5k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  84.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.5k, False: 0]
  |  |  ------------------
  ------------------
 2246|  84.5k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  84.5k|                    return ascii_tolower(a) ==
 2248|  84.5k|                           static_cast<detail::char_t<Range>>(b);
 2249|  84.5k|                }))) {
 2250|  84.5k|            return unexpected(parse_error::error);
 2251|  84.5k|        }
 2252|       |
 2253|      0|        return it;
 2254|  84.5k|    }
 2255|   104k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  85.4k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  85.4k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 57.0k, False: 28.3k]
  |  Branch (2234:29): [True: 28.0k, False: 360]
  ------------------
 2235|  85.1k|                return ch;
 2236|  85.1k|            }
 2237|    360|            return static_cast<char_type>(ch +
 2238|    360|                                          static_cast<char_type>('a' - 'A'));
 2239|  85.4k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|  34.6k|{
 3247|  34.6k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 34.6k]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|  34.6k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 356, False: 34.3k]
  ------------------
 3252|    356|        zero_parsed = true;
 3253|    356|        return *r;
 3254|    356|    }
 3255|       |
 3256|  34.3k|    return unexpected(parse_error::error);
 3257|  34.6k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  34.6k|{
 2135|  34.6k|    auto it = read_code_unit(range);
 2136|  34.6k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  34.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 34.6k]
  |  |  ------------------
  ------------------
 2137|     72|        return unexpected(make_eof_parse_error(it.error()));
 2138|     72|    }
 2139|       |
 2140|  34.6k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  34.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.2k, False: 356]
  |  |  ------------------
  ------------------
 2141|  34.6k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  34.2k|        return unexpected(parse_error::error);
 2143|  34.2k|    }
 2144|       |
 2145|    356|    return *it;
 2146|  34.6k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|  34.8k|{
 3240|  34.8k|    return read_matching_string_classic_nocase(range, "0x");
 3241|  34.8k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|  17.4k|{
 3263|  17.4k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 17.4k]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|  17.4k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 17.4k]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|  17.4k|    {
 3270|  17.4k|        bool zero_parsed{false};
 3271|  17.4k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 188, False: 17.2k]
  ------------------
 3272|    188|            return {*r, 8, zero_parsed};
 3273|    188|        }
 3274|  17.4k|    }
 3275|  17.2k|    return {range.begin(), 10, false};
 3276|  17.4k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|   111k|{
 3349|   111k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|   111k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|   111k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 156, False: 111k]
  |  |  ------------------
  ------------------
 3353|    156|            return unexpected_scan_error(
 3354|    156|                scan_error::invalid_scanned_value,
 3355|    156|                "Failed to parse integer: No digits found");
 3356|    156|        }
 3357|   111k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|   111k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|  17.2k|{
 3379|  17.2k|    std::basic_string<CharT> output;
 3380|  17.2k|    std::string thsep_indices;
 3381|  17.2k|    auto it = range.begin();
 3382|  17.2k|    bool digit_matched = false;
 3383|  35.2M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 35.2M, False: 360]
  ------------------
 3384|  35.2M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 35.1M, False: 44.7k]
  ------------------
 3385|  35.1M|            thsep_indices.push_back(
 3386|  35.1M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  35.1M|        }
 3388|  44.7k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 16.8k, False: 27.8k]
  ------------------
 3389|  16.8k|            break;
 3390|  16.8k|        }
 3391|  27.8k|        else {
 3392|  27.8k|            output.push_back(*it);
 3393|  27.8k|            digit_matched = true;
 3394|  27.8k|        }
 3395|  35.2M|    }
 3396|  17.2k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.06k, False: 9.18k]
  |  |  ------------------
  ------------------
 3397|  8.06k|        return unexpected_scan_error(
 3398|  8.06k|            scan_error::invalid_scanned_value,
 3399|  8.06k|            "Failed to parse integer: No digits found");
 3400|  8.06k|    }
 3401|  9.18k|    return std::tuple{it, output, thsep_indices};
 3402|  17.2k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3199|  8.68k|{
 3200|  8.68k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  8.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  8.68k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 8.68k, False: 0]
  ------------------
 3203|  8.68k|        SCN_UNLIKELY_ATTR
 3204|  8.68k|        return {scan_error::invalid_scanned_value,
 3205|  8.68k|                "Invalid thousands separator grouping"};
 3206|  8.68k|    }
 3207|       |
 3208|      0|    return {};
 3209|  8.68k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3161|  8.68k|{
 3162|  8.68k|    transform_thsep_indices(thsep_indices,
 3163|  8.68k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  8.68k|    auto thsep_it = thsep_indices.rbegin();
 3166|  8.68k|    for (auto grouping_it = grouping.begin();
 3167|  8.68k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 8.68k]
  |  Branch (3167:10): [True: 0, False: 8.68k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  8.68k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  8.68k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  8.68k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  9.14k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 9.08k, False: 60]
  ------------------
 3179|  9.08k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 8.62k, False: 462]
  ------------------
 3180|  8.62k|            return false;
 3181|  8.62k|        }
 3182|  9.08k|    }
 3183|       |
 3184|     60|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 60, False: 0]
  ------------------
 3185|     60|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 60, False: 0]
  ------------------
 3186|     60|            return false;
 3187|     60|        }
 3188|     60|    }
 3189|       |
 3190|      0|    SCN_CLANG_POP
 3191|       |
 3192|      0|    return true;
 3193|     60|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|   111k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   111k|                  ranges::sized_range<Range>) {
 1674|   111k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   111k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   111k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   111k|    {
 1478|   111k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|   114k|    {
 1491|   114k|        return sv;
 1492|   114k|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   131k|{
 2940|   131k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 131k, False: 0]
  ------------------
 2941|   131k|        auto it = read_while_classic_space(range);
 2942|   131k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   131k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.70k, False: 130k]
  |  |  ------------------
  ------------------
 2944|  1.70k|            return unexpected(e);
 2945|  1.70k|        }
 2946|       |
 2947|   130k|        return it;
 2948|   131k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   131k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   131k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   131k|    else {
 2114|   131k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   131k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   131k|            return detail::is_cp_space(cp);
 2127|   131k|        });
 2128|   131k|    }
 2129|   131k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|   131k|{
 2070|   131k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   131k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|   131k|{
 2049|   131k|    auto it = range.begin();
 2050|   134k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 132k, False: 1.70k]
  ------------------
 2051|   132k|        const auto val =
 2052|   132k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   132k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   132k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 132k, False: 0]
  |  |  ------------------
  ------------------
 2054|   132k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   132k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   132k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 130k, False: 2.41k]
  ------------------
 2057|   130k|                return it;
 2058|   130k|            }
 2059|   132k|        }
 2060|  2.41k|        it = val.iterator;
 2061|  2.41k|    }
 2062|       |
 2063|  1.70k|    return it;
 2064|   131k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   131k|        : m_fptr([](storage fn,
  743|   131k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   131k|              cvref<T> obj = *get<T>(fn);
  745|   131k|              if constexpr (std::is_void_v<R>) {
  746|   131k|                  obj(static_cast<decltype(args)>(args)...);
  747|   131k|              }
  748|   131k|              else {
  749|   131k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   131k|              }
  751|   131k|          }),
  752|   131k|          m_storage(std::addressof(f))
  753|   131k|    {
  754|   131k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   132k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   132k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   132k|              else {
  749|   132k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   132k|              }
  751|   132k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   132k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   132k|        else if constexpr (std::is_object_v<T>) {
  688|   132k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   132k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|   132k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   132k|            return detail::is_cp_space(cp);
 2127|   132k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   131k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   131k|        {
  662|   131k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  86.8k|    {
  304|  86.8k|        ranges::advance(x, n);
  305|  86.8k|        return x;
  306|  86.8k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  86.8k|    {
  268|  86.8k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  86.8k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  86.8k|    {
  181|   261k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 174k, False: 86.8k]
  ------------------
  182|   174k|            ++i;
  183|   174k|        }
  184|  86.8k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.5k|            auto rd = make_reader<T, char_type>();
 6195|  17.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.5k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.5k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.5k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.5k|                return impl(rd, range, value);
 6202|  17.5k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.5k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|   211k|    {
 3029|   211k|        reader_error_handler eh{};
 3030|   211k|        get_derived().check_specs_impl(specs, eh);
 3031|   211k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 211k]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|   211k|        return {};
 3035|   211k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3039|   211k|    {
 3040|   211k|        return static_cast<Derived&>(*this);
 3041|   211k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|   211k|    {
 3474|   211k|        detail::check_int_type_specs(specs, eh);
 3475|   211k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.5k|    {
 6113|  17.5k|        const bool need_skipped_width =
 6114|  17.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.5k]
  |  Branch (6114:33): [True: 0, False: 17.5k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.5k|        auto it = rng.begin();
 6118|  17.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.5k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.5k|        else {
 6127|  17.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    256|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.3k|        }
 6130|  17.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.3k|        std::ptrdiff_t value_width = 0;
 6134|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.3k|        else {
 6150|  17.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 376]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    376|                                             specs, value, loc));
 6152|       |
 6153|    376|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 376]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    376|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    376|        std::ptrdiff_t postfix_width = 0;
 6162|    376|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 270, False: 106]
  ------------------
 6163|    270|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    270|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    270|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    270|                                 value_width));
 6167|    270|            std::tie(it, postfix_width) = postfix_result;
 6168|    270|        }
 6169|       |
 6170|    376|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    376|                                                 value_width, postfix_width);
 6172|    376|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 376]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    376|        return it;
 6177|    376|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3023|   268k|    {
 3024|   268k|        return true;
 3025|   268k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.3k|    {
 3528|  17.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.3k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 218, False: 17.0k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    218|            else {
 3539|    218|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 218]
  ------------------
 3540|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    218|            }
 3546|    218|        }
 3547|       |
 3548|  17.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 42, False: 17.2k]
  ------------------
 3549|     42|            value = T{0};
 3550|     42|            return std::next(prefix_result.iterator);
 3551|     42|        }
 3552|       |
 3553|  17.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.3k, False: 2.88k]
  |  |  ------------------
  ------------------
 3554|  14.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.0k, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.0k|    }                                                  \
  |  |  |  | 3667|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    368|                    parse_integer_digits_without_thsep(
 3556|    368|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    368|                        prefix_result.parsed_base));
 3558|       |
 3559|    368|            auto buf = make_contiguous_buffer(
 3560|    368|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    368|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    368|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    368|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    368|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 96, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     96|    }                                                  \
  |  |  |  | 3667|    368|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    272|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    272|                                        prefix_result.parsed_base));
 3564|       |
 3565|    272|            return ranges::next(
 3566|    272|                prefix_result.iterator,
 3567|    272|                ranges::distance(buf.view().begin(), result_it));
 3568|    368|        }
 3569|       |
 3570|  2.88k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.88k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.88k|#endif
 3576|       |
 3577|  2.88k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.34k, False: 1.53k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.34k|    }                                                  \
  |  |  |  | 3667|  2.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.53k|                parse_integer_digits_with_thsep(
 3579|  1.53k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.53k|                    prefix_result.parsed_base, locale_options));
 3581|  1.53k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.53k|            parse_digits_result;
 3583|       |
 3584|  1.53k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 90]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|     90|        auto nothsep_source_view =
 3594|     90|            std::basic_string_view<CharT>{nothsep_source};
 3595|     90|        SCN_TRY(
  ------------------
  |  | 3668|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 62]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     62|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     62|            nothsep_source_it,
 3597|     62|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     62|                                prefix_result.parsed_base));
 3599|       |
 3600|     62|        return ranges::next(
 3601|     62|            prefix_result.iterator,
 3602|     62|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     62|                ranges::ssize(thsep_indices));
 3604|     90|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.3k|    {
 3528|  17.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.3k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 218, False: 17.0k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    218|            else {
 3539|    218|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 218]
  ------------------
 3540|    218|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    218|            }
 3546|    218|        }
 3547|       |
 3548|  17.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 42, False: 17.2k]
  ------------------
 3549|     42|            value = T{0};
 3550|     42|            return std::next(prefix_result.iterator);
 3551|     42|        }
 3552|       |
 3553|  17.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.3k, False: 2.88k]
  |  |  ------------------
  ------------------
 3554|  14.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.3k|                    parse_integer_digits_without_thsep(
 3556|  14.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.3k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.3k|            auto buf = make_contiguous_buffer(
 3560|  14.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.0k, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.0k|    }                                                  \
  |  |  |  | 3667|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    272|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    272|                                        prefix_result.parsed_base));
 3564|       |
 3565|    272|            return ranges::next(
 3566|    272|                prefix_result.iterator,
 3567|    272|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.3k|        }
 3569|       |
 3570|  2.88k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.88k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.88k|#endif
 3576|       |
 3577|  2.88k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.34k, False: 1.53k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.34k|    }                                                  \
  |  |  |  | 3667|  2.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.53k|                parse_integer_digits_with_thsep(
 3579|  1.53k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.53k|                    prefix_result.parsed_base, locale_options));
 3581|  1.53k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.53k|            parse_digits_result;
 3583|       |
 3584|  1.53k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 90]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|     90|        auto nothsep_source_view =
 3594|     90|            std::basic_string_view<CharT>{nothsep_source};
 3595|     90|        SCN_TRY(
  ------------------
  |  | 3668|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 62]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     62|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     62|            nothsep_source_it,
 3597|     62|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     62|                                prefix_result.parsed_base));
 3599|       |
 3600|     62|        return ranges::next(
 3601|     62|            prefix_result.iterator,
 3602|     62|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     62|                ranges::ssize(thsep_indices));
 3604|     90|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.6k|            auto rd = make_reader<T, char_type>();
 6195|  17.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.6k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.6k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.6k|                return impl(rd, range, value);
 6202|  17.6k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.6k|    {
 6113|  17.6k|        const bool need_skipped_width =
 6114|  17.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.6k]
  |  Branch (6114:33): [True: 0, False: 17.6k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.6k|        auto it = rng.begin();
 6118|  17.6k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.6k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.6k|        else {
 6127|  17.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.3k|        }
 6130|  17.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.3k|        std::ptrdiff_t value_width = 0;
 6134|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.3k|        else {
 6150|  17.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 462]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    462|                                             specs, value, loc));
 6152|       |
 6153|    462|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 462]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    462|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    462|        std::ptrdiff_t postfix_width = 0;
 6162|    462|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 344, False: 118]
  ------------------
 6163|    344|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    344|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    344|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    344|                                 value_width));
 6167|    344|            std::tie(it, postfix_width) = postfix_result;
 6168|    344|        }
 6169|       |
 6170|    462|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    462|                                                 value_width, postfix_width);
 6172|    462|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 462]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    462|        return it;
 6177|    462|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.7k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.7k|            auto rd = make_reader<T, char_type>();
 6195|  17.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.7k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.7k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.7k|                return impl(rd, range, value);
 6202|  17.7k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.7k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.7k|    {
 6113|  17.7k|        const bool need_skipped_width =
 6114|  17.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.7k]
  |  Branch (6114:33): [True: 0, False: 17.7k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.7k|        auto it = rng.begin();
 6118|  17.7k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.7k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.7k|        else {
 6127|  17.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.4k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.4k|        }
 6130|  17.4k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.4k|        std::ptrdiff_t value_width = 0;
 6134|  17.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.4k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.4k|        else {
 6150|  17.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 546]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    546|                                             specs, value, loc));
 6152|       |
 6153|    546|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 546]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    546|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    546|        std::ptrdiff_t postfix_width = 0;
 6162|    546|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 428, False: 118]
  ------------------
 6163|    428|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    428|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    428|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    428|                                 value_width));
 6167|    428|            std::tie(it, postfix_width) = postfix_result;
 6168|    428|        }
 6169|       |
 6170|    546|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    546|                                                 value_width, postfix_width);
 6172|    546|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 546]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    546|        return it;
 6177|    546|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.4k|    {
 3528|  17.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.4k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 244, False: 17.2k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    244|            else {
 3539|    244|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 244]
  ------------------
 3540|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    244|            }
 3546|    244|        }
 3547|       |
 3548|  17.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 50, False: 17.4k]
  ------------------
 3549|     50|            value = T{0};
 3550|     50|            return std::next(prefix_result.iterator);
 3551|     50|        }
 3552|       |
 3553|  17.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.4k, False: 2.92k]
  |  |  ------------------
  ------------------
 3554|  14.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.0k, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.0k|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    402|                    parse_integer_digits_without_thsep(
 3556|    402|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    402|                        prefix_result.parsed_base));
 3558|       |
 3559|    402|            auto buf = make_contiguous_buffer(
 3560|    402|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    402|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    392|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    392|                                        prefix_result.parsed_base));
 3564|       |
 3565|    392|            return ranges::next(
 3566|    392|                prefix_result.iterator,
 3567|    392|                ranges::distance(buf.view().begin(), result_it));
 3568|    402|        }
 3569|       |
 3570|  2.92k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.92k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.92k|#endif
 3576|       |
 3577|  2.92k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.37k, False: 1.55k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.37k|    }                                                  \
  |  |  |  | 3667|  2.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.55k|                parse_integer_digits_with_thsep(
 3579|  1.55k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.55k|                    prefix_result.parsed_base, locale_options));
 3581|  1.55k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.55k|            parse_digits_result;
 3583|       |
 3584|  1.55k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 104]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|    104|        auto nothsep_source_view =
 3594|    104|            std::basic_string_view<CharT>{nothsep_source};
 3595|    104|        SCN_TRY(
  ------------------
  |  | 3668|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    104|            nothsep_source_it,
 3597|    104|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    104|                                prefix_result.parsed_base));
 3599|       |
 3600|    104|        return ranges::next(
 3601|    104|            prefix_result.iterator,
 3602|    104|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    104|                ranges::ssize(thsep_indices));
 3604|    104|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.4k|    {
 3528|  17.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.4k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 244, False: 17.2k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    244|            else {
 3539|    244|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 244]
  ------------------
 3540|    244|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    244|            }
 3546|    244|        }
 3547|       |
 3548|  17.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 50, False: 17.4k]
  ------------------
 3549|     50|            value = T{0};
 3550|     50|            return std::next(prefix_result.iterator);
 3551|     50|        }
 3552|       |
 3553|  17.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.4k, False: 2.92k]
  |  |  ------------------
  ------------------
 3554|  14.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.4k|                    parse_integer_digits_without_thsep(
 3556|  14.4k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.4k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.4k|            auto buf = make_contiguous_buffer(
 3560|  14.4k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.4k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.0k, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.0k|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    392|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    392|                                        prefix_result.parsed_base));
 3564|       |
 3565|    392|            return ranges::next(
 3566|    392|                prefix_result.iterator,
 3567|    392|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.4k|        }
 3569|       |
 3570|  2.92k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  2.92k|            localized_number_formatting_options<CharT>{loc};
 3575|  2.92k|#endif
 3576|       |
 3577|  2.92k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  2.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.37k, False: 1.55k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.37k|    }                                                  \
  |  |  |  | 3667|  2.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.55k|                parse_integer_digits_with_thsep(
 3579|  1.55k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.55k|                    prefix_result.parsed_base, locale_options));
 3581|  1.55k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.55k|            parse_digits_result;
 3583|       |
 3584|  1.55k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 104]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|    104|        auto nothsep_source_view =
 3594|    104|            std::basic_string_view<CharT>{nothsep_source};
 3595|    104|        SCN_TRY(
  ------------------
  |  | 3668|    104|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    104|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    104|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    104|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 104]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    104|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    104|            nothsep_source_it,
 3597|    104|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    104|                                prefix_result.parsed_base));
 3599|       |
 3600|    104|        return ranges::next(
 3601|    104|            prefix_result.iterator,
 3602|    104|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    104|                ranges::ssize(thsep_indices));
 3604|    104|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.5k|            auto rd = make_reader<T, char_type>();
 6195|  17.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.5k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.5k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.5k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.5k|                return impl(rd, range, value);
 6202|  17.5k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.5k|    {
 6113|  17.5k|        const bool need_skipped_width =
 6114|  17.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.5k]
  |  Branch (6114:33): [True: 0, False: 17.5k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.5k|        auto it = rng.begin();
 6118|  17.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.5k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.5k|        else {
 6127|  17.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.2k|        }
 6130|  17.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.2k|        std::ptrdiff_t value_width = 0;
 6134|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.2k|        else {
 6150|  17.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 324]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    324|                                             specs, value, loc));
 6152|       |
 6153|    324|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 324]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    324|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    324|        std::ptrdiff_t postfix_width = 0;
 6162|    324|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 242, False: 82]
  ------------------
 6163|    242|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    242|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    242|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    242|                                 value_width));
 6167|    242|            std::tie(it, postfix_width) = postfix_result;
 6168|    242|        }
 6169|       |
 6170|    324|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    324|                                                 value_width, postfix_width);
 6172|    324|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 324]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    324|        return it;
 6177|    324|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.2k|    {
 3528|  17.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 17.0k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.2k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.1k, False: 3.05k]
  |  |  ------------------
  ------------------
 3554|  14.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.8k|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    306|                    parse_integer_digits_without_thsep(
 3556|    306|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    306|                        prefix_result.parsed_base));
 3558|       |
 3559|    306|            auto buf = make_contiguous_buffer(
 3560|    306|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    306|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 70, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     70|    }                                                  \
  |  |  |  | 3667|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    236|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    236|                                        prefix_result.parsed_base));
 3564|       |
 3565|    236|            return ranges::next(
 3566|    236|                prefix_result.iterator,
 3567|    236|                ranges::distance(buf.view().begin(), result_it));
 3568|    306|        }
 3569|       |
 3570|  3.05k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.05k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.05k|#endif
 3576|       |
 3577|  3.05k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.32k, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.32k|    }                                                  \
  |  |  |  | 3667|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.72k|                parse_integer_digits_with_thsep(
 3579|  1.72k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.72k|                    prefix_result.parsed_base, locale_options));
 3581|  1.72k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.72k|            parse_digits_result;
 3583|       |
 3584|  1.72k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 282]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|    282|        auto nothsep_source_view =
 3594|    282|            std::basic_string_view<CharT>{nothsep_source};
 3595|    282|        SCN_TRY(
  ------------------
  |  | 3668|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    260|            nothsep_source_it,
 3597|    260|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    260|                                prefix_result.parsed_base));
 3599|       |
 3600|    260|        return ranges::next(
 3601|    260|            prefix_result.iterator,
 3602|    260|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    260|                ranges::ssize(thsep_indices));
 3604|    282|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.2k|    {
 3528|  17.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 17.0k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.2k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.1k, False: 3.05k]
  |  |  ------------------
  ------------------
 3554|  14.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.1k|                    parse_integer_digits_without_thsep(
 3556|  14.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.1k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.1k|            auto buf = make_contiguous_buffer(
 3560|  14.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.9k, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.9k|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    236|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    236|                                        prefix_result.parsed_base));
 3564|       |
 3565|    236|            return ranges::next(
 3566|    236|                prefix_result.iterator,
 3567|    236|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.1k|        }
 3569|       |
 3570|  3.05k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.05k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.05k|#endif
 3576|       |
 3577|  3.05k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.32k, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.32k|    }                                                  \
  |  |  |  | 3667|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.72k|                parse_integer_digits_with_thsep(
 3579|  1.72k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.72k|                    prefix_result.parsed_base, locale_options));
 3581|  1.72k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.72k|            parse_digits_result;
 3583|       |
 3584|  1.72k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 282]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|    282|        auto nothsep_source_view =
 3594|    282|            std::basic_string_view<CharT>{nothsep_source};
 3595|    282|        SCN_TRY(
  ------------------
  |  | 3668|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    260|            nothsep_source_it,
 3597|    260|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    260|                                prefix_result.parsed_base));
 3599|       |
 3600|    260|        return ranges::next(
 3601|    260|            prefix_result.iterator,
 3602|    260|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    260|                ranges::ssize(thsep_indices));
 3604|    282|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.5k|            auto rd = make_reader<T, char_type>();
 6195|  17.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.5k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.5k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.5k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.5k|                return impl(rd, range, value);
 6202|  17.5k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.5k|    {
 6113|  17.5k|        const bool need_skipped_width =
 6114|  17.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.5k]
  |  Branch (6114:33): [True: 0, False: 17.5k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.5k|        auto it = rng.begin();
 6118|  17.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.5k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.5k|        else {
 6127|  17.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.3k|        }
 6130|  17.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.3k|        std::ptrdiff_t value_width = 0;
 6134|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.3k|        else {
 6150|  17.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 370]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    370|                                             specs, value, loc));
 6152|       |
 6153|    370|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 370]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    370|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    370|        std::ptrdiff_t postfix_width = 0;
 6162|    370|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 288, False: 82]
  ------------------
 6163|    288|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    288|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    288|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    288|                                 value_width));
 6167|    288|            std::tie(it, postfix_width) = postfix_result;
 6168|    288|        }
 6169|       |
 6170|    370|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    370|                                                 value_width, postfix_width);
 6172|    370|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 370]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    370|        return it;
 6177|    370|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.3k|    {
 3528|  17.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.3k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 17.1k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.2k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.2k, False: 3.06k]
  |  |  ------------------
  ------------------
 3554|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.9k, False: 312]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.9k|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    312|                    parse_integer_digits_without_thsep(
 3556|    312|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    312|                        prefix_result.parsed_base));
 3558|       |
 3559|    312|            auto buf = make_contiguous_buffer(
 3560|    312|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    312|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    312|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     42|    }                                                  \
  |  |  |  | 3667|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    270|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    270|                                        prefix_result.parsed_base));
 3564|       |
 3565|    270|            return ranges::next(
 3566|    270|                prefix_result.iterator,
 3567|    270|                ranges::distance(buf.view().begin(), result_it));
 3568|    312|        }
 3569|       |
 3570|  3.06k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.06k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.06k|#endif
 3576|       |
 3577|  3.06k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.33k, False: 1.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.33k|    }                                                  \
  |  |  |  | 3667|  3.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.73k|                parse_integer_digits_with_thsep(
 3579|  1.73k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.73k|                    prefix_result.parsed_base, locale_options));
 3581|  1.73k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.73k|            parse_digits_result;
 3583|       |
 3584|  1.73k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 284]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|    284|        auto nothsep_source_view =
 3594|    284|            std::basic_string_view<CharT>{nothsep_source};
 3595|    284|        SCN_TRY(
  ------------------
  |  | 3668|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    272|            nothsep_source_it,
 3597|    272|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    272|                                prefix_result.parsed_base));
 3599|       |
 3600|    272|        return ranges::next(
 3601|    272|            prefix_result.iterator,
 3602|    272|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    272|                ranges::ssize(thsep_indices));
 3604|    284|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.3k|    {
 3528|  17.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.3k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 212, False: 17.1k]
  ------------------
 3532|    212|            if constexpr (!std::is_signed_v<T>) {
 3533|    212|                return unexpected_scan_error(
 3534|    212|                    scan_error::invalid_scanned_value,
 3535|    212|                    "Unexpected '-' sign when parsing an "
 3536|    212|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    212|        }
 3547|       |
 3548|  17.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.2k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.2k, False: 3.06k]
  |  |  ------------------
  ------------------
 3554|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.2k|                    parse_integer_digits_without_thsep(
 3556|  14.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.2k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.2k|            auto buf = make_contiguous_buffer(
 3560|  14.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.9k, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.9k|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    270|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    270|                                        prefix_result.parsed_base));
 3564|       |
 3565|    270|            return ranges::next(
 3566|    270|                prefix_result.iterator,
 3567|    270|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.2k|        }
 3569|       |
 3570|  3.06k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.06k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.06k|#endif
 3576|       |
 3577|  3.06k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.33k, False: 1.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.33k|    }                                                  \
  |  |  |  | 3667|  3.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.73k|                parse_integer_digits_with_thsep(
 3579|  1.73k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.73k|                    prefix_result.parsed_base, locale_options));
 3581|  1.73k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.73k|            parse_digits_result;
 3583|       |
 3584|  1.73k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 284]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|    284|        auto nothsep_source_view =
 3594|    284|            std::basic_string_view<CharT>{nothsep_source};
 3595|    284|        SCN_TRY(
  ------------------
  |  | 3668|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    272|            nothsep_source_it,
 3597|    272|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    272|                                prefix_result.parsed_base));
 3599|       |
 3600|    272|        return ranges::next(
 3601|    272|            prefix_result.iterator,
 3602|    272|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    272|                ranges::ssize(thsep_indices));
 3604|    284|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  17.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  17.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  17.6k|            auto rd = make_reader<T, char_type>();
 6195|  17.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  17.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 17.6k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  17.6k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  17.6k|                return impl(rd, range, value);
 6202|  17.6k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  17.6k|    {
 6113|  17.6k|        const bool need_skipped_width =
 6114|  17.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.6k]
  |  Branch (6114:33): [True: 0, False: 17.6k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.6k|        auto it = rng.begin();
 6118|  17.6k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.6k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.6k|        else {
 6127|  17.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.3k|        }
 6130|  17.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.3k|        std::ptrdiff_t value_width = 0;
 6134|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.3k|        else {
 6150|  17.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 436]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    436|                                             specs, value, loc));
 6152|       |
 6153|    436|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 436]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    436|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    436|        std::ptrdiff_t postfix_width = 0;
 6162|    436|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 354, False: 82]
  ------------------
 6163|    354|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    354|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    354|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    354|                                 value_width));
 6167|    354|            std::tie(it, postfix_width) = postfix_result;
 6168|    354|        }
 6169|       |
 6170|    436|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    436|                                                 value_width, postfix_width);
 6172|    436|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 436]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    436|        return it;
 6177|    436|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  17.3k|    {
 3528|  17.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.3k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 17.1k]
  ------------------
 3532|    228|            if constexpr (!std::is_signed_v<T>) {
 3533|    228|                return unexpected_scan_error(
 3534|    228|                    scan_error::invalid_scanned_value,
 3535|    228|                    "Unexpected '-' sign when parsing an "
 3536|    228|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    228|        }
 3547|       |
 3548|  17.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.3k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.2k, False: 3.09k]
  |  |  ------------------
  ------------------
 3554|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.9k, False: 324]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.9k|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    324|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    324|                    parse_integer_digits_without_thsep(
 3556|    324|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    324|                        prefix_result.parsed_base));
 3558|       |
 3559|    324|            auto buf = make_contiguous_buffer(
 3560|    324|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    324|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    324|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    324|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    324|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    324|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|    324|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    320|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    320|                                        prefix_result.parsed_base));
 3564|       |
 3565|    320|            return ranges::next(
 3566|    320|                prefix_result.iterator,
 3567|    320|                ranges::distance(buf.view().begin(), result_it));
 3568|    324|        }
 3569|       |
 3570|  3.09k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.09k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.09k|#endif
 3576|       |
 3577|  3.09k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.34k, False: 1.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.34k|    }                                                  \
  |  |  |  | 3667|  3.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.75k|                parse_integer_digits_with_thsep(
 3579|  1.75k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.75k|                    prefix_result.parsed_base, locale_options));
 3581|  1.75k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.75k|            parse_digits_result;
 3583|       |
 3584|  1.75k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 304]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|    304|        auto nothsep_source_view =
 3594|    304|            std::basic_string_view<CharT>{nothsep_source};
 3595|    304|        SCN_TRY(
  ------------------
  |  | 3668|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    304|            nothsep_source_it,
 3597|    304|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    304|                                prefix_result.parsed_base));
 3599|       |
 3600|    304|        return ranges::next(
 3601|    304|            prefix_result.iterator,
 3602|    304|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    304|                ranges::ssize(thsep_indices));
 3604|    304|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  17.3k|    {
 3528|  17.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  17.3k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  17.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 228, False: 17.1k]
  ------------------
 3532|    228|            if constexpr (!std::is_signed_v<T>) {
 3533|    228|                return unexpected_scan_error(
 3534|    228|                    scan_error::invalid_scanned_value,
 3535|    228|                    "Unexpected '-' sign when parsing an "
 3536|    228|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    228|        }
 3547|       |
 3548|  17.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 40, False: 17.3k]
  ------------------
 3549|     40|            value = T{0};
 3550|     40|            return std::next(prefix_result.iterator);
 3551|     40|        }
 3552|       |
 3553|  17.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  17.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.2k, False: 3.09k]
  |  |  ------------------
  ------------------
 3554|  14.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  14.2k|                    parse_integer_digits_without_thsep(
 3556|  14.2k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  14.2k|                        prefix_result.parsed_base));
 3558|       |
 3559|  14.2k|            auto buf = make_contiguous_buffer(
 3560|  14.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  14.2k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.9k, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.9k|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    320|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    320|                                        prefix_result.parsed_base));
 3564|       |
 3565|    320|            return ranges::next(
 3566|    320|                prefix_result.iterator,
 3567|    320|                ranges::distance(buf.view().begin(), result_it));
 3568|  14.2k|        }
 3569|       |
 3570|  3.09k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.09k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.09k|#endif
 3576|       |
 3577|  3.09k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.34k, False: 1.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.34k|    }                                                  \
  |  |  |  | 3667|  3.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  1.75k|                parse_integer_digits_with_thsep(
 3579|  1.75k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  1.75k|                    prefix_result.parsed_base, locale_options));
 3581|  1.75k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  1.75k|            parse_digits_result;
 3583|       |
 3584|  1.75k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 1.44k, False: 304]
  ------------------
 3585|  1.44k|            if (auto e = check_thsep_grouping(
 3586|  1.44k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|  1.44k|                    thsep_indices, locale_options.grouping);
 3588|  1.44k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.44k, False: 0]
  |  |  ------------------
  ------------------
 3589|  1.44k|                return unexpected(e);
 3590|  1.44k|            }
 3591|  1.44k|        }
 3592|       |
 3593|    304|        auto nothsep_source_view =
 3594|    304|            std::basic_string_view<CharT>{nothsep_source};
 3595|    304|        SCN_TRY(
  ------------------
  |  | 3668|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    304|            nothsep_source_it,
 3597|    304|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    304|                                prefix_result.parsed_base));
 3599|       |
 3600|    304|        return ranges::next(
 3601|    304|            prefix_result.iterator,
 3602|    304|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    304|                ranges::ssize(thsep_indices));
 3604|    304|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   131k|{
 2049|   131k|    auto it = range.begin();
 2050|   134k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 132k, False: 1.70k]
  ------------------
 2051|   132k|        const auto val =
 2052|   132k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   132k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   132k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 132k, False: 0]
  |  |  ------------------
  ------------------
 2054|   132k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   132k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   132k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 130k, False: 2.41k]
  ------------------
 2057|   130k|                return it;
 2058|   130k|            }
 2059|   132k|        }
 2060|  2.41k|        it = val.iterator;
 2061|  2.41k|    }
 2062|       |
 2063|  1.70k|    return it;
 2064|   131k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   132k|{
 1887|   132k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   132k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   132k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   132k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   132k|    auto it = range.begin();
 1891|   132k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   132k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 132k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   132k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 132k, False: 0]
  ------------------
 1900|   132k|        ++it;
 1901|   132k|        return {it, string_type(1, *range.begin())};
 1902|   132k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   132k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|   132k|    {
 1878|   132k|        return !codepoint.empty();
 1879|   132k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   131k|{
 2070|   131k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   131k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   131k|{
 2940|   131k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 131k, False: 0]
  ------------------
 2941|   131k|        auto it = read_while_classic_space(range);
 2942|   131k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   131k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.70k, False: 130k]
  |  |  ------------------
  ------------------
 2944|  1.70k|            return unexpected(e);
 2945|  1.70k|        }
 2946|       |
 2947|   130k|        return it;
 2948|   131k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   131k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   131k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   131k|    else {
 2114|   131k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   131k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   131k|            return detail::is_cp_space(cp);
 2127|   131k|        });
 2128|   131k|    }
 2129|   131k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   131k|        : m_fptr([](storage fn,
  743|   131k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   131k|              cvref<T> obj = *get<T>(fn);
  745|   131k|              if constexpr (std::is_void_v<R>) {
  746|   131k|                  obj(static_cast<decltype(args)>(args)...);
  747|   131k|              }
  748|   131k|              else {
  749|   131k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   131k|              }
  751|   131k|          }),
  752|   131k|          m_storage(std::addressof(f))
  753|   131k|    {
  754|   131k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   132k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   132k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   132k|              else {
  749|   132k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   132k|              }
  751|   132k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   132k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   132k|        else if constexpr (std::is_object_v<T>) {
  688|   132k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   132k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   132k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   132k|            return detail::is_cp_space(cp);
 2127|   132k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   131k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   131k|        {
  662|   131k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 5859|  16.2k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  16.2k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  16.2k|            auto rd = make_reader<T, char_type>();
 5865|  16.2k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  16.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  16.2k|    {
 5852|  16.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  16.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 402, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    402|    }                                                  \
  |  |  |  | 3667|  16.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  15.8k|                        .transform_error(make_eof_scan_error));
 5854|  15.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  16.2k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  97.4k|{
 5784|  97.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  97.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92k, False: 95.4k]
  |  |  ------------------
  ------------------
 5785|  1.92k|        return unexpected(e);
 5786|  1.92k|    }
 5787|       |
 5788|  95.4k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 95.4k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  95.4k|    return skip_classic_whitespace(range);
 5793|  95.4k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  15.8k|    {
 3517|  15.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  15.8k|        return read_default_with_base(range, value, 10);
 3519|  15.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5859|  18.6k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  18.6k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  18.6k|            auto rd = make_reader<T, char_type>();
 5865|  18.6k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  18.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  18.6k|    {
 5852|  18.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  18.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 522, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    522|    }                                                  \
  |  |  |  | 3667|  18.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  18.1k|                        .transform_error(make_eof_scan_error));
 5854|  18.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  18.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  18.1k|    {
 3517|  18.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  18.1k|        return read_default_with_base(range, value, 10);
 3519|  18.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 5859|  19.0k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  19.0k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  19.0k|            auto rd = make_reader<T, char_type>();
 5865|  19.0k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  19.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  19.0k|    {
 5852|  19.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  19.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 570, False: 18.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    570|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    570|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    570|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    570|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    570|    }                                                  \
  |  |  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  18.4k|                        .transform_error(make_eof_scan_error));
 5854|  18.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  19.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  18.4k|    {
 3517|  18.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  18.4k|        return read_default_with_base(range, value, 10);
 3519|  18.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 5859|  13.5k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  13.5k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  13.5k|            auto rd = make_reader<T, char_type>();
 5865|  13.5k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  13.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  13.5k|    {
 5852|  13.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  13.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 279, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    279|    }                                                  \
  |  |  |  | 3667|  13.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  13.2k|                        .transform_error(make_eof_scan_error));
 5854|  13.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  13.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  13.2k|    {
 3517|  13.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  13.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  13.2k|        return read_default_with_base(range, value, 10);
 3519|  13.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5859|  14.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  14.8k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  14.8k|            auto rd = make_reader<T, char_type>();
 5865|  14.8k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  14.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  14.8k|    {
 5852|  14.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  14.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 348, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    348|    }                                                  \
  |  |  |  | 3667|  14.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.5k|                        .transform_error(make_eof_scan_error));
 5854|  14.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  14.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  14.5k|    {
 3517|  14.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.5k|        return read_default_with_base(range, value, 10);
 3519|  14.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 5859|  15.0k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  15.0k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  15.0k|            auto rd = make_reader<T, char_type>();
 5865|  15.0k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  15.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  15.0k|    {
 5852|  15.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  15.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 375, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    375|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    375|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    375|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    375|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    375|    }                                                  \
  |  |  |  | 3667|  15.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.6k|                        .transform_error(make_eof_scan_error));
 5854|  14.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  15.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  14.6k|    {
 3517|  14.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.6k|        return read_default_with_base(range, value, 10);
 3519|  14.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  16.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  16.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  16.1k|            auto rd = make_reader<T, char_type>();
 5869|  16.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 16.1k, False: 0]
  ------------------
 5870|  16.1k|                return impl(rd, range, value);
 5871|  16.1k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  16.1k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  16.1k|    {
 5852|  16.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 384, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    384|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    384|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    384|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    384|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    384|    }                                                  \
  |  |  |  | 3667|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  15.8k|                        .transform_error(make_eof_scan_error));
 5854|  15.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  16.1k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  96.0k|{
 5784|  96.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.91k, False: 94.1k]
  |  |  ------------------
  ------------------
 5785|  1.91k|        return unexpected(e);
 5786|  1.91k|    }
 5787|       |
 5788|  94.1k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 94.1k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  94.1k|    return skip_classic_whitespace(range);
 5793|  94.1k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  15.8k|    {
 3517|  15.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  15.8k|        return read_default_with_base(range, value, 10);
 3519|  15.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  15.8k|    {
 3481|  15.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  15.8k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  15.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 15.8k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  30.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.17k, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.17k|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  30.4k|                parse_integer_digits_without_thsep(
 3500|  30.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  30.4k|                    prefix_result.parsed_base));
 3502|       |
 3503|  30.4k|        auto buf = make_contiguous_buffer(
 3504|  30.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  30.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 594, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    594|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    594|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    594|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    594|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    594|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  14.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  14.0k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  14.0k|        return ranges::next(prefix_result.iterator,
 3510|  14.0k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  30.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  18.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  18.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  18.1k|            auto rd = make_reader<T, char_type>();
 5869|  18.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 18.1k, False: 0]
  ------------------
 5870|  18.1k|                return impl(rd, range, value);
 5871|  18.1k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  18.1k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  18.1k|    {
 5852|  18.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 495, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    495|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    495|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    495|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    495|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    495|    }                                                  \
  |  |  |  | 3667|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  17.6k|                        .transform_error(make_eof_scan_error));
 5854|  17.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  18.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  17.6k|    {
 3517|  17.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  17.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  17.6k|        return read_default_with_base(range, value, 10);
 3519|  17.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  17.6k|    {
 3481|  17.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  17.6k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  17.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 17.6k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  33.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  33.8k|                parse_integer_digits_without_thsep(
 3500|  33.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  33.8k|                    prefix_result.parsed_base));
 3502|       |
 3503|  33.8k|        auto buf = make_contiguous_buffer(
 3504|  33.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  33.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  16.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 300, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    300|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    300|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    300|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    300|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    300|    }                                                  \
  |  |  |  | 3667|  16.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  15.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  15.9k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  15.9k|        return ranges::next(prefix_result.iterator,
 3510|  15.9k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  33.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  18.4k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  18.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  18.4k|            auto rd = make_reader<T, char_type>();
 5869|  18.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 18.4k, False: 0]
  ------------------
 5870|  18.4k|                return impl(rd, range, value);
 5871|  18.4k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  18.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  18.4k|    {
 5852|  18.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 540, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    540|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    540|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    540|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    540|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    540|    }                                                  \
  |  |  |  | 3667|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  17.8k|                        .transform_error(make_eof_scan_error));
 5854|  17.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  18.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  17.8k|    {
 3517|  17.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  17.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  17.8k|        return read_default_with_base(range, value, 10);
 3519|  17.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  17.8k|    {
 3481|  17.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  17.8k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  17.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 17.8k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  34.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.42k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.42k|    }                                                  \
  |  |  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  34.3k|                parse_integer_digits_without_thsep(
 3500|  34.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  34.3k|                    prefix_result.parsed_base));
 3502|       |
 3503|  34.3k|        auto buf = make_contiguous_buffer(
 3504|  34.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  34.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  16.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 180, False: 16.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    180|    }                                                  \
  |  |  |  | 3667|  16.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  16.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  16.2k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  16.2k|        return ranges::next(prefix_result.iterator,
 3510|  16.2k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  34.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  13.5k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  13.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  13.5k|            auto rd = make_reader<T, char_type>();
 5869|  13.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 13.5k, False: 0]
  ------------------
 5870|  13.5k|                return impl(rd, range, value);
 5871|  13.5k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  13.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  13.5k|    {
 5852|  13.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  13.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 267, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    267|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    267|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    267|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    267|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    267|    }                                                  \
  |  |  |  | 3667|  13.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  13.2k|                        .transform_error(make_eof_scan_error));
 5854|  13.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  13.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  13.2k|    {
 3517|  13.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  13.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  13.2k|        return read_default_with_base(range, value, 10);
 3519|  13.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  13.2k|    {
 3481|  13.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  13.2k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  13.2k|        if constexpr (!std::is_signed_v<T>) {
 3485|  13.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 786, False: 12.4k]
  ------------------
 3486|    786|                return unexpected_scan_error(
 3487|    786|                    scan_error::invalid_scanned_value,
 3488|    786|                    "Unexpected '-' sign when parsing an "
 3489|    786|                    "unsigned value");
 3490|    786|            }
 3491|  13.2k|        }
 3492|       |
 3493|  13.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 13.2k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  25.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 801, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    801|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    801|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    801|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    801|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    801|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  25.6k|                parse_integer_digits_without_thsep(
 3500|  25.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  25.6k|                    prefix_result.parsed_base));
 3502|       |
 3503|  25.6k|        auto buf = make_contiguous_buffer(
 3504|  25.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  25.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 294, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    294|    }                                                  \
  |  |  |  | 3667|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  12.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  12.1k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  12.1k|        return ranges::next(prefix_result.iterator,
 3510|  12.1k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  25.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  14.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  14.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  14.8k|            auto rd = make_reader<T, char_type>();
 5869|  14.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 14.8k, False: 0]
  ------------------
 5870|  14.8k|                return impl(rd, range, value);
 5871|  14.8k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  14.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  14.8k|    {
 5852|  14.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  14.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    330|    }                                                  \
  |  |  |  | 3667|  14.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.4k|                        .transform_error(make_eof_scan_error));
 5854|  14.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  14.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  14.4k|    {
 3517|  14.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.4k|        return read_default_with_base(range, value, 10);
 3519|  14.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  14.4k|    {
 3481|  14.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.4k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.4k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.4k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 804, False: 13.6k]
  ------------------
 3486|    804|                return unexpected_scan_error(
 3487|    804|                    scan_error::invalid_scanned_value,
 3488|    804|                    "Unexpected '-' sign when parsing an "
 3489|    804|                    "unsigned value");
 3490|    804|            }
 3491|  14.4k|        }
 3492|       |
 3493|  14.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.4k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  28.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 855, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    855|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    855|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    855|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    855|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    855|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  28.0k|                parse_integer_digits_without_thsep(
 3500|  28.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  28.0k|                    prefix_result.parsed_base));
 3502|       |
 3503|  28.0k|        auto buf = make_contiguous_buffer(
 3504|  28.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  28.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  13.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 159, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    159|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    159|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    159|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    159|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    159|    }                                                  \
  |  |  |  | 3667|  13.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.4k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.4k|        return ranges::next(prefix_result.iterator,
 3510|  13.4k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  28.0k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  14.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  14.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  14.9k|            auto rd = make_reader<T, char_type>();
 5869|  14.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 14.9k, False: 0]
  ------------------
 5870|  14.9k|                return impl(rd, range, value);
 5871|  14.9k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  14.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  14.9k|    {
 5852|  14.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  14.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 357, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    357|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    357|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    357|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    357|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    357|    }                                                  \
  |  |  |  | 3667|  14.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.6k|                        .transform_error(make_eof_scan_error));
 5854|  14.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  14.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  14.6k|    {
 3517|  14.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.6k|        return read_default_with_base(range, value, 10);
 3519|  14.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  14.6k|    {
 3481|  14.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.6k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.6k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 828, False: 13.8k]
  ------------------
 3486|    828|                return unexpected_scan_error(
 3487|    828|                    scan_error::invalid_scanned_value,
 3488|    828|                    "Unexpected '-' sign when parsing an "
 3489|    828|                    "unsigned value");
 3490|    828|            }
 3491|  14.6k|        }
 3492|       |
 3493|  14.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.6k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  28.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 873, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    873|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    873|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    873|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    873|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    873|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  28.3k|                parse_integer_digits_without_thsep(
 3500|  28.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  28.3k|                    prefix_result.parsed_base));
 3502|       |
 3503|  28.3k|        auto buf = make_contiguous_buffer(
 3504|  28.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  28.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  13.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 13.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     90|    }                                                  \
  |  |  |  | 3667|  13.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.6k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.6k|        return ranges::next(prefix_result.iterator,
 3510|  13.6k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  28.3k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   362k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   362k|    static_cast<    \
  |  |  929|   362k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   362k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   362k|          m_current(m_range.begin())
 2867|   362k|    {
 2868|   362k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   983k|    {
 2872|   983k|        return m_current;
 2873|   983k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   621k|    {
 2877|   621k|        return m_range.end();
 2878|   621k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|   284k|    {
 2892|   284k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   284k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   284k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 284k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   284k|        }
 2898|   284k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   284k|    static_cast<    \
  |  |  929|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   284k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   336k|    {
 2882|   336k|        return ranges::subrange{begin(), end()};
 2883|   336k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 6181|  54.2k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  54.2k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  54.2k|            auto rd = make_reader<T, char_type>();
 6187|  54.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.2k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  54.2k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  54.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  54.2k|    {
 6113|  54.2k|        const bool need_skipped_width =
 6114|  54.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 54.2k]
  |  Branch (6114:33): [True: 0, False: 54.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  54.2k|        auto it = rng.begin();
 6118|  54.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  54.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 54.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  54.2k|        else {
 6127|  54.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  54.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.33k, False: 52.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.33k|    }                                                  \
  |  |  |  | 3667|  54.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  52.9k|            std::tie(it, prefix_width) = prefix_result;
 6129|  52.9k|        }
 6130|  52.9k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  52.9k|        std::ptrdiff_t value_width = 0;
 6134|  52.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 52.9k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  52.9k|        else {
 6150|  52.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.26k, False: 45.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.26k|    }                                                  \
  |  | 3667|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  45.6k|                                             specs, value, loc));
 6152|       |
 6153|  45.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 45.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  45.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  45.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  45.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 44.6k, False: 990]
  ------------------
 6163|  44.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  44.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  44.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  44.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  44.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  44.6k|                                 value_width));
 6167|  44.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  44.6k|        }
 6169|       |
 6170|  45.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  45.6k|                                                 value_width, postfix_width);
 6172|  45.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 45.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  45.6k|        return it;
 6177|  45.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   336k|    {
 6026|   336k|        const bool need_skipped_width =
 6027|   336k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 336k]
  |  Branch (6027:33): [True: 0, False: 336k]
  ------------------
 6028|   336k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   336k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 336k]
  ------------------
 6032|   336k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 336k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   336k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 336k, False: 0]
  |  Branch (6036:56): [True: 336k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   336k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 336k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   664k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.60k, False: 327k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  8.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  8.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  8.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  8.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  8.60k|    }                                                  \
  |  |  |  | 3667|   336k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   664k|                            make_eof_scan_error));
 6047|       |
 6048|   664k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 327k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   327k|            return result_type{it, 0};
 6056|   664k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   336k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   278k|    {
 6068|   278k|        const bool need_skipped_width =
 6069|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 278k]
  |  Branch (6069:33): [True: 0, False: 278k]
  ------------------
 6070|   278k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   278k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 278k]
  ------------------
 6073|   278k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 278k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   278k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 278k, False: 0]
  ------------------
 6082|   278k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 278k]
  ------------------
 6083|   278k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   278k|        return result_type{rng.begin(), 0};
 6107|   278k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6181|  64.2k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  64.2k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  64.2k|            auto rd = make_reader<T, char_type>();
 6187|  64.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 64.2k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  64.2k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  64.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  64.2k|    {
 6113|  64.2k|        const bool need_skipped_width =
 6114|  64.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 64.2k]
  |  Branch (6114:33): [True: 0, False: 64.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  64.2k|        auto it = rng.begin();
 6118|  64.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  64.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 64.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  64.2k|        else {
 6127|  64.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  64.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  64.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  64.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.77k, False: 62.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.77k|    }                                                  \
  |  |  |  | 3667|  64.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  62.4k|            std::tie(it, prefix_width) = prefix_result;
 6129|  62.4k|        }
 6130|  62.4k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  62.4k|        std::ptrdiff_t value_width = 0;
 6134|  62.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 62.4k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  62.4k|        else {
 6150|  62.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  62.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  62.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  62.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.82k, False: 55.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.82k|    }                                                  \
  |  | 3667|  62.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  62.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  55.6k|                                             specs, value, loc));
 6152|       |
 6153|  55.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 55.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  55.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  55.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  55.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 54.2k, False: 1.33k]
  ------------------
 6163|  54.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  54.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 54.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  54.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  54.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  54.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  54.2k|                                 value_width));
 6167|  54.2k|            std::tie(it, postfix_width) = postfix_result;
 6168|  54.2k|        }
 6169|       |
 6170|  55.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  55.6k|                                                 value_width, postfix_width);
 6172|  55.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 55.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  55.6k|        return it;
 6177|  55.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 6181|  65.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  65.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  65.3k|            auto rd = make_reader<T, char_type>();
 6187|  65.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  65.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 65.3k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  65.3k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  65.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  65.3k|    {
 6113|  65.3k|        const bool need_skipped_width =
 6114|  65.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 65.3k]
  |  Branch (6114:33): [True: 0, False: 65.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  65.3k|        auto it = rng.begin();
 6118|  65.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  65.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 65.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  65.3k|        else {
 6127|  65.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  65.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  65.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  65.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.96k, False: 63.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.96k|    }                                                  \
  |  |  |  | 3667|  65.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  63.4k|            std::tie(it, prefix_width) = prefix_result;
 6129|  63.4k|        }
 6130|  63.4k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  63.4k|        std::ptrdiff_t value_width = 0;
 6134|  63.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 63.4k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  63.4k|        else {
 6150|  63.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  63.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  63.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  63.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.62k, False: 56.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  6.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  6.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  6.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  6.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  6.62k|    }                                                  \
  |  | 3667|  63.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  63.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  56.7k|                                             specs, value, loc));
 6152|       |
 6153|  56.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 56.7k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  56.7k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  56.7k|        std::ptrdiff_t postfix_width = 0;
 6162|  56.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 55.3k, False: 1.48k]
  ------------------
 6163|  55.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  55.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 55.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  55.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  55.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  55.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  55.3k|                                 value_width));
 6167|  55.3k|            std::tie(it, postfix_width) = postfix_result;
 6168|  55.3k|        }
 6169|       |
 6170|  56.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  56.7k|                                                 value_width, postfix_width);
 6172|  56.7k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 56.7k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  56.7k|        return it;
 6177|  56.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 6181|  47.8k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  47.8k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  47.8k|            auto rd = make_reader<T, char_type>();
 6187|  47.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.8k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  47.8k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  47.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  47.8k|    {
 6113|  47.8k|        const bool need_skipped_width =
 6114|  47.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 47.8k]
  |  Branch (6114:33): [True: 0, False: 47.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  47.8k|        auto it = rng.begin();
 6118|  47.8k|        std::ptrdiff_t prefix_width = 0;
 6119|  47.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 47.8k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  47.8k|        else {
 6127|  47.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  47.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 992, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    992|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    992|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    992|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    992|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    992|    }                                                  \
  |  |  |  | 3667|  47.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  46.8k|            std::tie(it, prefix_width) = prefix_result;
 6129|  46.8k|        }
 6130|  46.8k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  46.8k|        std::ptrdiff_t value_width = 0;
 6134|  46.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 46.8k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  46.8k|        else {
 6150|  46.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  46.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  46.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  46.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.60k, False: 39.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.60k|    }                                                  \
  |  | 3667|  46.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  39.2k|                                             specs, value, loc));
 6152|       |
 6153|  39.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 39.2k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  39.2k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  39.2k|        std::ptrdiff_t postfix_width = 0;
 6162|  39.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 38.5k, False: 732]
  ------------------
 6163|  38.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  38.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  38.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  38.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 38.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  38.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  38.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  38.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  38.5k|                                 value_width));
 6167|  38.5k|            std::tie(it, postfix_width) = postfix_result;
 6168|  38.5k|        }
 6169|       |
 6170|  39.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  39.2k|                                                 value_width, postfix_width);
 6172|  39.2k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 39.2k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  39.2k|        return it;
 6177|  39.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6181|  52.0k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  52.0k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  52.0k|            auto rd = make_reader<T, char_type>();
 6187|  52.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.0k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  52.0k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  52.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  52.0k|    {
 6113|  52.0k|        const bool need_skipped_width =
 6114|  52.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 52.0k]
  |  Branch (6114:33): [True: 0, False: 52.0k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  52.0k|        auto it = rng.begin();
 6118|  52.0k|        std::ptrdiff_t prefix_width = 0;
 6119|  52.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 52.0k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  52.0k|        else {
 6127|  52.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  52.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.22k, False: 50.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.22k|    }                                                  \
  |  |  |  | 3667|  52.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  50.8k|            std::tie(it, prefix_width) = prefix_result;
 6129|  50.8k|        }
 6130|  50.8k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  50.8k|        std::ptrdiff_t value_width = 0;
 6134|  50.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 50.8k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  50.8k|        else {
 6150|  50.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  50.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  50.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.37k, False: 43.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.37k|    }                                                  \
  |  | 3667|  50.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  43.4k|                                             specs, value, loc));
 6152|       |
 6153|  43.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 43.4k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  43.4k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  43.4k|        std::ptrdiff_t postfix_width = 0;
 6162|  43.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 42.5k, False: 900]
  ------------------
 6163|  42.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  42.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  42.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  42.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 42.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  42.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  42.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  42.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  42.5k|                                 value_width));
 6167|  42.5k|            std::tie(it, postfix_width) = postfix_result;
 6168|  42.5k|        }
 6169|       |
 6170|  43.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  43.4k|                                                 value_width, postfix_width);
 6172|  43.4k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 43.4k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  43.4k|        return it;
 6177|  43.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 6181|  52.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  52.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  52.6k|            auto rd = make_reader<T, char_type>();
 6187|  52.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  52.6k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  52.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  52.6k|    {
 6113|  52.6k|        const bool need_skipped_width =
 6114|  52.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 52.6k]
  |  Branch (6114:33): [True: 0, False: 52.6k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  52.6k|        auto it = rng.begin();
 6118|  52.6k|        std::ptrdiff_t prefix_width = 0;
 6119|  52.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 52.6k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  52.6k|        else {
 6127|  52.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.32k, False: 51.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.32k|    }                                                  \
  |  |  |  | 3667|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  51.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  51.2k|        }
 6130|  51.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  51.2k|        std::ptrdiff_t value_width = 0;
 6134|  51.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 51.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  51.2k|        else {
 6150|  51.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  51.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  51.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  51.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.26k, False: 44.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.26k|    }                                                  \
  |  | 3667|  51.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  44.0k|                                             specs, value, loc));
 6152|       |
 6153|  44.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 44.0k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  44.0k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  44.0k|        std::ptrdiff_t postfix_width = 0;
 6162|  44.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 43.0k, False: 1.00k]
  ------------------
 6163|  43.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  43.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 43.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  43.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  43.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  43.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  43.0k|                                 value_width));
 6167|  43.0k|            std::tie(it, postfix_width) = postfix_result;
 6168|  43.0k|        }
 6169|       |
 6170|  44.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  44.0k|                                                 value_width, postfix_width);
 6172|  44.0k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 44.0k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  44.0k|        return it;
 6177|  44.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 5859|  4.40k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.40k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.40k|            auto rd = make_reader<T, char_type>();
 5865|  4.40k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.40k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.40k|    {
 5852|  4.40k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     66|    }                                                  \
  |  |  |  | 3667|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.33k|                        .transform_error(make_eof_scan_error));
 5854|  4.33k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.40k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  26.5k|{
 5784|  26.5k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 159, False: 26.3k]
  |  |  ------------------
  ------------------
 5785|    159|        return unexpected(e);
 5786|    159|    }
 5787|       |
 5788|  26.3k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 26.3k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  26.3k|    return skip_classic_whitespace(range);
 5793|  26.3k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.33k|    {
 3517|  4.33k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.33k|        return read_default_with_base(range, value, 10);
 3519|  4.33k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.33k|    {
 3481|  4.33k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.33k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.33k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.33k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.66k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.66k|                parse_integer_digits_without_thsep(
 3500|  8.66k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.66k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.66k|        auto buf = make_contiguous_buffer(
 3504|  8.66k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.66k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.22k, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.22k|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    108|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    108|                                    prefix_result.parsed_base));
 3508|       |
 3509|    108|        return ranges::next(prefix_result.iterator,
 3510|    108|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.66k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5859|  4.43k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.43k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.43k|            auto rd = make_reader<T, char_type>();
 5865|  4.43k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.43k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.43k|    {
 5852|  4.43k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.36k|                        .transform_error(make_eof_scan_error));
 5854|  4.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.43k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.36k|    {
 3517|  4.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.36k|        return read_default_with_base(range, value, 10);
 3519|  4.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.36k|    {
 3481|  4.36k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.36k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.36k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.36k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.72k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.72k|                parse_integer_digits_without_thsep(
 3500|  8.72k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.72k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.72k|        auto buf = make_contiguous_buffer(
 3504|  8.72k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.72k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.21k, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.21k|    }                                                  \
  |  |  |  | 3667|  4.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    138|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    138|                                    prefix_result.parsed_base));
 3508|       |
 3509|    138|        return ranges::next(prefix_result.iterator,
 3510|    138|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.72k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 5859|  4.46k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.46k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.46k|            auto rd = make_reader<T, char_type>();
 5865|  4.46k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.46k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.46k|    {
 5852|  4.46k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.39k|                        .transform_error(make_eof_scan_error));
 5854|  4.39k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.46k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.39k|    {
 3517|  4.39k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.39k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.39k|        return read_default_with_base(range, value, 10);
 3519|  4.39k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.39k|    {
 3481|  4.39k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.39k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.39k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.39k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.78k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.78k|                parse_integer_digits_without_thsep(
 3500|  8.78k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.78k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.78k|        auto buf = make_contiguous_buffer(
 3504|  8.78k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.78k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.21k, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.21k|    }                                                  \
  |  |  |  | 3667|  4.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    171|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    171|                                    prefix_result.parsed_base));
 3508|       |
 3509|    171|        return ranges::next(prefix_result.iterator,
 3510|    171|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.78k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 5859|  4.38k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.38k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.38k|            auto rd = make_reader<T, char_type>();
 5865|  4.38k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.38k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.38k|    {
 5852|  4.38k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.32k|                        .transform_error(make_eof_scan_error));
 5854|  4.32k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.38k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.32k|    {
 3517|  4.32k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.32k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.32k|        return read_default_with_base(range, value, 10);
 3519|  4.32k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.32k|    {
 3481|  4.32k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.32k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.32k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.32k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.27k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.32k|        }
 3492|       |
 3493|  4.32k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.32k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.64k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.64k|                parse_integer_digits_without_thsep(
 3500|  8.64k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.64k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.64k|        auto buf = make_contiguous_buffer(
 3504|  8.64k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.64k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.18k, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.18k|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    141|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    141|                                    prefix_result.parsed_base));
 3508|       |
 3509|    141|        return ranges::next(prefix_result.iterator,
 3510|    141|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.64k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5859|  4.40k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.40k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.40k|            auto rd = make_reader<T, char_type>();
 5865|  4.40k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.40k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.40k|    {
 5852|  4.40k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.34k|                        .transform_error(make_eof_scan_error));
 5854|  4.34k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.40k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.34k|    {
 3517|  4.34k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.34k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.34k|        return read_default_with_base(range, value, 10);
 3519|  4.34k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.34k|    {
 3481|  4.34k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.34k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.34k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.34k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.29k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.34k|        }
 3492|       |
 3493|  4.34k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.34k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.68k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.68k|                parse_integer_digits_without_thsep(
 3500|  8.68k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.68k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.68k|        auto buf = make_contiguous_buffer(
 3504|  8.68k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.68k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.18k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.18k|    }                                                  \
  |  |  |  | 3667|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    159|                                    prefix_result.parsed_base));
 3508|       |
 3509|    159|        return ranges::next(prefix_result.iterator,
 3510|    159|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.68k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 5859|  4.42k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.42k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.42k|            auto rd = make_reader<T, char_type>();
 5865|  4.42k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.42k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.42k|    {
 5852|  4.42k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.36k|                        .transform_error(make_eof_scan_error));
 5854|  4.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.42k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.36k|    {
 3517|  4.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.36k|        return read_default_with_base(range, value, 10);
 3519|  4.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.36k|    {
 3481|  4.36k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.36k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.36k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.36k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 60, False: 4.30k]
  ------------------
 3486|     60|                return unexpected_scan_error(
 3487|     60|                    scan_error::invalid_scanned_value,
 3488|     60|                    "Unexpected '-' sign when parsing an "
 3489|     60|                    "unsigned value");
 3490|     60|            }
 3491|  4.36k|        }
 3492|       |
 3493|  4.36k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.36k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  8.73k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  8.73k|                parse_integer_digits_without_thsep(
 3500|  8.73k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  8.73k|                    prefix_result.parsed_base));
 3502|       |
 3503|  8.73k|        auto buf = make_contiguous_buffer(
 3504|  8.73k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  8.73k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.17k|    }                                                  \
  |  |  |  | 3667|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    189|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    189|                                    prefix_result.parsed_base));
 3508|       |
 3509|    189|        return ranges::next(prefix_result.iterator,
 3510|    189|                            ranges::distance(buf.view().begin(), result_it));
 3511|  8.73k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   157k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   157k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   157k|          m_current(m_range.begin())
 2867|   157k|    {
 2868|   157k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|   265k|    {
 2872|   265k|        return m_current;
 2873|   265k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|   108k|    {
 2877|   108k|        return m_range.end();
 2878|   108k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|  2.51k|    {
 2892|  2.51k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  2.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  2.51k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  2.51k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 2.51k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  2.51k|        }
 2898|  2.51k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.51k|    static_cast<    \
  |  |  929|  2.51k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  2.51k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   105k|    {
 2882|   105k|        return ranges::subrange{begin(), end()};
 2883|   105k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 6181|  17.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.5k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.5k|            auto rd = make_reader<T, char_type>();
 6187|  17.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.5k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.5k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.5k|    {
 6113|  17.5k|        const bool need_skipped_width =
 6114|  17.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.5k]
  |  Branch (6114:33): [True: 0, False: 17.5k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.5k|        auto it = rng.begin();
 6118|  17.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.5k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.5k|        else {
 6127|  17.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    256|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.3k|        }
 6130|  17.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.3k|        std::ptrdiff_t value_width = 0;
 6134|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.3k|        else {
 6150|  17.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 376]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    376|                                             specs, value, loc));
 6152|       |
 6153|    376|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 376]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    376|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    376|        std::ptrdiff_t postfix_width = 0;
 6162|    376|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 270, False: 106]
  ------------------
 6163|    270|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    270|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    270|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    270|                                 value_width));
 6167|    270|            std::tie(it, postfix_width) = postfix_result;
 6168|    270|        }
 6169|       |
 6170|    376|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    376|                                                 value_width, postfix_width);
 6172|    376|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 376]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    376|        return it;
 6177|    376|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   105k|    {
 6026|   105k|        const bool need_skipped_width =
 6027|   105k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 105k]
  |  Branch (6027:33): [True: 0, False: 105k]
  ------------------
 6028|   105k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   105k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 105k]
  ------------------
 6032|   105k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 105k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   105k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 105k, False: 0]
  |  Branch (6036:56): [True: 105k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   105k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 105k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   209k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.48k|    }                                                  \
  |  |  |  | 3667|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   209k|                            make_eof_scan_error));
 6047|       |
 6048|   209k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 104k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   104k|            return result_type{it, 0};
 6056|   209k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   105k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  1.92k|    {
 6068|  1.92k|        const bool need_skipped_width =
 6069|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.92k]
  |  Branch (6069:33): [True: 0, False: 1.92k]
  ------------------
 6070|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.92k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.92k]
  ------------------
 6073|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.92k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.92k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.92k, False: 0]
  ------------------
 6082|  1.92k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.92k]
  ------------------
 6083|  1.92k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.92k|        return result_type{rng.begin(), 0};
 6107|  1.92k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6181|  17.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.6k|            auto rd = make_reader<T, char_type>();
 6187|  17.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.6k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.6k|    {
 6113|  17.6k|        const bool need_skipped_width =
 6114|  17.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.6k]
  |  Branch (6114:33): [True: 0, False: 17.6k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.6k|        auto it = rng.begin();
 6118|  17.6k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.6k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.6k|        else {
 6127|  17.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.3k|        }
 6130|  17.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.3k|        std::ptrdiff_t value_width = 0;
 6134|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.3k|        else {
 6150|  17.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 462]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    462|                                             specs, value, loc));
 6152|       |
 6153|    462|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 462]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    462|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    462|        std::ptrdiff_t postfix_width = 0;
 6162|    462|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 344, False: 118]
  ------------------
 6163|    344|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    344|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    344|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    344|                                 value_width));
 6167|    344|            std::tie(it, postfix_width) = postfix_result;
 6168|    344|        }
 6169|       |
 6170|    462|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    462|                                                 value_width, postfix_width);
 6172|    462|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 462]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    462|        return it;
 6177|    462|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 6181|  17.7k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.7k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.7k|            auto rd = make_reader<T, char_type>();
 6187|  17.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.7k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.7k|    {
 6113|  17.7k|        const bool need_skipped_width =
 6114|  17.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.7k]
  |  Branch (6114:33): [True: 0, False: 17.7k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.7k|        auto it = rng.begin();
 6118|  17.7k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.7k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.7k|        else {
 6127|  17.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 268, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    268|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    268|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    268|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    268|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    268|    }                                                  \
  |  |  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.4k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.4k|        }
 6130|  17.4k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.4k|        std::ptrdiff_t value_width = 0;
 6134|  17.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.4k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.4k|        else {
 6150|  17.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 546]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    546|                                             specs, value, loc));
 6152|       |
 6153|    546|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 546]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    546|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    546|        std::ptrdiff_t postfix_width = 0;
 6162|    546|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 428, False: 118]
  ------------------
 6163|    428|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 428]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    428|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    428|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    428|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    428|                                 value_width));
 6167|    428|            std::tie(it, postfix_width) = postfix_result;
 6168|    428|        }
 6169|       |
 6170|    546|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    546|                                                 value_width, postfix_width);
 6172|    546|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 546]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    546|        return it;
 6177|    546|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 6181|  17.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.5k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.5k|            auto rd = make_reader<T, char_type>();
 6187|  17.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.5k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.5k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.5k|    {
 6113|  17.5k|        const bool need_skipped_width =
 6114|  17.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.5k]
  |  Branch (6114:33): [True: 0, False: 17.5k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.5k|        auto it = rng.begin();
 6118|  17.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.5k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.5k|        else {
 6127|  17.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.2k|        }
 6130|  17.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.2k|        std::ptrdiff_t value_width = 0;
 6134|  17.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.2k|        else {
 6150|  17.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 324]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    324|                                             specs, value, loc));
 6152|       |
 6153|    324|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 324]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    324|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    324|        std::ptrdiff_t postfix_width = 0;
 6162|    324|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 242, False: 82]
  ------------------
 6163|    242|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    242|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    242|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    242|                                 value_width));
 6167|    242|            std::tie(it, postfix_width) = postfix_result;
 6168|    242|        }
 6169|       |
 6170|    324|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    324|                                                 value_width, postfix_width);
 6172|    324|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 324]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    324|        return it;
 6177|    324|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6181|  17.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.5k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.5k|            auto rd = make_reader<T, char_type>();
 6187|  17.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.5k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.5k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.5k|    {
 6113|  17.5k|        const bool need_skipped_width =
 6114|  17.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.5k]
  |  Branch (6114:33): [True: 0, False: 17.5k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.5k|        auto it = rng.begin();
 6118|  17.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.5k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.5k|        else {
 6127|  17.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.3k|        }
 6130|  17.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.3k|        std::ptrdiff_t value_width = 0;
 6134|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.3k|        else {
 6150|  17.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 370]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    370|                                             specs, value, loc));
 6152|       |
 6153|    370|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 370]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    370|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    370|        std::ptrdiff_t postfix_width = 0;
 6162|    370|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 288, False: 82]
  ------------------
 6163|    288|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    288|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    288|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    288|                                 value_width));
 6167|    288|            std::tie(it, postfix_width) = postfix_result;
 6168|    288|        }
 6169|       |
 6170|    370|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    370|                                                 value_width, postfix_width);
 6172|    370|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 370]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    370|        return it;
 6177|    370|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 6181|  17.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  17.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  17.6k|            auto rd = make_reader<T, char_type>();
 6187|  17.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  17.6k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  17.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  17.6k|    {
 6113|  17.6k|        const bool need_skipped_width =
 6114|  17.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 17.6k]
  |  Branch (6114:33): [True: 0, False: 17.6k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  17.6k|        auto it = rng.begin();
 6118|  17.6k|        std::ptrdiff_t prefix_width = 0;
 6119|  17.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 17.6k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  17.6k|        else {
 6127|  17.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 232, False: 17.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    232|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    232|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    232|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    232|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    232|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  17.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  17.3k|        }
 6130|  17.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  17.3k|        std::ptrdiff_t value_width = 0;
 6134|  17.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 17.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  17.3k|        else {
 6150|  17.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 436]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    436|                                             specs, value, loc));
 6152|       |
 6153|    436|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 436]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    436|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    436|        std::ptrdiff_t postfix_width = 0;
 6162|    436|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 354, False: 82]
  ------------------
 6163|    354|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    354|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    354|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    354|                                 value_width));
 6167|    354|            std::tie(it, postfix_width) = postfix_result;
 6168|    354|        }
 6169|       |
 6170|    436|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    436|                                                 value_width, postfix_width);
 6172|    436|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 436]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    436|        return it;
 6177|    436|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.40k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.40k|            auto rd = make_reader<T, char_type>();
 5869|  4.40k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.40k, False: 0]
  ------------------
 5870|  4.40k|                return impl(rd, range, value);
 5871|  4.40k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.40k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.40k|    {
 5852|  4.40k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     66|    }                                                  \
  |  |  |  | 3667|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.33k|                        .transform_error(make_eof_scan_error));
 5854|  4.33k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.40k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  26.5k|{
 5784|  26.5k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 159, False: 26.3k]
  |  |  ------------------
  ------------------
 5785|    159|        return unexpected(e);
 5786|    159|    }
 5787|       |
 5788|  26.3k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 26.3k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  26.3k|    return skip_classic_whitespace(range);
 5793|  26.3k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.33k|    {
 3517|  4.33k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.33k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.33k|        return read_default_with_base(range, value, 10);
 3519|  4.33k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.33k|    {
 3481|  4.33k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.33k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.33k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.33k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.48k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.18k, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.18k|    }                                                  \
  |  |  |  | 3667|  4.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.48k|                parse_integer_digits_without_thsep(
 3500|  4.48k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.48k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.48k|        auto buf = make_contiguous_buffer(
 3504|  4.48k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.48k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    150|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    150|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    150|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     42|    }                                                  \
  |  |  |  | 3667|    150|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    108|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    108|                                    prefix_result.parsed_base));
 3508|       |
 3509|    108|        return ranges::next(prefix_result.iterator,
 3510|    108|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.48k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.43k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.43k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.43k|            auto rd = make_reader<T, char_type>();
 5869|  4.43k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.43k, False: 0]
  ------------------
 5870|  4.43k|                return impl(rd, range, value);
 5871|  4.43k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.43k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.43k|    {
 5852|  4.43k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.43k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.43k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.43k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.43k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.36k|                        .transform_error(make_eof_scan_error));
 5854|  4.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.43k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.36k|    {
 3517|  4.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.36k|        return read_default_with_base(range, value, 10);
 3519|  4.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.36k|    {
 3481|  4.36k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.36k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.36k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.36k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.52k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.20k, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.20k|    }                                                  \
  |  |  |  | 3667|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.52k|                parse_integer_digits_without_thsep(
 3500|  4.52k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.52k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.52k|        auto buf = make_contiguous_buffer(
 3504|  4.52k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.52k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    156|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    156|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    156|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 138]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|    156|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    138|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    138|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    138|                                    prefix_result.parsed_base));
 3508|       |
 3509|    138|        return ranges::next(prefix_result.iterator,
 3510|    138|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.52k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.46k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.46k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.46k|            auto rd = make_reader<T, char_type>();
 5869|  4.46k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.46k, False: 0]
  ------------------
 5870|  4.46k|                return impl(rd, range, value);
 5871|  4.46k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.46k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.46k|    {
 5852|  4.46k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 4.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  4.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.39k|                        .transform_error(make_eof_scan_error));
 5854|  4.39k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.46k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.39k|    {
 3517|  4.39k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.39k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.39k|        return read_default_with_base(range, value, 10);
 3519|  4.39k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.39k|    {
 3481|  4.39k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.39k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.39k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.39k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.56k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.22k, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.22k|    }                                                  \
  |  |  |  | 3667|  4.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.56k|                parse_integer_digits_without_thsep(
 3500|  4.56k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.56k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.56k|        auto buf = make_contiguous_buffer(
 3504|  4.56k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.56k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    171|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    171|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    171|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    171|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 171]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    171|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    171|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    171|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    171|                                    prefix_result.parsed_base));
 3508|       |
 3509|    171|        return ranges::next(prefix_result.iterator,
 3510|    171|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.56k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.38k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.38k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.38k|            auto rd = make_reader<T, char_type>();
 5869|  4.38k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.38k, False: 0]
  ------------------
 5870|  4.38k|                return impl(rd, range, value);
 5871|  4.38k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.38k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.38k|    {
 5852|  4.38k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.38k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.38k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.38k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.38k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.32k|                        .transform_error(make_eof_scan_error));
 5854|  4.32k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.38k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.32k|    {
 3517|  4.32k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.32k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.32k|        return read_default_with_base(range, value, 10);
 3519|  4.32k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.32k|    {
 3481|  4.32k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.32k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.32k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.32k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.27k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.32k|        }
 3492|       |
 3493|  4.32k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.32k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.50k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.15k, False: 174]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.15k|    }                                                  \
  |  |  |  | 3667|  4.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    174|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.50k|                parse_integer_digits_without_thsep(
 3500|  4.50k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.50k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.50k|        auto buf = make_contiguous_buffer(
 3504|  4.50k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.50k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    174|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    174|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    174|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    174|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 33, False: 141]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     33|    }                                                  \
  |  |  |  | 3667|    174|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    141|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    141|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    141|                                    prefix_result.parsed_base));
 3508|       |
 3509|    141|        return ranges::next(prefix_result.iterator,
 3510|    141|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.50k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.40k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.40k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.40k|            auto rd = make_reader<T, char_type>();
 5869|  4.40k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.40k, False: 0]
  ------------------
 5870|  4.40k|                return impl(rd, range, value);
 5871|  4.40k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.40k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.40k|    {
 5852|  4.40k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.34k|                        .transform_error(make_eof_scan_error));
 5854|  4.34k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.40k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.34k|    {
 3517|  4.34k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.34k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.34k|        return read_default_with_base(range, value, 10);
 3519|  4.34k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.34k|    {
 3481|  4.34k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.34k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.34k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.34k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 54, False: 4.29k]
  ------------------
 3486|     54|                return unexpected_scan_error(
 3487|     54|                    scan_error::invalid_scanned_value,
 3488|     54|                    "Unexpected '-' sign when parsing an "
 3489|     54|                    "unsigned value");
 3490|     54|            }
 3491|  4.34k|        }
 3492|       |
 3493|  4.34k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.34k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.52k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 177]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.16k|    }                                                  \
  |  |  |  | 3667|  4.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    177|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.52k|                parse_integer_digits_without_thsep(
 3500|  4.52k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.52k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.52k|        auto buf = make_contiguous_buffer(
 3504|  4.52k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.52k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    177|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    177|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    177|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    177|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|    177|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    159|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    159|                                    prefix_result.parsed_base));
 3508|       |
 3509|    159|        return ranges::next(prefix_result.iterator,
 3510|    159|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.52k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.42k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.42k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.42k|            auto rd = make_reader<T, char_type>();
 5869|  4.42k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.42k, False: 0]
  ------------------
 5870|  4.42k|                return impl(rd, range, value);
 5871|  4.42k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.42k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.42k|    {
 5852|  4.42k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57, False: 4.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     57|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     57|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     57|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     57|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     57|    }                                                  \
  |  |  |  | 3667|  4.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.36k|                        .transform_error(make_eof_scan_error));
 5854|  4.36k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.42k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.36k|    {
 3517|  4.36k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.36k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.36k|        return read_default_with_base(range, value, 10);
 3519|  4.36k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.36k|    {
 3481|  4.36k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.36k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.36k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.36k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 60, False: 4.30k]
  ------------------
 3486|     60|                return unexpected_scan_error(
 3487|     60|                    scan_error::invalid_scanned_value,
 3488|     60|                    "Unexpected '-' sign when parsing an "
 3489|     60|                    "unsigned value");
 3490|     60|            }
 3491|  4.36k|        }
 3492|       |
 3493|  4.36k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.36k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.55k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.17k|    }                                                  \
  |  |  |  | 3667|  4.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.55k|                parse_integer_digits_without_thsep(
 3500|  4.55k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.55k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.55k|        auto buf = make_contiguous_buffer(
 3504|  4.55k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.55k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    189|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    189|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    189|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    189|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 189]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    189|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    189|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    189|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    189|                                    prefix_result.parsed_base));
 3508|       |
 3509|    189|        return ranges::next(prefix_result.iterator,
 3510|    189|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.55k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  15.8k|    {
 3481|  15.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  15.8k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  15.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 15.8k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  31.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     45|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  31.5k|                parse_integer_digits_without_thsep(
 3500|  31.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  31.5k|                    prefix_result.parsed_base));
 3502|       |
 3503|  31.5k|        auto buf = make_contiguous_buffer(
 3504|  31.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  31.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.70k, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.70k|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  14.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  14.0k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  14.0k|        return ranges::next(prefix_result.iterator,
 3510|  14.0k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  31.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  18.1k|    {
 3481|  18.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  18.1k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  18.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 18.1k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  36.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  18.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 18.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  18.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  36.2k|                parse_integer_digits_without_thsep(
 3500|  36.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  36.2k|                    prefix_result.parsed_base));
 3502|       |
 3503|  36.2k|        auto buf = make_contiguous_buffer(
 3504|  36.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  36.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  18.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.55k, False: 16.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.55k|    }                                                  \
  |  |  |  | 3667|  18.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  16.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  16.5k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  16.5k|        return ranges::next(prefix_result.iterator,
 3510|  16.5k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  36.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  18.4k|    {
 3481|  18.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  18.4k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  18.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 18.4k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  36.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  18.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 81, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     81|    }                                                  \
  |  |  |  | 3667|  18.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  36.8k|                parse_integer_digits_without_thsep(
 3500|  36.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  36.8k|                    prefix_result.parsed_base));
 3502|       |
 3503|  36.8k|        auto buf = make_contiguous_buffer(
 3504|  36.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  36.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.49k, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.49k|    }                                                  \
  |  |  |  | 3667|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  16.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  16.8k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  16.8k|        return ranges::next(prefix_result.iterator,
 3510|  16.8k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  36.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  13.2k|    {
 3481|  13.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  13.2k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  13.2k|        if constexpr (!std::is_signed_v<T>) {
 3485|  13.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 789, False: 12.4k]
  ------------------
 3486|    789|                return unexpected_scan_error(
 3487|    789|                    scan_error::invalid_scanned_value,
 3488|    789|                    "Unexpected '-' sign when parsing an "
 3489|    789|                    "unsigned value");
 3490|    789|            }
 3491|  13.2k|        }
 3492|       |
 3493|  13.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 13.2k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  26.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  26.5k|                parse_integer_digits_without_thsep(
 3500|  26.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  26.5k|                    prefix_result.parsed_base));
 3502|       |
 3503|  26.5k|        auto buf = make_contiguous_buffer(
 3504|  26.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  26.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.06k, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.06k|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  12.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  12.1k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  12.1k|        return ranges::next(prefix_result.iterator,
 3510|  12.1k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  26.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  14.5k|    {
 3481|  14.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.5k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.5k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 816, False: 13.7k]
  ------------------
 3486|    816|                return unexpected_scan_error(
 3487|    816|                    scan_error::invalid_scanned_value,
 3488|    816|                    "Unexpected '-' sign when parsing an "
 3489|    816|                    "unsigned value");
 3490|    816|            }
 3491|  14.5k|        }
 3492|       |
 3493|  14.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.5k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  29.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  29.0k|                parse_integer_digits_without_thsep(
 3500|  29.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  29.0k|                    prefix_result.parsed_base));
 3502|       |
 3503|  29.0k|        auto buf = make_contiguous_buffer(
 3504|  29.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  29.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 972, False: 13.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    972|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    972|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    972|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    972|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    972|    }                                                  \
  |  |  |  | 3667|  14.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.5k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.5k|        return ranges::next(prefix_result.iterator,
 3510|  13.5k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  29.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  14.6k|    {
 3481|  14.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.6k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.6k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 849, False: 13.8k]
  ------------------
 3486|    849|                return unexpected_scan_error(
 3487|    849|                    scan_error::invalid_scanned_value,
 3488|    849|                    "Unexpected '-' sign when parsing an "
 3489|    849|                    "unsigned value");
 3490|    849|            }
 3491|  14.6k|        }
 3492|       |
 3493|  14.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.6k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  29.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  29.3k|                parse_integer_digits_without_thsep(
 3500|  29.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  29.3k|                    prefix_result.parsed_base));
 3502|       |
 3503|  29.3k|        auto buf = make_contiguous_buffer(
 3504|  29.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  29.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 912, False: 13.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    912|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    912|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    912|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    912|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    912|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  13.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  13.7k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  13.7k|        return ranges::next(prefix_result.iterator,
 3510|  13.7k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  29.3k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    716|{
   52|    716|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|    716|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    716|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    716|    string_buffer.resize(size);
   56|    716|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    716|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    716|    const auto wsv_reinterpret_size =
   61|    716|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 110, False: 606]
  ------------------
   62|    716|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    716|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    716|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    716|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    716|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    716|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    716|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    716|{
  122|    716|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    716|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    716|    buf.resize(sizeof...(Args));
  125|    716|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    716|    return buf;
  127|    716|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    716|{
  108|    716|    if constexpr (std::is_same_v<CharT, char>) {
  109|    716|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|    716|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|    716|{
  185|    716|    do_basic_run_for_source<CharT>(data, format_strings);
  186|    716|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|    716|                                   format_strings);
  188|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  34.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  34.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  34.6k|            auto result = scn::scan<T>(
  139|  34.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  34.6k|                scn::runtime_format(f));
  141|  34.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 27.5k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  27.5k|            it = result->begin();
  145|  27.5k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  34.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  34.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  34.6k|            auto result = scn::scan<T>(
  154|  34.6k|                global_locale,
  155|  34.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  34.6k|                scn::runtime_format(f));
  157|  34.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 27.5k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  27.5k|            it = result->begin();
  161|  27.5k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  5.40k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.40k|            auto result = scn::scan_value<T>(
  170|  5.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.40k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 4.68k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  4.68k|            it = result->begin();
  175|  4.68k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  30.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  30.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  30.6k|            auto result = scn::scan<T>(
  139|  30.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  30.6k|                scn::runtime_format(f));
  141|  30.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 23.4k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  23.4k|            it = result->begin();
  145|  23.4k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  30.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  30.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  30.6k|            auto result = scn::scan<T>(
  154|  30.6k|                global_locale,
  155|  30.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  30.6k|                scn::runtime_format(f));
  157|  30.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 23.4k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  23.4k|            it = result->begin();
  161|  23.4k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  4.51k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.51k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.51k|            auto result = scn::scan_value<T>(
  170|  4.51k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.51k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 3.79k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  3.79k|            it = result->begin();
  175|  3.79k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  40.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.4k|            auto result = scn::scan<T>(
  139|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.4k|                scn::runtime_format(f));
  141|  40.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 33.3k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  33.3k|            it = result->begin();
  145|  33.3k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  40.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.4k|            auto result = scn::scan<T>(
  154|  40.4k|                global_locale,
  155|  40.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.4k|                scn::runtime_format(f));
  157|  40.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 33.3k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  33.3k|            it = result->begin();
  161|  33.3k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  6.23k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.23k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.23k|            auto result = scn::scan_value<T>(
  170|  6.23k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.23k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 5.51k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  5.51k|            it = result->begin();
  175|  5.51k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  33.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.1k|            auto result = scn::scan<T>(
  139|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.1k|                scn::runtime_format(f));
  141|  33.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 25.9k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  25.9k|            it = result->begin();
  145|  25.9k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  33.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.1k|            auto result = scn::scan<T>(
  154|  33.1k|                global_locale,
  155|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.1k|                scn::runtime_format(f));
  157|  33.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 25.9k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  25.9k|            it = result->begin();
  161|  25.9k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  4.95k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.95k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.95k|            auto result = scn::scan_value<T>(
  170|  4.95k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.95k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 4.24k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  4.24k|            it = result->begin();
  175|  4.24k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  41.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.1k|            auto result = scn::scan<T>(
  139|  41.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.1k|                scn::runtime_format(f));
  141|  41.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 34.0k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  34.0k|            it = result->begin();
  145|  34.0k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  41.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.1k|            auto result = scn::scan<T>(
  154|  41.1k|                global_locale,
  155|  41.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.1k|                scn::runtime_format(f));
  157|  41.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 34.0k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  34.0k|            it = result->begin();
  161|  34.0k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  6.34k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.34k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.34k|            auto result = scn::scan_value<T>(
  170|  6.34k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.34k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 5.63k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  5.63k|            it = result->begin();
  175|  5.63k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  33.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.4k|            auto result = scn::scan<T>(
  139|  33.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.4k|                scn::runtime_format(f));
  141|  33.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 26.3k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  26.3k|            it = result->begin();
  145|  26.3k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  33.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.4k|            auto result = scn::scan<T>(
  154|  33.4k|                global_locale,
  155|  33.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.4k|                scn::runtime_format(f));
  157|  33.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 26.3k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  26.3k|            it = result->begin();
  161|  26.3k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  5.02k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.02k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.02k|            auto result = scn::scan_value<T>(
  170|  5.02k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.02k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 4.30k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  4.30k|            it = result->begin();
  175|  4.30k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  34.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  34.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  34.7k|            auto result = scn::scan<T>(
  139|  34.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  34.7k|                scn::runtime_format(f));
  141|  34.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 27.5k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  27.5k|            it = result->begin();
  145|  27.5k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  34.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  34.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  34.7k|            auto result = scn::scan<T>(
  154|  34.7k|                global_locale,
  155|  34.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  34.7k|                scn::runtime_format(f));
  157|  34.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 27.5k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  27.5k|            it = result->begin();
  161|  27.5k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  5.39k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.39k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.39k|            auto result = scn::scan_value<T>(
  170|  5.39k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.39k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 4.68k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  4.68k|            it = result->begin();
  175|  4.68k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  30.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  30.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  30.6k|            auto result = scn::scan<T>(
  139|  30.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  30.6k|                scn::runtime_format(f));
  141|  30.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 23.4k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  23.4k|            it = result->begin();
  145|  23.4k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  30.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  30.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  30.6k|            auto result = scn::scan<T>(
  154|  30.6k|                global_locale,
  155|  30.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  30.6k|                scn::runtime_format(f));
  157|  30.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 23.4k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  23.4k|            it = result->begin();
  161|  23.4k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  4.50k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.50k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.50k|            auto result = scn::scan_value<T>(
  170|  4.50k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.50k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 3.78k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  3.78k|            it = result->begin();
  175|  3.78k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  40.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.3k|            auto result = scn::scan<T>(
  139|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.3k|                scn::runtime_format(f));
  141|  40.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 33.1k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  33.1k|            it = result->begin();
  145|  33.1k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  40.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.3k|            auto result = scn::scan<T>(
  154|  40.3k|                global_locale,
  155|  40.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.3k|                scn::runtime_format(f));
  157|  40.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 33.1k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  33.1k|            it = result->begin();
  161|  33.1k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  6.03k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.03k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.03k|            auto result = scn::scan_value<T>(
  170|  6.03k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.03k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 5.31k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  5.31k|            it = result->begin();
  175|  5.31k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  33.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.1k|            auto result = scn::scan<T>(
  139|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.1k|                scn::runtime_format(f));
  141|  33.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 25.9k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  25.9k|            it = result->begin();
  145|  25.9k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  33.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.1k|            auto result = scn::scan<T>(
  154|  33.1k|                global_locale,
  155|  33.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.1k|                scn::runtime_format(f));
  157|  33.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 25.9k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  25.9k|            it = result->begin();
  161|  25.9k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  4.93k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.93k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.93k|            auto result = scn::scan_value<T>(
  170|  4.93k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.93k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 4.21k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  4.21k|            it = result->begin();
  175|  4.21k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  41.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  41.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  41.0k|            auto result = scn::scan<T>(
  139|  41.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  41.0k|                scn::runtime_format(f));
  141|  41.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 33.8k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  33.8k|            it = result->begin();
  145|  33.8k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  41.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  41.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  41.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  41.0k|            auto result = scn::scan<T>(
  154|  41.0k|                global_locale,
  155|  41.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  41.0k|                scn::runtime_format(f));
  157|  41.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 33.8k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  33.8k|            it = result->begin();
  161|  33.8k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  6.14k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.14k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.14k|            auto result = scn::scan_value<T>(
  170|  6.14k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.14k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 5.42k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  5.42k|            it = result->begin();
  175|  5.42k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    716|{
  133|       |    // Regular scan
  134|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.16k, False: 716]
  ------------------
  135|  7.16k|        auto it = scn::ranges::begin(source);
  136|  33.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.4k|            auto result = scn::scan<T>(
  139|  33.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.4k|                scn::runtime_format(f));
  141|  33.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.16k, False: 26.3k]
  ------------------
  142|  7.16k|                break;
  143|  7.16k|            }
  144|  26.3k|            it = result->begin();
  145|  26.3k|        }
  146|  7.16k|    }
  147|       |
  148|       |    // scan localized
  149|  7.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.16k, False: 716]
  ------------------
  150|  7.16k|        auto it = scn::ranges::begin(source);
  151|  33.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.4k|            auto result = scn::scan<T>(
  154|  33.4k|                global_locale,
  155|  33.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.4k|                scn::runtime_format(f));
  157|  33.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.16k, False: 26.3k]
  ------------------
  158|  7.16k|                break;
  159|  7.16k|            }
  160|  26.3k|            it = result->begin();
  161|  26.3k|        }
  162|  7.16k|    }
  163|       |
  164|       |    // scan_value
  165|    716|    {
  166|    716|        auto it = scn::ranges::begin(source);
  167|  4.99k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.99k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.99k|            auto result = scn::scan_value<T>(
  170|  4.99k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.99k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 716, False: 4.28k]
  ------------------
  172|    716|                break;
  173|    716|            }
  174|  4.28k|            it = result->begin();
  175|  4.28k|        }
  176|    716|    }
  177|    716|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    716|{
   90|    716|    using char_type = ranges::range_value_t<Source>;
   91|    716|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    716|    deque.clear();
   93|    716|    std::copy(ranges::begin(source), ranges::end(source),
   94|    716|              std::back_inserter(deque));
   95|    716|    return deque;
   96|    716|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    716|{
   79|    716|    if constexpr (std::is_same_v<CharT, char>) {
   80|    716|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|    716|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    716|{
  122|    716|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    716|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    716|    buf.resize(sizeof...(Args));
  125|    716|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    716|    return buf;
  127|    716|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    716|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|    716|    else {
  112|    716|        return wformat_string_view_buffer;
  113|    716|    }
  114|    716|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.43k|{
  185|  1.43k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.43k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.43k|                                   format_strings);
  188|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.5k|            auto result = scn::scan<T>(
  139|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.5k|                scn::runtime_format(f));
  141|  14.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 224]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    224|            it = result->begin();
  145|    224|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.5k|            auto result = scn::scan<T>(
  154|  14.5k|                global_locale,
  155|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.5k|                scn::runtime_format(f));
  157|  14.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 224]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    224|            it = result->begin();
  161|    224|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.46k|            auto result = scn::scan_value<T>(
  170|  1.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 36]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     36|            it = result->begin();
  175|     36|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.5k|            auto result = scn::scan<T>(
  139|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.5k|                scn::runtime_format(f));
  141|  14.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 191]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    191|            it = result->begin();
  145|    191|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.5k|            auto result = scn::scan<T>(
  154|  14.5k|                global_locale,
  155|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.5k|                scn::runtime_format(f));
  157|  14.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 191]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    191|            it = result->begin();
  161|    191|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.46k|            auto result = scn::scan_value<T>(
  170|  1.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 29]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     29|            it = result->begin();
  175|     29|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.5k|            auto result = scn::scan<T>(
  139|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.5k|                scn::runtime_format(f));
  141|  14.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 277]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    277|            it = result->begin();
  145|    277|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.5k|            auto result = scn::scan<T>(
  154|  14.5k|                global_locale,
  155|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.5k|                scn::runtime_format(f));
  157|  14.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 277]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    277|            it = result->begin();
  161|    277|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.47k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.47k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.47k|            auto result = scn::scan_value<T>(
  170|  1.47k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.47k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 46]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     46|            it = result->begin();
  175|     46|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.5k|            auto result = scn::scan<T>(
  139|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.5k|                scn::runtime_format(f));
  141|  14.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 220]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    220|            it = result->begin();
  145|    220|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.5k|            auto result = scn::scan<T>(
  154|  14.5k|                global_locale,
  155|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.5k|                scn::runtime_format(f));
  157|  14.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 220]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    220|            it = result->begin();
  161|    220|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.46k|            auto result = scn::scan_value<T>(
  170|  1.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 35]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     35|            it = result->begin();
  175|     35|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.6k|            auto result = scn::scan<T>(
  139|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.6k|                scn::runtime_format(f));
  141|  14.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 330]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    330|            it = result->begin();
  145|    330|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.6k|            auto result = scn::scan<T>(
  154|  14.6k|                global_locale,
  155|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.6k|                scn::runtime_format(f));
  157|  14.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 330]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    330|            it = result->begin();
  161|    330|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.48k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.48k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.48k|            auto result = scn::scan_value<T>(
  170|  1.48k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.48k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 57]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.5k|            auto result = scn::scan<T>(
  139|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.5k|                scn::runtime_format(f));
  141|  14.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 261]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    261|            it = result->begin();
  145|    261|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.5k|            auto result = scn::scan<T>(
  154|  14.5k|                global_locale,
  155|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.5k|                scn::runtime_format(f));
  157|  14.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 261]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    261|            it = result->begin();
  161|    261|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.47k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.47k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.47k|            auto result = scn::scan_value<T>(
  170|  1.47k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.47k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 43]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     43|            it = result->begin();
  175|     43|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.5k|            auto result = scn::scan<T>(
  139|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.5k|                scn::runtime_format(f));
  141|  14.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 224]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    224|            it = result->begin();
  145|    224|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.5k|            auto result = scn::scan<T>(
  154|  14.5k|                global_locale,
  155|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.5k|                scn::runtime_format(f));
  157|  14.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 224]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    224|            it = result->begin();
  161|    224|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.46k|            auto result = scn::scan_value<T>(
  170|  1.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 36]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     36|            it = result->begin();
  175|     36|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.5k|            auto result = scn::scan<T>(
  139|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.5k|                scn::runtime_format(f));
  141|  14.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 191]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    191|            it = result->begin();
  145|    191|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.5k|            auto result = scn::scan<T>(
  154|  14.5k|                global_locale,
  155|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.5k|                scn::runtime_format(f));
  157|  14.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 191]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    191|            it = result->begin();
  161|    191|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.46k|            auto result = scn::scan_value<T>(
  170|  1.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 29]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     29|            it = result->begin();
  175|     29|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.5k|            auto result = scn::scan<T>(
  139|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.5k|                scn::runtime_format(f));
  141|  14.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 277]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    277|            it = result->begin();
  145|    277|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.5k|            auto result = scn::scan<T>(
  154|  14.5k|                global_locale,
  155|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.5k|                scn::runtime_format(f));
  157|  14.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 277]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    277|            it = result->begin();
  161|    277|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.47k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.47k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.47k|            auto result = scn::scan_value<T>(
  170|  1.47k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.47k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 46]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     46|            it = result->begin();
  175|     46|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.5k|            auto result = scn::scan<T>(
  139|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.5k|                scn::runtime_format(f));
  141|  14.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 220]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    220|            it = result->begin();
  145|    220|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.5k|            auto result = scn::scan<T>(
  154|  14.5k|                global_locale,
  155|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.5k|                scn::runtime_format(f));
  157|  14.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 220]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    220|            it = result->begin();
  161|    220|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.46k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.46k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.46k|            auto result = scn::scan_value<T>(
  170|  1.46k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.46k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 35]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     35|            it = result->begin();
  175|     35|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.6k|            auto result = scn::scan<T>(
  139|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.6k|                scn::runtime_format(f));
  141|  14.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 330]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    330|            it = result->begin();
  145|    330|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.6k|            auto result = scn::scan<T>(
  154|  14.6k|                global_locale,
  155|  14.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.6k|                scn::runtime_format(f));
  157|  14.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 330]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    330|            it = result->begin();
  161|    330|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.48k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.48k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.48k|            auto result = scn::scan_value<T>(
  170|  1.48k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.48k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 57]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     57|            it = result->begin();
  175|     57|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.43k|{
  133|       |    // Regular scan
  134|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.3k, False: 1.43k]
  ------------------
  135|  14.3k|        auto it = scn::ranges::begin(source);
  136|  14.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  14.5k|            auto result = scn::scan<T>(
  139|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  14.5k|                scn::runtime_format(f));
  141|  14.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.3k, False: 261]
  ------------------
  142|  14.3k|                break;
  143|  14.3k|            }
  144|    261|            it = result->begin();
  145|    261|        }
  146|  14.3k|    }
  147|       |
  148|       |    // scan localized
  149|  14.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.3k, False: 1.43k]
  ------------------
  150|  14.3k|        auto it = scn::ranges::begin(source);
  151|  14.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  14.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  14.5k|            auto result = scn::scan<T>(
  154|  14.5k|                global_locale,
  155|  14.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  14.5k|                scn::runtime_format(f));
  157|  14.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.3k, False: 261]
  ------------------
  158|  14.3k|                break;
  159|  14.3k|            }
  160|    261|            it = result->begin();
  161|    261|        }
  162|  14.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.43k|    {
  166|  1.43k|        auto it = scn::ranges::begin(source);
  167|  1.47k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.47k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.47k|            auto result = scn::scan_value<T>(
  170|  1.47k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.47k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.43k, False: 43]
  ------------------
  172|  1.43k|                break;
  173|  1.43k|            }
  174|     43|            it = result->begin();
  175|     43|        }
  176|  1.43k|    }
  177|  1.43k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.43k|{
   90|  1.43k|    using char_type = ranges::range_value_t<Source>;
   91|  1.43k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.43k|    deque.clear();
   93|  1.43k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.43k|              std::back_inserter(deque));
   95|  1.43k|    return deque;
   96|  1.43k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.43k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  1.43k|    else {
   83|  1.43k|        return wnoncontiguous_buffer;
   84|  1.43k|    }
   85|  1.43k|}

LLVMFuzzerTestOneInput:
   59|    716|{
   60|    716|    scn::fuzz::run(data, size);
   61|    716|    return 0;
   62|    716|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    716|{
   36|    716|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 716]
  |  Branch (36:35): [True: 0, False: 716]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|    716|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    716|    const auto& f =
   43|    716|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|    716|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|    716|    do_basic_run(sv, f);
   46|       |
   47|    716|    const auto& wf = get_format_strings<wchar_t>(
   48|    716|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|    716|        L"{:'}", L"{:'L}");
   50|    716|    do_basic_run(wsv_reinterpret, wf);
   51|    716|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 716, False: 0]
  ------------------
   52|    716|        do_basic_run(wsv_transcode, wf);
   53|    716|    }
   54|    716|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    716|{
   25|    716|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    716|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    716|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    716|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    716|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    716|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    716|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    716|{
   25|    716|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    716|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    716|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    716|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    716|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    716|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    716|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.43k|{
   25|  1.43k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.43k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.43k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.43k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.43k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.43k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.43k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.43k|{
   25|  1.43k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.43k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.43k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.43k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.43k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.43k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.43k|}

